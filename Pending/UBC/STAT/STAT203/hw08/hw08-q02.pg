## DBsubject('Probability')
## DBchapter('Sample Space')
## DBsection('Probability: direct computation, inclusion/exclusion')
## level(3)
## Date('')
## Author('Andy Leung')
## Institution('The University of British Columbia')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')




DOCUMENT();      

loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "PGcourse.pl",
  "parserRadioButtons.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "unionTables.pl",
  "RserveClient.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());


##############################################################
#  Question and R Setup
##############################################################
Context->("Numeric");

# Do this in R
rserve_start();
@ntspam = rserve_eval('ntspam <- sample(4:8*100, 1); ntspam');
$ntspam = $ntspam[0];
@ntnonspam = rserve_eval('ntnonspam <- 1000 - ntspam; ntnonspam');
$ntnonspam = $ntnonspam[0];

@x1 = rserve_eval('x1 <- round(runif(1, 0.85, 1)*ntspam); x1');
$x1 = $x1[0];
@x2 = rserve_eval('x2 <- ntspam - x1; x2');
$x2 = $x2[0];
@x3 = rserve_eval('x3 <- round(runif(1, 0, 0.3)*ntnonspam); x3');
$x3 = $x3[0];
@x4 = rserve_eval('x4 <- ntnonspam - x3; x4');
$x4 = $x4[0];

@ncspam = rserve_eval('x1 + x3');
$ncspam = $ncspam[0];
@ncnonspam = rserve_eval('x2 + x4');
$ncnonspam = $ncnonspam[0];

@ans_a = rserve_eval('round( ntspam / 1000, 3)');
$ans_a = $ans_a[0];	
@ans_b = rserve_eval('round( (x2 + x3) / 1000, 3)');
$ans_b = $ans_b[0];	
@ans_c = rserve_eval('round( x3/ntnonspam, 3)');
$ans_c = $ans_c[0];	

rserve_finish();


##############################################################
#  Question in Text
##############################################################
Context()->texStrings;
BEGIN_TEXT

Do you ever wonder how email spam filters work? In simple terms,
algorithms are developed to screen incoming emails. Each email message
is assigned a spam score (based on whether certain spammy words are
present and their positions / occurrences in relation to other words in the
message). You can think of the score as a measure of how likely a message
is a spam. A threshold is chosen such that messages whose spam score
exceeds the threshold will be classified as spams. Otherwise, the messages
are classified as non-spams (or "ham"). Effective spam filters have low
false positive (non-spam misclassified as spam) and low false negative
(spam misclassified as non-spam) rates. Spam filtering methods are based
on probability and statistical theories.

For any incoming email message, it can be a true spam or a non-spam, but
we cannot predict its kind with certainty until the message arrives. This is
an example of a random phenomenon.
$BR
$BR
Consider a spam filter used to screen 1000 incoming email messages:
$BCENTER
$BR
\(
\begin{array}{|c|c|c|c|}
\hline
 & \text{True Spam} & \text{True non-spam} & \text{Total} \\ \hline
\text{Classified as spam} & $x1 & $x3 & $ncspam \\     
\text{Classified as non-spam} & $x2 & $x4 & $ncnonspam \\ \hline
 & $ntspam & $ntnonspam & 1000 \\
\hline
\end{array}
\)
$BR
$ECENTER
An email message is randomly chosen from the 1000 messages. What is
the probability that
$BR
$BR
$BBOLD Part a $EBOLD
$BR
it is a spam? Please round your answer to three decimal place. 
$BR
\{ ans_rule(9) \} 
$BR
$BR

$BBOLD Part b $EBOLD
$BR
it is classified incorrectly? Please round your answer to three decimal place. 
$BR
\{ ans_rule(9) \} 
$BR
$BR

$BBOLD Part c $EBOLD
$BR
What is the false positive rate (i.e. the probability that a non-spam is
misclassified as spam)? Please round your answer to three decimal place. 
$BR
\{ ans_rule(9) \} 
$BR
$BR

END_TEXT


$showPartialCorrectAnswers = 1;
ANS( num_cmp($ans_a, tol=> 0.001) );
ANS( num_cmp($ans_b, tol=> 0.001) );
ANS( num_cmp($ans_c, tol=> 0.001) );



ENDDOCUMENT();        # This should be the last executable line in the problem.