# DESCRIPTION
# Gives the formula of a piecewise function and 4 graphs to choose from.
# This piecewise function consists of two nonzero sloped lines.
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Functions)
## DBsection(Piecewise functions)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## MLT(multichoicePLgraphs)
## MLTleader(1)
## Level(2)
## MO(1)
## KEYWORDS('functions', 'piecewise', 'graphs')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
$refreshCachedImages = 1;
$showPartialCorrectAnswer = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{});
$max = 12;
$min = -$max;
$gsize = 600;

for ($i = 0; $i < 4; $i++) {
  $graphs[$i] = init_graph($min, $min, $max, $max, size=>[$gsize,$gsize]);
  for ($j = 0; $j <= $max ; $j++) {
    $graphs[$i]->moveTo($j,$min);
    $graphs[$i]->lineTo($j, $max, 'gray', 1);
    $graphs[$i]->moveTo(-$j,$max);
    $graphs[$i]->lineTo(-$j, $min, 'gray', 1);
    $graphs[$i]->moveTo($min, $j);
    $graphs[$i]->lineTo($max, $j, 'gray', 1);
    $graphs[$i]->moveTo($min, -$j);
    $graphs[$i]->lineTo($max, -$j, 'gray', 1);
  }
  $graphs[$i]->moveTo($min, 0);
  $graphs[$i]->arrowTo($max, 0, 'black', 2);
  $graphs[$i]->arrowTo($min, 0, 'black', 2);
  $graphs[$i]->moveTo(0, $min);
  $graphs[$i]->arrowTo(0, $max, 'black', 2);
  $graphs[$i]->arrowTo(0, $min, 'black', 2);
  $graphs[$i]->lb(new Label($max-0.1, -0.2, 'x', 'black', 'top', 'right'));
  $graphs[$i]->lb(new Label(0.4, $max-0.1, 'y', 'black', 'top', 'left'));
  $graphs[$i]->lb(new Label(1,-0.1,'1', 'black', 'top','center'));
  $graphs[$i]->lb(new Label(5,-0.1,'5', 'black', 'top','center'));
  $graphs[$i]->lb(new Label(10,-0.1,'10', 'black', 'top','center'));
  $graphs[$i]->lb(new Label(-5,-0.1,'-5', 'black', 'top','center'));
  $graphs[$i]->lb(new Label(-10,-0.1,'-10', 'black', 'top','center'));
  $graphs[$i]->lb(new Label(-0.1,0.7,'1', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(-0.1,4.7,'5', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(-0.1,9.7,'10', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(-0.1,-5.3,'-5', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(-0.1,-10.3,'-10', 'black', 'bottom', 'right'));
}

do {
  # set up lines
  # good lines
  $den1 = random(1,5);
  do {$num1 = random(-1,1,2)*random(1,5)} until (gcd($num1,$den1) == 1);
  $m1[0] = $num1/$den1;
  do {$b1[0] = non_zero_random(-5,5)} until ($b1[0] != $m1[0] && $b1[0]);
  $den2 = random(1,5);
  if ($m1[0] < 0) {
    do {$num2 = random(1,5)} until (gcd($num2,$den2) == 1);
  } else {
    do {$num2 = -random(1,5)} until (gcd($num2,$den2) == 1);
  }
  $m2[0] = $num2/$den2;
  do {$b2[0] = non_zero_random(-5,5)} until ($b2[0] != $b1[0]);

  # for bad lines 2, has to be here to guarantee distanced y values
  $opp = random(0,2,1); # 0 - reciprocal, 1 - opposite, 2 - opposite reciprocal
  if (abs($m1[0]) == 1 && abs($m2[0]) == 1) {
    $opp = 2;
  }
  if ($opp == 1) {
    $m1[2] = -$m1[0];
    $m2[2] = -$m2[0];
  } elsif ($opp == 0) {
    $m1[2] = 1/$m1[0];
    $m2[2] = 1/$m2[0];
  } elsif ($opp == 2) {
    $m1[2] = -1/$m1[0];
    $m2[2] = -1/$m2[0]; 
  }
  $b1[2] = $b1[0];
  $b2[2] = $b2[0];

  $pad = max(abs($num1),$den1,abs($num2),$den2,abs($b1[0]),abs($b2[0]));

  $x1[0] = non_zero_random($min+$pad+1,$max-$pad-1);
  $x2[0] = $x1[0];
  $y1[0] = $m1[0]*$x1[0]+$b1[0];
  $y2[0] = $m2[0]*$x2[0]+$b2[0];
  $y1[3] = $b1[0]*$x1[0]+$m1[0]; # for bad answer 3
  $y2[3] = $b2[0]*$x2[0]+$m2[0];
  $y1[2] = $m1[2]*$x1[0] + $b1[2];
  $y2[2] = $m2[2]*$x2[0] + $b2[2];
} while (abs($y1[0] - $y2[0]) < 1 || abs($y1[2]-$y2[2])<1 || abs($y1[3]-$y2[3])<1 || $y1[0] < $min+$pad+1 || $y2[0] < $min+$pad+1 || $y1[0] > $max-$pad-1 || $y2[0] > $max - $pad-1 || $y1[2] < $min+$pad+1 || $y2[2] < $min+$pad+1 || $y1[2] > $max-$pad-1 || $y2[2] > $max - $pad-1 || $y1[3] < $min+$pad+1 || $y2[3] < $min+$pad+1 || $y1[3] > $max-$pad-1 || $y2[3] > $max - $pad-1);

for ($i = 1; $i < 4; $i++) {
  $x0[$i] = $x0[0];
  $x1[$i] = $x1[0];
  $x2[$i] = $x2[0];
  $x3[$i] = $x3[0]; 
}

# bad lines 1 - same slopes, but takes y values at point to be y-intercepts
$y1[1] = $b1[0];
$y2[1] = $b2[0];
$m1[1] = $m1[0];
$m2[1] = $m2[0];
$b1[1] = $y1[1] - $m1[1]*$x1[1];
$b2[1] = $y2[1] - $m2[1]*$x2[1];

# bad lines 2 - opposite and/or reciprocal slopes - implemented above

# bad lines 3 - reverse slope and intercept
$m1[3] = $b1[0];
$m2[3] = $b2[0];
$b1[3] = $m1[0];
$b2[3] = $m2[0];
$y1[3] = $m1[3]*$x1[3] + $b1[3];
$y2[3] = $m2[3]*$x2[3] + $b2[3];

# scale the end of the graphs so that the arrows show properly
for ($i = 0; $i < scalar(@x1); $i++) {
  $x0[$i] = $min;
  $y0[$i] = $m1[$i]*$x0[$i]+$b1[$i];
  if ($y0[$i] < $min) {
    $y0[$i] = $min;
    $x0[$i] = ($y0[$i] - $b1[$i])/$m1[$i];
  } elsif ($y0[$i] > $max) {
    $y0[$i] = $max;
    $x0[$i] = ($y0[$i] - $b1[$i])/$m1[$i];
  }

  $x3[$i] = $max;
  $y3[$i] = $m2[$i]*$x3[$i]+$b2[$i];
  if ($y3[$i] > $max) {
    $y3[$i] = $max;
    $x3[$i] = ($y3[$i] - $b2[$i])/$m2[$i];
  } elsif ($y3[$i] < $min) {
    $y3[$i] = $min;
    $x3[$i] = ($y3[$i] - $b2[$i])/$m2[$i];
  }
}

# set up plots and answer
@pos = (0..3);
@posspos = (0..3);
for ($i = 0; $i < 4; $i++) {
  $pos[$i] = list_random(@posspos);
  for ($j = 0; $j < scalar(@posspos); $j++) {
    if ($posspos[$j] == $pos[$i] ) {
      $tmp = $posspos[$j];
      $posspos[$j] = $posspos[scalar(@posspos)-1];
      $posspos[scalar(@posspos)-1] = $tmp;
      pop(@posspos);
      $j--;
    }
  }
}

$oc = random(0,1,1);
for ($i = 0; $i < scalar(@x0) ; $i++) {
  $graphs[$pos[$i]]->moveTo($x1[$i],$y1[$i]);
  $graphs[$pos[$i]]->arrowTo($x0[$i],$y0[$i],'blue','3');
  $graphs[$pos[$i]]->moveTo($x2[$i],$y2[$i]);
  $graphs[$pos[$i]]->arrowTo($x3[$i],$y3[$i],'blue','3');
  if ($oc) {
    $graphs[$pos[$i]]->stamps(open_circle($x1[$i],$y1[$i],'blue'));
    $graphs[$pos[$i]]->stamps(closed_circle($x2[$i],$y2[$i],'blue'));
  } else { 
    $graphs[$pos[$i]]->stamps(closed_circle($x1[$i],$y1[$i],'blue'));
    $graphs[$pos[$i]]->stamps(open_circle($x2[$i],$y2[$i],'blue'));
  }
}

@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize/2, height=>$gsize/2, tex_size=>500 );
}

@possans = ("A", "B", "C", "D", "E");
$answer = $possans[$pos[0]];

# to display the equation properly
if ($num1 < 0 && $m1[0] != -1) {
  $tmp1 = -$num1;
  if ($den1 == 1) {
    $dispeq1 = "-$tmp1 x";
  } else {
    $dispeq1 = "-\frac{$tmp1}{$den1}x";
  }
} elsif ($num1 > 0 && $m1[0] != 1) {
  if ($den1 == 1) {
    $dispeq1 = "$num1 x";
  } else {
    $dispeq1 = "\frac{$num1}{$den1}x";
  }
} elsif ($num1 < 0 && $m1[0] == -1) {
  $dispeq1 = "-x";
} elsif ($num1 > 0 && $m1[0] == 1) {
  $dispeq1 = "x";
}

if ($num2 < 0 && $m2[0] != -1) {
  $tmp2 = -$num2;
  if ($den2 == 1) {
    $dispeq2 = "-$tmp2 x";
  } else {
    $dispeq2 = "-\frac{$tmp2}{$den2}x";
  }
} elsif ($num2 > 0 && $m2[0] != 1) {
  if ($den2 == 1) {
    $dispeq2 = "$num2 x";
  } else {
    $dispeq2 = "\frac{$num2}{$den2}x";
  }
} elsif ($num2 < 0 && $m2[0] == -1) {
  $dispeq2 = "-x";
} elsif ($num2 > 0 && $m2[0] == 1) {
  $dispeq2 = "x";
}

$dispeq1 = ($dispeq1)."+$b1[0]";
$dispeq2 = ($dispeq2)."+$b2[0]";

if ($oc) {
  $ineq1 = "<";
  $ineq2 = "\geq";
} else { 
  $ineq1 = "\leq";
  $ineq2 = ">";
}

$fundisp = "f(x) = \left$LBRACE\begin{array}{ccl}
$dispeq1 & \quad & \mbox{for } x $ineq1 $x1[0] \\
$dispeq2 & \quad & \mbox{for } x $ineq2 $x1[0] \\
\end{array} \right.";


###########################################################################
# state the problem 
###########################################################################
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 

$PAR
Choose the graph that represents the piecewise function
$PAR
\[
$fundisp
\]
$PAR
from the above choices. You may click a graph to enlarge it.
$PAR
Correct Letter: \{ans_rule\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(String($answer)->cmp());

COMMENT('Gives the formula of a piecewise function and 4 graphs to choose from. This piecewise function consists of two nonzero arbitrarily sloped lines.');
ENDDOCUMENT();