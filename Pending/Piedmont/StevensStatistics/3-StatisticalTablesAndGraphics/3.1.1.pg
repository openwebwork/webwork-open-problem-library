# DESCRIPTION
# Frequency Distribution -- American Made Cars
# ENDDESCRIPTION

## DBsubject(Statistics)
## DBchapter(Exploratory data analysis/descriptive statistics)
## DBsection(Summarizing data in tables)
## Institution(Piedmont)
## Author(Doug Torrance)
## Level(2)
## MO(1)
## TitleText1('Introduction to Statistics: Think & Do')
## AuthorText1('Stevens')
## EditionText1('4.1')
## Section1('3.1')
## Problem1('1')
## KEYWORDS('frequency distribution')

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "niceTables.pl",
  "parserRadioButtons.pl",
);

TEXT(beginproblem());
Context("Numeric");

$class_width = Compute(random(3,6));
$min = random(5, 10);
$mean_numerator = 0;

for ($i = 0; $i < 6; $i++) {
    $lower_class_limit[$i] = $min + $i * $class_width;
    $upper_class_limit[$i] = $lower_class_limit[$i] + $class_width - 1;
    $class_midpoint[$i] =
        Compute(0.5 * ($lower_class_limit[$i] + $upper_class_limit[$i]));
        $class_boundary[$i] = Compute($upper_class_limit[$i] + 0.5);
    # interpolating polynomial -- somehow this seemed less lazy than
    # six if statements... rounding because of floating-point issues
    $f = int(-2 * $i**5 + 70/3 * $i**4 - 245/3 * $i**3 + 140/3 * $i**2 +
        401/3 * $i + 50.5);
    $frequency[$i] = random($f, $f + 10);
    $n += $frequency[$i];
    if ($i == 0) {
        $cumulative_frequency[$i] = Compute($frequency[$i]);
    } else {
        $cumulative_frequency[$i] =
            Compute($cumulative_frequency[$i - 1] + $frequency[$i]);
    }
    $mean_numerator += $frequency[$i] * $class_midpoint[$i];
    $table_row[$i] = [
        $lower_class_limit[$i] . ' - ' . $upper_class_limit[$i],
        $frequency[$i]];
}

# separate from above for loop because we need n
for ($i = 0; $i < 6; $i++) {
    $relative_frequency[$i] = Compute($frequency[$i] / $n * 100);
    $relative_cumulative_frequency[$i] =
        Compute($cumulative_frequency[$i] / $n * 100);
}

$class_midpoints = List(@class_midpoint);

# don't want last class boundary in answer
$last_class_boundary = pop(@class_boundary);
$class_boundaries = List(@class_boundary);
push(@class_boundary, $last_class_boundary);

$mean_estimate = Compute($mean_numerator / $n);

BEGIN_TEXT

Below is a frequency distribution
for the estimated miles per gallon (MPG)
for $n different models of American-made
cars.
$PAR

\{
DataTable(
    [
        [['American-Made Cars', colspan => 2, headerrow => 1]],
        [['MPG', headerrow => 1], 'Frequency'],
        @table_row,
    ], 
);
\}
$PAR

(a) Identify the following
$PAR
class midpoints (enter as a comma-separated list)
$BR
\{ans_rule(20)\}
$PAR
class boundaries (enter as a comma-separated list)
$BR
\{ans_rule(20)\}
$PAR
class width
$BR
\{ans_rule(20)\}
$PAR

(b) Create a relative frequency table from the frequency table.
$PAR
\{
    # can't do this above or the ans_rule()'s will be in the wrong order
    for ($i = 0; $i < 6; $i ++) {
        $rel_table_row[$i] = [
            $lower_class_limit[$i] . ' - ' . $upper_class_limit[$i],
            ans_rule(4) . '%'];    
    }

DataTable(
    [
        [['American-Made Cars', colspan => 2, headerrow => 1]],
        [['MPG', headerrow => 1], 'Relative Frequency'],
        @rel_table_row,
    ], 
);
\}
$PAR

(c) Create a cumulative and relative-cumulative frequency table.
$PAR

\{
    # can't do this above or the ans_rule()'s will be in the wrong order
    for ($i = 0; $i < 6; $i ++) {
        $cum_table_row[$i] = [
            'less than ' . $class_boundary[$i],
            ans_rule(4), ans_rule(4) . '%'];    
    }

DataTable(
    [
        [['American-Made Cars', colspan => 3, headerrow => 1]],
        [['MPG', headerrow => 1], 'Cumulative Frequency',
            'Relative Cumulative Frequency'],
        @cum_table_row,
    ], 
);
\}
$PAR

(d) Estimate the mean MPG for the American-made cars included in this set.
$PAR
\{ans_rule(20)\}

END_TEXT

ANS($class_midpoints->cmp);
ANS($class_boundaries->cmp);
ANS($class_width->cmp);

for ($i = 0; $i < 6; $i++) {
    ANS($relative_frequency[$i]->cmp);
}

for ($i = 0; $i < 6; $i++) {
    ANS($cumulative_frequency[$i]->cmp);
    ANS($relative_cumulative_frequency[$i]->cmp);
}

ANS($mean_estimate->cmp);

ENDDOCUMENT();
