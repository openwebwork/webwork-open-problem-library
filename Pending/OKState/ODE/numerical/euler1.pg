##DESCRIPTION
## Euler's method, consider the error
##ENDDESCRIPTION

## DBsubject(Differential equations)
## DBchapter(Numerical methods)
## DBsection(Euler)
## Date()
## Institution(Oklahoma State University)
## Author(Jiri Lebl)
## Level(4)
## TitleText1('Notes on Diffy Qs: Differential Equations for Engineers')
## AuthorText1('Jiri Lebl')
## EditionText1('5')
## Section1('1.7')
## Problem1('')
## MO(1)
## KEYWORDS('differential equations', 'Euler's method', 'numerical calculation')

######################################################

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "AnswerFormatHelp.pl",
  "PGML.pl",
  "PGcourse.pl"
);

######################################################

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;
 
Context("Numeric");

$a = non_zero_random(2,5,1);
do {
  $y0 = random(0.5, 1.5, 0.1);
} while ($y0 == 1.0);

$realans = Compute("$y0 exp($a)");


########
$k=1;

$yy1 = Compute("$y0");
$step = 1.0 / $k;
for ( my $i=1; $i<=$k; $i++ ) {
  $yy1 = $yy1 + $step*$a*$yy1;
}
$error1 = Compute("|$realans-$yy1|");

########
$k=2;

$yy2 = Compute("$y0");
$step = 1.0 / $k;
for ( my $i=1; $i<=$k; $i++ ) {
  $yy2 = $yy2 + $step*$a*$yy2;
}
$error2 = Compute("|$realans-$yy2|");

########
$k=4;

$yy4 = Compute("$y0");
$step = 1.0 / $k;
for ( my $i=1; $i<=$k; $i++ ) {
  $yy4 = $yy4 + $step*$a*$yy4;
}
$error4 = Compute("|$realans-$yy4|");

######################################################

BEGIN_PGML
Consider the differential equation [` y' = [$a] y `] 
with initial condition [` y(0) = [$y0] `].

The actual solution is [` y(1) = {} `] [_________]{"$realans"}{10}
[@ AnswerFormatHelp("numbers") @]*

We wish to analyze what happens to
the error when estimating [` y(1) `]
via Euler's method.

Start with step size [`h=1`] (1 step).  Compute

[`y(1) \approx {}`] [_________]{"$yy1"}{10}
[@ AnswerFormatHelp("numbers") @]*  
[`\text{Error} \approx {}`] [_________]{"$error1"}{10}
[@ AnswerFormatHelp("numbers") @]*

_*Note:* Remember that the error is the absolute value!_

Let us half the step size to [`h=0.5`] (2 steps).  Compute

[`y(1) \approx {}`] [_________]{"$yy2"}{10}
[@ AnswerFormatHelp("numbers") @]*  
[`\text{Error} \approx {}`] [_________]{"$error2"}{10}
[@ AnswerFormatHelp("numbers") @]*

The error went down by the factor:
[`\dfrac{\text{Error}}{\text{Previous error}} \approx {}`] [_________]{"$error2/$error1"}{10}
[@ AnswerFormatHelp("numbers") @]*

Let us half the step size to [`h=0.25`] (4 steps).  Compute

[`y(1) \approx {}`] [_________]{"$yy4"}{10}
[@ AnswerFormatHelp("numbers") @]*  
[`\text{Error} \approx {}`] [_________]{"$error4"}{10}
[@ AnswerFormatHelp("numbers") @]*

The error went down by the factor:
[`\dfrac{\text{Error}}{\text{Previous error}} \approx {}`] [_________]{"$error4/$error2"}{10}
[@ AnswerFormatHelp("numbers") @]*

_Euler's method is a first order method so we expect the error to go down by a factor of 0.5 each halving.  Of course, that's only very approximate, so the
numbers you get above are not exactly 0.5._
END_PGML

######################################################

;

ENDDOCUMENT();

