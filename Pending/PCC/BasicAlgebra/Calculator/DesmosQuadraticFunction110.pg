# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Use technology to find intersections between a parabola and a line.
# Then solve related equation and inequalities.
#
# Last edit by: Carl Yao 03/20/2019
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Coordinates and Graphs')
## DBsection('Graphs of Equations')
## KEYWORDS('quadratic','function','parabola','application')
## DBCCSS('F.IF.7.a','F.IF.4','A-CED.1')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "AnswerFormatHelp.pl",
  "contextFiniteSolutionSets.pl",
  "PCCmacros.pl",
  "PCCgraphMacros.pl",
  "PGgraphmacros.pl",
  "PGcourse.pl",
);

##############################################

TEXT(beginproblem());

Context("Numeric");
Context()->noreduce('(-x)-y','(-x)+y');

do {
   do {
      $a = non_zero_random(-1,1,0.1);
      $h = non_zero_random(-5,5,1);
      $k = non_zero_random(-5,5,1);
      $f = Compute("$a*x**2-2*$a*$h*x+($a*($h)**2+$k)")->reduce;
      $A = $a;
      $B = -2*$a*$h;
      $C = $a*$h**2+$k;
      $D = ($B)**2-4*$A*$C;
   } until ($D>0);
   $xInt0 = min((-$B+sqrt($D))/(2*$A),(-$B-sqrt($D))/(2*$A));
   $xInt1 = max((-$B+sqrt($D))/(2*$A),(-$B-sqrt($D))/(2*$A));
   $xInt0Show = Round($xInt0,3);
   $xInt1Show = Round($xInt1,3);
   $yInt = $C;
   do {$y = $a>0 ? $k+random(3,5,1) : $k-random(3,5,1);} until $y!=0;
   $g = Compute("$y")->reduce;
   $A = $a;
   $B = -2*$a*$h;
   $C = $a*$h**2+$k-$y;
   $D = ($B)**2-4*$A*$C;
   $x0 = min((-$B+sqrt($D))/(2*$A),(-$B-sqrt($D))/(2*$A));
   $x1 = max((-$B+sqrt($D))/(2*$A),(-$B-sqrt($D))/(2*$A));
   $x0Show = Round($x0,3);
   $x1Show = Round($x1,3);
} until $x1-$x0 > 2;

$vertexX = -$B/(2*$A);
$vertexY = $f->eval(x=>$vertexX);

($min[0], $max[0], $min[1], $max[1], $ticknum[0], $ticknum[1], $xticks_ref, $yticks_ref, $marksep[0], $marksep[1]) = NiceGraphParameters([$x0,$x1,0,$vertexX],[$vertexY,$y,0,$yInt]);

@xticks = @$xticks_ref;
@yticks = @$yticks_ref;

@gr=();

for ($i=0;$i<=3;$i++) {
  $gr[$i] = init_graph($min[0],$min[1],$max[0],$max[1],
   axes=>[0,0],
   grid=>[$ticknum[0],$ticknum[1]],
   size=>[xPixels(),yPixels()]
  );

   $gr[$i]->lb('reset');
  for my $j (@xticks) {
    if (abs($j)<10**(-10)) {next;}
    $gr[$i]->lb( new Label($j, -$marksep[1]/8, $j,'black','center','top'));
  }

  for my $j (@yticks) {
    if (Real($j) == 0) {next;}
    $gr[$i]->lb( new Label(-$marksep[0]/8, $j, $j,'black','right','middle'));
  }
   add_functions($gr[$i], "$f for x in <$min[0],$max[0]> using color:blue and weight:2");
}

$gr[3]->stamps(closed_circle($vertexX,$vertexY,'red'));
$tob = $a>0 ? 'top' : 'bottom';
$gr[3]->lb( new Label($vertexX, $vertexY, "($vertexX,$vertexY)", 'red', 'center', $tob, 'small'));
$gr[3]->stamps(closed_circle(0,$yInt,'red'));
$lor = $h > 0 ? 'left' : 'right';
$gr[3]->lb( new Label(0, $yInt, "(0,$yInt)", 'red', $lor, 'middle', 'small'));
$gr[3]->stamps(closed_circle($xInt0,0,'red'));
$gr[3]->stamps(closed_circle($xInt1,0,'red'));
$gr[3]->lb( new Label($xInt0, 0, "($xInt0Show,0)", 'red', 'right', 'bottom', 'small'));
$gr[3]->lb( new Label($xInt1, 0, "($xInt1Show,0)", 'red', 'left', 'bottom','small'));
$alt[3] = "There is the graph of function f(x)=$f. Its vertex is at ($vertexX,$vertexY). Its x-intercepts are at ($xInt0Show,0) and ($xInt1Show,0), and its y-intercept is at (0,$yInt).";

for my $i (0..2) {
   add_functions($gr[$i], "$g for x in <$min[0],$max[0]> using color:blue and weight:2");
   $gr[$i]->lb( new Label($vertexX, $vertexY, "f(x)", 'blue', 'center', $tob, 'small'));
   $gr[$i]->lb( new Label($vertexX, $y, "y=$y", 'blue', 'center', $tob, 'small'));
   $gr[$i]->lb( new Label($x0, $y, "($x0Show,$y)", 'red', 'center', 'top', 'small'));
   $gr[$i]->lb( new Label($x1, $y, "($x1Show,$y)", 'red', 'center', 'top', 'small'));
}

$gr[0]->stamps(closed_circle($x0,$y,'red'));
$gr[0]->stamps(closed_circle($x1,$y,'red'));
$alt[0] = "There is the graph of function f(x)=$f, and a horizontal line at y=$y. Those two functions intersect at ($x0Show,$y) and ($x1Show,$y).";

@symbols = ('\gt','\ge','\lt','\le');
$i0 = random(0,1,1);
$i1 = random(2,3,1);
$symbol0 = $symbols[$i0];
$symbol1 = $symbols[$i1];

$hof0 = $i0==0 ? "hollow" : "solid";
$hof1 = $i1==2 ? "hollow" : "solid";

if ($a>0) {
   add_functions($gr[2], "$f for x in <$x0,$x1> using color:red and weight:2");
   add_functions($gr[1], "$f for x in <$min[0],$x0> using color:red and weight:2");
   add_functions($gr[1], "$f for x in <$x1,$max[0]> using color:red and weight:2");
   $alt[1] = $alt[0]." The segment on f(x) from negative infinity to x=$x0Show, and from x=$x1Show to infinity are highlighted. The points ($x0Show,$y) and ($x1Show,$y) are $hof0.";
   $alt[2] = $alt[0]." The segment on f(x) from $x0 to $x1 is highlighted. The points ($xShow0,$y) and ($x1Show,$y) are $hof1.";
} else {
   add_functions($gr[1], "$f for x in <$x0,$x1> using color:red and weight:2");
   add_functions($gr[2], "$f for x in <$min[0],$x0> using color:red and weight:2");
   add_functions($gr[2], "$f for x in <$x1,$max[0]> using color:red and weight:2");
   $alt[1] = $alt[0]." The segment on f(x) from x=$x0Show to x=$x1Show is highlighted. The points ($x0Show,$y) and ($x1Show,$y) are $hof0.";
   $alt[2] = $alt[0]." The segment on f(x) from negative infinity to x=$x0Show, and from x=$x1Show to infinity are highlighted. The points ($x0Show,$y) and ($x1Show,$y) are $hof1.";
}

if ($i0 == 0) {
  $gr[1]->stamps(open_circle($x0,$y,'red'));
  $gr[1]->stamps(open_circle($x1,$y,'red'));
} else {
  $gr[1]->stamps(closed_circle($x0,$y,'red'));
  $gr[1]->stamps(closed_circle($x1,$y,'red'));
}
if ($i1==2) {
  $gr[2]->stamps(open_circle($x0,$y,'red'));
  $gr[2]->stamps(open_circle($x1,$y,'red'));
} else {
  $gr[2]->stamps(closed_circle($x0,$y,'red'));
  $gr[2]->stamps(closed_circle($x1,$y,'red'));
}

$x5 = random(20,50,1)*random(-1,1,2);
$y5 = $f->eval(x=>$x5);
$y5Show = Round($y5,3);

Context("FiniteSolutionSets");
Context()->flags->set(
  tolerance => 0.01,
  tolType => "absolute",
);
Context()->flags->remove("NumberCheck");
$solutions = Formula("{$x0,$x1}");

Context("Point");
Context()->flags->set(
  tolerance => 0.01,
  tolType => "absolute",
);
Context()->parens->set("[" => {type => "Interval", close => "]"});
Context()->parens->set("{" => {type => "Set", close => "}"});
Context()->parens->set("<" => {type => "Vector", close => ">"});
Context()->flags->set(showExtraParens=>0, reduceConstants=>0);

$vertex = Point("($vertexX,$vertexY)");
$xIntercepts = List("($xInt0,0),($xInt1,0)");
$yIntercept = Point("(0,$yInt)");
$xInterceptsShow = List("($xInt0Show,0),($xInt1Show,0)");
$intersections = List("($x0Show,0),($x1Show,0)");

Context("Interval");
Context()->flags->set(
  tolerance => 0.01,
  tolType => "absolute",
);

$domain = Interval("(-inf,inf)");

if ($a>0) {
   $ans3 = ($i0==0) ? Interval("(-inf,$x0)U($x1,inf)") : Interval("(-inf,$x0]U[$x1,inf)");
   $ans4 = ($i1==2) ? Interval("($x0,$x1)") : Interval("[$x0,$x1]");
   $range = Interval("[$vertexY,inf)");
   $ans3Show = ($i0==0) ? Interval("(-inf,$x0Show)U($x1Show,inf)") : Interval("(-inf,$x0Show]U[$x1Show,inf)");
   $ans4Show = ($i1==2) ? Interval("($x0Show,$x1Show)") : Interval("[$x0Show,$x1Show]");
} else {
   $ans3 = ($i0==0) ? Interval("($x0,$x1)") : Interval("[$x0,$x1]");
   $ans4 = ($i1==2) ? Interval("(-inf,$x0)U($x1,inf)") : Interval("(-inf,$x0]U[$x1,inf)");
   $range = Interval("(-inf,$vertexY]");
   $ans3Show = ($i0==0) ? Interval("($x0Show,$x1Show)") : Interval("[$x0Show,$x1Show]");
   $ans4Show = ($i1==2) ? Interval("(-inf,$x0Show)U($x1Show,inf)") : Interval("(-inf,$x0Show]U[$x1Show,inf)");
}



##############################################

BEGIN_PGML

Let [`f(x)=[$f]`]. Use technology to determine the following.

1.  The vertex is at [__]{$vertex}{width => 30}.

1.  The [`y`]-intercept is at [__]{$yIntercept}{width => 30}.

1.  The [`x`]-intercepts are at [__]{$xIntercepts}{width => 30}. (Use a comma to separate them.)

1.  The function's domain, in interval notation, is [__]{$domain}{width => 30}.

1.  The function's range, in interval notation, is [__]{$range}{width => 30}.

1.  The value of [`f([$x5])`] is [__]{$y5}{width => 30}.

1.  Solve [`f(x)=[$y]\text{.}`] Enter your solutions in set notation.

    [__]{$solutions}{width => 30}

1.  Solve [`f(x) [$symbol0] [$y]\text{.}`] Enter *inf* to represent infinity. Enter capitalized "U" to represent the union symbol, if needed.

    [__]{$ans3}{width => 30}

1.  Solve [`f(x) [$symbol1] [$y]\text{.}`] Enter *inf* to represent infinity. Enter capitalized "U" to represent the union symbol, if needed.

    [__]{$ans4}{width => 30}

END_PGML

############################################################
# Solution
############################################################

$ion0 = $i0==0 ? "not including" : "including";
$ion1 = $i1==2 ? "not including" : "including";

BEGIN_PGML_SOLUTION

We will use desmos.com to answer those questions.

Step 1: Go to desmos.com, click on Start Graphing.

Step 2: Enter [` f(x)=[$f] `] in the first text box.

Step 3: If needed, zoom in/out until you can clearly see both functions and their intersections. Alternatively, click on the Graph Settings icon (looking like a wrench) and define the ranges of [`x`]-axis and [`y`]-axis. In case you need help, set the [`x`] range to [`[$min[0]],[$max[0]]`] and [`y`] range to [`[$min[1]],[$max[1]]`].

You should see a graph similar to the following one:

>>[@ image(insertGraph($gr[3]), tex_size=>400, height=>400, width=>400,
extra_html_tags=>"alt= '$alt[3]' title= '$alt[3]'"
) @]*<<

###Question 1, 2, 3, 4 and 5

The vertex is at [`[$vertex]`].

The [`y`]-intercept is at [`[$yIntercept]`].

The [`x`]-intercepts are at [`[$xInterceptsShow]`].

The function's domain is [`[$domain]`].

The function's range is [`[$range]`].

###Question 6

At desmos.com, in a new text box, enter [`f([$x5])`], and desmos shows [`[$y5Show]`].

###Question 7

To solve the equation [`f(x)=[$y]`], at desmos.com, enter [`y=[$y]`] in a new text box, and then click on the intersections between the function and the horizontal line. Those two points are [`[$intersections]`].

>>[@ image(insertGraph($gr[0]), tex_size=>400, height=>400, width=>400,
extra_html_tags=>"alt= '$alt[0]' title= '$alt[0]'"
) @]*<<

The solutions of [`f(x)=[$y]`] are [`[$solutions]`] in set notation.

###Question 8

To meet the condition of [` f(x) [$symbol0] [$y] `], we must choose [`x`] values in the intervals [`[$ans3Show]`]. In the following graph, ponts on the red segment(s) of [`f(x)`] has [`y`]-values greater than [`[$y]`] ([$ion0] those two intersection points).

>>[@ image(insertGraph($gr[1]), tex_size=>400, height=>400, width=>400,
extra_html_tags=>"alt= '$alt[1]' title= '$alt[1]'"
) @]*<<

###Question 9

To meet the condition of [` f(x) [$symbol1] [$y] `], we must choose [`x`] values in the intervals [`[$ans4Show]`]. In the following graph, ponts on the red segment(s) of [`f(x)`] has [`y`]-values smaller than or equal to [`[$y]`] ([$ion1] those two intersection points).

>>[@ image(insertGraph($gr[2]), tex_size=>400, height=>400, width=>400,
extra_html_tags=>"alt= '$alt[2]' title= '$alt[2]'"
) @]*<<

END_PGML_SOLUTION

ENDDOCUMENT();


