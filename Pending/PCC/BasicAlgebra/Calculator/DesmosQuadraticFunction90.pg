# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Use technology to find intersections between a parabola and a line.
# Then solve related equation and inequalities.
#
# Last edit by: Carl Yao 03/20/2019
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Coordinates and Graphs')
## DBsection('Graphs of Equations')
## KEYWORDS('quadratic','function','parabola','application')
## DBCCSS('F.IF.7.a','F.IF.4','A-CED.1')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "AnswerFormatHelp.pl",
  "contextFiniteSolutionSets.pl",
  "PCCmacros.pl",
  "PCCgraphMacros.pl",
  "PGgraphmacros.pl",
  "PGcourse.pl",
);

##############################################

TEXT(beginproblem());

Context("Numeric");
Context()->noreduce('(-x)-y','(-x)+y');

do {
   $a = non_zero_random(-1,1,0.1);
   $h = non_zero_random(-5,5,1);
   $k = non_zero_random(-5,5,1);
   $f = Compute("$a*x**2-2*$a*$h*x+($a*($h)**2+$k)")->reduce;
   do {$y = $a>0 ? $k+random(3,5,1) : $k-random(3,5,1);} until $y!=0;
   $g = Compute("$y")->reduce;
   $A = $a;
   $B = -2*$a*$h;
   $C = $a*$h**2+$k-$y;
   $D = ($B)**2-4*$A*$C;
   $x0 = Round(min((-$B+sqrt($D))/(2*$A),(-$B-sqrt($D))/(2*$A)),3);
   $x1 = Round(max((-$B+sqrt($D))/(2*$A),(-$B-sqrt($D))/(2*$A)),3);
} until $x1-$x0 > 2;

$vertexX = -$B/(2*$A);
$vertexY = $f->eval(x=>$vertexX);

($min[0], $max[0], $min[1], $max[1], $ticknum[0], $ticknum[1], $xticks_ref, $yticks_ref, $marksep[0], $marksep[1]) = NiceGraphParameters([$x0,$x1,0,$vertexX],[$vertexY,$y,0]);

@xticks = @$xticks_ref;
@yticks = @$yticks_ref;

@gr=();

for ($i=0;$i<=2;$i++) {
  $gr[$i] = init_graph($min[0],$min[1],$max[0],$max[1],
   axes=>[0,0],
   grid=>[$ticknum[0],$ticknum[1]],
   size=>[xPixels(),yPixels()]
  );

   $gr[$i]->lb('reset');
  for my $j (@xticks) {
    if (abs($j)<10**(-10)) {next;}
    $gr[$i]->lb( new Label($j, -$marksep[1]/8, $j,'black','center','top'));
  }

  for my $j (@yticks) {
    if (Real($j) == 0) {next;}
    $gr[$i]->lb( new Label(-$marksep[0]/8, $j, $j,'black','right','middle'));
  }
   add_functions($gr[$i], "$f for x in <$min[0],$max[0]> using color:blue and weight:2");
   add_functions($gr[$i], "$g for x in <$min[0],$max[0]> using color:blue and weight:2");
   $tob = $a>0 ? 'top' : 'bottom';
   $gr[$i]->lb( new Label($vertexX, $vertexY, "f(x)", 'blue', 'center', $tob));
   $gr[$i]->lb( new Label($vertexX, $y, "g(x)", 'blue', 'center', $tob));
   $gr[$i]->lb( new Label($x0, $y, "($x0,$y)", 'red', 'center', 'top'));
   $gr[$i]->lb( new Label($x1, $y, "($x1,$y)", 'red', 'center', 'top'));
}

$gr[0]->stamps(closed_circle($x0,$y,'red'));
$gr[0]->stamps(closed_circle($x1,$y,'red'));
$alt[0] = "There is the graph of function f(x)=$f, and a horizontal line at y=$y. Those two functions intersect at ($x0,$y) and ($x1,$y).";

@symbols = ('\gt','\ge','\lt','\le');
$i0 = random(0,1,1);
$i1 = random(2,3,1);
$symbol0 = $symbols[$i0];
$symbol1 = $symbols[$i1];

$hof0 = $i0==0 ? "hollow" : "solid";
$hof1 = $i1==2 ? "hollow" : "solid";

if ($a>0) {
   add_functions($gr[2], "$f for x in <$x0,$x1> using color:red and weight:2");
   add_functions($gr[1], "$f for x in <$min[0],$x0> using color:red and weight:2");
   add_functions($gr[1], "$f for x in <$x1,$max[0]> using color:red and weight:2");
   $alt[1] = $alt[0]." The segment on f(x) from negative infinity to x=$x0, and from x=$x1 to infinity are highlighted. The points ($x0,$y) and ($x1,$y) are $hof0.";
   $alt[2] = $alt[0]." The segment on f(x) from $x0 to $x1 is highlighted. The points ($x0,$y) and ($x1,$y) are $hof1.";
} else {
   add_functions($gr[1], "$f for x in <$x0,$x1> using color:red and weight:2");
   add_functions($gr[2], "$f for x in <$min[0],$x0> using color:red and weight:2");
   add_functions($gr[2], "$f for x in <$x1,$max[0]> using color:red and weight:2");
   $alt[1] = $alt[0]." The segment on f(x) from x=$x0 to x=$x1 is highlighted. The points ($x0,$y) and ($x1,$y) are $hof0.";
   $alt[2] = $alt[0]." The segment on f(x) from negative infinity to x=$x0, and from x=$x1 to infinity are highlighted. The points ($x0,$y) and ($x1,$y) are $hof1.";
}

if ($i0 == 0) {
  $gr[1]->stamps(open_circle($x0,$y,'red'));
  $gr[1]->stamps(open_circle($x1,$y,'red'));
} else {
  $gr[1]->stamps(closed_circle($x0,$y,'red'));
  $gr[1]->stamps(closed_circle($x1,$y,'red'));
}
if ($i1==2) {
  $gr[2]->stamps(open_circle($x0,$y,'red'));
  $gr[2]->stamps(open_circle($x1,$y,'red'));
} else {
  $gr[2]->stamps(closed_circle($x0,$y,'red'));
  $gr[2]->stamps(closed_circle($x1,$y,'red'));
}

Context("FiniteSolutionSets");
Context()->flags->set(
  tolerance => 0.01,
  tolType => "absolute",
);
Context()->flags->remove("NumberCheck");
$solutions = Formula("{$x0,$x1}");

Context("Point");
Context()->flags->set(
  tolerance => 0.01,
  tolType => "absolute",
);
Context()->parens->set("[" => {type => "Interval", close => "]"});
Context()->parens->set("{" => {type => "Set", close => "}"});
Context()->parens->set("<" => {type => "Vector", close => ">"});
Context()->flags->set(showExtraParens=>0, reduceConstants=>0);

$intersections = List("($x0,$y),($x1,$y)");

Context("Interval");
Context()->flags->set(
  tolerance => 0.01,
  tolType => "absolute",
);
if ($a>0) {
   $ans3 = ($i0==0) ? Interval("(-inf,$x0)U($x1,inf)") : Interval("(-inf,$x0]U[$x1,inf)");
   $ans4 = ($i1==2) ? Interval("($x0,$x1)") : Interval("[$x0,$x1]");
} else {
   $ans3 = ($i0==0) ? Interval("($x0,$x1)") : Interval("[$x0,$x1]");
   $ans4 = ($i1==2) ? Interval("(-inf,$x0)U($x1,inf)") : Interval("(-inf,$x0]U[$x1,inf)");
}



##############################################

BEGIN_PGML

Let [`f(x)=[$f]`] and [`g(x)=[$g]`]. Use technology to determine the following.

1.  What are the points of intersection for these two functions?

    [__]{$intersections}{width => 30}

1.  Solve [`f(x)=g(x)\text{.}`] Enter your solutions in set notation.

    [__]{$solutions}{width => 30}

1.  Solve [`f(x) [$symbol0] g(x)\text{.}`] Enter *inf* to represent infinity. Enter capitalized "U" to represent the union symbol, if needed.

    [__]{$ans3}{width => 30}

1.  Solve [`f(x) [$symbol1] g(x)\text{.}`] Enter *inf* to represent infinity. Enter capitalized "U" to represent the union symbol, if needed.

    [__]{$ans4}{width => 30}

END_PGML

############################################################
# Solution
############################################################

$ion0 = $i0==0 ? "not including" : "including";
$ion1 = $i1==2 ? "not including" : "including";

BEGIN_PGML_SOLUTION

We will use desmos.com to answer those questions.

Step 1: Go to desmos.com, click on Start Graphing.

Step 2: Enter [` f(x)=[$f] `] in the first text box and [`g(x)=[$y]`] in the second text box.

Step 3: If needed, zoom in/out until you can clearly see both functions and their intersections. Alternatively, click on the Graph Settings icon (looking like a wrench) and define the ranges of [`x`]-axis and [`y`]-axis. In case you need help, set the [`x`] range to [`[$min[0]],[$max[0]]`] and [`y`] range to [`[$min[1]],[$max[1]]`].

Step 4: Click on those two intersections, and desmos shows [`[$intersections]`].

>>[@ image(insertGraph($gr[0]), tex_size=>400, height=>400, width=>400,
extra_html_tags=>"alt= '$alt[0]' title= '$alt[0]'"
) @]*<<

###Question 1 and 2

The solutions of [`f(x)=g(x)`] are simply the [`x`]-values of those two intersections: [`[$solutions]`].

###Question 3

To meet the condition of [` f(x) [$symbol0] g(x) `], we must choose [`x`] values in the intervals [`[$ans3]`]. In the following graph, ponts on the red segment(s) of [`f(x)`] has [`y`]-values greater than [`[$y]`] ([$ion0] those two intersection points).

>>[@ image(insertGraph($gr[1]), tex_size=>400, height=>400, width=>400,
extra_html_tags=>"alt= '$alt[1]' title= '$alt[1]'"
) @]*<<

###Question 4

To meet the condition of [` f(x) [$symbol1] g(x) `], we must choose [`x`] values in the intervals [`[$ans4]`]. In the following graph, ponts on the red segment(s) of [`f(x)`] has [`y`]-values smaller than or equal to [`[$y]`] ([$ion1] those two intersection points).

>>[@ image(insertGraph($gr[2]), tex_size=>400, height=>400, width=>400,
extra_html_tags=>"alt= '$alt[2]' title= '$alt[2]'"
) @]*<<

END_PGML_SOLUTION

ENDDOCUMENT();


