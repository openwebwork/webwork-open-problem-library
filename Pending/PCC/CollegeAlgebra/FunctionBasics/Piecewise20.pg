##DESCRIPTION


## Type: evaluation
##ENDDESCRIPTION

########################################

DOCUMENT();        # This should be the first executable line in the problem.


loadMacros(
"PGstandard.pl",
"PGML.pl",
"MathObjects.pl",
"parserAssignment.pl",
"PGgraphmacros.pl",
"contextFraction.pl",
"PCCgraphMacros.pl",
"PGcourse.pl",

);

########################################

TEXT(&beginproblem);

$showPartialCorrectAnswers = 1;

Context("Numeric");

do {
$x1 = random(-5,-2,1);
$x2 = $x1 + random(3,5,1);
$x3 = $x2 + random(1,4,1);

$m1 = random(2,4,0.1);
do {$m2 = -random(2,4,0.1);} until (abs($m2) != abs($m1));

$h1 = $x1;
$k1 = random(2,10,1);

$temp = $k1 - $m1*$x1;
$f1 = Formula("$m1 x + $temp ")->reduce;

$h2 = $x2;
$k2 = $f1->eval(x=>$h2);

$temp = $k2 - $m2*$h2;
$f2 = Formula("$m2 x + $temp")->reduce;

$h3 = $x3;
$k3 = $f2->eval(x=>$h3);
} until ($k3 > 0);


Context("Fraction");
$c = Fraction($k3/2**(-$x3));

Context("Numeric");
$f3 = Formula("$c*2^(-x)");

$a = random($x2, $x3,1);
$b = random($x3+1,$x3+4,1);

$ans1 = $f2->eval(x=>$a);
$ans2 = $f3->eval(x=>$b);

$y = random(max(0.1,($k2+$k3)/2), $k2-0.1, 0.1 );



$domain = Interval("($x1,inf)");
$range = Interval("(0,$k2]");

Context("Fraction");
parser::Assignment->Allow;

$s1 = ($y - $k1)/$m1+$h1;
$s2 = ($y - $k2)/$m2+$h2;
$ans3 = List(Formula("x = $s1"), Formula("x = $s2"));

########################################


BEGIN_PGML

Let  [` f(x)=\begin{cases}
                    [$f1] & [$x1]<x<[$x2]\\
		    [$f2] & [$x2] \leq x \leq [$x3]\\
		    [$f3] &  x > [$x3]
                    \end{cases}
		    `]

a) [`f([$a])={}`][_________________________]{$ans1}  

a) [`f([$b])={}`][_________________________]{$ans2}  

a) Solve the equation [`f(x)=[$y]`]. All solutions should be expressed in the form *x=[$US][$US][$US] *. If there is more than one solution, use commas to separate them.  
[_________________________]{$ans3}  

a) The domain of [`f`] is [_________________________]{$domain}.  

a) The range of [`f`] is [_________________________]{$range}.  

END_PGML

########################################

($xmin, $xmax, $ymin, $ymax, $xticknumber, $yticknumber)  = NiceGraphParameters([0, $x1, $x2, $x3, $a, $b],[0, $k1, $k2, $k3]);

$refreshCachedImages = 1;
$gr = init_graph($xmin,$ymin,$xmax,$ymax,
   axes=>[0,0],
   grid=>[$xticknumber,$yticknumber],
   size=>[xPixels(),yPixels()]
  );

add_functions($gr, "$f1 for x in <$x1,$x2>" . 
  " using color:blue and weight:1");
add_functions($gr, "$f2 for x in <$x2,$x3>" . 
  " using color:blue and weight:1");
add_functions($gr, "$f3 for x in <$x3,$xmax>" . 
  " using color:blue and weight:1");
add_functions($gr, "$y for x in <$xmin,$xmax>" . 
  " using color:red and weight:1");
$gr->stamps( open_circle($x1,$k1,'blue') );

$gr->stamps( closed_circle($s1,$y,'red') );
$gr->stamps( closed_circle($s2,$y,'red') );


$sol1 = $f2->substitute(x=>Formula("$a"));
$sol2 = $f3->substitute(x=>Formula("$b"));

BEGIN_PGML_SOLUTION

a) Since [`[$x1]<[$a]<[$x2]`], to find [`f([$a])`], we apply the second rule.  
[`\begin{aligned}
f([$a])
&= [$sol1]\\
&= [$ans1]
\end{aligned}`]  

a) Since [`[$b] > [$x3]`], to find [`f([$b])`], we apply the third rule.  
[`\begin{aligned}
f([$b])
&= [$sol2]\\
&= [$ans2]
\end{aligned}`]  


a) To solve the equation [`f(x)=[$y]`], it can help to create a graph of [`f`].  
[@EnlargeImageStatementPGML()@]**  
>>[@image( insertGraph($gr), 
width=>400,height=>400,tex_size=>800, extra_html_tags=>"alt = '$altb'" )@]* <<
    We can see that the only solutions happen in the part of the domain where the first and second rules are used. So we set up equations to solve:  
[`\begin{aligned}
[$f1]&=[$y]&[$f2]&=[$y]\\
[$m1] x &=[$y-$k1+$m1*$x1]&[$m2]x&=[$y-$k2+$m2*$h2]\\
x&=[$s1]&x&=[$s2]
\end{aligned}`]  
[|d.|] Every real number meets one of the three conditions from the definition of this piecewise defined function, so the domain is [`[$domain]`].  
[|e.|] We can see from the graph that the highest output achieved by [`f`] is [`f([$x2])`], which is [`[$k2]`]. The graph also indicates that [`f`]'s outputs get arbitrarily close to [`0`], but never reach it. So the range is [`[$range]`].



END_PGML_SOLUTION


ENDDOCUMENT();        # This should be the last executable line in the problem.
