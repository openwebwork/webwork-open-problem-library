# WeBWorK problem written by Carl Yao
# Portland Community College
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Functions)
## DBsection(Exponential)
## Institution(PCC)
## Author(Carl Yao)
## MO(1)



##############################################


DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGgraphmacros.pl",
  "PCCgraphMacros.pl",
  "parserPopUp.pl",
  "niceTables.pl",
  "PGcourse.pl",

);

 $refreshCachedImages = 1;


##############################################

TEXT(beginproblem());
Context("Numeric");
Context()->reduction->set('(-x)-y'=>0);    #So that the displayed inequalities
Context()->reduction->set('(-x)+y'=>0);    #will look as intended

$h = non_zero_random(-4,4,1);
$v = non_zero_random(-4,4,1);
$k = -random(2,5,1);
$hN = -$h;
$kN = -$k;

$func = Formula("$k/(x+$h)+$v")->reduce;
$funcF = Formula("$k/(x+$h)")->reduce;
$f[0] = Formula("$k/(x+$h)+$v")->reduce;
$f[1] = Formula("$k/(x-$h)+$v")->reduce;
$f[2] = Formula("-$k/(x+$h)+$v")->reduce;
$f[3] = Formula("-$k/(x-$h)+$v")->reduce;
$f[4] = Formula("-1/x")->reduce;

@alt = ();
$alt[0] = "This is a function's graph with two pieces of smooth curves. The left piece approaches y=$v horizontally as x-value approaches negative infinity, and approaches positive infinity as x-value approaches $hN from the left. The right piece approaches y=$v horizontally as x-value approaches positive infinity, and approaches negative infinity as x-value approaches $hN from the right.";
$alt[1] = "This is a function's graph with two pieces of smooth curves. The left piece approaches y=$v horizontally as x-value approaches negative infinity, and approaches positive infinity as x-value approaches $h from the left. The right piece approaches y=$v horizontally as x-value approaches positive infinity, and approaches negative infinity as x-value approaches $h from the right.";
$alt[2] = "This is a function's graph with two pieces of smooth curves. The left piece approaches y=$v horizontally as x-value approaches negative infinity, and approaches negative infinity as x-value approaches $hN from the left. The right piece approaches y=$v horizontally as x-value approaches positive infinity, and approaches positive infinity as x-value approaches $hN from the right.";
$alt[3] = "This is a function's graph with two pieces of smooth curves. The left piece approaches y=$v horizontally as x-value approaches negative infinity, and approaches negative infinity as x-value approaches $h from the left. The right piece approaches y=$v horizontally as x-value approaches positive infinity, and approaches positive infinity as x-value approaches $h from the right.";
$alt[4] = "This is the graph of f(x)=1/x, with two pieces of smooth curves. The left piece approaches y=0 horizontally as x-value approaches negative infinity, and approaches positive infinity as x-value approaches 0 from the left. The right piece approaches y=0 horizontally as x-value approaches positive infinity, and approaches negative infinity as x-value approaches 0 from the right.";

$bound = 10;
$xmin = -$bound;         #The viewing window
$xmax = $bound;
$ymin = -$bound;
$ymax = $bound;

@graphs = ();             


#  Start making the graphs

for ( my $i=0; $i<5; $i++ ) {


#  Background

   $graphs[$i] = init_graph($xmin,$ymin,$xmax,$ymax,
          grid=>[$xmax-$xmin,$ymax-$ymin],axes=>[0,0],pixels=>[300,300]);


#  Labels

   $graphs[$i]->lb('reset');
   foreach my $j (1..$bound-1) {
      $graphs[$i]->lb( new Label(-$bound+0.3,  $j, $j,'black','center','middle'));
      $graphs[$i]->lb( new Label(-$bound+0.3, -$j,-$j,'black','center','middle'));
      $graphs[$i]->lb( new Label(  $j,-$bound+0.3, $j,'black','center','middle'));
      $graphs[$i]->lb( new Label( -$j,-$bound+0.3,-$j,'black','center','middle'));
   }
   $graphs[$i]->lb( new Label($bound-0.3,0.4,'x','black','center','middle'));
   $graphs[$i]->lb( new Label(0.4,$bound-0.3,'y','black','center','middle'));


#  Define new graph colors

   $graphs[$i]->new_color("lightblue", 214,230,244); # RGB
   $graphs[$i]->new_color("darkblue",  100,100,255); 
   $graphs[$i]->new_color("lightgreen",156,215,151); # other color options
   $graphs[$i]->new_color("darkgreen",   0, 86, 34); # for future author use 
   $graphs[$i]->new_color("lightred",  245,234,229); # light red-purple
   $graphs[$i]->new_color("darkred",   159, 64, 16); # red-brown

   $graphs[$i]->new_color("white",   255, 255, 255); # needed to seal off
                                                     # areas bordered with 
                                                     # dashed lines

#  Choose colors

   $light[$i] = "lightblue";      # Graphs will all be blue
   $dark[$i] = "darkblue";        # This could be modified to give different
                                  # graphs different colors.
if ( ($i==0) || ($i==2) ) {
   $breakL = -$h-0.01;
   $breakR = -$h+0.01;
} else {
   $breakL = $h-0.01;
   $breakR = $h+0.01;
}
if ($i==4) {
   $breakL = -0.01;
   $breakR = 0.01;
}
add_functions($graphs[$i], "$f[$i] for x in <-$bound,$breakL> " .
    "using color:blue and weight:2");
add_functions($graphs[$i], "$f[$i] for x in <$breakR,$bound> " .
    "using color:blue and weight:2");

}

sub shufflemap {
    my $n = shift();
    my $m = $n - 1;
    my $zeroind;

    my %map = ();
 
    my @vals = (0..$m);
    for ( my $i=0; $i<$m; $i++ ) {
  my $j = random(0,$m-$i,1);
  $map{$i} = $vals[$j];
  $zeroind = $i if ( $map{$i} == 0 );
  splice(@vals, $j, 1);
    }
    $map{$m} = $vals[0];
    $zeroind = $m if ( $map{$m} == 0 );
 
    return( { %map }, $zeroind );
}

($shuffle, $zero) = shufflemap(4);   #A random permutation function.  
                                      #$zero is $shuffle(0), the index
                                      #of the correct graph

$pop = PopUp( [qw(? 1 2 3 4)], $zero+1 );
$answer = $zero+1;


$size = 180;
$texsize = 100;

##############################################

BEGIN_PGML
Choose the graph of the function [`f(x)=[$f[0]]`].

    The correct graph is graph number [@ $pop->menu() @]*.

[@EnlargeImageStatementPGML()@]**

END_PGML

BEGIN_TEXT
$PAR

\{LayoutTable(
[
['1.'.image(insertGraph( $graphs[ $shuffle->{0} ] ), tex_size=>$texsize,
	      height=>$size, width=>$size, extra_html_tags=>'alt="$alt[$shuffle->{0}]" title = "$alt[$shuffle->{0}]"'),
'2.'.image(insertGraph( $graphs[ $shuffle->{1} ] ), tex_size=>$texsize,
	      height=>$size, width=>$size, extra_html_tags=>'alt="$alt[$shuffle->{1}]" title = "$alt[$shuffle->{1}]"'),
'3.'.image(insertGraph( $graphs[ $shuffle->{2} ] ), tex_size=>$texsize,
	      height=>$size, width=>$size, extra_html_tags=>'alt="$alt[$shuffle->{2}]" title = "$alt[$shuffle->{2}]"'),
'4.'.image(insertGraph( $graphs[ $shuffle->{3} ] ), tex_size=>$texsize,
	      height=>$size, width=>$size, extra_html_tags=>'alt="$alt[$shuffle->{3}]" title = "$alt[$shuffle->{3}]"'),]
],
align=>'>{\bfseries}l>{\bfseries}l>{\bfseries}l>{\bfseries}l',
allcellcss=>'padding: 10px;',
);
\}

END_TEXT


##############################################

ANS( $pop->cmp() );

##############################################

$absH = abs($h);
$absV = abs($v);
$lor = ($h>0) ? "left" : "right";
$uod = ($v>0) ? "up" : "down";

BEGIN_PGML_SOLUTION

First, you need to be familiar with the graph of [`y=-\frac{1}{x}`]:

>>[@ image(insertGraph( $graphs[ 4 ] ), tex_size=>$texsize,
	      height=>$size, width=>$size, extra_html_tags=>"alt='$alt[4]' title = '$alt[4]'") @]*<<
          
The given function, [`f(x)=[$f[0]]`], is a transformation of [`y=\frac{1}{x}`]:

* The leading negative symbol in [`[$funcF]`] does a reflection by the [`x`]-axis.
* The number [`[$kN]`] in [`[$funcF]`] does a vertical stretch by a factor of [`[$k]`].
* The number [`[$h]`] does a horizontal shift to the [$lor] by [`[$absH]`] units.
* The number [`[$v]`] does a vertical shift [$uod] by [`[$absV]`] units.

The correct graph for [`f(x)=[$f[0]]`] is Graph [`[$answer]`].

END_PGML_SOLUTION

ENDDOCUMENT();