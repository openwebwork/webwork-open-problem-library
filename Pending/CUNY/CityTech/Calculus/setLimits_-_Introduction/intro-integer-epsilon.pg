##DESCRIPTION
##   
##ENDDESCRIPTION


## DBsubject(Calculus - single variable)
## Date(6/15/2019)
## Institution(CityTech)
## Author(K. Andrew Parker)
## MO(1)
## KEYWORDS('calculus')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

Context("Numeric");
Context()->flags->set(tolerance=>10**(-25), tolType=>'absolute');

$n = Real(non_zero_random(-10,10,1));

@messages = (
  [-1, "Oh no! You can get much closer than that - try decimals, maybe?", 0],
  [-2, "You could do better with another attempt, yes?", 0.25],
  [-3, "Try again. You can manage better than this.",0.25],
  [-4, "This is okay, but you could do better, yeah?",0.5],
  [-5, "You are getting better. Try another?",0.5],
  [-6, "Nice Work! There's still room to get closer...",0.75],
  [-7, "Very Good! Can you get closer?",0.75],
  [-10, "Excellent!",1], # full credit for 91+
  [-24, "Perfect!",1],
);

$custom = sub {
    my ($correct, $student, $ansHash) = @_;
    my $epsilon = abs($student - $correct);
    my $score = 0;
    # my ($acc,$eligible) = @$student; # student answer is passed as a list
    #
    # set the preview string to display the accuracy score
    # set the "correct answer" to display the requirements
    # 
    $ansHash->{preview_latex_string} = "\text{epsilon: }$epsilon";
    $ansHash->{correct_ans_latex_string} = "\text{ epsilon } < \(10^{-8}\)";
    #
    # invalidate the student answer if they gave the exact value
    #
    Value::Error("Please give a value that is close but not equal to $correct") if ($epsilon == 0);
    # loop through messages to assign partial credit
    for my $data (@messages) {
      my ($exp, $msg, $nscore) = @$data;
      if ($epsilon >= 10**($exp)) {
        $ansHash->{ans_message} = $msg;
        $score = $nscore if defined $nscore;
        last;
      }
    }
    return $score; # ansHash already contains the feedback
};


##############################################################
#
#  Text
#
#

BEGIN_PGML

Give a value that is _close_ to [$n] but *not equal* to [$n].

[________________________________________]{$n->cmp(checker=>$custom)}

END_PGML

##############################################################
#
#  Answers
#
#

##############################################################
#
#  Hint
#
#

BEGIN_PGML_HINT

* To get full credit, the absolute value of the difference between your number and `[$n]` should be less than [`10^{-8}`].

END_PGML_HINT

##############################################################
#
#  Solution
#
#

$ansminus = $n-> value -1e-8;
$ansplus = $n-> value +1e-8;

BEGIN_PGML_SOLUTION

* Any number different from [$n] in the interval [@ ($n >= 0)? "($ansminus, $ansplus)":"($ansminus, $ansplus)" @]. 

END_PGML_SOLUTION

ENDDOCUMENT();        
