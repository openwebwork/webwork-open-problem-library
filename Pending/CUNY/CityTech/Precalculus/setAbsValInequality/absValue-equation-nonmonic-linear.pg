##DESCRIPTION
##   
##ENDDESCRIPTION


## DBsubject(Algebra)
## DBchapter(Absolute value expressions and functions)
## DBsection(Solving equations with absolute values)
## Date(6/29/2018)
## Institution(City Tech)
## Author(K. Andrew Parker)
## MO(1)
## TitleText1('Precalculus')
## AuthorText1('')
## EditionText1('')
## Section1('.')
## Problem1('')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "contextFraction.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");

$a1 = random(3,7,1);
$a2 = random(-7,-3,1);
$a3 = random(-1,1,2)*random(3,9,1);
$a4 = random(-1,1,2)*random(3,9,1);
$a5 = random(-1,1,2)*random(3,9,1);

$b1 = non_zero_random(-5,5,1);
$b2 = 2*non_zero_random(-5,5,1);
$b3 = 3*non_zero_random(-5,5,1);
$b4 = 4*non_zero_random(-5,5,1);
$b5 = 5*non_zero_random(-5,5,1);

$exp1 = Formula("$a1 x+$b1")->reduce;
$exp2 = Formula("$a2 x+$b2")->reduce;
$exp3 = Formula("$a3 x+$b3")->reduce;
$exp4 = Formula("$a4 x+$b4")->reduce;
$exp5 = Formula("$a5 x+$b5")->reduce;

$n1 = random(5,9,1);
do { $n2 = random(5,9,1); } until ($n1 != $n2);
$n3 = random(-1,1,2)*random(11,19,1);
$n4 = ($n3>0)?-1*random(21,29,1):random(-1,1,2)*random(21,29,1);
$n5 = ($n3<0 && $n4<0)?random(51,99,2):random(-1,1,2)*random(51,99,2);

Context("LimitedFraction");
Context()->strings->add(
  "no solution"=>{},
  "none"=>{alias=>"no solution"}
);
Context()->operators->redefine(',',using=>',',from=>'Numeric');
Context()->operators->redefine('or',using=>',',from=>'Numeric');
Context()->operators->set(
  ','=>{string=>' or ',TeX=>'\hbox{ or }'},
  'or'=>{string=>' or ',TeX=>'\hbox{ or }'}
);
Context()->flags->set(showMixedNumbers=>0, reduceFractions=>0);

$l1 = Fraction(-1*$n1-$b1,$a1)->reduce;
$r1 = Fraction($n1-$b1,$a1)->reduce;
$l2 = Fraction(-1*$n2-$b2,$a2)->reduce;
$r2 = Fraction($n2-$b2,$a2)->reduce;
$l3 = Fraction(-1*$n3-$b3,$a3)->reduce;
$r3 = Fraction($n3-$b3,$a3)->reduce;
$l4 = Fraction(-1*$n4-$b4,$a4)->reduce;
$r4 = Fraction($n4-$b4,$a4)->reduce;
$l5 = Fraction(-1*$n5-$b5,$a5)->reduce;
$r5 = Fraction($n5-$b5,$a5)->reduce;

$ans1 = List($l1,$r1);
$ans2 = List($l2,$r2);
$ans3 = ($n3>0)?List($l3,$r3):String("no solution");
$ans4 = ($n4>0)?List($l4,$r4):String("no solution");
$ans5 = ($n5>0)?List($l5,$r5):String("no solution");

##############################################################
#
#  Text
#
#

BEGIN_PGML

>> ### Absolute Value Equations ### <<

We recognize the following situations:
>> [`|x| = 9`] has two solutions; [`x=9`] and [`x=-9`] <<

>> [`|x| = -9`] has no solutions (because the absolute value is always zero or positive, and cannot be equal to a negative value). <<

But what if we have an absolute value of an expression, rather than just a variable? For example, what about [`|2x-5| = 9`]?

Here we're considering the absolute value of [`2x-5`], so if [`2x-5`] has an absolute value of [`9`], then [`2x-5`] must be either [`9`] or [`-9`].

>> Symbolically, either [`2x-5=9`] or [`2x-5=-9`].<<

>> We solve each of these equations individually to conclude that either [`x=7`] or [`x=-2`]. <<

And in the case of being equal to a negative value, as in [`|2x-5|=-9`], we still have no possible solutions, as [`|2x-5|`] must be zero or positive, and cannot be equal to a negative value.

>> ### Practice ### <<

Solve the equations below.

* If the equation has multiple solutions, enter them as a list, separated by commas.
* If the equation has no solutions, enter "no solution" as your answer.

a. [`|[$exp1]| = [$n1]`] has solutions: [`x =`] [_____________________________]

b. [`|[$exp2]| = [$n2]`] has solutions: [`x =`] [_____________________________]

c. [`|[$exp3]| = [$n3]`] has solutions: [`x =`] [_____________________________]

d. [`|[$exp4]| = [$n4]`] has solutions: [`x =`] [_____________________________]

e. [`|[$exp5]| = [$n5]`] has solutions: [`x =`] [_____________________________]



END_PGML

##############################################################
#
#  Answers
#
#

ANS($ans1->cmp(
      entry_type => "a fraction",
      checker => sub {
        my ($correct, $student, $ans, $nth, $value) = @_;
        $correct->context->setError("Your $nth $value is not reduced","",undef,undef,$Value::CMP_WARNING)
          if $student->{notReduced};
        return 0 unless $correct == $student;
        return 1 unless Value::classMatch($student,'Fraction') && !$student->isReduced;
        $student->{notReduced} = 1 unless $ans->{isPreview};
        return 0;
      }
    ));

ANS($ans2->cmp(
      entry_type => "a fraction",
      checker => sub {
        my ($correct, $student, $ans, $nth, $value) = @_;
        $correct->context->setError("Your $nth $value is not reduced","",undef,undef,$Value::CMP_WARNING)
          if $student->{notReduced};
        return 0 unless $correct == $student;
        return 1 unless Value::classMatch($student,'Fraction') && !$student->isReduced;
        $student->{notReduced} = 1 unless $ans->{isPreview};
        return 0;
      }
    ));

ANS($ans3->cmp(
      entry_type => "a fraction",
      checker => sub {
        my ($correct, $student, $ans, $nth, $value) = @_;
        $correct->context->setError("Your $nth $value is not reduced","",undef,undef,$Value::CMP_WARNING)
          if $student->{notReduced};
        return 0 unless $correct == $student;
        return 1 unless Value::classMatch($student,'Fraction') && !$student->isReduced;
        $student->{notReduced} = 1 unless $ans->{isPreview};
        return 0;
      }
    ));

ANS($ans4->cmp(
      entry_type => "a fraction",
      checker => sub {
        my ($correct, $student, $ans, $nth, $value) = @_;
        $correct->context->setError("Your $nth $value is not reduced","",undef,undef,$Value::CMP_WARNING)
          if $student->{notReduced};
        return 0 unless $correct == $student;
        return 1 unless Value::classMatch($student,'Fraction') && !$student->isReduced;
        $student->{notReduced} = 1 unless $ans->{isPreview};
        return 0;
      }
    ));

ANS($ans5->cmp(
      entry_type => "a fraction",
      checker => sub {
        my ($correct, $student, $ans, $nth, $value) = @_;
        $correct->context->setError("Your $nth $value is not reduced","",undef,undef,$Value::CMP_WARNING)
          if $student->{notReduced};
        return 0 unless $correct == $student;
        return 1 unless Value::classMatch($student,'Fraction') && !$student->isReduced;
        $student->{notReduced} = 1 unless $ans->{isPreview};
        return 0;
      }
    ));

##############################################################
#
#  Hints
#
#


BEGIN_PGML_HINT

* Is the absolute value of your expression *negative*, *zero* or *positive*?

* If *negative*, then that's not possible. The absolute value of *any* number is never negative.

* If *zero*, then there is only one number whose absolute value is 0.  This number is 0. Set the expression inside the absolute value to be equal to 0.  Then solve this equation.

* If *positive*, then there are two numbers, one positive and one negative, with that absolute value. Set up two equations: the expression inside the absolute value equal to the given positive number, and that expression equal to the negative of that number.  Solve each equation separately.

END_PGML_HINT

##############################################################
#
#  Solutions
#
#

BEGIN_PGML_SOLUTION

a. [` \displaystyle{[$ans1]} `]  

b. [` \displaystyle{[$ans2]} `]  

c. [` \displaystyle{[$ans3]} `]  

d. [` \displaystyle{[$ans4]} `]  

e. [` \displaystyle{[$ans5]} `]  

END_PGML_SOLUTION

ENDDOCUMENT();        
