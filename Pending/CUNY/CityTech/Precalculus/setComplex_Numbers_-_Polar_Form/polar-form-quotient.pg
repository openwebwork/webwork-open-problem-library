##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION


## DBsubject(Trigonometry)
## DBchapter(Polar coordinates & vectors)
## DBsection(Polar and rectangular coordinates)
## Date(8/12/2018)
## Institution(City Tech)
## Author(K. Andrew Parker)
## MO(1)
## KEYWORDS('algebra', 'inequality', 'fraction')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "bizarroArithmetic.pl",
   "PGML.pl",
   "niceTables.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Complex");
Context()->flags->set(
    reduceConstants=>0,
    reduceConstantFunctions=>0,
    tolType=>'absolute',
    tolerance=>0.0005);

Context()->operators->set(
'+' => {class => 'bizarro::BOP::add', isCommand => 1},
'-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
'*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
' *' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'* ' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'/' => {class => 'bizarro::BOP::divide', isCommand => 1},
' /' => {class => 'bizarro::BOP::divide', isCommand => 1},
'/ ' => {class => 'bizarro::BOP::divide', isCommand => 1},
'//' => {class => 'bizarro::BOP::divide', isCommand => 1},
'**' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
'^' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
);

##############################################
#  Begin trig functions in degrees

Context()->functions->remove("cos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub cos {Parser::Function->call('cos',@_)} 
#  Add the new functions to the Context
Context()->functions->add( cos => {class => 'NewFunc', TeX => '\cos'}, );


Context()->functions->remove("sin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub sin {Parser::Function->call('sin',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sin => {class => 'NewFunc', TeX => '\sin'}, );


Context()->functions->remove("tan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180)/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub tan {Parser::Function->call('tan',@_)}
#  Add the new functions to the Context
Context()->functions->add( tan => {class => 'NewFunc', TeX => '\tan'}, );


Context()->functions->remove("sec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub sec {Parser::Function->call('sec',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sec => {class => 'NewFunc', TeX => '\sec'}, );


Context()->functions->remove("csc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub csc {Parser::Function->call('csc',@_)} 
#  Add the new functions to the Context
Context()->functions->add( csc => {class => 'NewFunc', TeX => '\csc'}, );


Context()->functions->remove("cot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180)/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub cot {Parser::Function->call('cot',@_)}
#  Add the new functions to the Context
Context()->functions->add( cot => {class => 'NewFunc', TeX => '\cot'}, );



#sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))}
#sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])}
#sub atan {CORE::atan2($_[1],1)}
#sub acot {CORE::atan2(1,$_[1])}
#sub asec {acos($_[0],1.0/$_[1])}
#sub acsc {asin($_[0],1.0/$_[1])}


Context()->functions->remove("acos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acos {Parser::Function->call('acos',@_)}
#  Add the new functions to the Context
Context()->functions->add( acos => {class => 'NewFunc', TeX => '\arccos'}, );


Context()->functions->remove("asin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub asin {Parser::Function->call('asin',@_)}
#  Add the new functions to the Context
Context()->functions->add( asin => {class => 'NewFunc', TeX => '\arcsin'}, );


Context()->functions->remove("atan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub atan {Parser::Function->call('atan',@_)}
#  Add the new functions to the Context
Context()->functions->add( atan => {class => 'NewFunc', TeX => '\arctan'}, );


Context()->functions->remove("asec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
#sub asec {acos($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub asec {Parser::Function->call('asec',@_)}
#  Add the new functions to the Context
Context()->functions->add( asec => {class => 'NewFunc', TeX => '\arcsec'}, );


Context()->functions->remove("acsc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
#sub acsc {asin($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub acsc {Parser::Function->call('acsc',@_)}
#  Add the new functions to the Context
Context()->functions->add( acsc => {class => 'NewFunc', TeX => '\arccsc'}, );


Context()->functions->remove("acot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acot {Parser::Function->call('acot',@_)}
#  Add the new functions to the Context
Context()->functions->add( acot => {class => 'NewFunc', TeX => '\arccot'}, );


#  End trig functions in degrees
###################################################

do {
    $modulus1 = random(2,9,1);
    $modulus2 = random(2,9,1);
} until ( $modulus1 != $modulus2 );

$argument1 = Real(random(15,345,1))->with(period=>360);
$argument2 = random(15,345,1);

$polar1 = Formula("$modulus1 (cos($argument1)+i*sin($argument1))");
$polar2 = Formula("$modulus2 (cos($argument2)+i*sin($argument2))");

$modulusProduct = $modulus1*$modulus2;
$argumentProduct = Real($argument1+$argument2)->with(period=>360);
$polarProduct = Formula("$modulusProduct (cos($argumentProduct) + i*sin($argumentProduct))");

$periodic = sub {
    my ($correct, $student, $ansHash) = @_;
    my $score = (abs($student-$correct)==360 || $student==$correct)?1:0;
    my $correctRad = $correct*pi/180;
    my $absError = abs($student-$correct);
    Value::Error("You're close. Make sure your answer is accurate to three decimal places.") if ($score==0 && ( $absError < 0.1 || abs($absError-360) < 0.1 ) );
    Value::Error("Please give your answer in degrees instead of radians.") if ( $score==0 && ( abs($correctRad-$student) < 0.05 || abs(2*pi - abs($correctRad - $student)) < 0.05 ) );
    Value::Error("Make sure your direction angle is in the proper quadrant.") if ($score==0 && abs($absError-180) < 0.05);
    return $score;
};

$eulerChecker = sub {
      my ( $correct, $student, $ansHash ) = @_;
      return 0 if $ansHash->{isPreview} || $correct != $student;
      $student = $ansHash->{student_formula};
      $correct = $correct->{original_formula} if defined $correct->{original_formula};
      $student = Formula("$student"); $correct = Formula("$correct");
      # return 0 unless ($correct == $student); #already covered above
      Context()->flags->set(bizarroPow=>1,bizarroMul=>1,bizarroDiv=>1);
      delete $correct->{test_values};
      delete $student->{test_values};
      my $OK = ($correct == $student);
      Context()->flags->set(bizarroPow=>0,bizarroMul=>0,bizarroDiv=>0);
      delete $correct->{test_values};
      delete $student->{test_values};
      Value::Error("Your answer is equivalent to \($complex\), but it is not in the correct form.") unless $OK;
      return $OK;
}; 

##############################################################
#
#  Text
#
#

BEGIN_PGML

* Use *degrees* for this problem, _not radians_.
* If you're using decimal approximations, you need to be accurate to _at least 3_ decimal places.
* Be careful, your device might autocorrect "_i_" to a capital "_I_".

a. [`\zeta_1`] is a complex number with modulus [$modulusProduct] and argument [`[$argumentProduct]^{\circ}`].

    Write [`\zeta_1`] in polar form: [______________________________]{$polarProduct->cmp(checker=>$eulerChecker)}

b. [`\zeta_2`] is a complex number with modulus [$modulus2] and argument [`[$argument2]^{\circ}`].

    Write [`\zeta_2`] in polar form: [______________________________]{$polar2->cmp(checker=>$eulerChecker)}

c. Use what we know about [`\zeta_1`] and [`\zeta_2`] to answer the following questions about [`\zeta_1 \div \zeta_2`]:

    What is the modulus of [`\zeta_1 \div \zeta_2`]? [___________]{$modulus1}
    
    What is the argument of [`\zeta_1 \div \zeta_2`]? [___________]{$argument1->cmp(checker=>$periodic)}
    
    Write [`\zeta_1 \div \zeta_2`] in polar form: [_________________________________]{$polar1->cmp(checker=>$eulerChecker)}



END_PGML

##############################################################
#
#  Answers
#
#



##############################################################
#
#  Hints
#
#


BEGIN_PGML_HINT

* A complex number [`\zeta`] with modulus [`r`] and argument [`\theta`] can be expressed as:

 [`\qquad\qquad \star \quad r(\cos\theta+i\sin\theta) \qquad`]  (the polar form) or

[`\qquad\qquad \star \quad (r\cos\theta)+(r\sin\theta)i \qquad`]  ([`a+bi`] form).

* If [`\color{red}{\zeta_1=r_1(\cos\theta_1+i\sin\theta_1)}`] and [`\color{blue}{\zeta_2=r_2(\cos\theta_2+i\sin\theta_2)}`]  then
>>[`\color{red}{\zeta_1}\div\color{blue}{\zeta_2}=\dfrac{\color{red}{r_1}}{\color{blue}{r_2}}(\cos(\color{red}{\theta_1}-\color{blue}{\theta_2})+i\sin(\color{red}{\theta_1}-\color{blue}{\theta_2}))`]. <<
The modulus of [`\color{green}{\zeta_1\div\zeta_2}`] is  [`\color{green}{\dfrac{r_1}{r_2}}`], and the argument of [`\color{green}{\zeta_1\div\zeta_2}`] is [`\color{green}{\theta_1-\theta_2}`].


END_PGML_HINT

##############################################################
#
#  Solutions
#
#



BEGIN_PGML_SOLUTION

a. [`\color{red}{\zeta_1}`] is a complex number with modulus [`\color{red}{[$modulusProduct]}`] and argument [`\color{red}{[$argumentProduct]^{\circ}}`]. The polar form of [`\color{red}{\zeta_1}`] is [` \color{red}{[$modulusProduct]}(\cos \color{red}{[$argumentProduct]^{\circ}}+i\sin\color{red}{[$argumentProduct]^{\circ}})`].


b. [`\color{blue}{\zeta_2}`] is a complex number with modulus [`\color{blue}{[$modulus2]}`] and argument [`\color{blue}{[$argument2]^{\circ}}`]. The polar form of [`\color{blue}{\zeta_2}`] is [` \color{blue}{[$modulus2]}(\cos \color{blue}{[$argument2]^{\circ}}+i\sin\color{blue}{[$argument2]^{\circ}})`].

c. The modulus of [`\color{green}{\zeta_1 \div \zeta_2}`] is

>> [`|\color{green}{\zeta_1 \div \zeta_2}| = \dfrac{|\color{red}{\zeta_1}|}{ |\color{blue}{\zeta_2}|} = \dfrac{\color{red}{[$modulusProduct]}}{ \color{blue}{[$modulus2]}} =  \color{green}{[$modulus1]}`]<<
    
The argument of [`\color{green}{\zeta_1 \div \zeta_2}`] is

>> [`\arg(\color{green}{\zeta_1 \div \zeta_2}) = \arg(\color{red}{\zeta_1}) - \arg(\color{blue}{\zeta_2}) = \color{red}{[$argumentProduct]^{\circ}} -  \color{blue}{[$argument2]^{\circ}} =  \color{green}{[$argument1]^{\circ}}`] <<
   
    
The polar form of [`\color{green}{\zeta_1 \div \zeta_2}`] is 
[` \color{green}{[$modulus1]}(\cos \color{green}{[$argument1]^{\circ}}+i\sin\color{green}{[$argument1]^{\circ}})`].


END_PGML_SOLUTION


ENDDOCUMENT();        
