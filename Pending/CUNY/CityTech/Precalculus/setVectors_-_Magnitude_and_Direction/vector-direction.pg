##DESCRIPTION
##   
##ENDDESCRIPTION


## DBsubject(Geometry)
## DBchapter(Vector geometry)
## DBsection(Dot product, length, and unit vectors)
## Date(7/30/2002)
## Institution(City Tech)
## Author(K. Andrew Parker)
## MO(1)
## KEYWORDS('algebra', 'inequality', 'fraction')
########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "answerHints.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Vector");

Context()->flags->set(
    reduceConstants=>0, 
    reduceConstantFunctions=>0,
    tolType=>'absolute',
    tolerance=>0.0005);

$close = AnswerHints(
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs($correct-$student) < 0.05 );
    } => ["You're close. Make sure your answer is accurate to three decimal places.",],
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs(180*$student/pi - $correct ) < 0.05 );
    } => ["Please give your answer in degrees instead of radians.",]
);
##############################################
#  Begin trig functions in degrees

Context()->functions->remove("cos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub cos {Parser::Function->call('cos',@_)} 
#  Add the new functions to the Context
Context()->functions->add( cos => {class => 'NewFunc', TeX => '\cos'}, );


Context()->functions->remove("sin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub sin {Parser::Function->call('sin',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sin => {class => 'NewFunc', TeX => '\sin'}, );


Context()->functions->remove("tan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180)/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub tan {Parser::Function->call('tan',@_)}
#  Add the new functions to the Context
Context()->functions->add( tan => {class => 'NewFunc', TeX => '\tan'}, );


Context()->functions->remove("sec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub sec {Parser::Function->call('sec',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sec => {class => 'NewFunc', TeX => '\sec'}, );


Context()->functions->remove("csc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub csc {Parser::Function->call('csc',@_)} 
#  Add the new functions to the Context
Context()->functions->add( csc => {class => 'NewFunc', TeX => '\csc'}, );


Context()->functions->remove("cot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180)/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub cot {Parser::Function->call('cot',@_)}
#  Add the new functions to the Context
Context()->functions->add( cot => {class => 'NewFunc', TeX => '\cot'}, );



#sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))}
#sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])}
#sub atan {CORE::atan2($_[1],1)}
#sub acot {CORE::atan2(1,$_[1])}
#sub asec {acos($_[0],1.0/$_[1])}
#sub acsc {asin($_[0],1.0/$_[1])}


Context()->functions->remove("acos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acos {Parser::Function->call('acos',@_)}
#  Add the new functions to the Context
Context()->functions->add( acos => {class => 'NewFunc', TeX => '\arccos'}, );


Context()->functions->remove("asin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub asin {Parser::Function->call('asin',@_)}
#  Add the new functions to the Context
Context()->functions->add( asin => {class => 'NewFunc', TeX => '\arcsin'}, );


Context()->functions->remove("atan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub atan {Parser::Function->call('atan',@_)}
#  Add the new functions to the Context
Context()->functions->add( atan => {class => 'NewFunc', TeX => '\arctan'}, );


Context()->functions->remove("asec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
#sub asec {acos($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub asec {Parser::Function->call('asec',@_)}
#  Add the new functions to the Context
Context()->functions->add( asec => {class => 'NewFunc', TeX => '\arcsec'}, );


Context()->functions->remove("acsc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
#sub acsc {asin($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub acsc {Parser::Function->call('acsc',@_)}
#  Add the new functions to the Context
Context()->functions->add( acsc => {class => 'NewFunc', TeX => '\arccsc'}, );


Context()->functions->remove("acot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acot {Parser::Function->call('acot',@_)}
#  Add the new functions to the Context
Context()->functions->add( acot => {class => 'NewFunc', TeX => '\arccot'}, );


#  End trig functions in degrees
###################################################

foreach my $i (0..3) {
    my $j = ($i>1)?1:0; # get one vector in each quadrant
    $x[$i] = random(2,15,1)*(-1)**$i;
    $y[$i] = random(2,15,1)*(-1)**$j;
    $vector[$i] = Vector("<$x[$i],$y[$i]>");
    $radicand[$i] = $x[$i]**2 + $y[$i]**2;
    $mag[$i] = Formula("sqrt($radicand[$i])");
    my $adjustQuadrant = ($x[$i]<0)? 1 : 0; # adjust angle for Q2 & Q3
    $dir[$i] = atan($y[$i]/$x[$i]) + 180*$adjustQuadrant;
    $dir[$i] = Real($dir[$i])->with(period=>360);
    $quad[$i] = ($x[$i]>0)? (($y[$i]>0)? "\text{I}" : "\text{IV}" ): (($y[$i]>0)? "\text{II}" : "\text{III}" );
    $adjust[$i] = ($x[$i]>0)? (($y[$i]>0)? "\arctan($y[$i]/$x[$i])" : "\arctan(($y[$i])/$x[$i])" ): (($y[$i]>0)? "\arctan($y[$i]/($x[$i]))+180^{\circ}" : "\arctan(($y[$i])/($x[$i]))+180^{\circ}" );
}


##############################################################
#
#  Text
#
#

BEGIN_PGML

Determine the direction angle (_in degrees_) for each vector:

* Make sure you're using degrees instead of radians.
* If you use a decimal approximation, you must be accurate to at least 3 decimal places.

a. [` [$vector[0]] `] has direction angle: [`\theta = `][__________]{$dir[0]->cmp()->withPostFilter(AnswerHints(
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs($correct-$student) < 0.05 );
    } => ["You're close. Make sure your answer is accurate to three decimal places.",],
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs(180*$student/pi - $correct ) < 0.05 );
    } => ["Please give your answer in degrees instead of radians.",]
))}

b. [` [$vector[1]] `] has direction angle: [`\theta = `][__________]{$dir[1]->cmp()->withPostFilter(AnswerHints(
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs($correct-$student) < 0.05 );
    } => ["You're close. Make sure your answer is accurate to three decimal places.",],
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs(180*$student/pi - $correct ) < 0.05 );
    } => ["Please give your answer in degrees instead of radians.",]
))}

c. [` [$vector[2]] `] has direction angle: [`\theta = `][__________]{$dir[2]->cmp()->withPostFilter(AnswerHints(
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs($correct-$student) < 0.05 );
    } => ["You're close. Make sure your answer is accurate to three decimal places.",],
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs(180*$student/pi - $correct ) < 0.05 );
    } => ["Please give your answer in degrees instead of radians.",]
))}

d. [` [$vector[3]] `] has direction angle: [`\theta = `][__________]{$dir[3]->cmp()->withPostFilter(AnswerHints(
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs($correct-$student) < 0.05 );
    } => ["You're close. Make sure your answer is accurate to three decimal places.",],
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs(180*$student/pi - $correct ) < 0.05 );
    } => ["Please give your answer in degrees instead of radians.",]
))}



END_PGML

##############################################################
#
#  Answers
#
#


##############################################################
#
#  Hints
#
#

BEGIN_PGML_HINT

* Remember that [`\arctan()`] only gives angles in quadrants I and IV.

* How can you adjust the results from [`\arctan()`] to determine angle measures in quadrants II and III?


END_PGML_HINT

##############################################################
#
#  Solutions
#
#


BEGIN_PGML_SOLUTION

a. The vector [` [$vector[0]] `] is in quadrant [`[$quad[0]]`].  
The direction angle of [` [$vector[0]] `] is [`\theta=[$adjust[0]] =  [$dir[0]]^{\circ}`].

a. The vector [` [$vector[1]] `] is in quadrant [`[$quad[1]]`].  The direction angle of [` [$vector[1]] `] is [`\theta = [$adjust[1]] =  [$dir[1]]^{\circ}`].

a. The vector [` [$vector[2]] `] is in quadrant [`[$quad[2]]`].  The direction angle of [` [$vector[2]] `] is [`\theta=[$adjust[2]] =  [$dir[2]]^{\circ}`].

a. The vector [` [$vector[3]] `] is in quadrant [`[$quad[3]]`].  The direction angle of [` [$vector[3]] `] is [`\theta=[$adjust[3]] =  [$dir[3]]^{\circ}`].


END_PGML_SOLUTION





ENDDOCUMENT();        
