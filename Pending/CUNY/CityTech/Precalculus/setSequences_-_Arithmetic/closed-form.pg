##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Algebra')
## DBchapter('Finite sequences and series')
## DBsection('Arithmetic')
## Date('8/15/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->flags->set(reduceConstants=>0, reduceConstantFunctions=>0);
Context()->noreduce('(-x)-y', '(-x)+y');
Context()->variables->are(n=>["Real", resolution=>1, limits=>[0,25]]);

@init = ();
@diff = ();
@n = ();
@th = ();
@seq = ();
@closedForm = ();

$init[0] = random(1,10,1);
$diff[0] = random(2,9,1);
$n[0] = random(9,14,1);

$init[1] = random(-10,-1,1);
$diff[1] = random(2,9,1);
$n[1] = random(20,30,1);

$init[2] = random(1,10,1);
$diff[2] = random(-9,-2,1);
$n[2] = random(30,50,1);

$init[3] = random(-10,-1,1);
$diff[3] = random(-9,-2,1);
$n[3] = random(75,100,1);

foreach my $i (0..3) {
    $seq[$i][0] = ( Real($init[$i]) );
    foreach my $j (1..4) {
        $seq[$i][$j] = Real($init[$i] + $diff[$i]*($j));
    }
    $disp[$i] = List("$seq[$i][0],$seq[$i][1],$seq[$i][2],$seq[$i][3],$seq[$i][4]");
    $ans[$i] = Real($init[$i]+$diff[$i]*($n[$i]-1));
    # 1st, 2nd, 3rd, th
    if ( $n[$i]%10 == 1 && $n[$i] > 20 ) { $th[$i] = "st"; }
    elsif ( $n[$i]%10 == 2 && $n[$i] > 20 ) { $th[$i] = "nd"; }
    elsif ( $n[$i]%10 == 3 && $n[$i] > 20 ) { $th[$i] = "rd"; }
    else { $th[$i] = "th"; }
    $closedForm[$i] = Formula("$init[$i] + $diff[$i]*(n-1)")->reduce;
}

$intro200 = Real(204);

##############################################################
#
#  Text
#
#

BEGIN_PGML

>> ### Closed Form of a Sequence ### <<

A very common way for sequences to be written is as an ordered list of numbers. For example: [`a = 5,6,7,8,9,\dots`]

But this is not very convenient, especially if we need to know the [`200^{th}`] term of this sequence. However, we can use the _pattern_ of the sequence to create a formula that will allow us to avoid writing out all [`199`] terms that come before the term we're looking for. (In this case, we see that the first term is 5, the second is 6, the third is 7... using this pattern, what will the [`200^{th}`] term be? [______]{$intro200})

The _closed form_ of a sequence [`a`] refers to this formula that we can use in order to find *any* term in the sequence. In our example, we should have noticed that the value of each term is four more than the _index_ (or location in the sequence). In other words, our pattern is to add four to the position whose value we want to find. In terms of a formula, this looks like: [`a_n = n + 4`].

We can think of [`a_n`] as very similar to functional notation: [`a(n)`], with 'a' instead of 'f' and 'n' instead of 'x' -- where 'n' is our input, representing the position in the sequence (a.k.a. _index_), and our output is the _value_ that exists at that position of the sequence.

[`a_1`] represents the first term in the sequence ([`n=1`]), [`a_2`] is the second term, [`a_3`] the third, and so on. We can determine the value of each term in the sequence by replacing 'n' with the _index_ of the term we'd like to find. From our example, "the [`7^{th}`] term of [`a_n`]" is [`a_7 = 7 + 4`] or [`11`].

>> #### Practice #### <<

1. [` a = [$disp[0]], \dots `]

    a. Find the closed form: [`a_n = `] [___________________]{$closedForm[0]}
    
    a. Use the closed form to find [` a_{[$n[0]]} = `] [____________________]{$ans[0]}

1. [` b = [$disp[1]], \dots `]

    a. Find the closed form: [`b_n = `] [___________________]{$closedForm[1]}
    
    a. Use the closed form to find [` b_{[$n[1]]} = `] [____________________]{$ans[1]}

1. [` c = [$disp[2]], \dots `]

    a. Find the closed form: [`c_n = `] [___________________]{$closedForm[2]}
    
    a. Use the closed form to find [` c_{[$n[2]]} = `] [____________________]{$ans[2]}

1. [` d = [$disp[3]], \dots `]

    a. Find the closed form: [`d_n = `] [___________________]{$closedForm[3]}
    
    a. Use the closed form to find [` d_{[$n[3]]} = `] [____________________]{$ans[3]}

* Your variable for sequences is [`n`], *not* [`x`].   
* This is because [`n`] represents a position in a sequence - which must be a whole number; whereas [`x`] is a variable that can represent fractions or decimal-values.  
* e.g. "the [`3^{rd}`] element of a sequence" makes sense, while "the [`\pi^{th}`] element" does not.

END_PGML

##############################################################
#
#  Answers
#
#


ENDDOCUMENT();        
