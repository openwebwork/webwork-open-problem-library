##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Algebra')
## DBchapter('Finite sequences and series')
## DBsection('Arithmetic')
## Date('8/15/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->flags->set(reduceConstants=>0, reduceConstantFunctions=>0);
Context()->noreduce('(-x)-y', '(-x)+y');
Context()->variables->are(n=>'Real');

@init = ();
@diff = ();
@n = ();
@th = ();
@seq = ();
@closedForm = ();

$init[0] = random(1,10,1);
$diff[0] = random(2,9,1);
$n[0] = random(9,14,1);

$init[1] = random(-10,-1,1);
$diff[1] = random(2,9,1);
$n[1] = random(20,30,1);

$init[2] = random(1,10,1);
$diff[2] = random(-9,-2,1);
$n[2] = random(30,50,1);

$init[3] = random(-10,-1,1);
$diff[3] = random(-9,-2,1);
$n[3] = random(75,100,1);

foreach my $i (0..3) {
    $seq[$i][0] = ( Real($init[$i]) );
    foreach my $j (1..4) {
        $seq[$i][$j] = Real($init[$i] + $diff[$i]*($j));
    }
    $disp[$i] = List("$seq[$i][0],$seq[$i][1],$seq[$i][2],$seq[$i][3],$seq[$i][4]");
    $ans[$i] = Real($init[$i]+$diff[$i]*($n[$i]-1));
    # 1st, 2nd, 3rd, th
    if ( $n[$i]%10 == 1 && $n[$i] > 20 ) { $th[$i] = "st"; }
    elsif ( $n[$i]%10 == 2 && $n[$i] > 20 ) { $th[$i] = "nd"; }
    elsif ( $n[$i]%10 == 3 && $n[$i] > 20 ) { $th[$i] = "rd"; }
    else { $th[$i] = "th"; }
    $closedForm[$i] = Formula("$init[$i] + $diff[$i]*(n-1)")->reduce;
}



##############################################################
#
#  Text
#
#

BEGIN_PGML

See if you can use the pattern of _common differences_ to find the requested term of each sequence *without* finding all the terms in-between.

1. Find the [`[$n[0]]^{[$th[0]]}`] term in this sequence: [`[$disp[0]] \dots`]: [____________________]{$ans[0]}

1. Find the [`[$n[1]]^{[$th[1]]}`] term in this sequence: [`[$disp[1]] \dots`]: [____________________]{$ans[1]}

1. Find the [`[$n[2]]^{[$th[2]]}`] term in this sequence: [`[$disp[2]] \dots`]: [____________________]{$ans[2]}

1. Find the [`[$n[3]]^{[$th[3]]}`] term in this sequence: [`[$disp[3]] \dots`]: [____________________]{$ans[3]}

END_PGML

##############################################################
#
#  Answers
#
#

BEGIN_PGML_HINT

Think about how many times you'll need to add the common difference to get from the *first* element of the sequence to the one you're after...

END_PGML_HINT


ENDDOCUMENT();        
