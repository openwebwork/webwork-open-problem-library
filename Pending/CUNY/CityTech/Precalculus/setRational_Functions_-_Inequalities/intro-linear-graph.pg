##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Algebra')
## DBchapter('Rational equations and functions')
## DBsection('Rational inequalities')
## Date('7/3/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGgraphmacros.pl",
   "contextFraction.pl",
   "parserMultiAnswer.pl",
   "parserPopUp.pl",
   "scaffold.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Fraction");

$r[0] = non_zero_random(-4,4,1);
do { $r[1] = non_zero_random(-5,5,1); } until ( abs($r[1] -$r[0]) > 1 );

$n = Formula("x-$r[0]")->reduce;
$d = Formula("x-$r[1]")->reduce;
$rational = Formula("$n/$d");

($min,$max) = ($r[0]<$r[1])?($r[0],$r[1]):($r[1],$r[0]);

#graph of rational:
$gr = init_graph(-8,-8,8,8,grid=>[16,16],axes=>[0,0],size=>[400,400]);
add_functions($gr,"$rational for x in <-8,$r[1]> using color:blue and weight:2");
add_functions($gr,"$rational for x in <$r[1],8> using color:blue and weight:2");
($gr->fn)[0]->steps(200);
($gr->fn)[1]->steps(200);
$gr->moveTo($r[1],-8);
$gr->lineTo($r[1],8,'orange',2,'dashed');
$gr->stamps(closed_circle($r[0],0,'orange'));
$gr->stamps(open_circle($r[1],0,'orange'));


#highlight the positive regions
$grPos = init_graph(-8,-8,8,8,grid=>[16,16],axes=>[0,0],size=>[400,400]);
add_functions($grPos,"$rational for x in <-8,$r[1]> using color:blue and weight:2");
add_functions($grPos,"$rational for x in <$r[1],8> using color:blue and weight:2");
($grPos->fn)[0]->steps(200);
($grPos->fn)[1]->steps(200);
$grPos->moveTo($r[1],-8);
$grPos->lineTo($r[1],8,'orange',2,'dashed');

$grPos->moveTo(-8,0);
#$grPos->new_color("darkred",   159, 64, 16); # red-brown
$grPos->lineTo($min,0,'green',4);
$grPos->moveTo($max,0);
$grPos->lineTo(8,0,'green',4);
$grPos->stamps(closed_circle($r[0],0,'orange'));
$grPos->stamps(open_circle($r[1],0,'orange'));

#highlight the negative regions
$grNeg = init_graph(-8,-8,8,8,grid=>[16,16],axes=>[0,0],size=>[400,400]);
add_functions($grNeg,"$rational for x in <-8,$r[1]> using color:blue and weight:2");
add_functions($grNeg,"$rational for x in <$r[1],8> using color:blue and weight:2");
($grNeg->fn)[0]->steps(200);
($grNeg->fn)[1]->steps(200);
$grNeg->moveTo($r[1],-8);
$grNeg->lineTo($r[1],8,'orange',2,'dashed');

$grNeg->moveTo($max,0);
$grNeg->lineTo($min,0,'red',4);
$grNeg->stamps(closed_circle($r[0],0,'orange'));
$grNeg->stamps(open_circle($r[1],0,'orange'));

$grDom = init_graph(-8,-1,8,1, size=>[544,68]);
# x-axis
$grDom -> moveTo(-8,0);
$grDom -> lineTo(8,0,'black','1');
# x-axis ticks entered as y-value, color, list of x-values
$grDom -> h_ticks(0,"black",-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7);
# labels for tickmarks
foreach my $j (0..7) {
    $grDom->lb( new Label($j,-0.5,$j, 'black','center','middle'));
    $grDom->lb( new Label(-$j,-0.5,-$j, 'black','center','middle'));
}
$firstMid = (-8+$min)/2;
$secondMid = ($min+$max)/2;
$thirdMid = ($max+8)/2;
$grDom->lb( new Label($firstMid,0.5,"(-inf,$min)",'black','center','middle'));
$grDom->lb( new Label($secondMid,0.5,"($min,$max)",'black','center','middle'));
$grDom->lb( new Label($thirdMid,0.5,"($max,inf)",'black','center','middle'));
$grDom->stamps(closed_circle($r[0],0,'orange'));
$grDom->stamps(open_circle($r[1],0,'orange'));

$grDom2 = init_graph(-8,-1,8,1, size=>[544,68]);
# x-axis
$grDom2 -> moveTo(-8,0);
$grDom2 -> lineTo(8,0,'black','1');
# x-axis ticks entered as y-value, color, list of x-values
$grDom2 -> h_ticks(0,"black",-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7);
# labels for tickmarks
foreach my $j (0..7) {
    $grDom2->lb( new Label($j,-0.5,$j, 'black','center','middle'));
    $grDom2->lb( new Label(-$j,-0.5,-$j, 'black','center','middle'));
}
$grDom2->moveTo(-8,0);
$grDom2->lineTo($min,0,'green',3);
$grDom2->lineTo($max,0,'red',3);
$grDom2->lineTo(8,0,'green',3);
$grDom2->lb( new Label($firstMid,0.5,"positive",'green','center','middle'));
$grDom2->lb( new Label($secondMid,0.5,"negative",'red','center','middle'));
$grDom2->lb( new Label($thirdMid,0.5,"positive",'green','center','middle'));
$grDom2->moveTo($r[0],0.55);
$grDom2->lineTo($r[0],0,'orange',1);
$grDom2->stamps(closed_circle($r[0],0,'orange'));
$grDom2->lb( new Label($r[0],0.75,"root",'orange','center','middle'));
$grDom2->moveTo($r[1],0.55);
$grDom2->lineTo($r[1],0,'orange',1);
$grDom2->stamps(open_circle($r[1],0,'orange'));
$grDom2->lb( new Label($r[1],0.75,"asymptote",'orange','center','middle'));

do { $x1 = Real(random(-8,$min,1)); } until ( $x1 != $r[1] && $x1 != $r[0] );
$y1 = Fraction($n->eval(x=>$x1),$d->eval(x=>$x1));
$pn1 = PopUp(["?","Positive","Negative"],"Positive");
$xy1 = MultiAnswer($x1,$y1)->with(
    singleResult=>1, 
    checkTypes=>0,
    format=>'f(%1$s)=%2$s',
    tex_format=>'f(%1$s)=%2$s',
    checker=> sub {
        my ($correct, $student, $self) = @_;
        my ($x,$y) = @{$student};
        Value::Error("You should select a number for your x-value.") unless ($x->type eq "Number");
        Value::Error("f($x) should be a number.") unless ($y->type eq "Number");
        $self->setMessage(1,"You need to select an x-value less than $min for this interval.") unless ($x < $min);
        $self->setMessage(2,"You have incorrectly evaluated f($x).") unless( $y == $rational->eval(x=>$x));
        return ($x < $min, $x< $min && $y == $rational->eval(x=>$x));
    });

do { $x2 = Real(random($min,$max,1)); } until ( $x2 != $r[1] && $x2 != $r[0] );
$y2 = Fraction($n->eval(x=>$x2),$d->eval(x=>$x2));
$pn2 = PopUp(["?","Positive","Negative"],"Negative");
$xy2 = MultiAnswer($x2,$y2)->with(
    singleResult=>1, 
    checkTypes=>0,
    format=>'f(%1$s)=%2$s',
    tex_format=>'f(%1$s)=%2$s',
    checker=> sub {
        my ($correct, $student, $self) = @_;
        my ($x,$y) = @{$student};
        Value::Error("You should select a number for your x-value.") unless ($x->type eq "Number");
        Value::Error("f($x) should be a number.") unless ($y->type eq "Number");
        $self->setMessage(1,"You need to select an x-value between $min and $max for this interval.") unless ($x > $min && $x < $max);
        $self->setMessage(2,"You have incorrectly evaluated f($x).") unless( $y == $rational->eval(x=>$x));
        return ($x > $min && $x < $max, $x > $min && $x < $max && $y == $rational->eval(x=>$x));
    });

do { $x3 = Real(random($max,8,1)); } until ( $x3 != $r[1] && $x3 != $r[0] );
$y3 = Fraction($n->eval(x=>$x3),$d->eval(x=>$x3));
$pn3 = PopUp(["?","Positive","Negative"],"Positive");
$xy3 = MultiAnswer($x3,$y3)->with(
    singleResult=>1, 
    checkTypes=>0,
    format=>'f(%1$s)=%2$s',
    tex_format=>'f(%1$s)=%2$s',
    checker=> sub {
        my ($correct, $student, $self) = @_;
        my ($x,$y) = @{$student};
        Value::Error("You should select a number for your x-value.") unless ($x->type eq "Number");
        Value::Error("f($x) should be a number.") unless ($y->type eq "Number");
        $self->setMessage(1,"You need to select an x-value greater than $max for this interval.") unless ($x > $max);
        $self->setMessage(2,"You have incorrectly evaluated f($x).") unless( $y == $rational->eval(x=>$x));
        return ($x > $max, $x > $max && $y == $rational->eval(x=>$x));
    });

##############################################################
#
#  Text
#
#

BEGIN_PGML

>> ### Solving Rational Inequalities ### <<

Looking at solving inequalities with rational functions:

[`\displaystyle f(x) = [$rational]`]

The graph of [`y=f(x)`] looks like:

>> [@ image( insertGraph($gr), width=>400, height=>400, tex_size=>800 ) @]* <<

We should notice that our rational function's output ([`y`]_-value_) may change from positive to negative (or vice versa) *only when* the function has a _root_ or an _asymptote_.

If we're looking at "solving" for when our rational function is positive or negative, we only need to look at our set of inputs (_domain_). 

If we view the domain as separate intervals, split up at any [`x`]-values where our function has either a _root_ or an _asymptote_, we know that the function *must* be either _positive_ or _negative_ for the *entire* interval (since our function may only "change signs" at a root or asymptote).

>> [@ image( insertGraph($grDom), width=>544, height=>68, tex_size=>800 ) @]* <<

Because our function must be either positive or negative for each separate interval, we only need to "test" our function for one value in each separate interval. 

END_PGML

Scaffold::Begin();
Section::Begin("Test each interval");

BEGIN_PGML
a. Select an [`x`]-value in the first interval, [`(-\infty,[$min])`]: [_____]{$xy1}  

    Evaluate the function [`f(x)`] at your selected [`x`]-value: [_____]{$xy1}  
    
    Will [`f(x)`] be positive or negative on the first interval? [_]{$pn1}
    
b. Select an [`x`]-value in the second interval, [`([$min],[$max])`]: [_____]{$xy2}  

    And evaluate the function [`f(x)`] at your selected [`x`]-value: [_____]{$xy2}  
    
    Will [`f(x)`] be positive or negative on the second interval? [_]{$pn2}
    
c. Select an [`x`]-value in the third interval, [`([$max],\infty)`]: [_____]{$xy3}  

    And evaluate the function [`f(x)`] at your selected [`x`]-value: [_____]{$xy3}  
    
    Will [`f(x)`] be positive or negative on the third interval? [_]{$pn3}

END_PGML
Section::End();

Section::Begin("Solve inequalities by interpreting your results");

Context("Interval");
$lt = Interval("($min,$max)");
$gt = Interval("(-inf,$min)U($max,inf)");

$leq = ($min==$r[1])?Interval("($min,$max]"):Interval("[$min,$max)");
$geq = ($min==$r[1])?Interval("(-inf,$min)U[$max,inf)"):Interval("(-inf,$min]U($max,inf)");

BEGIN_PGML

>> [@ image( insertGraph($grDom2), width=>544, height=>68, tex_size=>800 ) @]* <<

a. On what interval(s) will [` \displaystyle [$rational] > 0 `]? [_______________]{$gt}

a. On what interval(s) will [` \displaystyle [$rational] < 0 `]? [_______________]{$lt}

a. On what interval(s) will [` \displaystyle [$rational] \geq 0 `]? [_______________]{$geq}

a. On what interval(s) will [` \displaystyle [$rational] \leq 0 `]? [_______________]{$leq}

* Type "inf" and "-inf" for [`\infty`] and [`-\infty`], respectively.
* Type the capital letter "U" to represent the union symbol [`\cup`].



END_PGML
Section::End();
Scaffold::End();
##############################################################
#
#  Answers
#
#

BEGIN_PGML_SOLUTION

the _output_ from our rational function is *positive* for the green values of [`x`]:

>> [@ image( insertGraph($grPos), width=>400, height=>400, tex_size=>800 ) @]* <<

while the _output_ from our rational function is *negative* for the red values of [`x`]:

>> [@ image( insertGraph($grNeg), width=>400, height=>400, tex_size=>800 ) @]* <<

END_PGML_SOLUTION

ENDDOCUMENT();        
