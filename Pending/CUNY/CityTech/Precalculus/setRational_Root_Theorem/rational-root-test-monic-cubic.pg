##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION


## DBsubject(Algebra)
## DBchapter(Polynomial equations and functions)
## DBsection(Remainder and factor theorems)
## Date(6/23/2018)
## Institution(City Tech)
## Author(K. Andrew Parker)
## MO(1)
## TitleText1('')
## AuthorText1('')
## EditionText1('')
## Section1('.')
## Problem1('22')
## KEYWORDS('algebra', 'inequality', 'fraction')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "parserPopUp.pl",
   "scaffold.pl",
   "contextLimitedFactor.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->flags->set(reduceConstants=>0, reduceConstantFunctions=>0);
Context()->noreduce('(-x)-y');

# (x - p1)(quadratic with +/- 1 as constant term, p2 for more challenge.)
$p1 = random(-1,1,2)*list_random(2,3,5,7);
do { $p2 = random(-1,1,2)*list_random(5,7,11); } until ( abs($p1) != abs($p2) );
$p12 = $p1*$p2;
$p1abs = abs($p1);
$p2abs = abs($p2);

# numlist = 1, p1
# denlist = 1, qA

$div = Formula("x-$p1")->reduce;

$qA = 1;
#do { $qA = random(2,3,1); } until ( $qA != $p1abs );
$qC = random(-1,1,2); # keep the roots list reasonable to manage... 
# *$p2 for even more challenging problem - add roots to list below...
# would require modifications to $rootList below
do { $qB = random(-1,1,2)*random(7,15,1); } until ( ($qB)**2 > 4*$qA*$qC );

$qPoly = Formula("$qA x^2 + $qB x + $qC")->reduce;

$qDisc = ($qB)**2-4*$qA*$qC;
$qnB = -$qB;
$q2A = 2*$qA;
$qr1 = Formula("($qnB + sqrt($qDisc))/$q2A");
$qr2 = Formula("($qnB - sqrt($qDisc))/$q2A");
$qRoots = List($qr1,$qr2);

$polyA = $qA;
$polyB = -$qA*$p1 + $qB;
$polyC = -$qB*$p1 + $qC;
$polyD = -$qC*$p1;

$poly = Formula("$polyA x^3 + $polyB x^2 + $polyC x + $polyD")->reduce;

$rootList = List(
    Real("1"), Real("-1"),
    Real("$p1abs"), Real("-$p1abs"),
    );

    
##############################################################
#
#  Text
#
#
Scaffold::Begin();
Section::Begin("Part 1: Identifying possible rational roots");
BEGIN_PGML

Given the polynomial [` \color{blue}{y = [$poly]} `],

* list the possible rational roots:    
    [______________________________________________________________________]{$rootList}.

* Of these possible roots, [`x=`][_____]{Real($p1)} is an _actual_ root.

* Therefore, [__________]{$div} is a factor of [`\color{blue}{[$poly]}`].

END_PGML
Section::End();

Section::Begin("Part 2: Factoring out the known factor");
Context("LimitedFactor");
$polyFac = Formula("$div * $qPoly");

$factorCheck = sub {
    my ($correct,$student,$ans) = @_;
    delete $correct->{test_values};
    delete $student->{test_values};
    return 0 if $ans->{isPreview}; 
    Value::Error("Your answer is not equivalent to the original polynomial. <BR> Double-check your factoring.") if $correct != $student;
    $student = $ans->{student_formula};
    $correct = $correct->{original_formula} if defined $correct->{original_formula};
    # check for equivalence when bizarro arithmetic is enforced
    Context()->flags->set(bizarroSub=> 1,bizarroAdd=> 1, bizarroDiv=> 1);
    delete $correct->{test_values};
    delete $student->{test_values};
    my $OK = ($correct == $student); # check if equal when arithmetic is replace by bizarro arithmetic
    Context()->flags->set(bizarroSub=> 0,bizarroAdd=> 0, bizarroDiv=> 0);
    delete $correct->{test_values};
    delete $student->{test_values};
    $factorableObject = Context()->flag("factorableObject");
    Value::Error("Your answer is equivalent to the $factorableObject in the correct answer, but not completely factored or simplified") unless $OK;
    return $OK;
  };


BEGIN_PGML

Now that we've identified [`\color{red}{[$div]}`] as a factor of [`\color{blue}{[$poly]}`], we must determine what [`\color{blue}{[$poly]}`] looks like once we've factored out [`\color{red}{[$div]}`].

What is the quotient of [`\color{blue}{([$poly])} \div \color{red}{([$div])}`]? [_____________]{$qPoly}

Now write [`\color{blue}{[$poly]}`] in factored form: [____________________]{$polyFac->cmp(checker=>$factorCheck)}

END_PGML
Section::End();

Section::Begin("Part 3: Finding the remaining roots");
BEGIN_PGML

Cubic polynomials should have three roots, we've determined already that [`\color{red}{x=[$p1]}`] is one of those roots.

What are the remaining two? We need to look at the other factor: [`\color{brown}{[$qPoly]}`].

What are the remaining two roots? [_______________]{$qRoots}

END_PGML
Section::End();
Scaffold::End();

BEGIN_PGML

List all roots of the given polynomial in exact form:  
    [_________________________]{List(Real($p1),$qr1,$qr2)}

END_PGML

##############################################################
#
#  Answers
#
#

##############################################################
#
#  Hints
#
#



BEGIN_PGML_HINT

*Part 1:*
    
    
* What is the _leading coefficient_ of your polynomial?

* Find all factors of the leading coefficient.  These numbers are possible _denominators_ of the roots.

* What is _the constant term_ of your polynomial?

* Find all factors of the constant term. These numbers are possible  _numerators_ of the roots.

* Remember that a factor can be either _positive_ or _negative_.

* Which two numbers are always factors?

* For the list of possible rational roots, consider _each_ possible numerator over _each_ possible denominator. Simplify all your answers.

* Recall that, for an [`x`]-value, "being a root" means that evaluating the polynomial at this [`x`]-value yields a result of zero.

* If [`r`] is a root of [`f(x)`] then [`x-r`] is a factor of [`f(x)`]; otherwise, [`x-r`] is not a factor of [`f(x)`].

*Part 2:*

* If [`x-r`] is a factor of [`f(x)`], then the remainder of the division of 
[`f(x)`] by [`x-r`] is zero.  This means that [`f(x)=(x-r)\cdot g(x)`] where 
[`g(x)`] is the quotient of this division.  In this case, [`(x-r)\cdot g(x)`] is  a factored form of [`f(x)`].

*Part 3:*

* We know that if [`r`] is a root of [`f(x)`] then [`f(x)=(x-r)\cdot g(x)`] for some polynomial [`g(x)`]. To search for the other roots of [`f(x)`], we need to find the roots of the factor [`g(x)`]. For instance, you can use the quadratic formula.


END_PGML_HINT

##############################################################
#
#  Solutions
#
#




BEGIN_PGML_SOLUTION
    
*Part 1:*

Given the polynomial [` y = [$poly] `],

The constant term is [`[$polyD]`].  The possible numerators for rational roots are the factors of [`[$polyD]`] which are [`-1,1,-[$p1abs],[$p1abs]`].

The leading coefficient is [`[$polyA]`]. The possible denominators for rational roots are the factors of [`[$polyA]`] which are [` -1, 1, -[$qA],[$qA]`].
    
* The possible rational roots are [`\displaystyle{[$rootList]}`].

* Of these possible roots, [`x= [$p1]`] is an _actual_ root.

* Therefore, [`[$div]`] is a factor of [`[$poly]`].


*Part 2:*

The quotient of [`([$poly]) \div ([$div])`] is [`[$qPoly]`].

Writing [`[$poly]`] in factored form: [`[$polyFac]`].
   
*Part 3:*

The two other roots are the roots of [`[$qPoly]`].  Using the quadratic formula, we have that the remaining roots are [`[$qRoots]`].

END_PGML_SOLUTION








ENDDOCUMENT();
