##DESCRIPTION
##  Trigonometry problem: Solve a trig equation
##ENDDESCRIPTION


## DBsubject(Trigonometry)
## DBchapter(Analytic trigonometry)
## DBsection(Solving trigonometric equations exactly)
## Institution(CUNY City Tech)
## Author(K. Andrew Parker)
## Level(2)
## Language(en)
## MO(1)
## KEYWORDS('trigonometry', 'trig functions', 'trigonometric functions', 'analytic trigonometry', 'trigonometric equation')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->flags->set(
  reduceConstants=>0,
  reduceConstantFunctions=>0
);

Parser::Number::NoDecimals();
Context()->{error}{msg}{"You are not allowed to type decimal numbers in this problem"} 
  = "Please state your answer in radians, using fractions of 'pi' rather than decimal approximations.";


%unit = (
  6 => {
    x => Formula("sqrt(3)/2"),
    nx => Formula("-sqrt(3)/2"),
    y => Formula("1/2"),
    ny => Formula("-1/2"),
    t => Formula("1/sqrt(3)"),
    nt => Formula("-1/sqrt(3)"),
  },
  3 => {
    x => Formula("1/2"),
    nx => Formula("-1/2"),
    y => Formula("sqrt(3)/2"),
    ny => Formula("-sqrt(3)/2"),
    t => Formula("sqrt(3)"),
    nt => Formula("-sqrt(3)")
  },
  4 => {
    x => Formula("sqrt(2)/2"),
    nx => Formula("-sqrt(2)/2"),
    y => Formula("sqrt(2)/2"),
    ny => Formula("-sqrt(2)/2"),
    t => Formula("1"),
    nt => Formula("-1")
  }
);

# choose reference angle and generate necessary secondary numerators
$denom = list_random(3,4,6);
$dminus1 = $denom-1;
$dplus1 = $denom+1;
$twodminus1 = 2*$denom-1;

# hash to provide principal solutions in [0,2pi)
# $principal{$trigFunction}{$isPositive}
%principal = (
  sin => {
    1 => Formula("pi/$denom"),
    0 => Formula("$twodminus1 pi/$denom"), # or -pi/$denom outside [0,2pi)
  },
  cos => {
    1 => Formula("pi/$denom"),
    0 => Formula("$dminus1 pi/$denom"),
  },
  tan => {
    1 => Formula("pi/$denom"),
    0 => Formula("$twodminus1 pi/$denom"),  # or -pi/$denom outside [0,2pi)
  }
);

# hash to provide secondary solutions in [0,2pi)
# $secondary{$trigFunction}{$isPositive}
%secondary = (
  sin => {
    1 => Formula("$dminus1 pi/$denom"),
    0 => Formula("$dplus1 pi/$denom"),
  },
  cos => {
    1 => Formula("$twodminus1 pi/$denom"),
    0 => Formula("$dplus1 pi/$denom"),
  },
  tan => {
    1 => Formula("$dplus1 pi/$denom"),
    0 => Formula("$dminus1 pi/$denom"),
  }
);

# for generating a hashkey
@select = ( [ '0', 'y', 'y', 'ny', 'ny' ],
  [ 'x', 'x', 'nx', 'nx', 'x' ],
  [ '0', 't', 'nt', 't', 'nt' ] 
);

### Randomly select quadrant and trig function to use
$quad = random(1,4,1);
@trig = ("sin","cos","tan");
@trigFull = ("sine", "cosine", "tangent");
$function = random(0,2,1);
$trigFunction = $trigFull[$function];


### Generate a hash key for retrieving result from unit circle hash
$hashKey = $select[$function][$quad];

### Select the appropriate numerator for reference angle and generate answer
@num = ( 0, 1, "$denom-1", "$denom+1", "2*$denom -1" );
$numer = Formula("$num[$quad]")->reduce;
$angle = Formula("$numer pi / $denom");

### Pull the proper ratio from the unit circle hash and generate coefficients
### Pull the proper ratio from the unit circle hash and generate coefficients
$ratio = Formula("$unit{$denom}{$hashKey}");
$A = Formula($ratio->{tree}{rop}) || Real(1);
$B = Formula($ratio->{tree}{lop}) || $ratio;

$LHS = ($A==1)?Formula("$trig[$function](x) - $B"):Formula("$A $trig[$function](x) - $B");

#$LHS = Formula("$A $trig[$function](x)")->reduce;
#$LHS = Formula("$LHS - $B");
$RHS = Formula("0");

$isPos = ($ratio > 0) ? 1 : 0;
$ans = List(Formula("$principal{$trig[$function]}{$isPos}"), Formula("$secondary{$trig[$function]}{$isPos}"));

$periodicCheck = sub {
     my ($correct,$student,$ansHash,$value) = @_;
     my $n = scalar(@$student);  # number of student answers
     my $score = 0;              # number of correct student answers
     my @errors = ();            # stores error messages
     my $i, $j;                  # loop counters
   
     #
     #  Loop though the student answers
     ##
     for ($i = 0; $i < $n; $i++) {
       my $ith = Value::List->NameForNumber($i+1);
       my $p = $student->[$i];   # i-th student answer
       #
       #  Check that the student's answer is a number
       #
       if ($p->type ne "Number") {
          push(@errors,"Your $ith entry is not a number");
          next;
       }
       #
       #  Make sure that student's answer is not in [0,2pi)
       #
       if ($p >= 0 && $p < 2*pi) {
          push(@errors,"Your $ith entry is between 0 and 2\(\pi\).");
          next;
       }
       #
       #  Check that the value hasn't been given before
       #
       for ($j = 0, $used = 0; $j < $i; $j++) {
         if ($student->[$j]->type eq "Number" && $student->[$j] == $p) {
           push(@errors,"Your $ith value is the same as a previous one") unless $ansHash->{isPreview};
           $used = 1; last;
         }
       }
       #
       #  If not already used, check that it satisfies the equation
       #    and increase the score if so.
       #
       if (!$used) {
         #my $theta = $p->value;
         if ( $LHS->eval(x=>$p) == $RHS) {$score++} else {
           push(@errors,"Your $ith value is not a valid solution to the equation.") unless $ansHash->{isPreview}
         }
       }
     }
     #
     #  Check that there are the right number of answers
     #
     if (!$ansHash->{isPreview}) {
       push(@errors,"You need to provide more solutions") if $i < 4;
       # push(@errors,"You have given too many solutions") if $score > 4 && $i != $score;
     }
     return ($score,@errors);
   };
 
$periodic = List(
    Formula("$principal{$trig[$function]}{$isPos} + 2 pi"),
    Formula("$secondary{$trig[$function]}{$isPos} + 2 pi"),
    Formula("$principal{$trig[$function]}{$isPos} + 4 pi"),
    Formula("$secondary{$trig[$function]}{$isPos} + 4 pi")
    );
    
##############################################################
#
#  Text
#
#

BEGIN_PGML

>> [`` \large [$LHS] = [$RHS] ``] <<

List all solutions in [`[0,2 \pi)`]:

    [`x = `] [__________]{$ans}

* Give your answer in radians.
* Separate multiple solutions with commas.
* Do not use decimal approximations. Use 'pi' to represent [` \pi `].

Use the periodicity of [$trigFunction] to find at least 4 more solutions to the equation: 

    [`x = `] [____________________]{$periodic->cmp(entry_type => "a value", list_checker=>$periodicCheck)}

* Solutions between 0 and 2[`\pi`] belong in the first answer.
* Your four additional solutions should not be between 0 and 2[`\pi`]. 

END_PGML

BEGIN_PGML_HINT

* Recall that trig equations are equations of the form [`\tan(x)=A`], [`\cos(x)=B`] and [`\sin(x)=C`].
* Rewrite the given equation as a trig equation first.



END_PGML_HINT

COMMENT("Funded by US DoE Title V: Opening Gateways grant.");

ENDDOCUMENT();        

