##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS()

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Definition, concept')
## Date('6/4/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')
## TitleText1('Precalculus')


########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->noreduce('(-x)-y');
Context()->variables->add(a=>Real);

$f1 = random(-1,1,2)*random(2,8,1);
$f2 = non_zero_random(-15,15,1);
$f = Formula("$f1 x + $f2")->reduce;


$g1 = random(2,5,1);
$g2 = non_zero_random(-8,8,1);
$g3 = non_zero_random(-15,15,1);
$g = Formula("$g1 x^2 + $g2 x + $g3")->reduce;

 
$ax = random(3,9,1);
$bx = random(-9,-2,1);
$cx = random(2,8,1);
$dx = random(-8,-2,1);

$fax = $f->eval(x=>$ax);
$fbx = $f->eval(x=>$bx);
$gcx = $g->eval(x=>$cx);
$gdx = $g->eval(x=>$dx);
$ga = $g->substitute(x=>a);

# Steps in the solution
$faxm = Formula("$f1 * $ax")-> reduce;
$fbxm = Formula("$f1 * $bx")-> reduce;
$gcxm2 = Formula("$g2 * $cx")-> reduce;
$gcxm1 = Formula("$g1 * ($cx)^2")-> reduce;
$gdxm2 = Formula("$g2 * $dx")-> reduce;
$gdxm1 = Formula("$g1 * ($dx)^2")-> reduce;



Context("LimitedNumeric");
Context()->{error}{msg}{"Can't use '+' in this context"} 
  = "Addition is disabled for this problem. Simplify the sum and resubmit your answer.";
Context()->{error}{msg}{"Can't use '-' in this context"} 
  = "Subtraction is disabled for this problem. Simplify the difference and resubmit your answer.";
Context()->{error}{msg}{"Can't use '*' in this context"} 
  = "Multiplication is disabled for this problem. Simplify the product and resubmit your answer.";
Context()->{error}{msg}{"Can't use '/' in this context"} 
  = "Division is disabled for this problem. Simplify the quotient and resubmit your answer.";
Context()->{error}{msg}{"Can't use '^' in this context"} 
  = "Exponents are disabled for this problem. Compute the result for yourself and resubmit your answer.";
Context()->{error}{msg}{"Can't use '**' in this context"} 
  = "Exponents are disabled for this problem. Compute the result for yourself and resubmit your answer.";

$fax = Real($fax);
$fbx = Real($fbx);
$gcx = Real($gcx);
$gdx = Real($gdx);

##############################################################
#
#  Text
#
#

BEGIN_PGML
  
>> ### Introduction to Functions ### <<

We usually define [`y`] (the _dependent_ variable) in terms of [`x`] (the _independent_ variable), like so:  
>> [` y = 3x - 5 `] <<

It is understood that the value of [`y`] _depends_ on the value of [`x`]. Specifically, [`y`] is five less than the product of three and [`x`]. Here, [`x`] takes the role of "_input_" and [`y`] takes the role of "_output_".

But what about when we have more than one definition for [`y`]? Maybe we'd like to consider [` y = x^2 + 3x + 4 `] in addition to having [` y = 3x - 5 `].

This is part of the reason for functional notation. Instead of using the dependent variable [`y`], we instead use the notation [`f(x)`]. This means we can describe multiple "functions" at the same time, like so:  
>> [` f(x) = 3x - 5 `] <<  
>> [` g(x) = x^2 + 3x + 4 `] <<  

Now, if we want to discuss the "_output_" when the "_input_" is [`2`] (in other words, when [`x=2`]), we can use the letters "[`f`]" or "[`g`]" to specify which equation we are intending to substitute [`x=2`] into. 

Functional notation also simplifies this idea of "plugging in [`x=2`]" as we don't need to say "find [`y`] when [`x=2`]" anymore.  
Instead, writing [`f(2)`] expresses the same idea - specifically, we're taking [`f(x)`] and replacing [`x`] with [`2`], like so:  
>> [`f(2) = 3(2) - 5 `] <<

Notice that it looks _exactly_ like [`f(x)`], except that all the [`x`]'s have been replaced with [`2`]'s.  
Furthermore, we can simplify [`f(2) = 3(2) - 5`] as [`f(2) = 6 - 5`], and finally [`f(2) = 1`].  
In other words, the output of [`f(x)`] is [`1`] when the input is [`2`].

Doing the same for [`g(x)`], for example [`g(-1)`] means we want the _output_ of [`g(x)`] when [`x`] is replaced by [`-1`], like so:  
>> [` g(-1) = (-1)^2 + 3(-1) + 4 `] <<

Again, we can simplify to see that [`g(-1) = 1 - 3 + 4`], so [`g(-1) = 2`]. In other words, the output of [`g(x)`] is [`2`] when the input is [`-1`].


>> #### Practice #### <<



Use the functions [`f(x)= [$f]`] and [`g(x)= [$g]`] to evaluate the following:
a. [` f([$ax]) = `][_____________________________]{$fax}
b. [` f([$bx]) = `][_____________________________]{$fbx}
c. [` g([$cx]) = `][_____________________________]{$gcx}
d. [` g([$dx]) = `][_____________________________]{$gdx}
e. [` g(a) = `][_____________________________]{$ga}

END_PGML

##############################################################
#
#  Answers
#
#

##############################################################
#
#  Hints
#
#



BEGIN_PGML_HINT

* Which *function* do you want to evaluate?

* What is your *input*?

* Take your function and replace *each [`x`]* by your input.

* The result is your *output*.

* Simplify your output, if necessary.

END_PGML_HINT

##############################################################
#
#  Solutions
#
#





BEGIN_PGML_SOLUTION
    
a. We want to evaluate the function [`f(x)= [$f]`] for [`x=[$ax]`].

    >>[` f([$ax]) \quad\longrightarrow\quad  [$f1] ([$ax]) + [$f2] \quad\longrightarrow\quad [$faxm] + [$f2] \quad\longrightarrow\quad [$fax] `]<<
    
b. We want to evaluate the function [`f(x)= [$f]`] for [`x=[$bx]`].

    >>[` f([$bx]) \quad\longrightarrow\quad  [$f1] ([$bx]) + [$f2] \quad\longrightarrow\quad [$fbxm] + [$f2] \quad\longrightarrow\quad [$fbx] `]<<
    
c. We want to evaluate the function [`g(x)= [$g]`] for [`x=[$cx]`].

    >>[` g([$cx]) \quad\longrightarrow\quad  [$g1] ([$cx])^2 + [$g2] ([$cx]) + [$g3] \quad\longrightarrow\quad [$gcxm1] + ([$gcxm2]) + [$g3] \quad\longrightarrow\quad [$gcx] `]<<
    
d. We want to evaluate the function [`g(x)= [$g]`] for [`x=[$dx]`].

    >>[` g([$dx]) \quad\longrightarrow\quad  [$g1] ([$dx])^2 + [$g2] ([$dx]) + [$g3] \quad\longrightarrow\quad  [$gdxm1] + ([$gdxm2]) + [$g3]  \quad\longrightarrow\quad [$gdx] `]<<
    
e. We want to evaluate the function [`g(x)= [$g]`] for [`x=a`].

    >>[` g(a) \quad\longrightarrow\quad  [$ga] `]<<






END_PGML_SOLUTION

ENDDOCUMENT();        
