##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS()

## DBsubject('Algebra')
## DBchapter('Algebra of real numbers and simplifying expressions')
## DBsection('Inequalities and intervals')
## Date('6/29/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')
## TitleText1('Precalculus')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGgraphmacros.pl",
   "PGML.pl",
   "contextInequalities.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#



Context("Interval");

%prob = ();
$int = ();
foreach my $i (0..4) {
    my $a = non_zero_random(-8,8,1);
    my $b = non_zero_random(-8,8,1);
    do { $b = non_zero_random(-8,8,1); } until ( $a != $b );
    $prob{$i}{lb} = ($a < $b)? $a : $b ; # left bound
    $prob{$i}{rb} = ($a > $b)? $a : $b ; # right bound
    $prob{$i}{le} = random(0,1,1); # lower bound equality?
    $prob{$i}{re} = random(0,1,1); # right bound equality?
    if ($prob{$i}{le}==1) {
        $int[$i] = ($prob{$i}{re}==1)?Interval("[$prob{$i}{lb},$prob{$i}{rb}]"):Interval("[$prob{$i}{lb},$prob{$i}{rb})");
    } else {
        $int[$i] = ($prob{$i}{re}==1)?Interval("($prob{$i}{lb},$prob{$i}{rb}]"):Interval("($prob{$i}{lb},$prob{$i}{rb})");

    };
}

Context("Inequalities");

@ineq = ();
foreach my $i (0..4) {
    $ineq[$i] = Inequality($int[$i]);
}

Context("Numeric");

# Graphs for exercises
foreach my $i (0..4) {
    $gr[$i] = init_graph(-9,-1,9,1, size=>[612,68]);
    # x-axis
    $gr[$i] -> moveTo(-9,0);
    $gr[$i] -> lineTo(9,0,'black','1');
    # x-axis ticks entered as y-value, color, list of x-values
    $gr[$i] -> h_ticks(0,"black",-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8);
    # labels for tickmarks
    foreach my $j (0..8) {
        $gr[$i]->lb( new Label($j,-0.5,$j, 'black','center','middle'));
        $gr[$i]->lb( new Label(-$j,-0.5,-$j, 'black','center','middle'));
    }
    $gr[$i] -> moveTo($prob{$i}{lb},0);
    $gr[$i] -> lineTo($prob{$i}{rb},0,'blue',3);
    if ( $prob{$i}{le} == 1 ) {
        $gr[$i] -> stamps( closed_circle($prob{$i}{lb},0,'blue') );
    } else {
        $gr[$i] -> stamps( open_circle($prob{$i}{lb},0,'blue') );
    };
    if ( $prob{$i}{re} == 1 ) {
        $gr[$i] -> stamps( closed_circle($prob{$i}{rb},0,'blue') );
    } else {
        $gr[$i] -> stamps( open_circle($prob{$i}{rb},0,'blue') );
    };
}

# Graph for example

foreach my $i (5) {
    $gr[$i] = init_graph(-6,-1,6,1, size=>[408,68]);
    # x-axis
    $gr[$i] -> moveTo(-6,0);
    $gr[$i] -> lineTo(6,0,'black','1');
    # x-axis ticks entered as y-value, color, list of x-values
    $gr[$i] -> h_ticks(0,"black",-5,-4,-3,-2,-1,0,1,2,3,4,5);
    # labels for tickmarks
    foreach my $j (0..5) {
        $gr[$i]->lb( new Label($j,-0.5,$j, 'black','center','middle'));
        $gr[$i]->lb( new Label(-$j,-0.5,-$j, 'black','center','middle'));
    }
}

$gr[5] -> moveTo(-4,0);
$gr[5] -> lineTo(4,0,'blue',3);
$gr[5] -> stamps( open_circle(-4,0,'blue') );
$gr[5] -> stamps( closed_circle(4,0,'blue') );

##############################################################
#
#  Text
#
#

BEGIN_PGML

Consider the set of values described by the phrase *"all numbers larger than -4 AND also less than or equal to 4"*:

>> [@ image(insertGraph($gr[5]),width=>408, height=>68, tex_size=>700) @]* <<


    This interval includes one endpoint but not the other; do you see why?

We can express this range of values in inequality notation and in interval notation:

        * Inequality notation: [` -4 < x \le 4 `] (alternatively: [` x > -4 `] AND [` x \le 4 `])
        * Interval notation: [` (-4,4] `]

Rewrite each of the following inequalities in _interval notation_:

a.
>> [@ image(insertGraph($gr[0]),width=>612, height=>68, tex_size=>700) @]* <<

>> as an inequality: [` [$ineq[0]] `] <<  
>> in interval notation: [____________]{$int[0]} <<

b.
>> [@ image(insertGraph($gr[1]),width=>612, height=>68, tex_size=>700) @]* <<

>> as an inequality: [` [$ineq[1]] `] <<  
>> in interval notation: [____________]{$int[1]} <<

c.
>> [@ image(insertGraph($gr[2]),width=>612, height=>68, tex_size=>700) @]* <<

>> as an inequality: [` [$ineq[2]] `] <<  
>> in interval notation: [____________]{$int[2]} <<

d.
>> [@ image(insertGraph($gr[3]),width=>612, height=>68, tex_size=>700) @]* <<

>> as an inequality: [` [$ineq[3]] `] <<  
>> in interval notation: [____________]{$int[3]} <<

e.
>> [@ image(insertGraph($gr[4]),width=>612, height=>68, tex_size=>700) @]* <<

>> as an inequality: [` [$ineq[4]] `] <<  
>> in interval notation: [____________]{$int[4]} <<



END_PGML

##############################################################
#
#  Answers
#
#

BEGIN_PGML_HINT

* For each endpoint, is it _included_ in the range ([`\le`] or [`\ge`])? Or is it _excluded_ ([`<`] or [`>`])?
* Use a parenthesis "(" or ")" when an endpoint is _excluded_ from the interval; use square brackets "\[" or "\]" when an endpoint is _included_ in the interval.
*  The order matters. When you write an interval such as [`(a,b]`], the number on the left, [`a`], has to be always smaller than the number on the right, [`b`].  Likewise, [`-\infty`] always goes on the left, and [`\infty`] always goes on the right.

END_PGML_HINT

BEGIN_PGML_SOLUTION

a. [` [$int[0]] `]  

b. [` [$int[1]] `]  

c. [` [$int[2]] `]  

d. [` [$int[3]] `]  

e. [` [$int[4]] `]  

END_PGML_SOLUTION
ENDDOCUMENT();        
