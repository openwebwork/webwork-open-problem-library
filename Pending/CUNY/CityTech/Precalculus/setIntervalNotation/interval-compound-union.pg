##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS()

## DBsubject('Algebra')
## DBchapter('Algebra of real numbers and simplifying expressions')
## DBsection('Inequalities and intervals')
## Date('6/29/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')
## TitleText1('Precalculus')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGgraphmacros.pl",
   "PGML.pl",
   "contextInequalities.pl",
   "PGchoicemacros.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Interval");

@range = (-8..8);

%prob = ();
@lint = ();
@rint = ();
@int = ();
foreach my $i (0..4) {
    # choose 4 points from range, put them in ascending order
    @slice = PGsort(sub {$_[0] < $_[1]}, NchooseK(17,4)); 
    $prob{$i}{ll} = $range[$slice[0]]; # left interval left bound
    $prob{$i}{lr} = $range[$slice[1]]; # left interval right bound
    $prob{$i}{rl} = $range[$slice[2]]; # right interval left bound
    $prob{$i}{rr} = $range[$slice[3]]; # right interval right bound
    $prob{$i}{lle} = random(0,1,1); # left interval lower bound equality?
    $prob{$i}{lue} = random(0,1,1); # left interval upper bound equality?
    $prob{$i}{rle} = random(0,1,1); # right interval lower bound equality?
    $prob{$i}{rue} = random(0,1,1); # right interval upper bound equality?
    # generate left interval
    if ($prob{$i}{lle}==1) {
        $lint[$i] = ($prob{$i}{lue}==1)?Interval("[$prob{$i}{ll},$prob{$i}{lr}]"):Interval("[$prob{$i}{ll},$prob{$i}{lr})");
    } else {
        $lint[$i] = ($prob{$i}{lue}==1)?Interval("($prob{$i}{ll},$prob{$i}{lr}]"):Interval("($prob{$i}{ll},$prob{$i}{lr})");
    };
    # generate right interval
    if ($prob{$i}{rle}==1) {
        $rint[$i] = ($prob{$i}{rue}==1)?Interval("[$prob{$i}{rl},$prob{$i}{rr}]"):Interval("[$prob{$i}{rl},$prob{$i}{rr})");
    } else {
        $rint[$i] = ($prob{$i}{rue}==1)?Interval("($prob{$i}{rl},$prob{$i}{rr}]"):Interval("($prob{$i}{rl},$prob{$i}{rr})");
    };
    $int[$i] = Compute("$rint[$i] U $lint[$i]");
}

Context("Inequalities");

# Construct an inequality for each
@ineq = ();
foreach my $i (0..4) {
    $ineq[$i] = Inequality($int[$i]);
}

Context("Numeric");

# Create the graph for each exercise
foreach my $i (0..4) {
    $gr[$i] = init_graph(-9,-1,9,1, size=>[612,68]);
    # x-axis
    $gr[$i] -> moveTo(-9,0);
    $gr[$i] -> lineTo(9,0,'black','1');
    # x-axis ticks entered as y-value, color, list of x-values
    $gr[$i] -> h_ticks(0,"black",-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8);
    # labels for tickmarks
    foreach my $j (0..8) {
        $gr[$i]->lb( new Label($j,-0.5,$j, 'black','center','middle'));
        $gr[$i]->lb( new Label(-$j,-0.5,-$j, 'black','center','middle'));
    }
    $gr[$i] -> moveTo($prob{$i}{ll},0);
    $gr[$i] -> lineTo($prob{$i}{lr},0,'blue',3);
    $gr[$i] -> moveTo($prob{$i}{rl},0);
    $gr[$i] -> lineTo($prob{$i}{rr},0,'blue',3);
    if ( $prob{$i}{lle} == 1 ) {
        $gr[$i] -> stamps( closed_circle($prob{$i}{ll},0,'blue') );
    } else {
        $gr[$i] -> stamps( open_circle($prob{$i}{ll},0,'blue') );
    };
    if ( $prob{$i}{lue} == 1 ) {
        $gr[$i] -> stamps( closed_circle($prob{$i}{lr},0,'blue') );
    } else {
        $gr[$i] -> stamps( open_circle($prob{$i}{lr},0,'blue') );
    };
    if ( $prob{$i}{rle} == 1 ) {
        $gr[$i] -> stamps( closed_circle($prob{$i}{rl},0,'blue') );
    } else {
        $gr[$i] -> stamps( open_circle($prob{$i}{rl},0,'blue') );
    };
    if ( $prob{$i}{rue} == 1 ) {
        $gr[$i] -> stamps( closed_circle($prob{$i}{rr},0,'blue') );
    } else {
        $gr[$i] -> stamps( open_circle($prob{$i}{rr},0,'blue') );
    };
}

# Create the graph for the example

$gr[5] = init_graph(-9,-1,9,1, size=>[612,68]);
# x-axis
$gr[5] -> moveTo(-9,0);
$gr[5] -> lineTo(9,0,'black','1');
# x-axis ticks entered as y-value, color, list of x-values
$gr[5] -> h_ticks(0,"black",-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8);
# labels for tickmarks
foreach my $j (0..8) {
$gr[5]->lb( new Label($j,-0.5,$j, 'black','center','middle'));
$gr[5]->lb( new Label(-$j,-0.5,-$j, 'black','center','middle'));
}

$gr[5] -> moveTo(-6,0);
$gr[5] -> lineTo(1,0,'blue',3);
$gr[5] -> stamps( open_circle(-6,0,'blue') );
$gr[5] -> stamps( closed_circle(1,0,'blue') );
    
$gr[5] -> moveTo(3,0);
$gr[5] -> lineTo(5,0,'blue',3);
$gr[5] -> stamps( closed_circle(3,0,'blue') );
$gr[5] -> stamps( closed_circle(5,0,'blue') );
    



##############################################################
#
#  Text
#
#

BEGIN_PGML

Consider the following set of numbers, which combines two intervals:

>> [@ image(insertGraph($gr[5]),width=>612, height=>68, tex_size=>700) @]* <<

As an expression using inequalities, this is the set of all numbers [`x`] such that [` -6 < x \le 1 `] *or* [` 3 \le x \le 5 `].

This is called the _union_ of the two intervals, and is represented by the symbol [` \cup `]. Thus, in interval notation, this set is [` (-6,1] \cup [3,5] `].


Rewrite each of the following inequality expressions in _interval notation_:

* Type the capital letter "U" to represent the union symbol [`\cup`].

a.
>> [@ image(insertGraph($gr[0]),width=>612, height=>68, tex_size=>700) @]* <<

>> as an inequality: [` [$ineq[0]] `] <<  
>> in interval notation: [____________________________]{$int[0]} <<

b.
>> [@ image(insertGraph($gr[1]),width=>612, height=>68, tex_size=>700) @]* <<

>> as an inequality: [` [$ineq[1]] `]  <<  
>> in interval notation: [____________________________]{$int[1]} <<

c.
>> [@ image(insertGraph($gr[2]),width=>612, height=>68, tex_size=>700) @]* <<

>> as an inequality: [` [$ineq[2]] `] <<  
>> in interval notation: [____________________________]{$int[2]} <<

d.
>> [@ image(insertGraph($gr[3]),width=>612, height=>68, tex_size=>700) @]* <<

>> as an inequality: [` [$ineq[3]] `]  <<  
>> in interval notation: [____________________________]{$int[3]} <<

e.
>> [@ image(insertGraph($gr[4]),width=>612, height=>68, tex_size=>700) @]* <<

>> as an inequality: [` [$ineq[4]] `]  <<  
>> in interval notation: [____________________________]{$int[4]} <<



END_PGML

##############################################################
#
#  Answers
#
#

BEGIN_PGML_HINT

* For each endpoint, is it _included_ in the interval ([`\le`] or [`\ge`])? Or is it _excluded_ ([`<`] or [`>`])?
* Use a parenthesis "(" or ")" when an endpoint is _excluded_ from the interval; use square brackets "\[" or "\]" when an endpoint is _included_ in the interval.
* "Join" the intervals using the union symbol [` \cup `] (type the _capital_ letter U).
*  The order matters. When you write an interval such as [`(a,b]`], the number on the left, [`a`], has to be always smaller than the number on the right, [`b`].  Likewise, [`-\infty`] always goes on the left, and [`\infty`] always goes on the right.

END_PGML_HINT

BEGIN_PGML_SOLUTION

a. [` [$int[0]] `]

b. [` [$int[1]] `]

c. [` [$int[2]] `]

d. [` [$int[3]] `]

e. [` [$int[4]] `]

END_PGML_SOLUTION

ENDDOCUMENT();        
