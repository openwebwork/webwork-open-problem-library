##DESCRIPTION
##  Trigonometry problem: Solve a right	triangle using trig functions and inverse trig functions
##ENDDESCRIPTION


## DBsubject(Trigonometry)
## DBchapter(Triangle Trigonometry)
## DBsection(Sine, cosine, and tangent of an angle in a right triangle)
## Institution(CUNY City Tech)
## Author(K. Andrew Parker)
## Level(2)
## Language(en)
## MO(1)
## KEYWORDS('trigonometry', 'right triangle', 'triangle')


########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGgraphmacros.pl",
   "answerHints.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");

##############################################
#  Begin trig functions in degrees

Context()->functions->remove("cos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub cos {Parser::Function->call('cos',@_)} 
#  Add the new functions to the Context
Context()->functions->add( cos => {class => 'NewFunc', TeX => '\cos'}, );


Context()->functions->remove("sin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub sin {Parser::Function->call('sin',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sin => {class => 'NewFunc', TeX => '\sin'}, );


Context()->functions->remove("tan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180)/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub tan {Parser::Function->call('tan',@_)}
#  Add the new functions to the Context
Context()->functions->add( tan => {class => 'NewFunc', TeX => '\tan'}, );


Context()->functions->remove("sec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub sec {Parser::Function->call('sec',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sec => {class => 'NewFunc', TeX => '\sec'}, );


Context()->functions->remove("csc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub csc {Parser::Function->call('csc',@_)} 
#  Add the new functions to the Context
Context()->functions->add( csc => {class => 'NewFunc', TeX => '\csc'}, );


Context()->functions->remove("cot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180)/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub cot {Parser::Function->call('cot',@_)}
#  Add the new functions to the Context
Context()->functions->add( cot => {class => 'NewFunc', TeX => '\cot'}, );



#sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))}
#sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])}
#sub atan {CORE::atan2($_[1],1)}
#sub acot {CORE::atan2(1,$_[1])}
#sub asec {acos($_[0],1.0/$_[1])}
#sub acsc {asin($_[0],1.0/$_[1])}


Context()->functions->remove("acos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acos {Parser::Function->call('acos',@_)}
#  Add the new functions to the Context
Context()->functions->add( acos => {class => 'NewFunc', TeX => '\arccos'}, );


Context()->functions->remove("asin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub asin {Parser::Function->call('asin',@_)}
#  Add the new functions to the Context
Context()->functions->add( asin => {class => 'NewFunc', TeX => '\arcsin'}, );


Context()->functions->remove("atan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub atan {Parser::Function->call('atan',@_)}
#  Add the new functions to the Context
Context()->functions->add( atan => {class => 'NewFunc', TeX => '\arctan'}, );


Context()->functions->remove("asec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
#sub asec {acos($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub asec {Parser::Function->call('asec',@_)}
#  Add the new functions to the Context
Context()->functions->add( asec => {class => 'NewFunc', TeX => '\arcsec'}, );


Context()->functions->remove("acsc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
#sub acsc {asin($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub acsc {Parser::Function->call('acsc',@_)}
#  Add the new functions to the Context
Context()->functions->add( acsc => {class => 'NewFunc', TeX => '\arccsc'}, );


Context()->functions->remove("acot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acot {Parser::Function->call('acot',@_)}
#  Add the new functions to the Context
Context()->functions->add( acot => {class => 'NewFunc', TeX => '\arccot'}, );


#  End trig functions in degrees
###################################################

Context()->flags->set(
  reduceConstants=>0, 
  reduceConstantFunctions=>0,
  tolType=>'absolute',
  tolerance=>0.0005
);

$AC = random(31,149,2);
do { $BC = random(61,199,2); } until ( $BC > $AC + 20 );
$AC = $AC/10;
$BC = $BC/10;
$rad = $BC**2 - $AC**2;
$AB = Formula("sqrt($rad)");

$C = Formula("arccos($AC/$BC)");
$B = Formula("arcsin($AC/$BC)");
$Brad = Real("$B*pi/180");
$Crad = Real("$C*pi/180");

$ab = Real("$AB");
$ac = Real("$AC");
$max = max($ab,$ac);

$xmin = 0;
$ymin = 0;
$xmax = Real("$AB/$max");
$ymax = Real("$AC/$max");
$bufX = (1.3 - $xmax)/2;
$bufY = (1.3 - $ymax)/2;
# $xAngPos = -0.15/($angMax-$angMin)*($B-$angMin)+0.3;
# $yAngPos = 0.04/($angMax-$angMin)*($B-$angMin)+0.06;

# $angleB = "$B~~x{00B0}";
# $angleC = "$C~~x{00B0}";

# Problem Graph #
###############

$gr = init_graph(-$bufX,-$bufY,$xmax+$bufX,$ymax+$bufY,size=>[300,300]);
$gr->lb('reset');
$gr->lb( new Label($xmin,$ymin,'A','black','center','top'));
$gr->lb( new Label($xmax,$ymin,'B','black','center','top'));
$gr->lb( new Label($xmin,$ymax,'C','black','center','bottom'));

# $gr->lb( new Label($xmax-$xAngPos,$ymin+0.05,"$angleB",'blue','center','middle')); 
# $gr->lb( new Label($xmin+0.057,$ymax-$yAngPos,"$angleC",'blue','center','middle')); 

# $gr->lb( new Label($xmax/2,$ymin-0.025,"$AB",'blue','center','middle'));
$gr->lb( new Label($xmin-0.02,$ymax/2,"$AC",'blue','right','middle'));
$gr->lb( new Label($xmax/2 +0.05, $ymax/2+0.05,"$BC",'blue','center','middle'));


$gr->moveTo($xmin+0.1,$ymin);
$gr->lineTo($xmin+0.1,$ymin+0.1,"red",2); # right angle
$gr->lineTo($xmin,$ymin+0.1,"red",2); # right angle
$gr->moveTo($xmin,$ymin);
$gr->lineTo($xmax,$ymin,"black",2); # bottom edge (AB)
$gr->lineTo($xmin,$ymax,"black",2); # hypotenuse (BC)
$gr->lineTo($xmin,$ymin,"black",2); # left edge (AC)

##############################################################
#
#  Text
#
#

BEGIN_PGML

>> [@ image(insertGraph($gr), width=>400, height=>400, tex_size=>800, extra_html_tags=>'alt="Right triangle ABC with right angle A." ' ) @]* <<

If [` \overline{AC} `] has length [$AC] and [` \overline{BC} `] has length [$BC], find:

* The length of [` \overline{AB} `]: [__________]
* The measure of angle B (in degrees): [__________]
* The measure of angle C (in degrees): [__________]

If you use a calculator to find a decimal approximation, your answer must be accurate to at least 3 decimal places.

If you're using a calculator, be sure that your calculator is set to **degrees**, **not radians**.

You are also allowed to use the inverse trig functions in your answer instead of using a calculator. 
[` \sin^{-1}(x) `] can be entered as _arcsin(x)_ or _asin(x)_. 

END_PGML

BEGIN_PGML_HINT

Be sure you're not compounding a rounding error by using a decimal approximation in your calculations.

In this problem, you don't want to use a decimal approximation for [` \overline{AB} `] when you calculate the measure of angle B or angle C. This is because a rounded value for [` \overline{AB} `] is already not _quite_ right - then the error gets worse when you compute angle B or angle C and round off your result again.

END_PGML_HINT

ANS($AB->cmp->withPostFilter(AnswerHints(
  sub {
          my ($correct,$student,$ans) = @_;
          return abs($correct-$student) < 0.1;
  } => "You're close! <BR> You must be accurate to at least 3 decimal places.", 
)));

ANS($B->cmp()->withPostFilter(AnswerHints( 
  $Brad => "Make sure your calculator is set to 'degrees'.",
  $C => "Are you sure you're using the appropriate inverse trig function for this angle?",
  sub {
    my ($correct, $student, $ans) = @_;
    my $error = abs($student - $correct);
    return ( $error < 0.05 && $error > 0.0005 );
   } => "You're close! But your answer needs to be accurate to at least 3 decimal places."
)));
ANS($C->cmp()->withPostFilter(AnswerHints( 
  $Crad => "Make sure your calculator is set to 'degrees'.",
  $B => "Are you sure you're using the appropriate inverse trig function for this angle?",
  sub {
    my ($correct, $student, $ans) = @_;
    my $error = abs($student - $correct);
    return ( $error < 0.05 && $error > 0.0005 );
   } => "You're close! But your answer needs to be accurate to at least 3 decimal places."

)));

BEGIN_PGML_SOLUTION

We can find the remaining side with the Pythagorean theorem:  
[` \overline{AB}^2 + \overline{AC}^2 = \overline{BC}^2 `]  
[` \overline{AB}^2 + [$AC]^2 = [$BC]^2 `]  
[` \overline{AB}^2 + [@$AC**2@] = [@$BC**2@] `]  
[` \overline{AB}^2 = [@$BC**2-$AC**2@] `]  
[` \overline{AB} = [$AB] `]  
[` \overline{AB} \approx [@$AB->eval@] `]

To find the missing angles, we should use the given sides [`\overline{AC}`] and [`\overline{BC}`].  
If you decide to use [`\overline{AB}`], you should use [`[$AB]`] in your calculations instead of the decimal approximation.

To find angle [`B`], first note that our given sides ([`\overline{AC}`] and [`\overline{BC}`]) are the opposite leg to [`B`] and hypotenuse. 

This means we should use [`\sin(B) = \frac{AC}{BC}`].  
[` \sin(B) = \frac{[$AC]}{[$BC]} `]  
[` B = \arcsin(\frac{[$AC]}{[$BC]}) `]  
[` B \approx [@$B->eval@]^{\circ} `]

For angle [`C`], we similarly note that our given sides ([`\overline{AB}`] and [`\overline{BC}`]) are the adjacent leg to [`C`] and hypotenuse. 

This means we should use [`\cos(C) = \frac{AC}{BC}`].  
[` \cos(C) = \frac{[$AC]}{[$BC]} `]  
[` C = \arccos(\frac{[$AC]}{[$BC]}) `]  
[` C \approx [@$C->eval@]^{\circ} `]

We can now use the fact that angles in a triangle add up to [`180^{\circ}`] to check our work:

Does [`90^{\circ} + [@$B->eval@]^{\circ} + [@$C->eval@]^{\circ} = 180^{\circ}`]?

END_PGML_SOLUTION

COMMENT("Funded by US DoE Title V: Opening Gateways grant.");

ENDDOCUMENT();        
