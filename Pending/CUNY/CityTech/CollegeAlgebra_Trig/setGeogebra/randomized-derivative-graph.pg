## MO(1)
########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "parserMultiAnswer.pl",
   "parserImplicitEquation.pl",
   "AppletObjects.pl",
   "PGgraphmacros.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

Context("Numeric");
Context()->strings->add('true'=>{}, 'false'=>{});

foreach my $i (0..8) {
    $x[$i] = 3*($i-4);
    $y[$i] = random(-2,3,1);
}

# turn arrays for x and y into matrices for transmission to SageCell
$X = Matrix(@x);
$Y = Matrix(@y);

# begin Sage code to find a formula for the polynomial passing through
# our randomly generated points ( @X, @Y )
#
# define a way to rewrite float numbers in scientific notation that
# WeBWorK is able to interpret more easily (float_to_str)
#
# define a way for python to print the algebraic representation
# of our polynomial - which is surprisingly not standard in python
# poly( @coefficients, variable letter )
#
# use polyfit on our coefficients, and have poly() return the
# polynomial as a Formula-ready string
#
$SageCode1=<<END;
import numpy as np

def float_to_str(f):
    float_string = repr(f)
    if 'e' in float_string:  # detect scientific notation
        digits, exp = float_string.split('e')
        digits = digits.replace('.', '').replace('-', '')
        exp = int(exp)
        zero_padding = '0' * (abs(int(exp)) - 1)  # minus 1 for decimal point in the sci notation
        sign = '-' if f < 0 else ''
        if exp > 0:
            float_string = '{}{}{}.0'.format(sign, digits, zero_padding)
        else:
            float_string = '{}0.{}{}'.format(sign, zero_padding, digits)
    return float_string

def poly(p, var_string='x'):
    res = ''
    first_pow = len(p) - 1
    for i, coef in enumerate(p):
        power = first_pow - i

        if coef:
            if coef < 0:
                sign, coef = (' - ' if res else '- '), -coef
            elif coef > 0: # must be true
                sign = (' + ' if res else '')

            str_coef = '' if coef == 1 and power != 0 else float_to_str(coef)

            if power == 0:
                str_power = ''
            elif power == 1:
                str_power = var_string
            else:
                str_power = var_string + '^' + str(power)

            res += sign + '(' + str_coef + ')' + str_power 
    print(res)

poly(np.polyfit($X, $Y, 8))
END

# send our request to sage
$sageReply1 = AskSage($SageCode1,{accepted_tos=>true});

# capture any error from sage
# make sure that $f is defined
# change the default formula if you like...

if (sageReturnedFail($sageReply1) ) {
    $f = Formula("x^5 - 9x^3"); # default - change to whatever
} else {
    $f = Formula($sageReply1);
}

# error messages array entries:
# top-cutoff score, message, partial credit to be assigned for this range.
# 0 partial credit for <= 50
# 100% credit for 91+
@messages = (
  [.50, "Oh no! You must score more than 50%, for any credit. Try again.", 0],
  [.60, "You could do better with another attempt, yes?"],
  [.70, "Try again. You can manage better than this."],
  [.75, "This is okay, But you could do better, yes?"],
  [.80, "You are getting better, Try another?"],
  [.85, "Nice Work!"],
  [.90, "Very Good!"],
  [.95, "Excellent!",1], # full credit for 91+
  [1.0, "Perfect!",1],
);

$custom = sub {
    my ($correct, $student, $ansHash) = @_;
    my @errors = ();
    my ($acc,$eligible) = @$student; # student answer is passed as a list
    #
    # set the preview string to display the accuracy score
    # set the "correct answer" to display the requirements
    # 
    $ansHash->{preview_latex_string} = "\text{accuracy score: }$acc\text{%}";
    $ansHash->{correct_ans_latex_string} = "\text{ accuracy score } > 90\text{%}";
    #
    # invalidate the student answer if the graph of f'(x) is displayed
    #
    Value::Error("You cannot receive credit while the graph of \( f'(x) \) is visible. <BR> Use the reset button and try again.") if ($eligible eq 'false');
    my $score = $acc/100;
    # loop through messages to assign partial credit
    for my $data (@messages) {
      my ($percent, $msg, $nscore) = @$data;
      if ($score <= $percent) {
        push(@errors, $msg);
        $score = $nscore if defined $nscore;
        last;
      }
    }
    return ( 2*$score, @errors ); # double the score because of list_checker
};

######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the
# command end command
# so that they don't get in the way
###################################


$appletName = "ggbfoo";

$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "geogebra.jar",
   codebase                 => findAppletCodebase("geogebra.jar"),
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => 'configure',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   width                 => 700,              # may want to modify width
   height                => 500,              # may want to modify height
  # mayscript             => "true",
   debugMode             => 0,   # set debugMode to 0 for no debug
                                              # to 1 to make xml representation visible
                                              # to 2 to add alerts detailing progression
                                              # through the applet
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   #submitActionScript => '',
   selfLoading           => 1,
   params     => GEOGEBRA_PARAMS(),# paste parameters in

);


###############################################
#
#  PNG picture of GeoGebra applet for hardcopy

$im = init_graph(-8,-8,8,8, axes=>[0,0], grid=>[8,8], size=>[400,400]);
add_functions($im,"$f for x in <-8,8> using color:blue and weight:2");

###############################################
#
#  PNG picture of the derivative for Solutions

$im2 = init_graph(-8,-8,8,8, axes=>[0,0], grid=>[8,8], size=>[400,400]);
$Df = $f->D('x'); # get the derivative of f(x) for graphing
# graph f(x) faintly in grey
add_functions($im2,"$f for x in <-8,8> using color:gray and weight:1");
# graph f'(x) boldly in red
add_functions($im2,"$Df for x in <-8,8> using color:red and weight:2");

##################################
# Setup GeogebraWebApplet --
###################################

###############################################
#
#  For persistence of GeoGebra applet state 
#  when answers are submitted or page is refreshed.
#  Uses JavaScript interface to GeoGebra.

HEADER_TEXT(
qq! 
<script language="javascript">
   function ggbOnInit(param) {
       if (param == "$appletName") {
           applet_loaded(param,1);  // report that applet is ready. 
           ww_applet_list[param].safe_applet_initialize(2);
       }
   } 
</script>
<noscript>For this question to work properly, 
you must enable JavaScript, or use another browser 
(or computer) on which JavaScript works.</noscript>
!);

#######################################################
#
#  For setting initial values in GeoGebra from WeBWorK
#  Uses JavaScript interface to GeoGebra.

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setAppletCoefficients() {
   var applet=getApplet("$appletName");   // alert("Updating coefficients");
   if (typeof(applet)!="undefined") {
     if (typeof(applet.setValue)!="undefined") {
     
     ////////////////////////////////////////////////////////////////
     //  List the values of the parameters to be set in the applet here
     
     // Replace the randomization on-load of the applet
        applet.evalCommand("R = (-12, $y[0])");
        applet.evalCommand("S = (-9, $y[1])");
        applet.evalCommand("T = (-6, $y[2])");
        applet.evalCommand("U = (-3, $y[3])");
        applet.evalCommand("V = (0, $y[4])");
        applet.evalCommand("W = (3, $y[5])");
        applet.evalCommand("X = (6, $y[6])");
        applet.evalCommand("Y = (9, $y[7])");
        applet.evalCommand("Z = (12, $y[8])");
        applet.evalCommand('SetVisibleInView[gRes,1,False]');
        applet.evalCommand('SetVisibleInView[btnReveal,1,True]');
     } else {
          setTimeout("setAppletCoefficients()", 1000);
     }
   } else {
      setTimeout("setAppletCoefficients()",1000);
   }
}
ww_applet_list["$appletName"].setConfig = function() {setAppletCoefficients()};
</script>
END_SCRIPT

HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );

<script language="javascript">
function getAppletValues() {
    console.log("getAppletValues() entered");
	// get a handle for the applet object
	var applet = $appletName;
	var accuracy = applet.getValue("accuracy");
	var isVisible = applet.getVisible("btnReveal",1);
    return( accuracy + "," + isVisible ); 
}
 </script>
END_SCRIPT

###################################
#insert applet into body  -- this does not need to be changed
# except to adjust the insertion of the reinitialize_button or
# a hidden AnswerBox
###################################
 TEXT($PAR,  MODES(TeX=>$im,
                      HTML=>$applet->insertAll(
                                debug =>0,
                                reinitialize_button => 1, # necessary to reset
                                includeAnswerBox=>1, # hidden 'answerBox'
 )));

##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT

$PAR
Drag the points to approximate the shape of \( f'(x) \).
$PAR

END_TEXT
Context()->normalStrings;

TEXT( "run SetConfig", q!<script language="javascript">setConfig()</script> !) if $inputs_ref->{ "${appletName}_state"} =~ "restart_applet";

##############################################################
#
#  Answers
#
#

$answer = List(Real(100),String('true'));

NAMED_ANS( 'answerBox'=>$answer->cmp(checkTypes=>0, list_checker=>$custom) );

Context()->texStrings;
BEGIN_SOLUTION

$PAR
\{ image( insertGraph($im2), width=>400, height=>400, tex_size=>800 ) \}
$PAR

END_SOLUTION
Context()->normalStrings;

sub GEOGEBRA_PARAMS {
    my $result = {
showResetIcon=>"false" ,
enableRightClick=>"false" ,
enableLabelDrags=>"false",
showMenuBar=>"false" ,
showToolBar=>"false",
showAlgebraInput=>"false",
enableShiftDragZoom=>"true",
useBrowserForJS=>"true",
ggbbase64=>""
};
$result;
}

ENDDOCUMENT();