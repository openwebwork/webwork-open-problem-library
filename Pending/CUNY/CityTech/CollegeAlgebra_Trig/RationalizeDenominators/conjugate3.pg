##DESCRIPTION
##  Algebra problem: Simplify square root of an integer
##ENDDESCRIPTION


## DBsubject(Algebra)
## DBchapter(Properties of exponents, rational exponents and radicals)
## DBsection(Properties of rational exponents and radicals)
## Institution(CUNY City Tech)
## Author(K. Andrew Parker)
## Level(2)
## Language(en)
## MO(1)
## KEYWORDS('algebra', 'radical', 'radicals', 'radical expression')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "contextLimitedPowers.pl",
   "bizarroArithmetic.pl",
   "PGML.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

    # code essentially from Davide Cervone 4/25/10
    ###########################
    #
    # Subclass the numeric functions
    #
    package my::Function::numeric;
    our @ISA = ('Parser::Function::numeric');

    #
    # Override sqrt() to return a special value (usually 1) when evaluated
    # effectively eliminating it from the product.
    #
    sub sqrt {
      my $self = shift;
      my $value = $self->context->flag("setSqrt");
 
 return $value+2 if $value && $_[0] == 1; # force sqrt(1) to be incorrect
      return $value if $value;
      return $self->SUPER::sqrt(@_);
    }

    #
    # end of subclass
    #
package main;

    Context("Numeric")->variables->are(
      y => ["Real", limits => [-2,2]],    # only needed if x is used in the square roots\
#      b => ["Real", limits => [0,2]],
    );
    #
    # make sqrt() use our subclass
    #
    Context()->functions->set(sqrt=>{class=>'my::Function::numeric'});
    Context()->flags->set(reduceConstantFunctions=>0);
    #
    #
    # Don't allow fractional powers (avoids 1/2 power)
    # [Could subclass exponentiation to handle that as well]
    #
    LimitedPowers::OnlyPositiveIntegers();
Context()->operators->set(
'+' => {class => 'bizarro::BOP::add', isCommand => 1},
'-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
'*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
' *' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'* ' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'/' => {class => 'bizarro::BOP::divide', isCommand => 1},
' /' => {class => 'bizarro::BOP::divide', isCommand => 1},
'/ ' => {class => 'bizarro::BOP::divide', isCommand => 1},
);



$reducedSqrt = sub  {
      my ($correct,$student,$ans) = @_;
      return 0 if $ans->{isPreview} || $correct != $student;
      #
      #  Get parsed formula for student and correct answers
      #
      $student = $ans->{student_formula};
      $correct = $correct->{original_formula} if defined $correct->{original_formula};
      #
      # check if equal when sqrt's are replaced by 1
      #
      Context()->flags->set(setSqrt => 1, bizarroMul=>0, bizarroDiv=>0);
      delete $correct->{test_values}, $student->{test_values};
      my $OK = ($correct == $student);
      Context()->flags->set(setSqrt => 0, bizarroMul=>0, bizarroDiv=>0);
      #
      Value::Error("Your answer is not fully simplified.<BR>Can you simplify any radicals? Is your fraction reduced?") unless $OK;
      return $OK;
    };

Context()->flags->set(reduceConstants=>0, reduceConstantFunctions=>0, formatStudentAnswer=>'parsed');
Parser::Number::NoDecimals;

##############################################################
#
#  Setup
#
#

$pS = list_random(2,3,5,7);
do { $pL = list_random(5,6,7,10,11,13) } until (gcf($pS,$pL)==1 && $pL > $pS);

$Nout = $pL;
$Dout = $pL;
$Nin = $pL*$pS;
$Din = $pL*$pS;

$Dans = $pL-$pS;

$D = $Dout**2 - $Din;

$N = Formula("$Nout * sqrt($Nin)");

$binom = Formula("$Dout - sqrt($Din)");
$binomConj = Formula("$Dout + sqrt($Din)");

$problem = Formula("$N/$binom");

$ansN = Formula("$Dout*sqrt($Din) + $Din");
$ans = Formula("$ansN/$Dans");

##############################################################
#
#  Text
#
#

BEGIN_PGML

Rationalize the denominator. 

[` \displaystyle{ [$problem] } `] = [__________]

* Use "sqrt" to input a square-root into WeBWorK. For example "sqrt(5)" represents [` \sqrt{5} `]
* Make sure to simplify all square-roots completely.
* Make sure your fraction is completely reduced as well.

END_PGML

##############################################################
#
#  Answers
#
#

ANS($ans->cmp(checker=>$reducedSqrt)->withPostFilter(sub { 
  my $ans = shift; 
  $ans->{ans_message} = "Use 'sqrt(...)' for radicals instead of rational exponents."  
    if $ans->{ans_message} eq "Powers must be positive integer constants";
  return $ans; 
}));

BEGIN_PGML_HINT

Remember that your goal is to rationalize the denominator.  
You may multiply the numerator and denominator by same expression.  

Using binomial conjugates may be useful in this case:  
[`(\sqrt{M} + \sqrt{N})(\sqrt{M} - \sqrt{N}) = \sqrt{M^2} - \sqrt{MN} + \sqrt{MN} - \sqrt{N^2} = M - N`]

What does this accomplish?  
_Notice that our result no longer has any radicals..._

Make sure your final answer has reduced square-roots and fractions, where possible.

END_PGML_HINT
BEGIN_PGML_SOLUTION

*Use the conjugate to rationalize the denominator:*  
    [` [$problem] \rightarrow \left([$problem]\right)\left(\frac{[$binomConj]}{[$binomConj]}\right)`]  
    [` \left([$problem]\right)\left(\frac{[$binomConj]}{[$binomConj]}\right) \rightarrow \frac{[$N]([$binomConj])}{([$binom])([$binomConj])}`]  
    [` \frac{[$N]([$binomConj])}{([$binom])([$binomConj])} \rightarrow \frac{[$N]([$binomConj])}{[$Din] - [@$Dout**2@]} \rightarrow \frac{[$N]([$binomConj])}{[$D]}`]  

_If you didn't catch what happened on that last step, remember:_  
    [`([$binom])([$binomConj]) \rightarrow ([$Dout])^2 - [$Dout]\sqrt{[$Din]} + [$Dout]\sqrt{[$Din]} - (\sqrt{[$Din]})^2 `]  
    _which simplifies to:_ [` [@$Dout**2@] - [$Din] = [$D] `].

*Notice that our fraction has a common factor of [$Nout]:*  
    [`\frac{[$N]([$binomConj])}{[$D]} \rightarrow \frac{\sqrt{[$Din]}([$binomConj])}{[$Dans]} `]

Often, we are not required to distribute in the numerator - but here, we can see that distributing will help us reduce a radical in one term:  
    [`\frac{\sqrt{[$Din]}([$binomConj])}{[$Dans]} \rightarrow [$ans] `]

All our radicals are now simplified, our fraction is reduced, and our denominator contains _no_ radicals.  
*Answer:* [`[$ans]`]

END_PGML_SOLUTION

COMMENT("Funded by US DoE Title V: Opening Gateways grant.");

ENDDOCUMENT();        