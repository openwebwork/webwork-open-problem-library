##DESCRIPTION
##  Trigonometry problem: Use the Law of Cosines to solve a triangle
##ENDDESCRIPTION

##KEYWORDS('trigonometry', 'law of cosines', 'analytic trigonometry', 'triangle')

## DBsubject(Trigonometry)
## DBchapter(Triangle Trigonometry)
## DBsection(Law of cosines (side-angle-side, side-side-side))
## Level(2)
## Author(K. Andrew Parker)
## Institution(CUNY City Tech)
## Language(en)

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGgraphmacros.pl",
   "niceTables.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->flags->set(
 reduceConstants=>0,
 reduceConstantFunctions=>0,
 tolType => 'absolute',
 tolerance => 0.0005
);

##############################################
#  Begin trig functions in degrees

Context()->functions->remove("cos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub cos {Parser::Function->call('cos',@_)} 
#  Add the new functions to the Context
Context()->functions->add( cos => {class => 'NewFunc', TeX => '\cos'}, );


Context()->functions->remove("sin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub sin {Parser::Function->call('sin',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sin => {class => 'NewFunc', TeX => '\sin'}, );


Context()->functions->remove("tan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180)/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub tan {Parser::Function->call('tan',@_)}
#  Add the new functions to the Context
Context()->functions->add( tan => {class => 'NewFunc', TeX => '\tan'}, );


Context()->functions->remove("sec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub sec {Parser::Function->call('sec',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sec => {class => 'NewFunc', TeX => '\sec'}, );


Context()->functions->remove("csc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub csc {Parser::Function->call('csc',@_)} 
#  Add the new functions to the Context
Context()->functions->add( csc => {class => 'NewFunc', TeX => '\csc'}, );


Context()->functions->remove("cot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180)/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub cot {Parser::Function->call('cot',@_)}
#  Add the new functions to the Context
Context()->functions->add( cot => {class => 'NewFunc', TeX => '\cot'}, );



#sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))}
#sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])}
#sub atan {CORE::atan2($_[1],1)}
#sub acot {CORE::atan2(1,$_[1])}
#sub asec {acos($_[0],1.0/$_[1])}
#sub acsc {asin($_[0],1.0/$_[1])}


Context()->functions->remove("acos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acos {Parser::Function->call('acos',@_)}
#  Add the new functions to the Context
Context()->functions->add( acos => {class => 'NewFunc', TeX => '\arccos'}, );


Context()->functions->remove("asin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub asin {Parser::Function->call('asin',@_)}
#  Add the new functions to the Context
Context()->functions->add( asin => {class => 'NewFunc', TeX => '\arcsin'}, );


Context()->functions->remove("atan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub atan {Parser::Function->call('atan',@_)}
#  Add the new functions to the Context
Context()->functions->add( atan => {class => 'NewFunc', TeX => '\arctan'}, );


Context()->functions->remove("asec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
#sub asec {acos($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub asec {Parser::Function->call('asec',@_)}
#  Add the new functions to the Context
Context()->functions->add( asec => {class => 'NewFunc', TeX => '\arcsec'}, );


Context()->functions->remove("acsc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
#sub acsc {asin($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub acsc {Parser::Function->call('acsc',@_)}
#  Add the new functions to the Context
Context()->functions->add( acsc => {class => 'NewFunc', TeX => '\arccsc'}, );


Context()->functions->remove("acot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acot {Parser::Function->call('acot',@_)}
#  Add the new functions to the Context
Context()->functions->add( acot => {class => 'NewFunc', TeX => '\arccot'}, );


#  End trig functions in degrees
###################################################

$sideA = random(5,12,1);
$sideB = random(5,12,1);
do { $sideC = random(3,15,1); } until ( $sideC < ($sideA+$sideB) && $sideC > abs($sideA-$sideB) );

$angleA = Real("acos( ($sideB**2 + $sideC**2 - $sideA**2)/(2*$sideB*$sideC) )");
$angleB = Real("acos( ($sideA**2 + $sideC**2 - $sideB**2)/(2*$sideA*$sideC) )");
$angleC = Real("acos( ($sideA**2 + $sideB**2 - $sideC**2)/(2*$sideA*$sideB) )");
#$angleC = Real("180-$angleA-$angleB");

($Ax, $Ay) = (0,0);
($Bx, $By) = (Real("$sideC*cos($angleA)"), Real("$sideC*sin($angleA)"));
($Cx, $Cy) = ($sideB,0);

if ($Bx < 0) {
     $Ax = $Ax + abs($Bx);
     $Cx = $Cx + abs($Bx);
     $Bx = 0;
};

$xmax = max($Cx, $Bx);
$ymax = $By;
$max = max($xmax,$ymax);
$xmax = $xmax/$max;
$ymax = $ymax/$max;

($AxScale, $AyScale) = ($Ax/$max, $Ay/$max);
($BxScale, $ByScale) = ($Bx/$max, $By/$max);
($CxScale, $CyScale) = ($Cx/$max, $Cy/$max);

$bufX = (1.3 - $xmax)/2;
$bufY = (1.3 - $ymax)/2;

$gr = init_graph(-$bufX,-$bufY,$xmax+$bufX,$ymax+$bufY,size=>[300,300]);
$gr->lb('reset');
$gr->lb( new Label($AxScale,$AyScale,'A','red','center','top'));
$gr->lb( new Label($BxScale,$ByScale,'B','red','center','bottom'));
$gr->lb( new Label($CxScale,$CyScale,'C','red','center','top'));

$gr->lb( new Label(($AxScale+$CxScale)/2,$Ay,"b",'blue','center','top'));
$gr->lb( new Label(($AxScale+$BxScale)/2-0.05,($AyScale+$ByScale)/2,"c",'blue','right','middle'));
$gr->lb( new Label(($BxScale+$CxScale)/2+0.05,$ByScale/2+0.025,"a",'blue','right','middle'));

$gr->moveTo($AxScale,$AyScale); # start at A
$gr->lineTo($BxScale,$ByScale,"black",2); # \overline{AB}
$gr->lineTo($CxScale,$CyScale,"black",2); # \overline{BC}
$gr->lineTo($AxScale,$AyScale,"black",2); # \overline{AC}

Context("LimitedNumeric");
Context()->flags->set(
 tolType => 'absolute',
 tolerance => 0.0005
);

$angleA = Real($angleA);
$angleB = Real($angleB);
$angleC = Real($angleC);

##############################################################
#
#  Text
#
#

BEGIN_PGML

>> [@ image(insertGraph($gr), width=>400, height=>400, tex_size=>800, extra_html_tags=>'alt="Triangle ABC." ' ) @]* <<

If [` a = [$sideA]`], [`b = [$sideB]`], and [`c = [$sideC]`], find the measure of [`\angle C`].

[`\angle C = `][__________]{$angleC}

* Enter your answer as a decimal value.

* You must be accurate to at least 3 decimal places.

* Note that for these problems, we are using degrees to measure angles. Make sure your calculator is set to degrees instead of radians.

END_PGML

COMMENT("Funded by US DoE Title V: Opening Gateways grant.");

ENDDOCUMENT();        
