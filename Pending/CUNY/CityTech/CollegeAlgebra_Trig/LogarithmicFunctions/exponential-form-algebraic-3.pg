##DESCRIPTION
##  Algebra problem: Rewrite a logarithmic equation in exponential form
##ENDDESCRIPTION

##KEYWORDS('algebra', 'logarithm', 'logarithms', 'laws of logarithms')

## DBsubject(Algebra)
## DBchapter(Exponential and logarithmic expressions and functions)
## DBsection(Logarithmic functions)
## Level(2)
## Author(K. Andrew Parker)
## Institution(CUNY City Tech)
## Language(en)

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "parserMultiAnswer.pl",
   "bizarroArithmetic.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->variables->are(b=>Real, x=>Real);
Context()->flags->set(reduceConstants=>0, reduceConstantFunctions=>0,tolType=>'absolute');
Context()->operators->set(
'+' => {class => 'bizarro::BOP::add', isCommand => 1},
'-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
'*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
' *' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'* ' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'/' => {class => 'bizarro::BOP::divide', isCommand => 1},
' /' => {class => 'bizarro::BOP::divide', isCommand => 1},
'/ ' => {class => 'bizarro::BOP::divide', isCommand => 1},
'//' => {class => 'bizarro::BOP::divide', isCommand => 1},
'**' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
'^' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
);

$denom = random(3,8,1);
$base = Formula("1/$denom");
$exp = random(3,6,1);
$result = Formula("x");

$ans = MultiAnswer(Formula("$base^($exp)"),Formula("$result"))->with(
   singleResult => 1,
   separator => " = ",
   tex_separator => " = ",
   checker => sub {
      my ($correct,$student,$self) = @_;  # get the parameters
      my ($ansHash1, $ansHash2) = @{$self->{ans}};
      my $lhs = $ansHash1->{student_formula};
      my $rhs = $ansHash2->{student_formula};
      my ($exp,$res) = @{$correct};
      $lhs = Formula("$lhs"); $rhs = Formula("$rhs"); $exp = Formula("$exp"); $res = Formula("$res");
      return 0 unless (($lhs == $exp) && ($rhs == $res)) || (($rhs == $exp) && ($lhs == $res));
      Context()->flags->set(bizarroDiv=>1, bizarroMul=>1, bizarroAdd=>1, bizarroSub=>1, bizarroPow=>1 );
      delete $exp->{test_values}, $lhs->{test_values}, $rhs->{test_values};      
      Value::Error("Your equation is not in exponential form.") unless ((($lhs == $exp || $exp == $lhs) && ($rhs == $res || $res == $rhs)) || (($lhs == $res || $res == $lhs) && ($rhs == $exp || $exp == $rhs)));
      Context()->flags->set(bizarroDiv=>0, bizarroMul=>0, bizarroAdd=>0, bizarroSub=>0, bizarroPow=>0 );
      delete $exp->{test_values}, $lhs->{test_values}, $rhs->{test_values};      
      return 1;
       },
  );

##############################################################
#
#  Text
#
#

BEGIN_PGML

Rewrite the logarithmic equation in exponential form.

>> [` \log_{[$base]}([$result]) = [$exp] `] <<

[________]{$ans} = [________]{$ans}

END_PGML

##############################################################
#
#  Answers
#
#

BEGIN_PGML_HINT

[` \log_{[$base]}([$result]) = [$exp] `]

This tells us that [$exp] is the _power of [$base]_ that gives a result of `[$result]`.

How can we write the same thing using exponents instead of logs?

* What is the base?
* What is the exponent?
* What is the result?
END_PGML_HINT

BEGIN_PGML_SOLUTION

* The base is [$base]
* Logarithms *are* exponents, so the exponent is `[$exp]`
* The result is `[$result]`

In exponential form, we're saying:
[` [$base]^{[$exp]} = [$result] `]

END_PGML_SOLUTION


COMMENT("Funded by US DoE Title V: Opening Gateways grant.");

ENDDOCUMENT();        
