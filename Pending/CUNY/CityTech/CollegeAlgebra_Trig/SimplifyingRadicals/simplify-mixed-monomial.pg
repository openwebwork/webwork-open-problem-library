##DESCRIPTION
##  Algebra problem: Simplify square root of a mixed monomial
##ENDDESCRIPTION


## DBsubject(Algebra)
## DBchapter(Properties of exponents, rational exponents and radicals)
## DBsection(Properties of rational exponents and radicals)
## Institution(CUNY City Tech)
## Author(K. Andrew Parker)
## Level(2)
## Language(en)
## MO(1)
## KEYWORDS('algebra', 'radical', 'radicals', 'radical expression')


########################################################################

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "contextLimitedPowers.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

    # code essentially from Davide Cervone 4/25/10
    ###########################
    #
    # Subclass the numeric functions
    #
    package my::Function::numeric;
    our @ISA = ('Parser::Function::numeric');

    #
    # Override sqrt() to return a special value (usually 1) when evaluated
    # effectively eliminating it from the product.
    #
    sub sqrt {
      my $self = shift;
      my $value = $self->context->flag("setSqrt");
 
 return $value+2 if $value && $_[0] == 1; # force sqrt(1) to be incorrect
      return $value if $value;
      return $self->SUPER::sqrt(@_);
    }

    #
    # end of subclass
    #
package main;

    Context("Numeric")->variables->are(
      a => ["Real", limits => [0,2]],    # only needed if x is used in the square roots\
      b => ["Real", limits => [0,2]],
    );
    #
    # make sqrt() use our subclass
    #
    Context()->functions->set(sqrt=>{class=>'my::Function::numeric'});
    Context()->flags->set(reduceConstantFunctions=>0);
    #
   #
    # Don't allow fractional powers (avoids 1/2 power)
    # [Could subclass exponentiation to handle that as well]
    #
    LimitedPowers::OnlyNonNegativeIntegers();

$reducedSqrt = sub  {
      my ($correct,$student,$ans) = @_;
      return 0 if $ans->{isPreview} || $correct != $student;
      #
      #  Get parsed formula for student and correct answers
      #
      $student = $ans->{student_formula};
      $correct = $correct->{original_formula} if defined $correct->{original_formula};
      #
      # check if equal when sqrt's are replaced by 1
      #
      Context()->flags->set(setSqrt => 1);
      delete $correct->{test_values}, $student->{test_values};
      my $OK = ($correct == $student);
      Context()->flags->set(setSqrt => 0);
      #
      Value::Error("Check to see if your answer is simplified.") unless $OK;
      return $OK;
    };

Context()->flags->set(reduceConstants=>0, reduceConstantFunctions=>0, formatStudentAnswer=>'parsed');
Parser::Number::NoDecimals;

##############################################################
#
#  Setup
#
#

$out = random(3,7,1);
$in = $out**2;
$expA = random(1,4,1);
$expB = random(0,4,1);
$radA = $expA*2;
$radB = $expB*2 + 1;

$rad = Compute("$in a^$radA b^$radB")->reduce;

$ans = Compute("$out a^$expA b^$expB sqrt(b)")->reduce;

### For solutions ###

$ansStringB = "\sqrt{b}";
$rawStringB = "\sqrt{b}";
$varStringB = "b";
$redStringB = "\sqrt{b}";
for $n (2..$radB) {
   $varStringB = $varStringB . "\cdot b";
   $rawStringB = $rawStringB . "\sqrt{b}";
   $ansStringB = $ansStringB . "\left(\sqrt{b}" if ($n % 2 == 0);
   $ansStringB = $ansStringB . "\sqrt{b}\right)" if ($n % 2 == 1);
   $redStringB = $redStringB . "(b)" if ($n % 2 == 1);
};

$ansStringA = "\left(\sqrt{a}";
$rawStringA = "\sqrt{a}";
$varStringA = "a";
$redStringA = "";
for $n (2..$radA) {
   $varStringA = $varStringA . "\cdot a";
   $rawStringA = $rawStringA . "\sqrt{a}";
   $ansStringA = $ansStringA . "\left(\sqrt{a}" if ($n % 2 == 1);
   $ansStringA = $ansStringA . "\sqrt{a}\right)" if ($n % 2 == 0);
   $redStringA = $redStringA . "(a)" if ($n % 2 == 0);
};



##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT

$PAR
Simplify the radical without using rational exponents. 
$BR
Assume all variables are restricted to positive values (that way we don't have to worry about absolute values).
$PAR
\( \large{ \sqrt{$rad}} \) = \{ ans_rule(10) \}

END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#

ANS($ans->cmp(checker=>$reducedSqrt)->withPostFilter(sub { 
  my $ans = shift; 
  $ans->{ans_message} = "Use 'sqrt(...)' for radicals instead of rational exponents."  
    if $ans->{ans_message} eq "Powers must be positive integer constants";
  return $ans; 
}));

Context()->texStrings;
BEGIN_HINT

Notice that the problem specifically tells you to assume that variables only represent positive numbers. $BR
This means we don't have to worry about using absolute values in our answer.
$PAR
So we may simplify \( \sqrt{x^2} = x \) 
END_HINT
BEGIN_SOLUTION

$BBOLD Break down \(a^$radA\) and \(b^$radB\): $EBOLD $BR
\( \displaystyle \sqrt{ $in a^$radA b^$radB} = \sqrt{$in \cdot $varStringA \cdot $varStringB} \)
$PAR
$BBOLD Split the radical: $EBOLD $BR
\( \displaystyle \sqrt{$in \cdot $varStringA \cdot $varStringB} = \sqrt{$in} $rawStringA $rawStringB \)
$PAR
$BBOLD Group matching radicals into pairs: $EBOLD $BR
\( \displaystyle \sqrt{$in} $rawStringA $rawStringB = \sqrt{$in} $ansStringA $ansStringB \)
$PAR
$BBOLD Simplify each group: $EBOLD $BR
Remember that \( \sqrt{x} \cdot \sqrt{x} = x \) for all positive values of \(x\).
$BR
\( \displaystyle \sqrt{$in} $ansStringA $ansStringB = $out $redStringA $redStringB \)
$PAR
\( \displaystyle $out $redStringA $redStringB = $ans \)

END_SOLUTION
Context()->normalStrings;

COMMENT("Funded by US DoE Title V: Opening Gateways grant.");

ENDDOCUMENT();        
