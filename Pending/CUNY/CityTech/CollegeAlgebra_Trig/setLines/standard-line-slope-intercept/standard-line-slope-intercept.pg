##DESCRIPTION
##  Algebra problem: given equation of a line, identify slope and y-intercept and then graph the line
##ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Linear equations and functions)
## DBsection(Graphs of lines)
## Institution(CUNY City Tech)
## Author(K. Andrew Parker)
## Level(2)
## Language(en)
## MO(1)
## KEYWORDS('slope', 'line', 'graph')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "parserMultiAnswer.pl",
   "parserImplicitEquation.pl",
   "contextFraction.pl",
   "AppletObjects.pl");

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

#
#  Make a subclass of MultiAnswer
#
package myMultiAnswer;
our @ISA = ('MultiAnswer');

sub new {
  my $self = shift;
  my $ma = $self->SUPER::new(@_);
  $ma->{part} = 1;
  $ma->{answerName} = 'answerBox';
  $ma->{id} = $MultiAnswer::answerPrefix.$ma->{answerName};
  $ma->{singleResult} = 0;
  $ma->{namedRules}  = 1;
  $ma->{checkTypes} = 0;
  return $ma;
}

sub ANS_NAME {
  my $self = shift;
  my $i = shift;
  return ($i == 0 ? $self->{answerName} : $self->{id}.'_'.$i);
}

package main;

Context("Fraction");
Context()->flags->set(reduceConstants=>0);

# Randomize slope and intercept - ensuring an unreduce-able fraction
$dy = non_zero_random(-5,5,1);
do { $dx = random(2,5,1); } until ( gcf($dx, $dy) == 1 );
$m = Fraction($dy,$dx);

$b = non_zero_random(-4,4,1);
$y = $b+$dy;

Context("Point");
Context()->variables->are(x=>["Real", limits=>[-6,6]], y=>["Real",limits=>[-5,5]]);
$B = Point(0,$b);

Context("ImplicitEquation");
Context()->flags->set(reduceConstants=>0);
Context()->variables->are(x=>["Real", limits=>[-6,6]], y=>["Real",limits=>[-5,5]]);
Context()->{error}{msg}{"Your formula doesn't look like an implicit equation"} 
  = "It looks like you did not enter an equation. <BR> Double check your entry and try again.";

$C = -$dx*$b;
$answer = ImplicitEquation("$dy x - $dx y = $C", solutions=>[[0,$b],[$dx,$y]])->reduce;

$multians = myMultiAnswer->new($answer)->with(
#  format => 'slope: %2$s , intercept: %3$s',
#  tex_format => 'slope: %2$s , intercept: %3$s',
  checkTypes=>0,
  allowBlankAnswers=>1,
  checker => sub {
      my ( $correct, $student, $self, $ans_hash ) = @_;
      my ( $correctEqn ) = @{$correct};
      my ( $ggbStu ) = @{$student};
      return 0 if $self->{ans}[0]->{isPreview};
      $ggbStu = ImplicitEquation($ggbStu);
      Value->Error("Your line doesn't match the given equation.") if $ggbStu != $correctEqn;
      return 1;
  }
);

######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the
# command end command
# so that they don't get in the way
###################################


$appletName = "ggbfoo";

$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "geogebra.jar",
   codebase                 => findAppletCodebase("geogebra.jar"),
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => 'configure',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   width                 => 630,              # may want to modify width
   height                => 535,              # may want to modify height
  # mayscript             => "true",
   debugMode             => 0,   # set debugMode to 0 for no debug
                                              # to 1 to make xml representation visible
                                              # to 2 to add alerts detailing progression
                                              # through the applet
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   #submitActionScript => '',
   selfLoading           => 1,
   params     => GEOGEBRA_PARAMS(),# paste parameters in

);


###############################################
#
#  PNG picture of GeoGebra applet for hardcopy

$im = image( "standard-line-slope-intercept.png", width=>630, height=>535, tex_size=>800 );


##################################
# Setup GeogebraWebApplet --
###################################

###############################################
#
#  For persistence of GeoGebra applet state 
#  when answers are submitted or page is refreshed.
#  Uses JavaScript interface to GeoGebra.

HEADER_TEXT(
qq! 
<script language="javascript">
   function ggbOnInit(param) {
       if (param == "$appletName") {
           applet_loaded(param,1);  // report that applet is ready. 
           ww_applet_list[param].safe_applet_initialize(2);
       }
   } 
</script>
<noscript>For this question to work properly, 
you must enable JavaScript, or use another browser 
(or computer) on which JavaScript works.</noscript>
!);


#######################################################
#
#  For setting initial values in GeoGebra from WeBWorK
#  Uses JavaScript interface to GeoGebra.

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setAppletCoefficients() {
   var applet=getApplet("$appletName");   // alert("Updating coefficients");
   if (typeof(applet)!="undefined") {
     if (typeof(applet.setValue)!="undefined") {
     
     ////////////////////////////////////////////////////////////////
     //  List the values of the parameters to be set in the applet here
     
          // Set y-intercept: b=0, set point: (c,d) = (2,2)
          applet.setValue("c", 2); 
          applet.setValue("d", 2);    
          applet.setValue("b", 0);
     } else {
          setTimeout("setAppletCoefficients()", 1000);
     }
   } else {
      setTimeout("setAppletCoefficients()",1000);
   }
}
ww_applet_list["$appletName"].setConfig = function() {setAppletCoefficients()};
</script>
END_SCRIPT

HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );

<script language="javascript">
function getAppletValues() {
    console.log("getAppletValues() entered");
	// get a handle for the applet object
	var applet = $appletName;
	var m = applet.getValue("m");
	var b = applet.getValue("b");
        return( 'y = ' + m + '*x + ' + b ); 
}
 </script>
END_SCRIPT

###################################
#insert applet into body  -- this does not need to be changed
# except to adjust the insertion of the reinitialize_button or
# a hidden AnswerBox
###################################
 TEXT($PAR,  MODES(TeX=>$im,
                      HTML=>$applet->insertAll(
                                debug =>0,
                                reinitialize_button => 1,
                                includeAnswerBox=>1,
 )));

##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT

$PAR
Given the equation \( $answer \), first identify the slope: \{ $m->ans_rule(10) \};
$BR
Then identify the y-intercept: \{ $B->ans_rule(10) \} (give your answer as a point: \( (x,y) \).)
$PAR
Now drag the points on the graph to create the line for \( $answer \).
$PAR
END_TEXT
Context()->normalStrings;

TEXT( "run SetConfig", q!<script language="javascript">setConfig()</script> !) if $inputs_ref->{ "${appletName}_state"} =~ "restart_applet";

##############################################################
#
#  Answers
#
#

NAMED_ANS( $multians->cmp() );
ANS($m->cmp() );
ANS($B->cmp() );

Context()->texStrings;
BEGIN_HINT

The equation is given to you in standard form.
$PAR
By isolating \(y\), we can take advantage of being in slope-intercept form.

END_HINT
Context()->normalStrings;

sub GEOGEBRA_PARAMS {
    my $result = {
showResetIcon=>"false" ,
enableRightClick=>"false" ,
enableLabelDrags=>"false",
showMenuBar=>"false" ,
showToolBar=>"false",
showAlgebraInput=>"false",
enableShiftDragZoom=>"false",
useBrowserForJS=>"true",
ggbbase64=>""};
$result;
}

COMMENT("Funded by US DoE Title V: Opening Gateways grant.");

ENDDOCUMENT();        

