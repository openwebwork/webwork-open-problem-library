##DESCRIPTION
##  Algebra problem: Solve a system of 2 linear equations in 2 variables by graphing
##ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Systems of equations and inequalities)
## DBsection(Linear systems)
## Institution(CUNY City Tech)
## Author(K. Andrew Parker)
## Level(2)
## Language(en)
## MO(1)
## KEYWORDS('linear systems', 'system of linear equations')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "parserMultiAnswer.pl",
   "parserImplicitEquation.pl",
   "contextFraction.pl",
   "AppletObjects.pl");

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

#
#  Make a subclass of MultiAnswer
#
package myMultiAnswer;
our @ISA = ('MultiAnswer');

sub new {
  my $self = shift;
  my $ma = $self->SUPER::new(@_);
  $ma->{part} = 1;
  $ma->{answerName} = 'answerBox';
  $ma->{id} = $MultiAnswer::answerPrefix.$ma->{answerName};
  $ma->{singleResult} = 0;
  $ma->{namedRules}  = 1;
  $ma->{checkTypes} = 0;
  return $ma;
}

sub ANS_NAME {
  my $self = shift;
  my $i = shift;
  return ($i == 0 ? $self->{answerName} : $self->{id}.'_'.$i);
}

package main;

Context("Fraction");
Context()->parens->set("("=>{type=>"Point"});

#determine y-intercepts
$a = non_zero_random(-5,5,1);
do { $b = non_zero_random(-5,5,1); } until ($a != $b);

#generate integer point of intersection
$intX = non_zero_random(-6,6,1);
do { $intY = non_zero_random(-5,5,1); } until ( $intY != $a );

$int = Point($intX, $intY);

$dyA = $intY-$a;
$dxA = $intX;
$mA = Fraction($dyA,$dxA);
$dyB = $intY-$b;
$dxB = $intX;
$mB = Fraction($dyB,$dxB);

Context("ImplicitEquation");
Context()->variables->are(x=>["Real", limits=>[-6,6]], y=>["Real",limits=>[-10,10]]);
#Context()->flags->set(reduceConstants=>0);
Context()->noreduce('(-x)+y', '(-x)-y');
Context()->{error}{msg}{"Your formula doesn't look like an implicit equation"} 
  = "It looks like you did not enter an equation. <BR> Double check your entry and try again.";

$LHSA = Formula("$dyA x - $dxA y")->reduce;
$RHSA = Formula("-$dxA*$a")->reduce;
$LHSB = Formula("$dyB x - $dxB y")->reduce;
$RHSB = Formula("-$dxB*$b")->reduce;

$answerA = ImplicitEquation("$LHSA = $RHSA", solutions=>[[$intX,$intY],[0,$a]]);
$answerB = ImplicitEquation("$LHSB = $RHSB", solutions=>[[$intX,$intY],[0,$b]]);

$combinedAns = List($LHSA, $RHSA, $LHSB, $RHSB);

$multians = myMultiAnswer->new( $combinedAns )->with(
  format => 'slope: %1$s',
  tex_format => 'slope: %1$s',
  checkTypes=>0,
  allowBlankAnswers=>1,
  checker => sub {
      my ( $correct, $student, $self, $ans_hash ) = @_;
      my ( $corList ) = @{$correct};
      my ( $stuString ) = @{$student};  #stuString from ggb is "dxA,dyA,intA,dxB,dyB,intB"
      my @stu = split(",", $stuString);
      my $corString = $corList->string;   # this is stupid, but I can't get ->extract to work.
      my @cor = split(",",$corString);
      my $cLHSA =$cor[0]; 
      my $cRHSA =$cor[1]; 
      my $cLHSB =$cor[2]; 
      my $cRHSB =$cor[3]; 
      $ansA = ImplicitEquation("$cLHSA = $cRHSA"); 
      $ansB = ImplicitEquation("$cLHSB = $cRHSB"); 
      my $sLHSA = Formula("$stu[1] x - $stu[0] y")->reduce;
      my $sLHSB = Formula("$stu[4] x - $stu[3] y")->reduce;
      my $sRHSA = Formula("-$stu[0]*$stu[2]")->reduce;
      my $sRHSB = Formula("-$stu[3]*$stu[5]")->reduce;
      my $stuA = ImplicitEquation("$sLHSA = $sRHSA");
      my $stuB = ImplicitEquation("$sLHSB = $sRHSB");
      $self->{ans}[0]->{preview_latex_string} = "\text{you graphed: }".$stuA->TeX."\text{ and }".$stuB->TeX;
      return 0 if $self->{ans}[0]->{isPreview};
      my $matchA = ($stuA == $ansA || $stuB == $ansA) ? 1 : 0;
      my $matchB = ($stuA == $ansB || $stuB == $ansB) ? 1 : 0;
      Value->Error("Your graph of \(%s\) is incorrect.",$ansA->TeX) unless $matchA;
      Value->Error("Your graph of \(%s\) is incorrect.",$ansB->TeX) unless $matchB;
      return $matchA*$matchB;
  }
);

######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the
# command end command
# so that they don't get in the way
###################################


$appletName = "ggbfoo";

$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "geogebra.jar",
   codebase                 => findAppletCodebase("geogebra.jar"),
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => 'configure',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   width                 => 630,              # may want to modify width
   height                => 535,              # may want to modify height
  # mayscript             => "true",
   debugMode             => 0,   # set debugMode to 0 for no debug
                                              # to 1 to make xml representation visible
                                              # to 2 to add alerts detailing progression
                                              # through the applet
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   #submitActionScript => '',
   selfLoading           => 1,
   params     => GEOGEBRA_PARAMS(),# paste parameters in

);


###############################################
#
#  PNG picture of GeoGebra applet for hardcopy

$im = image( "two-lines-parallel.png", width=>630, height=>535, tex_size=>800 );


##################################
# Setup GeogebraWebApplet --
###################################

###############################################
#
#  For persistence of GeoGebra applet state 
#  when answers are submitted or page is refreshed.
#  Uses JavaScript interface to GeoGebra.

HEADER_TEXT(
qq! 
<script language="javascript">
   function ggbOnInit(param) {
       if (param == "$appletName") {
           applet_loaded(param,1);  // report that applet is ready. 
           ww_applet_list[param].safe_applet_initialize(2);
       }
   } 
</script>
<noscript>For this question to work properly, 
you must enable JavaScript, or use another browser 
(or computer) on which JavaScript works.</noscript>
!);


#######################################################
#
#  For setting initial values in GeoGebra from WeBWorK
#  Uses JavaScript interface to GeoGebra.

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setAppletCoefficients() {
   var applet=getApplet("$appletName");   // alert("Updating coefficients");
   if (typeof(applet)!="undefined") {
     if (typeof(applet.setValue)!="undefined") {
     
     ////////////////////////////////////////////////////////////////
     //  List the values of the parameters to be set in the applet here
     
          // Set fixed point A: (aX, aY); (bX,bY) = (0,0) by default; y=mx+b for given line
          applet.setValue("aX", $Ax); 
          applet.setValue("aY", $Ay);    
          applet.setValue("m", $mGiven);
          applet.setValue("b", $bGiven);
     } else {
          setTimeout("setAppletCoefficients()", 1000);
     }
   } else {
      setTimeout("setAppletCoefficients()",1000);
   }
}
ww_applet_list["$appletName"].setConfig = function() {setAppletCoefficients()};
</script>
END_SCRIPT

HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );

<script language="javascript">
function getAppletValues() {
    console.log("getAppletValues() entered");
	// get a handle for the applet object
	var applet = $appletName;
	var dxA = applet.getValue("AX");
	var dyA = applet.getValue("dyA");
        var intA = applet.getValue("a");
	var dxB = applet.getValue("BX");
	var dyB = applet.getValue("dyB");
        var intB = applet.getValue("b");
        return( dxA +","+ dyA +","+ intA +","+ dxB +","+ dyB +","+ intB ); 
}
 </script>
END_SCRIPT

###################################
#insert applet into body  -- this does not need to be changed
# except to adjust the insertion of the reinitialize_button or
# a hidden AnswerBox
###################################
 TEXT($PAR,  MODES(TeX=>$im,
                      HTML=>$applet->insertAll(
                                debug =>0,
                                reinitialize_button => 1,
                                includeAnswerBox=>1,
 )));

##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT

$PAR
Graph these two lines:
$BR
\[ $answerA \]
\[ $answerB \]
$PAR
Where do the two lines intersect? \{ $int->ans_rule(10) \} Your answer must be a point: \( (x,y) \)
$PAR

END_TEXT
Context()->normalStrings;

TEXT( "run SetConfig", q!<script language="javascript">setConfig()</script> !) if $inputs_ref->{ "${appletName}_state"} =~ "restart_applet";

##############################################################
#
#  Answers
#
#

NAMED_ANS( $multians->cmp() );
ANS($int->cmp() );

Context()->texStrings;
BEGIN_HINT

$PAR
Both equations are given in standard form. You should consider isolating \(y\) in each equation to make use of slope-intercept form instead.
$PAR
It is probably easiest, for each line, to graph the intercept with one point - and drag the second point to a location on the grid that satisfies the necessary slope.
$PAR
You do not need to graph the point of intersection for this problem to work.
$PAR
END_HINT
Context()->normalStrings;

sub GEOGEBRA_PARAMS {
    my $result = {
showResetIcon=>"false" ,
enableRightClick=>"false" ,
enableLabelDrags=>"false",
showMenuBar=>"false" ,
showToolBar=>"false",
showAlgebraInput=>"false",
enableShiftDragZoom=>"false",
useBrowserForJS=>"true",
ggbbase64=>""};
$result;
}

COMMENT("Funded by US DoE Title V: Opening Gateways grant.");


ENDDOCUMENT();        
