##DESCRIPTION
##  Algebra problem: given point and slope, graph line, write down its equation, and identify y-intercept
##ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Linear equations and functions)
## DBsection(Graphs of lines)
## Institution(CUNY City Tech)
## Author(K. Andrew Parker)
## Level(2)
## Language(en)
## MO(1)
## KEYWORDS('slope', 'line', 'graph')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "parserMultiAnswer.pl",
   "parserImplicitEquation.pl",
   "contextFraction.pl",
   "AppletObjects.pl");

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

#
#  Make a subclass of MultiAnswer
#
package myMultiAnswer;
our @ISA = ('MultiAnswer');

sub new {
  my $self = shift;
  my $ma = $self->SUPER::new(@_);
  $ma->{part} = 1;
  $ma->{answerName} = 'answerBox';
  $ma->{id} = $MultiAnswer::answerPrefix.$ma->{answerName};
  $ma->{singleResult} = 0;
  $ma->{namedRules}  = 1;
  $ma->{checkTypes} = 0;
  return $ma;
}

sub ANS_NAME {
  my $self = shift;
  my $i = shift;
  return ($i == 0 ? $self->{answerName} : $self->{id}.'_'.$i);
}

package main;

Context("Fraction");
Context()->parens->set("("=>{type=>"Point"});

# Randomly select a point - ensure that slope will fit within window
$Ax = non_zero_random(-6,6,1);
$Ay = non_zero_random(-5,5,1);

# Construct range for dx and dy:
$left = -6 - $Ax;
$right = 6 - $Ax;
$up = 5 - $Ay;
$down = -5 - $Ay;

# Randomize slope and intercept - ensuring an unreduce-able fraction
do { $dx = non_zero_random($left,$right,1); } until ( abs($dx) != 1 );
do { $dy = non_zero_random($down,$up,1); } until ( gcf(abs($dx), abs($dy)) == 1 );
$m = Fraction($dy,$dx);

$Bx = $Ax + $dx;
$By = $Ay + $dy;

#if ( sgn($Ax*$Ay) != sgn($dx*$dy) ) {
#   if ( random(0,1,1) == 0 ) { $Ax = $Ax*-1; }
#   else { $Ay = $Ay*-1; }
#};

$b = Fraction(-1*$dy*$Ax+$dx*$Ay, $dx)->reduce;

$A = Point($Ax,$Ay);
$B = Point(0,$b);

$multians = myMultiAnswer->new($m)->with(
  format => 'slope: %1$s',
  tex_format => 'slope: %1$s',
  checkTypes=>0,
  allowBlankAnswers=>1,
  checker => sub {
      my ( $correct, $student, $self, $ans_hash ) = @_;
      my ( $correctM ) = @{$correct};
      my ( $mStu ) = @{$student};
      return 0 if $self->{ans}[0]->{isPreview};
      $mStu = Fraction($mStu);
      $self->{ans}[0]->{preview_latex_string} = $mStu->TeX; # display reduced preview
      my ($ID, $PN) = ($correctM > 0) ? ("decreasing","positive") : ("increasing","negative");
      Value::Error("The slope is supposed to be $PN <BR> But your line is $ID.") if ($mStu*$correctM < 0);
      Value->Error("The slope of your line doesn't match the one that is given.") if $mStu != $correctM;
      return 1;
  }
);

Context("ImplicitEquation");
Context()->variables->are(x=>["Real", limits=>[-6,6]], y=>["Real",limits=>[-5,5]]);
Context()->flags->set(reduceConstants=>0);
Context()->{error}{msg}{"Your formula doesn't look like an implicit equation"} 
  = "It looks like you did not enter an equation. <BR> Double check your entry and try again.";

$LHS = Formula( "y- $Ay" )->reduce;
$RHS = Formula( "x - $Ax" )->reduce;

$answer = ImplicitEquation("$LHS = $m ( $RHS )", solutions=>[[$Ax,$Ay],[$Bx,$By],[0,$b]]);


######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the
# command end command
# so that they don't get in the way
###################################


$appletName = "ggbfoo";

$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "geogebra.jar",
   codebase                 => findAppletCodebase("geogebra.jar"),
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => 'configure',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   width                 => 630,              # may want to modify width
   height                => 535,              # may want to modify height
  # mayscript             => "true",
   debugMode             => 0,   # set debugMode to 0 for no debug
                                              # to 1 to make xml representation visible
                                              # to 2 to add alerts detailing progression
                                              # through the applet
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   #submitActionScript => '',
   selfLoading           => 1,
   params     => GEOGEBRA_PARAMS(),# paste parameters in

);


###############################################
#
#  PNG picture of GeoGebra applet for hardcopy

$im = image( "fixed-point-slope.png", width=>630, height=>535, tex_size=>800 );


##################################
# Setup GeogebraWebApplet --
###################################

###############################################
#
#  For persistence of GeoGebra applet state 
#  when answers are submitted or page is refreshed.
#  Uses JavaScript interface to GeoGebra.

HEADER_TEXT(
qq! 
<script language="javascript">
   function ggbOnInit(param) {
       if (param == "$appletName") {
           applet_loaded(param,1);  // report that applet is ready. 
           ww_applet_list[param].safe_applet_initialize(2);
       }
   } 
</script>
<noscript>For this question to work properly, 
you must enable JavaScript, or use another browser 
(or computer) on which JavaScript works.</noscript>
!);


#######################################################
#
#  For setting initial values in GeoGebra from WeBWorK
#  Uses JavaScript interface to GeoGebra.

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setAppletCoefficients() {
   var applet=getApplet("$appletName");   // alert("Updating coefficients");
   if (typeof(applet)!="undefined") {
     if (typeof(applet.setValue)!="undefined") {
     
     ////////////////////////////////////////////////////////////////
     //  List the values of the parameters to be set in the applet here
     
          // Set fixed point A: (a,b) = ($Ax, $Ay) and B: = (0,0)
          applet.setValue("a", $Ax); 
          applet.setValue("b", $Ay);    
          applet.setValue("c", 0);
          applet.setValue("d", 0);
     } else {
          setTimeout("setAppletCoefficients()", 1000);
     }
   } else {
      setTimeout("setAppletCoefficients()",1000);
   }
}
ww_applet_list["$appletName"].setConfig = function() {setAppletCoefficients()};
</script>
END_SCRIPT

HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );

<script language="javascript">
function getAppletValues() {
    console.log("getAppletValues() entered");
	// get a handle for the applet object
	var applet = $appletName;
	var DX = applet.getValue("DX");
	var DY = applet.getValue("DY");
        return( DY + ' / ' + DX ); 
}
 </script>
END_SCRIPT

###################################
#insert applet into body  -- this does not need to be changed
# except to adjust the insertion of the reinitialize_button or
# a hidden AnswerBox
###################################
 TEXT($PAR,  MODES(TeX=>$im,
                      HTML=>$applet->insertAll(
                                debug =>0,
                                reinitialize_button => 1,
                                includeAnswerBox=>1,
 )));

##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT

$PAR
Graph the line that passes through the point \( $A \) with a slope of \( $m \).
$PAR
Give an equation for this line. \{ ans_rule(20) \}
$PAR
What is the y-intercept for this line? \{ ans_rule(20) \} (give your answer as a point.)


END_TEXT
Context()->normalStrings;

TEXT( "run SetConfig", q!<script language="javascript">setConfig()</script> !) if $inputs_ref->{ "${appletName}_state"} =~ "restart_applet";

##############################################################
#
#  Answers
#
#

NAMED_ANS( $multians->cmp() );
ANS($answer->cmp() );
ANS($B->cmp() );

Context()->texStrings;
BEGIN_HINT

You do not need to graph the \(y\)-intercept for this problem.
$PAR
The point at \($A\) is not draggable because the problem tells you that your line must pass through \($A\).
$PAR
You only need to drag the second point to a location on the grid that satisfies the necessary slope of \($m\).

END_HINT
Context()->normalStrings;

sub GEOGEBRA_PARAMS {
    my $result = {
showResetIcon=>"false" ,
enableRightClick=>"false" ,
enableLabelDrags=>"false",
showMenuBar=>"false" ,
showToolBar=>"false",
showAlgebraInput=>"false",
enableShiftDragZoom=>"false",
useBrowserForJS=>"true",
ggbbase64=>""};
$result;
}

COMMENT("Funded by US DoE Title V: Opening Gateways grant.");

ENDDOCUMENT();        
