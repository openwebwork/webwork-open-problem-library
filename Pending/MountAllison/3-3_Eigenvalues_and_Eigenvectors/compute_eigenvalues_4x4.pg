## DESCRIPTION
## Compute the eigenvalues of a 4x4 matrix.
##   All coefficients and eigenvalues will be small real integers. There will be at least 2 distinct eigenvalues, and if an eigenvalue is repeated (algebraic multiplicity > 1) then the student is expected to list it multiple times.
##   The matrix will have sufficiently many zeroes that computing its eigenvalues will not be *too* nasty. They can all be found via the rational root theorem in the worst case, and usually without having to factor a degree-2 or degree-3 polynomial at all.
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Eigenvalues and eigenvectors)
## DBsection(Computing eigenvalues and eigenvectors)
## Date(March 22, 2020)
## Institution(Mount Allison University)
## Author(Nathaniel Johnston)
## MO(1)
## TitleText1('Introduction to Linear and Matrix Algebra')
## AuthorText1('Nathaniel Johnston')
## EditionText1('1')
## Section1('3.3')
## Problem1('')
## KEYWORDS('linear algebra','matrix','eigenvalue','algebraic multiplicity')
## http://www.njohnston.ca/publications/introduction-to-linear-and-matrix-algebra/

##############################################################
#  Initialization
##############################################################

DOCUMENT();      

loadMacros(
    "PGstandard.pl",
    "MathObjects.pl",
    "parserMultiAnswer.pl",
);

TEXT(beginproblem());

##############################################################
#  Problem Setup
##############################################################

Context('Matrix');

do {
    $eig1 = random(-3,1);
    $eig2 = random($eig1,2);
    $eig3 = random($eig2,3);
    $eig4 = random(1+$eig3,5);
    
    $flg = random(1,5);
    if($flg == 1) {
        $P = Matrix([[1, 0,-1, 0],[0, 1, 0, 0],[3, 0,-2, 0],[-3, 0, 4, 1]]);
        $PI = Matrix([[-2,-0, 1, 0],[0, 1, 0,0],[-3, 0, 1, 0],[6, 0,-1, 1]]);
    } elsif($flg == 2) {
        $P = Matrix([[-2,1,0,1],[0, 0, 1, 0],[1, 0, 0,-3],[-3, 1, 0, 3]]);
        $PI = Matrix([[3, 0,-2,-3],[6, 0,-3,-5],[0, 1, 0, 0],[1, 0,-1,-1]]);
    } elsif($flg == 3) {
        $P = Matrix([[0,-1, 1, 3],[0,-1, 1, 2],[1, 0, 0, 0],[0, 3,-2,-5]]);
        $PI = Matrix([[0, 0, 1,0],[1, 1, 0, 1],[-1, 4, 0, 1],[1,-1, 0, 0]]);
    } elsif($flg == 4) {
        $P = Matrix([[0,0,3,1],[1,0,0,0],[0,1,3,0],[0,0,-5,-2]]);
        $PI = Matrix([[0,1,0,0],[-6, 0, 1,-3],[2, 0, 0, 1],[-5, 0, 0,-3]]);
    } else {
        $P = Matrix([[0, 0, 1, 0],[-3, 1, 0,-2],[-1, 1, 0, 3],[-2, 1, 0, 0]]);
        $PI = Matrix([[0,-3,-2, 5],[0,-6,-4,11],[1, 0, 0, 0],[0, 1, 1,-2]]);
    }
    
    if($eig1 == $eig2) {
        if ($eig2 == $eig3) {
            $flg = random(1,5);
            if($flg == 1) {
                $D = Matrix([[$eig1,1,0,0],[0,$eig2,1,0],[0,0,$eig3,0],[0,0,0,$eig4]]);
            } elsif($flg == 2) {
                $D = Matrix([[$eig1,1,0,0],[0,$eig2,0,0],[0,0,$eig3,0],[0,0,0,$eig4]]);
            } elsif($flg == 3) {
                $D = Matrix([[$eig1,0,0,0],[0,$eig2,1,0],[0,0,$eig3,0],[0,0,0,$eig4]]);
            } elsif($flg == 4) {
                $D = Matrix([[$eig1,0,1,0],[0,$eig2,0,0],[0,0,$eig3,0],[0,0,0,$eig4]]);
            } else {
                $D = Matrix([[$eig1,0,0,0],[0,$eig2,0,0],[0,0,$eig3,0],[0,0,0,$eig4]]);
            }
        } else {
            $flg = random(1,2);
            if($flg == 1) {
                $D = Matrix([[$eig1,1,0,0],[0,$eig2,0,0],[0,0,$eig3,0],[0,0,0,$eig4]]);
            } else {
                $D = Matrix([[$eig1,0,0,0],[0,$eig2,0,0],[0,0,$eig3,0],[0,0,0,$eig4]]);
            }
        }
    } elsif ($eig2 == $eig3) {
        $flg = random(1,2);
        if($flg == 1) {
            $D = Matrix([[$eig1,0,0,0],[0,$eig2,1,0],[0,0,$eig3,0],[0,0,0,$eig4]]);
        } else {
            $D = Matrix([[$eig1,0,0,0],[0,$eig2,0,0],[0,0,$eig3,0],[0,0,0,$eig4]]);
        }
    } else {
        $D = Matrix([[$eig1,0,0,0],[0,$eig2,0,0],[0,0,$eig3,0],[0,0,0,$eig4]]);
    }
    
    $A = $P * $D * $PI;
} until ($A->norm_one < 25);

$multians = MultiAnswer($eig4,$eig3,$eig2,$eig1)->with(
    singleResult => 1,
    allowBlankAnswers => 0,
    separator => ', ', 
    tex_separator => ', ', 
    checker => sub {
        my ( $correct, $student, $answerHash ) = @_;
        my ( $s0, $s1, $s2, $s3 ) = @{$student};
        if($s3 == $eig1) {
        	if(($s0 == $eig2 && $s1 == $eig3 && $s2 == $eig4) || ($s0 == $eig2 && $s2 == $eig3 && $s1 == $eig4) || ($s1 == $eig2 && $s0 == $eig3 && $s2 == $eig4) || ($s1 == $eig2 && $s2 == $eig3 && $s0 == $eig4) || ($s2 == $eig2 && $s1 == $eig3 && $s0 == $eig4) || ($s2 == $eig2 && $s0 == $eig3 && $s1 == $eig4)) {
        		return 1;
        	} else {
        		return 0;
        	}
        } elsif($s3 == $eig2) {
        	if(($s0 == $eig1 && $s1 == $eig3 && $s2 == $eig4) || ($s0 == $eig1 && $s2 == $eig3 && $s1 == $eig4) || ($s1 == $eig1 && $s0 == $eig3 && $s2 == $eig4) || ($s1 == $eig1 && $s2 == $eig3 && $s0 == $eig4) || ($s2 == $eig1 && $s1 == $eig3 && $s0 == $eig4) || ($s2 == $eig1 && $s0 == $eig3 && $s1 == $eig4)) {
        		return 1;
        	} else {
        		return 0;
        	}
        } elsif($s3 == $eig3) {
        	if(($s0 == $eig1 && $s1 == $eig2 && $s2 == $eig4) || ($s0 == $eig1 && $s2 == $eig2 && $s1 == $eig4) || ($s1 == $eig1 && $s0 == $eig2 && $s2 == $eig4) || ($s1 == $eig1 && $s2 == $eig2 && $s0 == $eig4) || ($s2 == $eig1 && $s1 == $eig2 && $s0 == $eig4) || ($s2 == $eig1 && $s0 == $eig2 && $s1 == $eig4)) {
        		return 1;
        	} else {
        		return 0;
        	}
        } elsif($s3 == $eig4) {
        	if(($s0 == $eig1 && $s1 == $eig2 && $s2 == $eig3) || ($s0 == $eig1 && $s2 == $eig2 && $s1 == $eig3) || ($s1 == $eig1 && $s0 == $eig2 && $s2 == $eig3) || ($s1 == $eig1 && $s2 == $eig2 && $s0 == $eig3) || ($s2 == $eig1 && $s1 == $eig2 && $s0 == $eig3) || ($s2 == $eig1 && $s0 == $eig2 && $s1 == $eig3)) {
        		return 1;
        	} else {
        		return 0;
        	}
        } else {
        	return 0;
        }
    }
);

##############################################################
#  Text
##############################################################

Context()->texStrings;
BEGIN_TEXT
Compute all \( 4 \) eigenvalues of the matrix \( \displaystyle $A \). If an eigenvalue has algebraic multiplicity greater than \( 1 \), list it multiple times.
$BR
$BR
Eigenvalues: \{$multians->ans_rule(3)\}, \{$multians->ans_rule(3)\}, \{$multians->ans_rule(3)\}, \{$multians->ans_rule(3)\}
END_TEXT
Context()->normalStrings;

##############################################################
#  Answers and Solutions
##############################################################

$showPartialCorrectAnswers = 1;

ANS( $multians->cmp() );

ENDDOCUMENT();
