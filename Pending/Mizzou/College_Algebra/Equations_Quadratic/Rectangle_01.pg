# DESCRIPTION
# Find the side lengths of a rectangle using a quadratic equation.
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter(Equations and Inequalities')
## DBsection('Quadratic Equations')
## KEYWORDS('equations', 'quadratic')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
  "contextLimitedPowers.pl",
  "MUHelp.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;

package my::Function::numeric;
our @ISA = ('Parser::Function::numeric');
sub sqrt {
  my $self = shift;
  my $value = $self->context->flag("setSqrt");
  return $value+1 if $value && $_[0] == 1; # force sqrt(1) to be incorrect
  return $value if $value;
  return $self->SUPER::sqrt(@_);
}
package main;

### kind of messy, feel free to clean up!
sub primefac {
  $n = shift();
  @cp = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73 ,79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 819, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 
    739,    743,   751,    757,    761,    769,    773,    787,    797,    809, 
    811,    821,   823,    827,    829,    839,    853,    857,    859,    863, 
    877,    881,  883,    887,    907,    911,    919,    929,    937,    941, 
    947,    953,    967,    971,    977,    983,    991,    997,   1009,   1013, 
   1019,   1021,   1031,   1033,   1039,   1049,   1051,   1061,   1063,   1069, 
   1087,   1091,   1093,   1097,   1103,   1109,   1117,   1123,   1129,   1151, 
   1153,   1163,   1171,   1181,   1187,   1193,   1201,   1213,   1217,   1223, 
   1229,   1231,   1237,   1249,   1259,   1277,   1279,   1283,   1289,   1291, 
   1297,   1301,   1303,   1307,   1319,   1321,   1327,   1361,   1367,   1373, 
   1381,   1399,   1409,   1423,   1427,   1429,   1433,   1439,   1447,   1451, 
   1453,   1459,   1471,   1481,   1483,   1487,   1489,   1493,   1499,   1511, 
   1523,   1531,   1543,   1549,   1553,   1559,   1567,   1571,   1579,   1583, 
   1597,   1601,   1607,   1609,   1613,   1619,   1621,   1627,   1637,   1657, 
   1663,   1667,   1669,   1693,   1697,   1699,   1709,   1721,   1723,   1733, 
   1741,   1747,   1753,   1759,   1777,   1783,   1787,   1789,   1801,   1811, 
   1823,   1831,   1847,   1861,   1867,   1871,   1873,   1877,   1879,   1889, 
   1901,   1907,   1913,   1931,   1933,   1949,   1951,   1973,   1979,   1987, 
   1993,   1997,   1999,   2003,   2011,   2017,   2027,   2029,   2039,   2053, 
   2063,   2069,   2081,   2083,   2087,   2089,   2099,   2111,   2113,   2129, 
   2131,   2137,   2141,   2143,   2153,   2161,   2179,   2203,   2207,   2213, 
   2221,   2237,   2239,   2243,   2251,   2267,   2269,   2273,   2281,   2287, 
   2293,   2297,   2309,   2311,   2333,   2339,   2341,   2347,   2351,   2357, 
   2371,   2377,   2381,   2383,   2389,   2393,   2399,   2411,   2417,   2423, 
   2437,   2441,   2447,   2459,   2467,   2473,   2477,   2503,   2521,   2531, 
   2539,   2543,   2549,   2551,   2557,   2579,   2591,   2593,   2609,   2617, 
   2621,   2633,   2647,   2657,   2659,   2663,   2671,   2677,   2683,   2687, 
   2689,   2693,   2699,   2707,   2711,   2713,   2719,   2729,   2731,   2741, 
   2749,   2753,   2767,   2777,   2789,   2791,   2797,   2801,   2803,  2819, 
   2833,   2837,   2843,   2851,   2857,   2861,   2879,   2887,   2897,   2903, 
   2909,   2917,   2927,   2939,   2953,   2957,   2963,   2969,   2971,   2999);
  @facs = ();
  $r = $n;
  $count = 0;
  for ($i = 0; $i < scalar(@cp) && $cp[$i] <= $n && $r > 1; $i++) {
    if ($r % $cp[$i] == 0) {
      push(@facs,$cp[$i]);
      push(@facs,1);
      $r = $r/$cp[$i];
      while ($r % $cp[$i] == 0) {
        $r = $r/$cp[$i];
        $facs[$count+1] = $facs[$count+1] + 1;
      }
      $count = $count+2;
    }
  }
  return @facs;
}


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
Context()->functions->set(sqrt=>{class=>'my::Function::numeric'});
Context()->flags->set(reduceConstantFunctions=>0);
LimitedPowers::OnlyPositiveIntegers();

do {
  $k = random(1,15);
  $area = random(200,500,20);
  $disc = ($k)**2 + 4*$area;
  $answer1 = (-$k + sqrt($disc))/2;
  $answer2 = (-$k - sqrt($disc))/2;
} until ($answer2 < 0);

### to force simplified square roots and to display it nicely
Context()->texStrings;
$den = 2;
@facs = primefac($disc);
$ins = 1;
$out = 1;
for ($i = 0; $i < scalar(@facs); $i = $i+2) {
  $ins = $ins*(($facs[$i])**($facs[$i+1]%2));  
  $out = $out*(($facs[$i])**(floor($facs[$i+1]/2)));  
}
$gcdn = gcd($b,$out);
$gcdnd = gcd($gcdn,2);
if ($gcdnd == 1 && $ins != 1) {
  if (abs($out) == 1) {
     $dispa1 = "\frac{".(-$k)." + \sqrt{$ins}}{$den}";
     $width = Formula("(-$k + sqrt($ins))/$den");
     $t = $den*$k - $k;
     $length = Formula("($t + sqrt($ins))/$den");
     $dispa2 = "\frac{$t + \sqrt{$ins}}{$den}";     
  } else {
     $dispa1 = "\frac{".(-$k)." + $out\sqrt{$ins}}{$den}";
     $width = Formula("(-$k + $out sqrt($ins))/$den");
     $t = $den*$k - $k;
     $length = Formula("($t + $out sqrt($ins))/$den");
     $dispa2 = "\frac{$t + $out\sqrt{$ins}}{$den}";     
  }
} elsif ($gcdnd > 1 && $ins != 1) {
  $kt = $k/$gcdnd;
  $outt = $out/$gcdnd;
  $dent = $den/$gcdnd;
  if ($dent != 1) {
    if (abs($outt) == 1) {
       $dispa1 = "\frac{".(-$kt)." + \sqrt{$ins}}{$dent}";
       $width = Formula("(-$kt + sqrt($ins))/$dent");
       $t = $dent*$k - $kt;
       $length = Formula("($t + sqrt($ins))/$dent");
       $dispa2 = "\frac{$t + \sqrt{$ins}}{$dent}";
    } else {
       $dispa1 = "\frac{".(-$kt)." + $outt\sqrt{$ins}}{$dent}";
       $width = Formula("(-$kt + $outt sqrt($ins))/$dent");
       $t = $dent*$k - $kt;
       $length = Formula("($t + $outt sqrt($ins))/$dent");
       $dispa2 = "\frac{$t + $outt\sqrt{$ins}}{$dent}";
    }   
  } else {
    if (abs($outt) == 1) {
       $dispa1 = (-$kt)." + \sqrt{$ins}";
       $width = Formula("-$kt + sqrt($ins)");
       $t = $k - $kt;
       $length = Formula("$t + sqrt($ins)");
       $dispa2 = "$t + \sqrt{$ins}";
    } else {
       $dispa1 = (-$kt)." + $outt\sqrt{$ins}";
       $width = Formula("-$kt + $outt sqrt($ins)");
       $t = $k - $kt;
       $length = Formula("$t + $outt sqrt($ins)");
       $dispa2 = "$t + $outt\sqrt{$ins}";
    }
  }
} elsif ($ins == 1) {
  $nt = -$k + sqrt($disc);
  $dt = 2;
  $n = $nt/gcd($nt,2);
  $d = $dt/gcd($dt,2);
  $dispa1 = ($d == 1) ? "$n" : "\frac{$n}{$d}";
  $t1 = $n + $k;
  $t2 = $n + 2*$k;
  $dispa2 = ($d == 1) ? "$t1" : "\frac{$t2}{2}";

  $width = ($d == 1) ? Formula("$n") : Formula("$n/$d");
  $length = ($d == 1) ? Formula("$t1") : Formula("$t2/2");
}
$texanswer = "the width is \(\displaystyle $dispa1\) cm and the length is \(\displaystyle $dispa2\) cm";


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
The length of a rectangle is \($k\) m longer than its width and the area of the rectangle is \($area\) m\(^2\). Find the exact dimensions of the rectangle.
$PAR
Width: \{ans_rule(20)\} cm
$PAR
Length: \{ans_rule(20)\} cm
END_TEXT
Context()->normalStrings;


###########################################################################
# check the answer  
###########################################################################
ANS( $width-> cmp( checker => sub {
    my ($correct,$student,$ans) = @_;
    return 0 if $ans->{isPreview} || $correct != $student;
    $student = $ans->{student_formula};
    $correct = $correct->{original_formula} if defined $correct->{original_formula};
    Context()->flags->set(setSqrt => 1);
    delete $correct->{test_values}, $student->{test_values};
    my $OK = ($correct == $student);
    Context()->flags->set(setSqrt => 0);
    Value::Error("Check to see if your answer is simplified.") unless $OK;
    return $OK;
    }, 
    formatStudentAnswer=>"reduced",
  )
);
ANS( $length-> cmp( checker => sub {
    my ($correct,$student,$ans) = @_;
    return 0 if $ans->{isPreview} || $correct != $student;
    $student = $ans->{student_formula};
    $correct = $correct->{original_formula} if defined $correct->{original_formula};
    Context()->flags->set(setSqrt => 1);
    delete $correct->{test_values}, $student->{test_values};
    my $OK = ($correct == $student);
    Context()->flags->set(setSqrt => 0);
    Value::Error("Check to see if your answer is simplified.") unless $OK;
    return $OK;
    }, 
    formatStudentAnswer=>"reduced",
  )
);


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
Context()->texStrings;
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} $texanswer
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Help:${EBOLD} \{ MUHelp("sqrt") \}
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 

COMMENT('Features Periodic Rerandomization. Edited and updated in 2012/2013.
$BR
Desc: Find the side lengths of a rectangle using a quadratic equation.');
ENDDOCUMENT();