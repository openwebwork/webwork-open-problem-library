# DESCRIPTION
# Asks to find the distance between two points with fraction values
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Coordinates and Graphs')
## DBsection('The Coordinate Plane')
## KEYWORDS('coordinate distance', 'distance formula', 'distances')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
  "contextFraction.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$den1 = random(2,5);
do {$num1 = random(-1,1,2)*random(1,$den1)} until (gcd($num1,$den1) == 1);
$x1 = $num1/$den1;
$y1 = random(-1,1,2);

$den2 = 2*$den1;
do {$num2 = random(-1,1,2)*random(1,$den2)} until (gcd($num2,$den2) == 1);
$x2 = $num2/$den2;
$den3 = random(2,5);
do {$num3 = random(-1,1,2)*random(1,$den3)} until (gcd($num3,$den3) == 1);
$y2 = $num3/$den3;

$dins = ($x1-$x2)**2 + ($y1-$y2)**2;
$ans = sqrt($dins);

if ($num1 < 0) {
  $x1disp = "-\frac{".(-$num1)."}{$den1}";
} else {
  $x1disp = "\frac{$num1}{$den1}";
}
$y1disp = $y1;

if ($num2 < 0) {
  $x2disp = "-\frac{".(-$num2)."}{$den2}";
} else {
  $x2disp = "\frac{$num2}{$den2}";
}
if ($num3 < 0) {
  $y2disp = "-\frac{".(-$num3)."}{$den3}";
} else {
  $y2disp = "\frac{$num3}{$den3}";
}

# this is all to display the radical reduced as much as possible
# the code can be generalized for different points
# by using Sieve of Eratosthenes algorithm to figure out which primes are
# between 2 and $numins and 2 and $denins.
$numins = ((($num1*$den2-$num2*$den1)**2)*(($den3)**2)+(($num3-$den3*$y1)**2)*(($den1*$den2)**2))/gcd((($num1*$den2-$num2*$den1)**2)*(($den3)**2)+(($num3-$den3*$y1)**2)*(($den1*$den2)**2),($den1*$den2*$den3)**2);
$denins = (($den1*$den2*$den3)**2)/gcd((($num1*$den2-$num2*$den1)**2)*(($den3)**2)+(($num3-$den3*$y1)**2)*(($den1*$den2)**2),($den1*$den2*$den3)**2);

@primes = (2,3,5,7,11,13,17,19,23);
@numofprimes1 = (0,0,0,0,0,0,0,0,0);
@numofprimes2 = (0,0,0,0,0,0,0,0,0);

$remains = $numins;
for ($i = 0; $i < scalar(@primes); $i++) {
  while ($remains/$primes[$i] - floor($remains/$primes[$i]) == 0) {
    $numofprimes1[$i]++;
    $remains = $remains/$primes[$i];
  }
}

$numout = 1;
for ($i = 0; $i < scalar(@primes); $i++) {
  $pow = 0;
  $num = $numofprimes1[$i];
  while ($num > 1) {
    $num = $num - 2;
    $pow++;
  }
  $numout = $numout*(($primes[$i])**$pow);
}
$numins = $numins/(($numout)**2);

$remains = $denins;
for ($i = 0; $i < scalar(@primes); $i++) {
  while ($remains/$primes[$i] - floor($remains/$primes[$i]) == 0) {
    $numofprimes2[$i]++;
    $remains = $remains/$primes[$i];
  }
}

$denout = 1;
for ($i = 0; $i < scalar(@primes); $i++) {
  $pow = 0;
  $num = $numofprimes2[$i];
  while ($num > 1) {
    $num = $num - 2;
    $pow++;
  }
  $denout = $denout*(($primes[$i])**$pow);
}
$denins = $denins/(($denout)**2);

$dispans = "";
if ($numout != 1 && $denout == 1) {
  $dispans = ($dispans).($numout);
} elsif ($denout != 1) {
  $dispans = "\frac{$numout}{$denout}";
}

if ($numins != 1 && $denins == 1) {
  $dispans = ($dispans)."\sqrt{$numins}";
} elsif ($denins != 1) {
  $dispans = ($dispans)."\sqrt{\frac{$numins}{$denins}}";
}
Context()->operators->undefine("-","+");


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Find the distance between the points \(\left($x1disp,$y1disp\right)\) and \(\left($x2disp,$y2disp\right)\).

$PAR
Distance: \{ans_rule(20)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($ans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    \($dispans\)
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $PAR
    ${BBOLD}Help:${EBOLD} Use ${BBOLD}sqrt${EBOLD} to enter square roots. For example, the square root of 22 would be entered as sqrt(22).
    $BR
    END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();