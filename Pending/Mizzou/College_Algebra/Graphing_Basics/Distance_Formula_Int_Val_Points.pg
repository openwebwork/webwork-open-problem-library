# DESCRIPTION
# Asks to find the distance between two points with integer values
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Coordinates and Graphs')
## DBsection('The Coordinate Plane')
## KEYWORDS('coordinate distance', 'distance formula', 'distances')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$min = -10;
$max = 10;
$x1 = random(-1,1,2)*random($min,$max);
$y1 = random(-1,1,2)*non_zero_random($min,$max);
do {$x2 = random(-1,1,2)*random($min,$max)} until ($x2 != $x1);
do {$y2 = random(-1,1,2)*non_zero_random($min,$max)} until ($y2 != $y1);
$dins = ($x1-$x2)**2 + ($y1-$y2)**2;
$ans = sqrt($dins);

# this is all to display the radical reduced as much as possible
# the code can be generalized for higher values of $min and $max
# by using Sieve of Eratosthenes algorithm to figure out which primes are
# between 2 and $dins. With both set to 10, the highest prime is 23 and hence 
# the choices here.
@primes = (2,3,5,7,11,13,17,19,23);
@numofprimes = (0,0,0,0,0,0,0,0,0);

$remains = $dins;
for ($i = 0; $i < scalar(@primes); $i++) {
  while ($remains/$primes[$i] - floor($remains/$primes[$i]) == 0) {
    $numofprimes[$i]++;
    $remains = $remains/$primes[$i];
  }
}

$dout = 1;
for ($i = 0; $i < scalar(@primes); $i++) {
  $pow = 0;
  $num = $numofprimes[$i];
  while ($num > 1) {
    $num = $num - 2;
    $pow++;
  }
  $dout = $dout*(($primes[$i])**$pow);
}
$dins = $dins/(($dout)**2);

if ($dins == 1) {
  $dispans = "\($dout\)";
} elsif ($dout == 1) {
  $dispans = "\(\sqrt{$dins}\)";
} else {
  $dispans = "\($dout\sqrt{$dins}\)";
}

Context()->operators->undefine("-","+");


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Find the distance between the points \(($x1,$y1)\) and \(($x2,$y2)\).

$PAR
Distance: \{ans_rule(20)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($ans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    $dispans
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $PAR
    ${BBOLD}Help:${EBOLD} Use ${BBOLD}sqrt${EBOLD} to enter square roots. For example, the square root of 37 would be entered as sqrt(37).
    $BR
    END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();