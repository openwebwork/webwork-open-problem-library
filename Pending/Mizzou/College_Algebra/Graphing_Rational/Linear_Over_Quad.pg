# DESCRIPTION
# Gives function transformed from 1/x^2 and asks to determine graph
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Graphs of Functions')
## KEYWORDS('functions', 'rational', 'graphs')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "parserImplicitPlane.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$a = non_zero_random(-5,5);
$b = non_zero_random(-5,5);
if ($a < 0 && $a == -1) {
  $dispfun = "\displaystyle f(x) = -\frac{x}{".(($b)**2)."-x^2}";
} elsif ($a < 0) {
  $dispfun = "\displaystyle f(x) = -\frac{".(abs($a))." x}{".(($b)**2)."-x^2}";
} elsif ($a == 1) {
  $dispfun = "\displaystyle f(x) = \frac{ x}{".(($b)**2)."-x^2}";
} else {
  $dispfun = "\displaystyle f(x) = \frac{$a x}{".(($b)**2)."-x^2}";
}

$maxx = abs($b)+abs($a)+3;
$maxy = $maxx;
$minx = -$maxx;
$miny = $minx;
$gsize = 500;

for ($i = 0; $i < 4; $i++) {
  $graphs[$i] = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
  for ($j = $minx; $j <= $maxx; $j++) {
    $graphs[$i]->moveTo($j,$miny);
    $graphs[$i]->lineTo($j,$maxy,'gray',1);
  }
  for ($j = $miny; $j <= $maxy; $j++) {
    $graphs[$i]->moveTo($minx,$j);
    $graphs[$i]->lineTo($maxx,$j,'gray',1);
  }
  $graphs[$i]->moveTo($minx, 0);
  $graphs[$i]->arrowTo($maxx, 0, 'black', 2);
  $graphs[$i]->arrowTo($minx, 0, 'black', 2);
  $graphs[$i]->moveTo(0, $miny);
  $graphs[$i]->arrowTo(0, $maxy, 'black', 2);
  $graphs[$i]->arrowTo(0, $miny, 'black', 2);
  $graphs[$i]->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

  for ($j = $minx+1; $j < $maxx; $j++) {
    if ($j != 0 && $j % 5 == 0 || $j == 1) {
      $graphs[$i]->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
    }
  }

  for ($j = $miny+1; $j < $maxy; $j++) {
    if ($j != 0 && $j % 5 == 0 || $j == 1) {
      $graphs[$i]->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
    }
  }
}

# set up plots and answer
@pos = (0..3);
@posspos = (0..3);
for ($i = 0; $i < 5; $i++) {
  $pos[$i] = list_random(@posspos);
  for ($j = 0; $j < scalar(@posspos); $j++) {
    if ($posspos[$j] == $pos[$i] ) {
      $tmp = $posspos[$j];
      $posspos[$j] = $posspos[scalar(@posspos)-1];
      $posspos[scalar(@posspos)-1] = $tmp;
      pop(@posspos);
      $j--;
    }
  }
}

# good function
$goodasym1 = -$b;
$goodasym2 = $b;
for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
  $graphs[$pos[0]]->moveTo($goodasym1,$i-0.5);
  $graphs[$pos[0]]->lineTo($goodasym1,$i+0.5,'red',4);
  $graphs[$pos[0]]->moveTo($goodasym2,$i-0.5);
  $graphs[$pos[0]]->lineTo($goodasym2,$i+0.5,'red',4);
}
for ($i = $minx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$pos[0]]->moveTo($i-0.5,0);
  $graphs[$pos[0]]->lineTo($i+0.5,0,'red',4);
}
$goodexpn = sub { my $x = shift(); $a*$x/((($b)**2)- (($x)**2)) };
$goodfun1 = new Fun($goodexpn, $graphs[$pos[0]]);
$goodfun1->steps(1500);
$goodfun1->weight(3);
$goodfun1->domain($minx,min($goodasym1,$goodasym2)-0.001);
$goodfun2 = new Fun($goodexpn, $graphs[$pos[0]]);
$goodfun2->steps(1500);
$goodfun2->weight(3);
$goodfun2->domain(min($goodasym1,$goodasym2)+0.001,max($goodasym1,$goodasym2)-0.001);
$goodfun3 = new Fun($goodexpn, $graphs[$pos[0]]);
$goodfun3->steps(1500);
$goodfun3->weight(3);
$goodfun3->domain(max($goodasym1,$goodasym2)+0.001,$maxx);

# bad function 1
$badasym11 = $b;
for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
  $graphs[$pos[1]]->moveTo($badasym11,$i-0.5);
  $graphs[$pos[1]]->lineTo($badasym11,$i+0.5,'red',4);
}
for ($i = $minx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$pos[1]]->moveTo($i-0.5,-$a);
  $graphs[$pos[1]]->lineTo($i+0.5,-$a,'red',4);
}
$badexpn1 = sub { my $x = shift(); $a*$x/($b - $x) };
$badfun11 = new Fun($badexpn1, $graphs[$pos[1]]);
$badfun11->steps(1500);
$badfun11->weight(3);
$badfun11->domain($minx,$badasym11-0.001);
$badfun12 = new Fun($badexpn1, $graphs[$pos[1]]);
$badfun12->steps(1500);
$badfun12->weight(3);
$badfun12->domain($badasym11+0.001,$maxx);

# bad function 2
$badasym21 = $b;
for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
  $graphs[$pos[2]]->moveTo($badasym21,$i-0.5);
  $graphs[$pos[2]]->lineTo($badasym21,$i+0.5,'red',4);
}
for ($i = $minx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$pos[2]]->moveTo($i-0.5,0);
  $graphs[$pos[2]]->lineTo($i+0.5,0,'red',4);
}
$badexpn2 = sub { my $x = shift(); ($x-$a)/(($b - $x)**2) };
$badfun21 = new Fun($badexpn2, $graphs[$pos[2]]);
$badfun21->steps(1500);
$badfun21->weight(3);
$badfun21->domain($minx,$badasym21-0.001);
$badfun22 = new Fun($badexpn2, $graphs[$pos[2]]);
$badfun22->steps(1500);
$badfun22->weight(3);
$badfun22->domain($badasym21+0.001,$maxx);

# bad function 3
$badasym31 = -$b;
$badasym32 = $b;
for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
  $graphs[$pos[3]]->moveTo($badasym31,$i-0.5);
  $graphs[$pos[3]]->lineTo($badasym31,$i+0.5,'red',4);
  $graphs[$pos[3]]->moveTo($badasym32,$i-0.5);
  $graphs[$pos[3]]->lineTo($badasym32,$i+0.5,'red',4);
}
for ($i = $minx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$pos[3]]->moveTo($i-0.5,0);
  $graphs[$pos[3]]->lineTo($i+0.5,0,'red',4);
}
$badexpn3 = sub { my $x = shift(); ($x - $a)/((($b)**2)- (($x)**2)) };
$badfun31 = new Fun($badexpn3, $graphs[$pos[3]]);
$badfun31->steps(1500);
$badfun31->weight(3);
$badfun31->domain($minx,min($badasym31,$badasym32)-0.001);
$badfun32 = new Fun($badexpn3, $graphs[$pos[3]]);
$badfun32->steps(1500);
$badfun32->weight(3);
$badfun32->domain(min($badasym31,$badasym32)+0.001,max($badasym31,$badasym32)-0.001);
$badfun33 = new Fun($badexpn3, $graphs[$pos[3]]);
$badfun33->steps(1500);
$badfun33->weight(3);
$badfun33->domain(max($badasym31,$badasym32)+0.001,$maxx);


@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize/2, height=>$gsize/2, tex_size=>500 );
}

Context("ImplicitPlane");
Context()->variables->are(x => 'Real', y => 'Real');
$vert = List(-$b,$b);
$hori = List(0);

Context("Point");
Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, E=>{}, "none"=>{});
$xint = List(Point("(0,0)"));
$yint = List(Point("(0,0)"));

@possletterans = ("A", "B", "C", "D", "E");
$letterans = $possletterans[$pos[0]];


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
EndTable()
\}
\{
BeginTable().
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 
$PAR

Determine the following information given that 
$PAR
\[$dispfun\]
$PAR
Separate multiple answers by commas. If an asymptote or intercept does not exist, write ${BBOLD}none${EBOLD}. Note that you may click a graph to enlarge it.
$PAR
(a) Horizontal Asymptote(s): \( y = \) \{ans_rule(20)\}
$PAR
(b) Vertical Asymptote(s): \(x = \) \{ans_rule(20)\}
$PAR
(c) \(x\)-intercept: \{ans_rule(20)\} (Type an ordered pair.)
$PAR
(d) \(y\)-intercept: \{ans_rule(20)\} (Type an ordered pair.)
$PAR
(e) Letter Corresponding to Graph: \{ans_rule(20)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($hori)->cmp());
ANS(Compute($vert)->cmp());
ANS(Compute($xint)->cmp());
ANS(Compute($yint)->cmp());
ANS(String($letterans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} 
  $PAR
  (a) \(y = $hori\)
  $PAR
  (b) \(x = $vert\)
  $PAR
  (c) \($xint\)
  $PAR
  (d) \($dispyint\)
  $PAR
  (e) $letterans
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Help:${EBOLD} \{AnswerFormatHelp("points","Click here for help entering points.")\}
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();