# DESCRIPTION
# Gives function transformed from 1/x^2 and asks to determine graph
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Graphs of Functions')
## KEYWORDS('functions', 'rational', 'graphs')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "parserImplicitPlane.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$lead = random(-1,1,2);
$a = random(2,7);
$b = non_zero_random(-5,5);
if ($lead == 1) {
  $dispfun = "\displaystyle f(x) = \frac{$a}{(x + $b)^2}";
} else {
  $dispfun = "\displaystyle f(x) = -\frac{$a}{(x + $b)^2}";
}

$maxx = abs($b)+abs($a)+9;
$maxy = $maxx;
$minx = -$maxx;
$miny = $minx;
$gsize = 500;

for ($i = 0; $i < 5; $i++) {
  $graphs[$i] = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
  for ($j = $minx; $j <= $maxx; $j++) {
    $graphs[$i]->moveTo($j,$miny);
    $graphs[$i]->lineTo($j,$maxy,'gray',1);
  }
  for ($j = $miny; $j <= $maxy; $j++) {
    $graphs[$i]->moveTo($minx,$j);
    $graphs[$i]->lineTo($maxx,$j,'gray',1);
  }
  $graphs[$i]->moveTo($minx, 0);
  $graphs[$i]->arrowTo($maxx, 0, 'black', 2);
  $graphs[$i]->arrowTo($minx, 0, 'black', 2);
  $graphs[$i]->moveTo(0, $miny);
  $graphs[$i]->arrowTo(0, $maxy, 'black', 2);
  $graphs[$i]->arrowTo(0, $miny, 'black', 2);
  $graphs[$i]->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

  for ($j = $minx+1; $j < $maxx; $j++) {
    if ($j != 0 && $j % 5 == 0 || $j == 1) {
      $graphs[$i]->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
    }
  }

  for ($j = $miny+1; $j < $maxy; $j++) {
    if ($j != 0 && $j % 5 == 0 || $j == 1) {
      $graphs[$i]->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
    }
  }
}

# set up plots and answer
@pos = (0..4);
@posspos = (0..4);
for ($i = 0; $i < 5; $i++) {
  $pos[$i] = list_random(@posspos);
  for ($j = 0; $j < scalar(@posspos); $j++) {
    if ($posspos[$j] == $pos[$i] ) {
      $tmp = $posspos[$j];
      $posspos[$j] = $posspos[scalar(@posspos)-1];
      $posspos[scalar(@posspos)-1] = $tmp;
      pop(@posspos);
      $j--;
    }
  }
}

# good function
$goodasym = -$b;
for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
  $graphs[$pos[0]]->moveTo($goodasym,$i-0.5);
  $graphs[$pos[0]]->lineTo($goodasym,$i+0.5,'red',4);
}
for ($i = $minx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$pos[0]]->moveTo($i-0.5,0);
  $graphs[$pos[0]]->lineTo($i+0.5,0,'red',4);
}
$goodexpn = sub { my $x = shift(); $lead*$a/(($x + $b)**2) };
$goodfun1 = new Fun($goodexpn, $graphs[$pos[0]]);
$goodfun1->steps(1500);
$goodfun1->weight(3);
$goodfun1->domain($minx,$goodasym-0.001);
$goodfun2 = new Fun($goodexpn, $graphs[$pos[0]]);
$goodfun2->steps(1500);
$goodfun2->weight(3);
$goodfun2->domain($goodasym+0.001,$maxx);

# bad function 1
$badasym1 = -$b;
for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
  $graphs[$pos[1]]->moveTo($badasym1,$i-0.5);
  $graphs[$pos[1]]->lineTo($badasym1,$i+0.5,'red',4);
}
for ($i = $minx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$pos[1]]->moveTo($i-0.5,0);
  $graphs[$pos[1]]->lineTo($i+0.5,0,'red',4);
}
$badexpn1 = sub { my $x = shift(); $lead*$a/(($x + $b)) };
$badfun11 = new Fun($badexpn1, $graphs[$pos[1]]);
$badfun11->steps(1500);
$badfun11->weight(3);
$badfun11->domain($minx,$badasym1-0.001);
$badfun12 = new Fun($badexpn1, $graphs[$pos[1]]);
$badfun12->steps(1500);
$badfun12->weight(3);
$badfun12->domain($badasym1+0.001,$maxx);

# bad function 2
$badasym2 = $b;
for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
  $graphs[$pos[2]]->moveTo($badasym2,$i-0.5);
  $graphs[$pos[2]]->lineTo($badasym2,$i+0.5,'red',4);
}
for ($i = $minx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$pos[2]]->moveTo($i-0.5,0);
  $graphs[$pos[2]]->lineTo($i+0.5,0,'red',4);
}
$badexpn2 = sub { my $x = shift(); $lead*$a/(($x - $b)**2) };
$badfun21 = new Fun($badexpn2, $graphs[$pos[2]]);
$badfun21->steps(1500);
$badfun21->weight(3);
$badfun21->domain($minx,$badasym2-0.001);
$badfun22 = new Fun($badexpn2, $graphs[$pos[2]]);
$badfun22->steps(1500);
$badfun22->weight(3);
$badfun22->domain($badasym2+0.001,$maxx);

# bad function 3
$badasym3 = -$b;
for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
  $graphs[$pos[3]]->moveTo($badasym3,$i-0.5);
  $graphs[$pos[3]]->lineTo($badasym3,$i+0.5,'red',4);
}
for ($i = $minx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$pos[3]]->moveTo($i-0.5,$a*$lead);
  $graphs[$pos[3]]->lineTo($i+0.5,$a*$lead,'red',4);
}
$badexpn3 = sub { my $x = shift(); $lead*$a*(($x)**2)/(($x + $b)**2) };
$badfun31 = new Fun($badexpn3, $graphs[$pos[3]]);
$badfun31->steps(1500);
$badfun31->weight(3);
$badfun31->domain($minx,$badasym3-0.001);
$badfun32 = new Fun($badexpn3, $graphs[$pos[3]]);
$badfun32->steps(1500);
$badfun32->weight(3);
$badfun32->domain($badasym3+0.001,$maxx);

# bad function 4
$badasym4 = $b;
for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
  $graphs[$pos[4]]->moveTo($badasym4,$i-0.5);
  $graphs[$pos[4]]->lineTo($badasym4,$i+0.5,'red',4);
}
for ($i = $minx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$pos[4]]->moveTo($i-0.5,0);
  $graphs[$pos[4]]->lineTo($i+0.5,0,'red',4);
}
$badexpn4 = sub { my $x = shift(); $lead*$a*$x/(($x - $b)**2) };
$badfun41 = new Fun($badexpn4, $graphs[$pos[4]]);
$badfun41->steps(1500);
$badfun41->weight(3);
$badfun41->domain($minx,$badasym4-0.001);
$badfun42 = new Fun($badexpn4, $graphs[$pos[4]]);
$badfun42->steps(1500);
$badfun42->weight(3);
$badfun42->domain($badasym4+0.001,$maxx);


@figs = (0..4);
for ($i = 0; $i < 5; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize/2, height=>$gsize/2, tex_size=>500 );
}

Context("ImplicitPlane");
Context()->variables->are(x => 'Real', y => 'Real');
$vert = List(-$b);
$hori = List(0);

Context("Point");
Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, E=>{}, "none"=>{});
$xint = List(String("none"));
$yint = List(Point("(0,$a*$lead/(($b)**2))"));
$num = abs($a/gcd($a,($b)**2));
$den = abs((($b)**2)/gcd($a,($b)**2));

$dispyint = "\left(0, ";
if ($lead/(($b)**2) < 0) {
  $dispyint = "\left(0, -";
}
if ($den == 1) {
  $dispyint = ($dispyint).($num)."\right)";
} else {
  $dispyint = ($dispyint)."\frac{$num}{$den} \right)";
}

@possletterans = ("A", "B", "C", "D", "E");
$letterans = $possletterans[$pos[0]];


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1], $figs[2]]).
  TableSpace(5,0).
  AlignedRow(["A", "B", "C"]).
  TableSpace(25,6).
EndTable()
\}
\{
BeginTable().
  AlignedRow([$figs[3], $figs[4]]).
  TableSpace(5,0).
  AlignedRow(["D", "E"]).
EndTable();
\}
$ECENTER 
$PAR

Determine the following information given that 
$PAR
\[$dispfun\]
$PAR
Separate multiple answers by commas. If an asymptote or intercept does not exist, write ${BBOLD}none${EBOLD}. Note that you may click a graph to enlarge it.
$PAR
(a) Horizontal Asymptote(s): \( y = \) \{ans_rule(20)\}
$PAR
(b) Vertical Asymptote(s): \(x = \) \{ans_rule(20)\}
$PAR
(c) \(x\)-intercept: \{ans_rule(20)\} (Type an ordered pair.)
$PAR
(d) \(y\)-intercept: \{ans_rule(20)\} (Type an ordered pair.)
$PAR
(e) Letter Corresponding to Graph: \{ans_rule(20)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($hori)->cmp());
ANS(Compute($vert)->cmp());
ANS(Compute($xint)->cmp());
ANS(Compute($yint)->cmp());
ANS(String($letterans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} 
  $PAR
  (a) \(y = $hori\)
  $PAR
  (b) \(x = $vert\)
  $PAR
  (c) \($xint\)
  $PAR
  (d) \($dispyint\)
  $PAR
  (e) $letterans
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Help:${EBOLD} \{AnswerFormatHelp("points","Click here for help entering points.")\}
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();