## DESCRIPTION
## Radicals and Rational Exponents: Rational Exponents
## ENDDESCRIPTION

## KEYWORDS('radical expression', 'rational powers')

## DBsubject('Algebra') 
## DBchapter('Basic Algebra') 
## DBsection('Exponents and Radicals') 
## Date('Spring 2012')
## Author1('David Covert')
## Author2('Teri Christiansen')
## Author3('Rick Lynch')
## Institution('University of Missouri')
## TitleText1('College Algebra')
## EditionText1('4')
## AuthorText1('Beecher, Penna, Bittinger')
## Section1('R.7')
## Problem1('')


##################################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGunion.pl",
"MathObjects.pl",
"PGcourse.pl",
"parserMultiAnswer.pl",
"AnswerFormatHelp.pl",
"contextLimitedPowers.pl",
"contextFraction.pl",
"PeriodicRerandomization.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");

###################################
# Setup


#
# Subclass the numeric functions
#
package my::Function::numeric;
our @ISA = ('Parser::Function::numeric');

#
# Override sqrt() to return a special value (usually 1) when evaluated
# effectively eliminating it from the product.
#
sub sqrt {
  my $self = shift;
  my $value = $self->context->flag("setSqrt");
  return $value+1 if $value && $_[0] == 1; # force sqrt(1) to be incorrect
  return $value if $value;
  return $self->SUPER::sqrt(@_);
}

#
# end of subclass
#
package main;

###########################

Context("Numeric")->variables->are(
x => ["Real", limits => [0,2]],    # only needed if x is used in the square roots
);
#
# make sqrt() use our subclass
#
Context()->functions->set(sqrt=>{class=>'my::Function::numeric'});
Context()->flags->set(reduceConstantFunctions=>0);
Context()->variables->add(
y=>"Real",
t=>"Real",
s=>"Real",
u=>"Real",
v=>"Real",
p=>"Real",
q=>"Real",
r=>"Real",
w=>"Real",
z=>"Real");

$var = list_random('x','y','z','w','p','q','r','s','t','u','v');
$var1 = list_random('x','y','z','w','t');
$var2 = list_random('p','q','r','u','v');

$a = random(1,5,1);
do {$b = random($a+1,10,1)} until (gcd($a,$b) ==1);
$c = random(2,5,1);
do {$d = random($c+1,10,1)} until (gcd($c,$d) ==1);
$e = random(2,6,1);
$k = random(2,4,1);
$g = $d*$k;
do {$f = random(1,$c*$k - 2,1)} until (gcd($f, $g) ==1);

$expression = " \frac{ $var1^{ \frac{$a}{$b} } ~$var2^{ \frac{$c}{$d} }  }{ $var1^{ -\frac{$e}{$b} }    $var2^{ \frac{$f}{$g} } }";

Context("Fraction-NoDecimals")->operators->undefine("+", "-");
$exp1 = Fraction($a + $e,$b);
$exp2 = Fraction($c*$g - $f*$d, $d*$g);

##########################





Context()->texStrings;
BEGIN_TEXT
Simplify and write the following in exponential notation. If
$PAR
\[
$expression = $var1^{m} \cdot $var2^n
\]
$PAR
then
$PAR
\(m = \) \{ANS_RULE(10)\}
$SPACE $SPACE and $SPACE $SPACE
\(n = \) \{ANS_RULE(10)\}
END_TEXT

if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    \(m = $exp1\), \(n = $exp2\)
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $BR
    END_TEXT
}

Context()->normalStrings;

PeriodicStatus(); 


$showPartialCorrectAnswers = 1;

ANS(Compute($exp1)->cmp(studentsMustReduceFractions=>1));
ANS(Compute($exp2)->cmp(studentsMustReduceFractions=>1));

COMMENT('MathObject version');
ENDDOCUMENT();