# DESCRIPTION
# Asks for the volume function, domain of function, and to determine the
# dimensions that yield max volume based on the graph
# ENDDESCRIPTION

## Author1('Rick Lynch')
## Author2('Teri Christiansen')
## DBsubject(Algebra)
## DBchapter(Functions)
## DBsection(Modeling with Functions)
## Institution(University of Missouri-Columbia)
## KEYWORDS('relative extrema', 'volume', 'domain', 'range')
## RESOURCES('box.png')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "contextInequalities.pl",
  "parserMultiAnswer.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$a = random(3,12,1);
do {$b = random(3,12,1)} until ($b != $a);
$vol = Formula("x*($a-2*x)*($b - 2*x)");
$heightg = ($a + $b - sqrt((($a)**2) - $a*$b + (($b)**2)))/6;
$height = sprintf("%0.1f", $heightg);
$width = sprintf("%0.1f", $a - 2*$height);
$length = sprintf("%0.1f", $b - 2*$height);
$maxvolg = $vol->eval(x=>(($a + $b - sqrt((($a)**2) - $a*$b + (($b)**2)))/6));
$minvolg = $vol->eval(x=>(($a + $b + sqrt((($a)**2) - $a*$b + (($b)**2)))/6));
$maxvol = floor($maxvolg);
$dispvol = "A(x) = x($a - 2x)($b - 2x)";

Context("Inequalities-Only")->variables->are(x=>"Real");
$renddom = min($a,$b)/2;
$domain = Compute("0 < x < $renddom");
$minx = -$height/2;
$miny = min($minvolg + $minvolg/16,-$maxvolg-$maxvolg/2);
$maxx = ($a + $b + sqrt((($a)**2) - $a*$b + (($b)**2)))/6+($a + $b + sqrt((($a)**2) - $a*$b + (($b)**2)))/12;
$maxy = -$miny;
$scale = max(abs(($minvolg + $minvolg/16)/($maxvolg+$maxvolg/2)),abs(($maxvolg+$maxvolg/2)/($minvolg + $minvolg/16)));
$gsize = 496*2/3;
$disp = "($height,$maxvol)";

$graph = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
$graph->moveTo($minx, 0);
$graph->arrowTo($maxx, 0, 'black', 2);
$graph->arrowTo($minx, 0, 'black', 2);
$graph->moveTo(0, $miny);
$graph->arrowTo(0, $maxy, 'black', 2);
$graph->arrowTo(0, $miny, 'black', 2);
$graph->lb(new Label($maxx-0.1, $maxy/50, 'x', 'black', 'bottom', 'right'));
$graph->lb(new Label($height/5, $maxy-$maxy/100, 'V(x)', 'black', 'top', 'left'));
if (abs($minvolg + $minvolg/16) > abs($maxvolg+$maxvolg/2)) {
  $graph->lb(new Label($height+$height/30, $maxvolg+$scale*$maxvolg/9, $disp, 'black', 'bottom', 'center'));
} else {
  $graph->lb(new Label($height+$height/30, $maxvolg+$maxvolg/9, $disp, 'black', 'bottom', 'center'));
}
$graph->stamps(new Circle($heightg,$maxvolg,5,'blue','blue'));


$expn = sub { my $x = shift(); $x*($a - 2*$x)*($b - 2*$x) };
$fun = new Fun($expn,$graph);
$fun->domain($minx,$maxx);
$fun->steps(1000);

$fig1 = image( "box.png", width=>$gsize, height=>147, tex_size=>500 );
$fig2 = image(insertGraph($graph), width=>$gsize, height=>$gsize, tex_size=>500 );

$anslw = MultiAnswer($width,$length)->with(
  singleResult => 0,
  checker => sub {
    my ($correct, $student, $self) = @_;
    my ($s1, $s2) = @{$student};
    my ($a1, $a2) = @{$correct};
    if ($a1 == $s1 && $a2 == $s2) {
      return [1,1];
    } elsif ($a1 == $s2 && $a2 == $s1) {
      return [1,1];
    } elsif ($a1 == $s1) {
      return [1,0];
    } elsif ($a1 == $s2) {
      return [0,1];
    } elsif ($a2 == $s1) {
      return [1,0];
    } elsif ($a2 == $s2) {
      return [0,1];
    }
    return [0,0];
  }
);


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT

$BCENTER
\{
BeginTable().
  AlignedRow([$fig1, $fig2]).
  TableSpace(20,15).
  AlignedRow(["Figure 1","Figure 2"]).
EndTable();
\}
$ECENTER
$PAR

A(n) \($a \mbox{ in} \times $b \mbox{ in}\) piece of cardboard has squares cut out of each corner in order to make a box (see Figure 1). Let \(x\) represent the length of a cut-out square (the height of the box).
$PAR 
(a) Find a function \(V(x)\) for the volume of the box in terms of \(x\).
$PAR
$SPACE $SPACE $SPACE\(V(x) =\) \{ans_rule(20)\}
$PAR
(b) Find the domain of the function. Write your answer as a compound inequality involving \(x\).
$PAR
$SPACE $SPACE $SPACE Domain of \(V(x)\): \{ans_rule(20)\}
$PAR
(c) Using the graph of \(V(x)\) shown in Figure 2, determine the dimensions that yield the maximum volume. Round your answers to the nearest tenth.
$PAR
$SPACE $SPACE $SPACE Height: \{ans_rule(5)\} in
$PAR
$SPACE $SPACE $SPACE Width: \{$anslw->ans_rule(5)\} in
$PAR
$SPACE $SPACE $SPACE Length: \{$anslw->ans_rule(5)\} in
$PAR
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($vol)->cmp());
ANS(Compute($domain)->cmp());
ANS(Compute($height)->cmp(tolType => 'absolute', tolerance => '.000000000001'));
ANS(Compute($anslw)->cmp(tolType => 'absolute', tolerance => '.000000000001'));


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    $PAR
    (a) \($dispvol\)
    $PAR
    (b) \($domain\)
    $PAR
    (c) \($height \mbox{ in} \times $width \mbox{ in} \times $length \mbox{ in}\)
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $PAR
    ${BBOLD}Help:${EBOLD} \{AnswerFormatHelp("formulas", "Click here for help entering formulas")\} or \{AnswerFormatHelp("inequalities", "click here for help entering inequalities")\}. It does not matter which side you choose to be the width or length of the box.
    $BR
    END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();