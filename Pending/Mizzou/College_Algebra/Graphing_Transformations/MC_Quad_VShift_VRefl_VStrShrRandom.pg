# DESCRIPTION
# Gives four graphs and asks to determine which corresponds to given equation.
# The graphs are quadratic.
# The correct graph always has vert shift, refl and randomly str or shr.
# The correct graph has nothing else.
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Transformations of Functions')
## KEYWORDS('graph transformations','transformations of functions','quadratic')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("1");
$refreshCachedImages = 1;
$showPartialCorrectAnswer = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$maxXVal = 11;
$maxYVal = $maxXVal;
$gridWidth = 300;
$gridHeight = 300;

# initialize graphs, draw grid manually, and label axes
for ($i = 0; $i < 4; $i++) {
  $graphs[$i] = init_graph(-$maxXVal, -$maxYVal, $maxXVal, $maxYVal, size => [$gridWidth, $gridHeight]);
}

for ($i = -$maxYVal + 1; $i < $maxYVal; $i++) {
  for ($j = 0; $j < 4; $j++) {
    if ($i != 0) {
      $graphs[$j]->moveTo(-$maxXVal, $i);
      $graphs[$j]->lineTo($maxXVal, $i, 'gray', 1);
    }
  }
}

for ($i = -$maxXVal+1; $i < $maxXVal+1; $i++) {
  for ($j = 0; $j < 4; $j++) {
    if ($i != 0) {
      $graphs[$j]->moveTo($i, -$maxYVal);
      $graphs[$j]->lineTo($i, $maxYVal, 'gray', 1);
    }
  }
}

for ($j = 0; $j < 4; $j++) {
  $graphs[$j]->moveTo(-$maxXVal, 0);
  $graphs[$j]->arrowTo($maxXVal, 0, 'black', 1);
  $graphs[$j]->arrowTo(-$maxXVal, 0, 'black', 1);
  $graphs[$j]->moveTo(0, -$maxYVal);
  $graphs[$j]->arrowTo(0, $maxYVal, 'black', 1);
  $graphs[$j]->arrowTo(0, -$maxYVal, 'black', 1);
  $graphs[$j]->lb(new Label($maxXVal-0.1, 0.2, 'x', 'black','bottom', 'right'));
  $graphs[$j]->lb(new Label(0.6, $maxYVal-0.1, 'y', 'black', 'top', 'left'));
  $graphs[$j]->lb(new Label(1,-0.1,'1', 'black', 'top','center'));
  $graphs[$j]->lb(new Label(5,-0.1,'5', 'black', 'top','center'));
  $graphs[$j]->lb(new Label(10,-0.1,'10', 'black', 'top','center'));
  $graphs[$j]->lb(new Label(-5,-0.1,'-5', 'black', 'top','center'));
  $graphs[$j]->lb(new Label(-10,-0.1,'-10', 'black', 'top','center'));
  
  $graphs[$j]->lb(new Label(-0.1,0.5,'1', 'black', 'bottom', 'right'));
  $graphs[$j]->lb(new Label(-0.1,4.5,'5', 'black', 'bottom', 'right'));
  $graphs[$j]->lb(new Label(-0.1,9.5,'10', 'black', 'bottom', 'right'));
  $graphs[$j]->lb(new Label(-0.1,-5.5,'-5', 'black', 'bottom', 'right'));
  $graphs[$j]->lb(new Label(-0.1,-10.5,'-10', 'black', 'bottom', 'right'));
}


# setup coefficients and equation to display
Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{});
$origeqn = "y = x^2";
$pad = floor($maxXVal/2);
$HShift = 0; # 0 - has no shift, 1 - has
$VShift = 1; # 0 - has no shift, 1 - has
$VRefl = 1; # 0 - has no refl, 1 - has
$VStrShr = random(1,2,1); # 0 - has none, 1 - has str, 2 - has shr

$b = 0; # hori shift factor
if ($HShift == 1) {
  $b = non_zero_random(-$maxXVal+$pad,$maxXVal-$pad,1);
}

$c = 0; # vert shift factor
if ($VShift == 1 && $VRefl == 0) {
  $c = non_zero_random(-$pad,$pad,1);
} elsif ($VShift == 1 && $VRefl == 1) {
  $c = non_zero_random(-$pad,$pad,1);
}

@possVSSR = (); # possible vert str/shr/reflect factors
if ($VRefl == 0 && $VStrShr == 0) {
  @possVSSR = (1);
} elsif ($VRefl == 1 && $VStrShr == 0) {
  @possVSSR = (-1);
}

$a = list_random(@possVSSR);
if ($VStrShr == 1) {
  if ($VRefl == 0) {
    @possVSSR = (2..$pad);
  } else {
    @possVSSR = (-$pad..-2);
  }
  $a = list_random(@possVSSR);
} elsif ($VStrShr == 2) {
  if ($VRefl == 0) {
    @possVSSR = (2,4);
  } else {
    @possVSSR = (-2,-4);
  }
  $a = 1/list_random(@possVSSR);
}

$dispeqn = "y = ";
if ($a == -1) {
  $dispeqn = ($dispeqn)."-";
} elsif ($a != 1) {
  if (abs($a) < 1) {
    if ($a < 0) {
      $dispeqn = ($dispeqn)."-\frac{1}{".abs(1/$a)."}";
    } else {
      $dispeqn = ($dispeqn)."\frac{1}{".abs(1/$a)."}";
    }
  } else {
    $dispeqn = ($dispeqn).($a);
  }
}

if ($b == 0) {
  $dispeqn = ($dispeqn)."x^2";
} else {
  $dispeqn = ($dispeqn)."\left(x +".(-$b)."\right)^2";
}

if ($c != 0) {
  $dispeqn = ($dispeqn)."+".($c);
}

# setup good function and bad functions
$goodexpn = sub { my $x = shift(); return $a*(($x-$b)**2)+$c; };
if ($HShift == 0 && $VShift == 1 && $VRefl == 1 && $VStrShr != 0) {
  $fgetSS1 = random(0,1,1);
  $fgetR = random(0,1,1);    
  $badexpn1 = sub { my $x = shift();
                    if ($fgetSS2 == 0 && $fgetR == 0) { $a*(($x)**2)-$c; }
                    elsif ($fgetSS2 == 0 && $fgetR == 1) { -$a*(($x)**2)-$c; }
                    elsif ($fgetSS2 == 1 && $fgetR == 0) { -(($x)**2)-$c; }
                    else { (($x)**2)-$c; }};
  $badexpn2 = sub { my $x = shift();
                    if ($fgetSS2 == 0 && $fgetR == 0) { $a*(($x+$c)**2); }
                    elsif ($fgetSS2 == 0 && $fgetR == 1) { -$a*(($x+$c)**2); }
                    elsif ($fgetSS2 == 1 && $fgetR == 0) { -(($x+$c)**2); }
                    else { (($x+$c)**2); }};
  $badexpn3 = sub { my $x = shift(); (($x)**2)/$a + $c; };
}

# set up plots and answer
@positions = (0..3);
@possPositions = (0..3);
for ($i = 0; $i < 4; $i++) {
  $positions[$i] = list_random(@possPositions);
  for ($j = 0; $j < scalar(@possPositions); $j++) {
    if ($possPositions[$j] == $positions[$i] ) {
      $tmp = $possPositions[$j];
      $possPositions[$j] = $possPositions[scalar(@possPositions)-1];
      $possPositions[scalar(@possPositions)-1] = $tmp;
      pop(@possPositions);
    }
  }
}

$goodfun = new Fun($goodexpn, $graphs[$positions[0]]);
$badfun1 = new Fun($badexpn1, $graphs[$positions[1]]);
$badfun2 = new Fun($badexpn2, $graphs[$positions[2]]);
$badfun3 = new Fun($badexpn3, $graphs[$positions[3]]);
$goodfun->steps(1500);
$badfun1->steps(1500);
$badfun2->steps(1500);
$badfun3->steps(1500);

$expno = sub { my $x = shift(); return ($x)**2 };
for ($i = 0; $i < 4; $i++) {
  $fun[$i] = new Fun($expno, $graphs[$i]);
  $fun[$i]->steps(1500);
  $fun[$i]->color(green);
}

@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gridWidth, height=>$gridHeight, tex_size=>500 );
}

@possans = ("A", "B", "C", "D", "E");
$answer = $possans[$positions[0]];


###########################################################################
# state the problem 
###########################################################################
BEGIN_TEXT
Use transformations to determine which graph below represents the equation 
$PAR
\[
$dispeqn
\] 
$PAR
transformed from \($origeqn\). The original function is graphed in green and the transformed function is graphed in blue.

$PAR
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 

$BR
Correct Letter: \{ans_rule\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(String($answer)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    $answer
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $BR
    END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 

COMMENT('Features Periodic Rerandomization. Edited and updated in 2012/2013.
$BR
Desc: Find the graph of the given transformed function from the four given graphs. $BR
Function Type: quadratic $BR
Transformations: vert shift, vert refl, vert str/shr random');
ENDDOCUMENT();