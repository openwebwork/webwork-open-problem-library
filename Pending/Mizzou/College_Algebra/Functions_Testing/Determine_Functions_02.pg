# DESCRIPTION
# Gives four graphs and asks which represent functions
# There are four groups of two, each containing a function and not a function.
# Randomly chooses one from each group.
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('What is a function?')
## KEYWORDS('functions')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("2");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 0;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
# set up graphs
$numgraphs = 4;
$maxx = 8;
$gsize = 500;
for ($j = 0; $j < $numgraphs; $j++) {
  $graphs[$j] = init_graph(-$maxx,-$maxx,$maxx,$maxx, size => [$gsize,$gsize]);
  for ($i = 1; $i <= $maxx ; $i++) {
    $graphs[$j]->moveTo($i,-$maxx);
    $graphs[$j]->lineTo($i, $maxx, 'gray', 1);
    $graphs[$j]->moveTo(-$i,$maxx);
    $graphs[$j]->lineTo(-$i, -$maxx, 'gray', 1);
    $graphs[$j]->moveTo(-$maxx, $i);
    $graphs[$j]->lineTo($maxx, $i, 'gray', 1);
    $graphs[$j]->moveTo(-$maxx, -$i);
    $graphs[$j]->lineTo($maxx, -$i, 'gray', 1);
  }
  $graphs[$j]->moveTo(-$maxx, 0);
  $graphs[$j]->arrowTo($maxx, 0, 'black', 2);
  $graphs[$j]->arrowTo(-$maxx, 0, 'black', 2);
  $graphs[$j]->moveTo(0, -$maxx);
  $graphs[$j]->arrowTo(0, $maxx, 'black', 2);
  $graphs[$j]->arrowTo(0, -$maxx, 'black', 2);
}

@positions = (0..3);
@possPositions = (0..3);
for ($i = 0; $i < 4; $i++) {
  $positions[$i] = list_random(@possPositions);
  for ($j = 0; $j < scalar(@possPositions); $j++) {
    if ($possPositions[$j] == $positions[$i] ) {
      $tmp = $possPositions[$j];
      $possPositions[$j] = $possPositions[scalar(@possPositions)-1];
      $possPositions[scalar(@possPositions)-1] = $tmp;
      pop(@possPositions);
    }
  }
}

Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, "none"=>{});
$numfuns == 0;
@possans = ("A","B","C","D");
@answers = ();

# set up functions - keeps arrays for each pair of two because perl seems to
# not like using the same variable in multiple places
# set up piecewise function that may overlap drastically or at a single point
# also set up piecewise that does not overlap. ###########
@x0 = (0..4); #x0[0] - x1, x0[1] - x2; x0[2] - x3; x0[3] - x4, x0[4] - x5
$x0[0] = random(-5, -1);
$x0[1] = $x0[0] - random(3,4,1);
$x0[2] = $x0[0] + random(1,3,1);
$oltype = random(0,1,1); # overlap type, 0 - drastic, 1 - one point
if ($oltype == 0) { 
  $x0[3] = $x0[2] - random(1,3,1);
} else {
  $x0[3] = $x0[2];
}
$x0[4] = random($x0[3]+3,7,1);

@y0 = (0..6); #0-vshift, 1-hy11, 2 - hy21, 3 - y1, 4 - hy12, 5 - hy22, 6 - y2
$y0[0] = random(-5,-1,1);
$y0[1] = $x0[0]-$x0[1]+$y0[0];
$y0[2] = $x0[2]-$x0[0]+$y0[0];
do {$y0[3] = $y0[2] + random(2,4,1);} until ($y0[3] != 0);
$piece11 = sub{ my $t = shift(); abs($t-$x0[0])+$y0[0]; }; 
$piece21 = sub{ my $t = shift(); $y0[3]; }; 

$y = random(-7,-5,1);
$y0[4] = (($x0[1]-$x0[0])**2)+$y;
$y0[5] = (($x0[2]-$x0[0])**2)+$y;
do {$y0[6] = $y0[5] + random(1,3,1);} until ($y0[6] != 0);
$piece12 = sub{ my $t = shift(); ((($t-$x0[0])**2)+$y); }; 
$piece22 = sub{ my $t = shift(); -$t+$x0[2]+$y0[6]; }; 

$choice = random(0,1,1);
if ($choice == 0) {
  $fun1 = new Fun($piece11, $graphs[$positions[0]]);
  $fun2 = new Fun($piece21, $graphs[$positions[0]]);
  $graphs[$positions[0]]->stamps(new Circle($x0[1],$y0[1],6,'blue','blue'));
  if ($oltype == 0) {
    $graphs[$positions[0]]->stamps(new Circle($x0[2],$y0[2], 6,'blue','blue'));
    $graphs[$positions[0]]->stamps(new Circle($x0[3], $y0[3],6,'blue','white'));
  } else {
    $graphs[$positions[0]]->stamps(new Circle($x0[2],$y0[2], 6,'blue','blue'));
    $graphs[$positions[0]]->stamps(new Circle($x0[3], $y0[3],6,'blue','blue'));
  }
  $graphs[$positions[0]]->stamps(new Circle($x0[4],$y0[3], 6,'blue','blue'));
  $fun1->domain($x0[1],$x0[2]);
  $fun2->domain($x0[3],$x0[4]);
  $fun1->steps(1500);
  $fun2->steps(1500);
} else {
  $fun1 = new Fun($piece12, $graphs[$positions[0]]);
  $fun2 = new Fun($piece22, $graphs[$positions[0]]);
  $graphs[$positions[0]]->stamps(new Circle($x0[1],$y0[4],6,'blue','white'));
  if ($oltype == 0) {
    $graphs[$positions[0]]->stamps(new Circle($x0[2],$y0[5],6,'blue','blue'));
    $graphs[$positions[0]]->stamps(new Circle($x0[2],$y0[6],6,'blue','white'));
  } else {
    $graphs[$positions[0]]->stamps(new Circle($x0[2],$y0[5],6,'blue','white'));
    $graphs[$positions[0]]->stamps(new Circle($x0[2],$y0[6],6,'blue','blue'));
  }
  $graphs[$positions[0]]->stamps(new Circle($maxx-1,1-$maxx+$x0[2]+$y0[6],6, 'blue','blue'));
  $fun1->domain($x0[1],$x0[2]);
  $fun2->domain($x0[2],$maxx-1);
  $fun1->steps(1500);
  $fun2->steps(1500);
  push(@answers, $possans[$positions[0]]);
  $numfuns++;
}

# set up zig zag graph, one function, one not ########
$numx = random(4,10,1);
$xpad = 2*($maxx-1)/$numx;
for ($i = 0; $i < $numx; $i++) {
  $xvals[$i] = random(-$maxx+1+$i*$xpad, -$maxx+1 + ($i+1)*$xpad,0.3);
  $yvals[$i] = non_zero_random(-$maxx+1,$maxx-1,1);
}

$choice = random(0,1,1);
if ($choice == 0) {
  for ($i = 0; $i < $numx-1; $i++) {
    $graphs[$positions[1]]->moveTo($xvals[$i],$yvals[$i]);
    $graphs[$positions[1]]->lineTo($xvals[$i+1],$yvals[$i+1], 'blue', 3);
  }
  $graphs[$positions[1]]->stamps(closed_circle($xvals[0],$yvals[0],'blue'));
  $graphs[$positions[1]]->stamps(closed_circle($xvals[$numx-1],$yvals[$numx-1],'blue'));
  push(@answers, $possans[$positions[1]]);
  $numfuns++
} else {
  for ($i = 0; $i < $numx-1; $i++) {
    $graphs[$positions[1]]->moveTo($yvals[$i],$xvals[$i]);
    $graphs[$positions[1]]->lineTo($yvals[$i+1],$xvals[$i+1], 'blue', 3);
  }
  $graphs[$positions[1]]->stamps(closed_circle($yvals[0],$xvals[0],'blue'));
  $graphs[$positions[1]]->stamps(closed_circle($yvals[$numx-1],$xvals[$numx-1],'blue'));
}

# set circle or ellipse and a step function
$a0 = non_zero_random(-$maxx+3, $maxx-3,1);
$b0 = non_zero_random(-$maxx+3, $maxx-3,1);
$xfun1 = sub { my $t = shift(); $a0*cos($t) };
$yfun1 = sub { my $t = shift(); $b0*sin($t) };

$choice = random(0,1,1);
if ($choice == 0) {
  $fun3 = new Fun($xfun1, $yfun1, $graphs[$positions[2]]);
  $fun3->domain(-$maxx,$maxx);
  $fun3->steps(1500);
} else {
  $maxsteps = 10;
  $xsteps = random(5,$maxsteps,1);
  $xstepsize = 2*$maxx/$xsteps;
  $circpos = random(0,1,1);
  $yjump = random(1,3,1);
  for ($i = 0; $i < $maxsteps+1; $i++) {
    $graphs[$positions[2]]->moveTo(-$maxx+$i*$xstepsize,-$xsteps/2+$yjump*$i);
    $graphs[$positions[2]]->lineTo(-$maxx+($i+1)*$xstepsize, -$xsteps/2+$yjump*$i, 'blue', 2);
    if ($circpos == 0) {
      $graphs[$positions[2]]->stamps(closed_circle(-$maxx+$i*$xstepsize, -$xsteps/2+$yjump*$i,'blue'));
      $graphs[$positions[2]]->stamps(open_circle(-$maxx+($i+1)*$xstepsize, -$xsteps/2+$yjump*$i,'blue'));
    } else {
      $graphs[$positions[2]]->stamps(open_circle(-$maxx+$i*$xstepsize, -$xsteps/2+$yjump*$i,'blue'));
      $graphs[$positions[2]]->stamps(closed_circle(-$maxx+($i+1)*$xstepsize, -$xsteps/2+$yjump*$i,'blue'));
    }
  }
  push(@answers, $possans[$positions[2]]);
  $numfuns++;
}

# set up a^x, a^-x on one graph and rational function on other
$a1 = 1+random(0.1,2,0.1);
$d0 = random(-3,3,1);
$xfun1 = sub { my $t = shift(); $t; };
$yfun11 = sub { my $t = shift(); $a1**($t)+abs($d0); }; 
$yfun12 = sub { my $t = shift(); -$a1**($t)-abs($d0); };

$vstr = random(2,4,0.1);
$xfun2 = sub { my $t = shift(); $t; };
$yfun2 = sub { my $t = shift(); $vstr*atan($t/$a1)+$d0; };

$choice = random(0,1,1);
if ($choice == 0) {
  $fun41 = new Fun($xfun1, $yfun11, $graphs[$positions[3]]);
  $fun42 = new Fun($xfun1, $yfun12, $graphs[$positions[3]]);
  $fun41->domain(-$maxx,$maxx);
  $fun41->steps(1500);
  $fun42->domain(-$maxx,$maxx);
  $fun42->steps(1500);
} else {
  $fun4 = new Fun($xfun2, $yfun2, $graphs[$positions[3]]);
  $fun4->domain(-$maxx,$maxx);
  $fun4->steps(1500);
  push(@answers, $possans[$positions[3]]);
  $numfuns++
}


@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize/2, height=>$gsize/2, tex_size=>1000 );
}

if ($numfuns == 0) {
  $ans = List("none");
} elsif ($numfuns == 1) {
  $ans = List($answers[0]);
} elsif ($numfuns == 2) {
  $ans = List($answers[0], $answers[1]);
} elsif ($numfuns == 3) {
  $ans = List($answers[0], $answers[1], $answers[2]);
} elsif ($numfuns == 4) {
  $ans = List($answers[0], $answers[1], $answers[2], $answers[3]);
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
List the letters corresponding to the graphs below that represent a function. Write ${LQ}none${RQ} if none of the graphs represent a function. If there are multiple letters, separate them by commas.

$PAR
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 

$BR
Correct Letters: \{ ans_rule(20) \} 
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($ans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    \($ans\)
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $BR
    END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();