# DESCRIPTION
# Gives four graphs and asks which represent functions
# There are four groups of two, each containing a function and not a function.
# Randomly chooses one from each group.
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('What is a function?')
## KEYWORDS('functions')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("2");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 0;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
# set up graphs
$numgraphs = 4;
$maxx = 8;
$gsize = 500;
for ($j = 0; $j < $numgraphs; $j++) {
  $graphs[$j] = init_graph(-$maxx,-$maxx,$maxx,$maxx, size => [2*$gsize,2*$gsize]);
  for ($i = 1; $i <= $maxx ; $i++) {
    $graphs[$j]->moveTo($i,-$maxx);
    $graphs[$j]->lineTo($i, $maxx, 'gray', 1);
    $graphs[$j]->moveTo(-$i,$maxx);
    $graphs[$j]->lineTo(-$i, -$maxx, 'gray', 1);
    $graphs[$j]->moveTo(-$maxx, $i);
    $graphs[$j]->lineTo($maxx, $i, 'gray', 1);
    $graphs[$j]->moveTo(-$maxx, -$i);
    $graphs[$j]->lineTo($maxx, -$i, 'gray', 1);
  }
  $graphs[$j]->moveTo(-$maxx, 0);
  $graphs[$j]->arrowTo($maxx, 0, 'black', 2);
  $graphs[$j]->arrowTo(-$maxx, 0, 'black', 2);
  $graphs[$j]->moveTo(0, -$maxx);
  $graphs[$j]->arrowTo(0, $maxx, 'black', 2);
  $graphs[$j]->arrowTo(0, -$maxx, 'black', 2);
}

@positions = (0..3);
@possPositions = (0..3);
for ($i = 0; $i < 4; $i++) {
  $positions[$i] = list_random(@possPositions);
  for ($j = 0; $j < scalar(@possPositions); $j++) {
    if ($possPositions[$j] == $positions[$i] ) {
      $tmp = $possPositions[$j];
      $possPositions[$j] = $possPositions[scalar(@possPositions)-1];
      $possPositions[scalar(@possPositions)-1] = $tmp;
      pop(@possPositions);
    }
  }
}

Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, "none"=>{});
$numfuns == 0;
@possans = ("A","B","C","D");
@answers = ();

# set up 'S' shaped graph & cubic graph ###########
$numZeros = list_random(1,2,3);
@maxes = (1,7,100);
$scalex = $numZeros+0.4;
$scaley = $maxes[$numZeros-1];

$xFun1 = sub {
  my $t = shift();
  my $prod = $maxx*$t/$scaley;
  for ($j = 1; $j <= $numZeros; $j++) {
    $prod = $prod*($t-$j)*($t+$j);
  }
  return $prod;
};

$yFun1 = sub { my $t = shift(); $maxx*$t/$scalex; };
$xFun2 = sub { my $t = shift(); 3*$maxx*$t/5; };
$yFun2 = sub { my $t = shift(); $maxx*$t*($t-1)*($t+1); };

$choice = random(0,1,1);
if ($choice == 0) {
  $fun1 = new Fun($xFun1, $yFun1, $graphs[$positions[0]]);
} else {
  $fun1 = new Fun($xFun2, $yFun2, $graphs[$positions[0]]);
  push(@answers, $possans[$positions[0]]);
  $numfuns++;
}
$fun1->domain(-$maxx,$maxx);
$fun1->steps(1500);

# set up parabola up/down and left/right ########
$a = random(-1,1,2)/2;
$c = 4; random(-2,2,1);
$d = list_random(-6,-7);
if ($a < 0) {
  $d = -$d;
}

$xFun1 = sub { my $x = shift(); $x };
$yFun1 = sub { my $x = shift(); $a*(($x-$c)**2)+$d; };

$c = 4; random(-4,4,1);
$d = random(-7,-3,1);
$xFun2 = sub { my $x = shift(); $a*(($x+$c)**2)+$d; };
$yFun2 = sub { my $x = shift(); $x };

$choice = random(0,1,1);
if ($choice == 0) {
  $fun2 = new Fun($xFun1, $yFun1, $graphs[$positions[1]]);
  push(@answers, $possans[$positions[1]]);
  $numfuns++
} else {
  $fun2 = new Fun($xFun2, $yFun2, $graphs[$positions[1]]);
}
$fun2->domain(-$maxx,$maxx);
$fun2->steps(1500);

# set up hori and vert lines
$a = non_zero_random(-$maxx+1, $maxx-1,1);
$xFun = sub { my $x = shift(); $x };
$yFun = sub { my $x = shift(); $a };

$choice = random(0,1,1);
if ($choice == 0) {
  $fun3 = new Fun($xFun, $yFun, $graphs[$positions[2]]);
  push(@answers, $possans[$positions[2]]);
  $numfuns++;
} else {
  $fun3 = new Fun($yFun, $xFun, $graphs[$positions[2]]);
}
$fun3->domain(-$maxx,$maxx);
$fun3->weight(3);
$fun3->steps(1500);

# set up trig function and polar graph
$a = random(2,4,1);
$xFun1 = sub { my $x = shift(); $x; };
$yFun1 = sub { my $x = shift(); $a*(cos($x) + sin($x/$a)); }; 
$xFun2 = sub { my $t = shift(); $t**3 - $a*$t; };
$yFun2 = sub { my $t = shift(); $t**2 - $a; };

$choice = random(0,1,1);
if ($choice == 0) {
  $fun4 = new Fun($xFun1, $yFun1, $graphs[$positions[3]]);
  push(@answers, $possans[$positions[3]]);
  $numfuns++;
} else {
  $fun4 = new Fun($xFun2, $yFun2, $graphs[$positions[3]]);
}
$fun4->domain(-$maxx,$maxx);
$fun4->steps(1500);


@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize/2, height=>$gsize/2, tex_size=>1000 );
}

if ($numfuns == 0) {
  $ans = List("none");
} elsif ($numfuns == 1) {
  $ans = List($answers[0]);
} elsif ($numfuns == 2) {
  $ans = List($answers[0], $answers[1]);
} elsif ($numfuns == 3) {
  $ans = List($answers[0], $answers[1], $answers[2]);
} elsif ($numfuns == 4) {
  $ans = List($answers[0], $answers[1], $answers[2], $answers[3]);
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
List the letters corresponding to the graphs below that represent a function. Write ${LQ}none${RQ} if none of the graphs represent a function. If there are multiple letters, separate them by commas.

$PAR
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 

$BR
Correct Letters: \{ ans_rule(20) \} 
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($ans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    \($ans\)
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $BR
    END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();