# DESCRIPTION
# Gives the graph of a piecewise function and asks for the domain and range
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Graphs of Functions')
## KEYWORDS('functions', 'piecewise', 'graphs', 'domain', 'range')
## TitleText1('College Algebra')
## EditionText1('4')
## AuthorText1('Beecher, Penna, Bittinger')
## Section1('2.1')
## Problem1('5')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
for ($i = 0; $i < random(10,50,1); $i++) {
  $case = random(0,2,1);
}

if ($case == 0) {
  $maxx = 11;
  $minx = -$maxx;
  $gsize = 500;

  $graph = init_graph($minx, $minx, $maxx, $maxx, size=>[$gsize,$gsize]);
  for ($i = 1; $i <= $maxx ; $i++) {
    $graph->moveTo($i,$minx);
    $graph->lineTo($i, $maxx, 'gray', 1);
    $graph->moveTo(-$i,$maxx);
    $graph->lineTo(-$i, $minx, 'gray', 1);
    $graph->moveTo($minx, $i);
    $graph->lineTo($maxx, $i, 'gray', 1);
    $graph->moveTo($minx, -$i);
    $graph->lineTo($maxx, -$i, 'gray', 1);
  }
  $graph->moveTo($minx, 0);
  $graph->arrowTo($maxx, 0, 'black', 2);
  $graph->arrowTo($minx, 0, 'black', 2);
  $graph->moveTo(0, $minx);
  $graph->arrowTo(0, $maxx, 'black', 2);
  $graph->arrowTo(0, $minx, 'black', 2);
  $graph->lb(new Label($maxx-0.1, -0.2, 'x', 'black', 'top', 'right'));
  $graph->lb(new Label(0.4, $maxx-0.1, 'y', 'black', 'top', 'left'));
  $graph->lb(new Label(1,-0.1,'1', 'black', 'top','center'));
  $graph->lb(new Label(5,-0.1,'5', 'black', 'top','center'));
  $graph->lb(new Label(10,-0.1,'10', 'black', 'top','center'));
  $graph->lb(new Label(-5,-0.1,'-5', 'black', 'top','center'));
  $graph->lb(new Label(-10,-0.1,'-10', 'black', 'top','center'));
  $graph->lb(new Label(-0.1,0.7,'1', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,4.7,'5', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,9.7,'10', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,-5.3,'-5', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,-10.3,'-10', 'black', 'bottom', 'right'));

  # set up parabola piece
  $x1 = -9; #random(-10,-9);
  $y1 = random(-5,-2);
  $x2 = random($x1+2,$x1+3);
  $y2 = random(1,5);
  $flip = random(-1,1,2);
  $y1 = $y1*$flip;
  $y2 = $y2*$flip;
  $x3 = $x2 + ($x2 - $x1);
  $y3 = $y1;
  $a = ($y1-$y2)/(($x1-$x2)**2);
  $b = -(2*$x2*($y1-$y2))/(($x1-$x2)**2);
  $c = ((($x2)**2)*$y1+(($x1)**2)*$y2-2*$x1*$x2*$y2)/(($x1-$x2)**2);

  $piece1 = sub { my $x = shift(); $a*(($x)**2) + $b*$x + $c; };
  $fun1 = new Fun($piece1, $graph);
  $fun1->steps(1500);
  $fun1->weight(3);
  $fun1->domain(-11,$x3);
  $graph->stamps(new Circle($x2,$y2,5,'blue','blue'));
  $graph->stamps(new Circle($x3,$y3,5,'blue','blue'));

  # set up constant piece 1
  $x4 = random($x3+3,2);
  $y4 = $y3;
  $graph->moveTo($x3,$y3);
  $graph->lineTo($x4,$y4,'blue',3);

  # set up non zero sloped piece that wont be visible
  $x5 = random($x4+1,4);
  do {$y5 = random(-$maxx+1,$maxx-1)} until ($y5 != $y4);
  $oc1 = random(0,1,1);

  if ($oc1 == 0) {
    $graph->stamps(new Circle($x4,$y4,5,'blue','white'));
    $graph->stamps(new Circle($x5,$y5,5,'blue','blue'));
  } else {
    $graph->stamps(new Circle($x4,$y4,5,'blue','blue'));
    $graph->stamps(new Circle($x5,$y5,5,'blue','white'));
  }

  # set up constant piece 2
  $x6 = random($x5+2,$maxx-1);
  $y6 = $y5;
  $oc2 = random(0,1,1);
  $graph->moveTo($x5,$y5);
  $graph->lineTo($x6,$y6,'blue',3);
  if ($oc2 == 0) {
    $graph->stamps(new Circle($x6,$y6,5,'blue','white'));
  } else {
    $graph->stamps(new Circle($x6,$y6,5,'blue','blue'));
  }

  # set up answers
  Context("Interval");
  Context()->strings->add("none"=>{});
  if ($oc1 == 0) {   
    if ($oc2 == 0) {
      $domain = Compute("(-inf,$x4)U[$x5,$x6)");
    } else {
      $domain = Compute("(-inf,$x4)U[$x5,$x6]");
    }
  } else {
    if ($oc2 == 0) {
      $domain = Compute("(-inf,$x4]U($x5,$x6)");
    } else {
      $domain = Compute("(-inf,$x4]U($x5,$x6]");
    }
  }

  if ($flip == 1) {
    if ($y5 > $y2) {
      $range = Compute("(-inf,$y2]U[$y5,$y5]");
    } else {
      $range = Compute("(-inf,$y2]");
    }
  } elsif ($flip == -1) {
    if ($y5 < $y2) {
      $range = Compute("[$y5,$y5]U[$y2,inf)");
    } else {
      $range = Compute("[$y2,inf)");
    }
  }


  ###########################################################################
  # state the problem 
  ###########################################################################
  Context()->texStrings;
  BEGIN_TEXT

  $PAR
  $BCENTER
  \{ image(insertGraph($graph), width=>$gsize, height=>$gsize, tex_size=>500 ); \}
  $ECENTER 
  $PAR

  Given the graph of \(f(x)\) above, find the following:
  $PAR
  (a) Domain: \{ans_rule(20)\}
  $PAR
  (b) Range: \{ans_rule(20)\}
  END_TEXT


  ###########################################################################
  # check the answer  
  ###########################################################################
  ANS(Compute($domain)->cmp());
  ANS(Compute($range)->cmp());


  ###########################################################################
  # use PeriodicRerandomization to write the answer and generate a new
  # version of the problem
  ###########################################################################
  if ($attempts_modp == 0 && $actualAttempts != 0) {
      BEGIN_TEXT
      $PAR
      $BBOLD Answer: $EBOLD
      $PAR
      (a) \($domain\)
      $PAR
      (b) \( $range \)
      $PAR
      END_TEXT
  } else {
      BEGIN_TEXT
      $PAR
      Write your answer using interval notation.  
      ${BBOLD}Help:${EBOLD} \{ AnswerFormatHelp("intervals","Click here for help entering intervals.") \}
      $BR
      END_TEXT
  }
  Context()->normalStrings;
  PeriodicStatus();
} elsif ($case == 1) {
  $maxx = 12;
  $minx = -$maxx;
  $gsize = 500;

  $graph = init_graph($minx, $minx, $maxx, $maxx, size=>[$gsize,$gsize]);
  for ($i = 1; $i <= $maxx ; $i++) {
    $graph->moveTo($i,$minx);
    $graph->lineTo($i, $maxx, 'gray', 1);
    $graph->moveTo(-$i,$maxx);
    $graph->lineTo(-$i, $minx, 'gray', 1);
    $graph->moveTo($minx, $i);
    $graph->lineTo($maxx, $i, 'gray', 1);
    $graph->moveTo($minx, -$i);
    $graph->lineTo($maxx, -$i, 'gray', 1);
  }
  $graph->moveTo($minx, 0);
  $graph->arrowTo($maxx, 0, 'black', 2);
  $graph->arrowTo($minx, 0, 'black', 2);
  $graph->moveTo(0, $minx);
  $graph->arrowTo(0, $maxx, 'black', 2);
  $graph->arrowTo(0, $minx, 'black', 2);
  $graph->lb(new Label($maxx-0.1, -0.2, 'x', 'black', 'top', 'right'));
  $graph->lb(new Label(0.4, $maxx-0.1, 'y', 'black', 'top', 'left'));
  $graph->lb(new Label(1,-0.1,'1', 'black', 'top','center'));
  $graph->lb(new Label(5,-0.1,'5', 'black', 'top','center'));
  $graph->lb(new Label(10,-0.1,'10', 'black', 'top','center'));
  $graph->lb(new Label(-5,-0.1,'-5', 'black', 'top','center'));
  $graph->lb(new Label(-10,-0.1,'-10', 'black', 'top','center'));
  $graph->lb(new Label(-0.1,1,'1', 'black', 'middle', 'right'));
  $graph->lb(new Label(-0.1,5,'5', 'black', 'middle', 'right'));
  $graph->lb(new Label(-0.1,10,'10', 'black', 'middle', 'right'));
  $graph->lb(new Label(-0.1,-5,'-5', 'black', 'middle', 'right'));
  $graph->lb(new Label(-0.1,-10,'-10', 'black', 'middle', 'right'));

  # set up const piece
  $x1 = random(-6,-2);
  $y1 = non_zero_random(-4,3);

  # set up parabola piece
  $x2 = $x1 - random(1,2);
  $y2 = $y1 + (1,6);
  if ($x2 - $x1 == 1) {
    $x3 = $x1 + 2; 
  } else {
    $x3 = $x1 + 1;
  }
  $y3 = $y1 + non_zero_random(-4,-1); # ($x3,$y3) is the vertex
  $x4 = $x3 + ($x3 - $x2);
  $y4 = $y2;

  # set up negative sloped line
  $x5 = random($x4+2,$x4+5);
  $y5 = random($minx, $y4-1);
  $m = ($y5-$y4)/($x5-$x4);
  $b = $y5 - $m*$x5;
  $x5g = $maxx;
  $y5g = $m*$x5g + $b;

  # graph everything
  $flip = random(-1,1,2);
  if ($flip == -1) {
    $y1 = -$y1;
    $y2 = -$y2;
    $y3 = -$y3;
    $y4 = -$y4;
    $y5 = -$y5;
    $y5g = -$y5g;
  }
  $graph->moveTo($x1,$y1);
  $graph->lineTo($minx,$y1,'blue',3);

  $a = ($y2-$y3)/(($x2-$x3)**2);
  $b = -(2*$x3*($y2-$y3))/(($x2-$x3)**2);
  $c = ((($x3)**2)*$y2+(($x2)**2)*$y3-2*$x2*$x3*$y3)/(($x2-$x3)**2);
  $x2g = $x1;
  $y2g = $a*(($x2g)**2) + $b*$x2g + $c;

  if (($y2g - $y1 > 0 || $y2g == $y1) && $y2g - $y1 < 1) {
    $piece1 = sub { my $x = shift(); $a*(($x)**2) + $b*$x + $c+2; };
    $y2g = $y2g + 2;
    $y3 = $y3 + 2;
    $y4 = $y4 + 2;
  } elsif (($y2g - $y1 < 0 || $y2g == $y1) && $y2g - $y1 > -1) {
    $piece1 = sub { my $x = shift(); $a*(($x)**2) + $b*$x + $c-2; };
    $y2g = $y2g - 2;
    $y3 = $y3 - 2;
    $y4 = $y4 - 2;
  } else {
    $piece1 = sub { my $x = shift(); $a*(($x)**2) + $b*$x + $c; };
  }
  $fun1 = new Fun($piece1, $graph);
  $fun1->steps(1500);
  $fun1->weight(3);
  $fun1->domain($x2g,$x4);

  $graph->moveTo($x4,$y4);
  $graph->lineTo($x5g,$y5g,'blue',3);

  $oc = random(0,1);
  if ($oc == 0) {
    $graph->stamps(new Circle($x1,$y1,5,'blue','blue'));
    $graph->stamps(new Circle($x2g,$y2g,5,'blue','white'));
  } else {
    $graph->stamps(new Circle($x1,$y1,5,'blue','white'));
    $graph->stamps(new Circle($x2g,$y2g,5,'blue','blue'));
  }
  $graph->stamps(new Circle($x3,$y3,5,'blue','blue'));
  $graph->stamps(new Circle($x4,$y4,5,'blue','blue'));

  # set up answers
  Context("Interval");
  Context()->strings->add("none"=>{});
  $domain = Compute("(-inf,inf)");

  if ($flip == 1) {
    $dec = List(Compute("($x2g,$x3)"), Compute("($x4,inf)"));
    $inc = List(Compute("($x3,$x4)"));
    $range = Compute("(-inf,$y4]");
  } elsif ($flip == -1) {
    $dec = List(Compute("($x3,$x4)"));
    $inc = List(Compute("($x2g,$x3)"), Compute("($x4,inf)"));
    $range = Compute("[$y4,inf)");
  }
  $const = List(Compute("(-inf,$x1)"));


  ###########################################################################
  # state the problem 
  ###########################################################################
  Context()->texStrings;
  BEGIN_TEXT

  $PAR
  $BCENTER
  \{ image(insertGraph($graph), width=>$gsize, height=>$gsize, tex_size=>500 ); \}
  $ECENTER 
  $PAR

  Given the graph of \(f(x)\) above, find the following:
  $PAR
  (a) Domain: \{ans_rule(20)\}
  $PAR
  (b) Range: \{ans_rule(20)\}
  END_TEXT


  ###########################################################################
  # check the answer  
  ###########################################################################
  ANS(Compute($domain)->cmp());
  ANS(Compute($range)->cmp());


  ###########################################################################
  # use PeriodicRerandomization to write the answer and generate a new
  # version of the problem
  ###########################################################################
  if ($attempts_modp == 0 && $actualAttempts != 0) {
      BEGIN_TEXT
      $PAR
      $BBOLD Answer: $EBOLD
      $PAR
      (a) \($domain\)
      $PAR
      (b) \( $range \)
      $PAR
      END_TEXT
  } else {
      BEGIN_TEXT
      $PAR
      Write your answer using interval notation.  
      ${BBOLD}Help:${EBOLD} \{ AnswerFormatHelp("intervals","Click here for help entering intervals.") \}
      $BR
      END_TEXT
  }
  Context()->normalStrings;
  PeriodicStatus();
} elsif ($case == 2) {
  $maxx = 11;
  $minx = -$maxx;
  $gsize = 500;

  $graph = init_graph($minx, $minx, $maxx, $maxx, size=>[$gsize,$gsize]);
  for ($i = 1; $i <= $maxx ; $i++) {
    $graph->moveTo($i,$minx);
    $graph->lineTo($i, $maxx, 'gray', 1);
    $graph->moveTo(-$i,$maxx);
    $graph->lineTo(-$i, $minx, 'gray', 1);
    $graph->moveTo($minx, $i);
    $graph->lineTo($maxx, $i, 'gray', 1);
    $graph->moveTo($minx, -$i);
    $graph->lineTo($maxx, -$i, 'gray', 1);
  }
  $graph->moveTo($minx, 0);
  $graph->arrowTo($maxx, 0, 'black', 2);
  $graph->arrowTo($minx, 0, 'black', 2);
  $graph->moveTo(0, $minx);
  $graph->arrowTo(0, $maxx, 'black', 2);
  $graph->arrowTo(0, $minx, 'black', 2);
  $graph->lb(new Label($maxx-0.1, -0.2, 'x', 'black', 'top', 'right'));
  $graph->lb(new Label(0.4, $maxx-0.1, 'y', 'black', 'top', 'left'));
  $graph->lb(new Label(1,-0.1,'1', 'black', 'top','center'));
  $graph->lb(new Label(5,-0.1,'5', 'black', 'top','center'));
  $graph->lb(new Label(10,-0.1,'10', 'black', 'top','center'));
  $graph->lb(new Label(-5,-0.1,'-5', 'black', 'top','center'));
  $graph->lb(new Label(-10,-0.1,'-10', 'black', 'top','center'));
  $graph->lb(new Label(-0.1,0.7,'1', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,4.7,'5', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,9.7,'10', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,-5.3,'-5', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,-10.3,'-10', 'black', 'bottom', 'right'));

  # set up parabola piece
  $str = random(1,2);
  $x3 = random(-2,2);
  $y3 = random(-10,-2); #($x3,$y3) is the vertex
  $x2 = $x3 - random(1,2);
  $y2 = (($x2 - $x3)**2)+$y3;
  $x4 = $x3+3;
  $y4 = (($x4 - $x3)**2)+$y3;

  if ($str == 2) {
    $x2 = 2*$x2;
    $x3 = 2*$x3;
    $x4 = 2*$x4;
  }

  # set up const piece
  if ($str == 2) {
    $x1 = $x2 - 1;
  } else {
    $x1 = $x2 - random(1,3);
  }

  $x0 = $minx;
  do {$y1 = $y4 + random(1,3)} until ($y1 != 0);
  $y0 = $y1;
  $infornot = random(0,1,1); # 0 - inf, # 1 - finite
  if ($x1 > -6) {
    if ($infornot == 1) {
      $x0 = $x1 - random(2,4);
    }
  }

  # graph everything
  $flipx = 1; # random(0,1); # 0 - no flip, 1 - flip x, 
  $flipy = 0;#random(0,1); # 0 - no flip, 1 - flip y

  if ($flipx == 1) {
    $x0 = -$x0;
    $x1 = -$x1;
    $x2 = -$x2;
    $x3 = -$x3;
    $x4 = -$x4;
  }

  if ($flipy == 1) {
    $y0 = -$y0;
    $y1 = -$y1;
    $y2 = -$y2;
    $y3 = -$y3;
    $y4 = -$y4;
  }

  $oc1 = random(0,1,1);
  if ($x0 == $minx || $x0 == $maxx) {
    $graph->moveTo($x1,$y1);
    $graph->lineTo($x0,$y1,'blue',3);
  } else {
    $graph->moveTo($x1,$y1);
    $graph->lineTo($x0,$y0,'blue',3);
    if ($oc1 == 0) {
      $graph->stamps(new Circle($x0,$y0,5,'blue','white'));
    } else {
      $graph->stamps(new Circle($x0,$y0,5,'blue','blue'));
    }
  }

  if ($str == 2) {
    if ($flipy == 1) {
      $piece1 = sub { my $x = shift(); -((($x - $x3)/2)**2)+$y3; };
    } else {
      $piece1 = sub { my $x = shift(); ((($x - $x3)/2)**2)+$y3; };
    }
  } else {
    if ($flipy == 1) {
      $piece1 = sub { my $x = shift(); -((($x - $x3))**2)+$y3; };
    } else {
      $piece1 = sub { my $x = shift(); ((($x - $x3))**2)+$y3; };
    }
  }
  $fun1 = new Fun($piece1, $graph);
  $fun1->steps(1500);
  $fun1->weight(3);
  if ($flipx == 0) {
    $fun1->domain($x2,$x4);
  } else {
    $fun1->domain($x4,$x2);
  }

  $oc2 = random(0,1);
  if ($oc2 == 0) {
    $graph->stamps(new Circle($x1,$y1,5,'blue','blue'));
    $graph->stamps(new Circle($x2,$y2,5,'blue','white'));
  } else {
    $graph->stamps(new Circle($x1,$y1,5,'blue','white'));
    $graph->stamps(new Circle($x2,$y2,5,'blue','blue'));
  }
  $graph->stamps(new Circle($x3,$y3,5,'blue','blue'));

  $oc3 = random(0,1);
  if ($oc3 == 0) {
    $graph->stamps(new Circle($x4,$y4,5,'blue','white'));
  } else {
    $graph->stamps(new Circle($x4,$y4,5,'blue','blue'));
  }

  # set up answers
  Context("Interval");
  Context()->strings->add("none"=>{});

  if ($flipx == 0) {
    if ($x0 == $minx) {
      if ($oc2 == 0) {
        if ($oc3 == 0) {
          $domain = List(Compute("(-inf,$x1]U($x2,$x4)"));
        } else {
          $domain = List(Compute("(-inf,$x1]U($x2,$x4]"));
        }
      } else {
        if ($oc3 == 0) {
          $domain = List(Compute("(-inf,$x1)U[$x2,$x4)"));
        } else {
          $domain = List(Compute("(-inf,$x1)U[$x2,$x4]"));
        }
      }
    } else {
      if ($oc1 == 0) {
        if ($oc2 == 0) {
          if ($oc3 == 0) {
            $domain = List(Compute("($x0,$x1]U($x2,$x4)"));
          } else {
            $domain = List(Compute("($x0,$x1]U($x2,$x4]"));
          }
        } else {
          if ($oc3 == 0) {
            $domain = List(Compute("($x0,$x1)U[$x2,$x4)"));
          } else {
            $domain = List(Compute("($x0,$x1)U[$x2,$x4]"));
          }
        }
      } else {
        if ($oc2 == 0) {
          if ($oc3 == 0) {
            $domain = List(Compute("[$x0,$x1]U($x2,$x4)"));
          } else {
            $domain = List(Compute("[$x0,$x1]U($x2,$x4]"));
          }
        } else {
          if ($oc3 == 0) {
            $domain = List(Compute("[$x0,$x1)U[$x2,$x4)"));
          } else {
            $domain = List(Compute("[$x0,$x1)U[$x2,$x4]"));
          }
        }
      }
    }
  } else {
    if ($x0 == $maxx) {
      if ($oc2 == 0) {
        if ($oc3 == 0) {
          $domain = List(Compute("($x4,$x2) U [$x1,inf)"));
        } else {
          $domain = List(Compute("[$x4,$x2)U[$x1,inf)"));
        }
      } else {
        if ($oc3 == 0) {
          $domain = List(Compute("($x4,$x2]U($x1,inf)"));
        } else {
          $domain = List(Compute("[$x4,$x2]U($x1,inf)"));
        }
      }
    } else {
      if ($oc1 == 0) {
        if ($oc2 == 0) {
          if ($oc3 == 0) {
            $domain = List(Compute("($x4,$x2)U[$x1,$x0)"));
          } else {
            $domain = List(Compute("[$x4,$x2)U[$x1,$x0)"));
          }
        } else {
          if ($oc3 == 0) {
            $domain = List(Compute("($x4,$x2]U($x1,$x0)"));
          } else {
            $domain = List(Compute("[$x4,$x2]U($x1,$x0)"));
          }
        }
      } else {
        if ($oc2 == 0) {
          if ($oc3 == 0) {
            $domain = List(Compute("($x4,$x2)U[$x1,$x0]"));
          } else {
            $domain = List(Compute("[$x4,$x2)U[$x1,$x0]"));
          }
        } else {
          if ($oc3 == 0) {
            $domain = List(Compute("($x4,$x2]U($x1,$x0]"));
          } else {
            $domain = List(Compute("[$x4,$x2]U($x1,$x0]"));
          }
        }
      }
    }
  }

  if ($flipy == 0) {
    if ($oc3 == 0) {
      $range = List(Compute("[$y3,$y4)U[$y1,$y1]"));
    } else {
      $range = List(Compute("[$y3,$y4]U[$y1,$y1]"));
    }
  } else {
    if ($oc3 == 0) {
      $range = List(Compute("[$y1,$y1]U($y4,$y3]"));
    } else {
      $range = List(Compute("[$y1,$y1]U[$y4,$y3]"));
    }  
  }

  if ($flipx == 0) {
    if ($flipy == 0) {
      $inc = List(Compute("($x3,$x4)"));
      $dec = List(Compute("($x2,$x3)"));
    } else {
      $dec = List(Compute("($x3,$x4)"));
      $inc = List(Compute("($x2,$x3)"));
    }
    if ($x0 == $minx) {
      $const = List(Compute("(-inf,$x1)"));
    } else {
      $const = List(Compute("($x0,$x1)"));
    }
  } else  {
    if ($flipy == 0) {
      $inc = List(Compute("($x3,$x2)"));
      $dec = List(Compute("($x4,$x3)"));
    } else {
      $dec = List(Compute("($x3,$x2)"));
      $inc = List(Compute("($x4,$x3)"));
    }
    if ($x0 == $maxx) {
      $const = List(Compute("($x1,inf)"));
    } else {
      $const = List(Compute("($x1,$x0)"));
    }
  }


  ###########################################################################
  # state the problem 
  ###########################################################################
  Context()->texStrings;
  BEGIN_TEXT

  $PAR
  $BCENTER
  \{ image(insertGraph($graph), width=>$gsize, height=>$gsize, tex_size=>500 ); \}
  $ECENTER 
  $PAR

  Given the graph of \(f(x)\) above, find the following:
  $PAR
  (a) Domain: \{ans_rule(20)\}
  $PAR
  (b) Range: \{ans_rule(20)\}
  END_TEXT


  ###########################################################################
  # check the answer  
  ###########################################################################
  ANS(Compute($domain)->cmp());
  ANS(Compute($range)->cmp());


  ###########################################################################
  # use PeriodicRerandomization to write the answer and generate a new
  # version of the problem
  ###########################################################################
  if ($attempts_modp == 0 && $actualAttempts != 0) {
      BEGIN_TEXT
      $PAR
      $BBOLD Answer: $EBOLD
      $PAR
      (a) \($domain\)
      $PAR
      (b) \( $range \)
      $PAR
      END_TEXT
  } else {
      BEGIN_TEXT
      $PAR
      Write your answer using interval notation. 
      ${BBOLD}Help:${EBOLD} \{ AnswerFormatHelp("intervals","Click here for help entering intervals.") \}
      $BR
      END_TEXT
  }
  Context()->normalStrings;
  PeriodicStatus();
}


ENDDOCUMENT();