# DESCRIPTION
# Gives a line graph and asks for the domain, range
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Graphs of Functions')
## KEYWORDS('domain', 'range', 'functions')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$maxXVal = 11;
$maxYVal = $maxXVal;
$gridWidth = 500;
$gridHeight = 500;

# initialize graphs, draw grid manually, and label axes
$graph = init_graph(-$maxXVal, -$maxYVal, $maxXVal, $maxYVal, size => [$gridWidth, $gridHeight]);

for ($i = -$maxYVal + 1; $i < $maxYVal; $i++) {
  for ($j = 0; $j < 4; $j++) {
    if ($i != 0) {
      $graph->moveTo(-$maxXVal, $i);
      $graph->lineTo($maxXVal, $i, 'gray', 1);
    }
  }
}

for ($i = -$maxXVal+1; $i < $maxXVal+1; $i++) {
  for ($j = 0; $j < 4; $j++) {
    if ($i != 0) {
      $graph->moveTo($i, -$maxYVal);
      $graph->lineTo($i, $maxYVal, 'gray', 1);
    }
  }
}

for ($j = 0; $j < 4; $j++) {
  $graph->moveTo(-$maxXVal, 0);
  $graph->arrowTo($maxXVal, 0, 'black', 1);
  $graph->arrowTo(-$maxXVal, 0, 'black', 1);
  $graph->moveTo(0, -$maxYVal);
  $graph->arrowTo(0, $maxYVal, 'black', 1);
  $graph->arrowTo(0, -$maxYVal, 'black', 1);
  $graph->lb(new Label($maxXVal-0.1, -0.2, 'x', 'black', 'top', 'right'));
  $graph->lb(new Label(0.4, $maxYVal-0.1, 'y', 'black', 'top', 'left'));
  $graph->lb(new Label(1,-0.1,'1', 'black', 'top','center'));
  $graph->lb(new Label(5,-0.1,'5', 'black', 'top','center'));
  $graph->lb(new Label(10,-0.1,'10', 'black', 'top','center'));
  $graph->lb(new Label(-5,-0.1,'-5', 'black', 'top','center'));
  $graph->lb(new Label(-10,-0.1,'-10', 'black', 'top','center'));
  
  $graph->lb(new Label(-0.1,0.7,'1', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,4.7,'5', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,9.7,'10', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,-5.3,'-5', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,-10.3,'-10', 'black', 'bottom', 'right'));
}

# lines
Context("Interval");
Context()->strings->add("none"=>{});
$numx = 6;
$xvals[0] = random(-10,-8,1);
$xvals[1] = random(-6,-4,1);
$xvals[2] = random(-2,0,1);
$xvals[3] = random(1,3,1);
$xvals[4] = random(5,7);
$xvals[5] = random(8,10);

@possyvals = ((-$maxXVal+1)..($maxXVal-1));
for ($i = 0; $i < $numx; $i++) {
  $yvals[$i] = list_random(@possyvals);
  for ($j = 0; $j < scalar(@possyvals); $j++) {
    if ($possyvals[$j] == $yvals[$i]) {
      $tmp = $possyvals[$j];
      $possyvals[$j] = $possyvals[scalar(@possyvals)-1];
      $possyvals[scalar(@possyvals)-1] = $tmp;
      pop(@possyvals);
    }
  }
}
$chstr = random(1, $numx-1,1); # choose constant part
$yvals[$chstr] = $yvals[$chstr-1];

$maxy = $yvals[0];
$miny = $yvals[0];
for ($i = 0; $i < $numx; $i++) {
  if ($maxy < $yvals[$i]) {
    $maxy = $yvals[$i];
  }
  if ($miny > $yvals[$i]) {
    $miny = $yvals[$i]; 
  }
}

$lcirc = random(0,1,1); # 0 - open, #1 - closed
$rcirc = random(0,1,1);

if ($lcirc == 0) {
  $graph->stamps(open_circle($xvals[0],$yvals[0],'blue'));
  if ($rcirc == 0) {
    $domain = Compute("($xvals[0],$xvals[$numx-1])");
    $graph->stamps(open_circle($xvals[$numx-1],$yvals[$numx-1],'blue'));
  } else {
    $domain = Compute("($xvals[0],$xvals[$numx-1]]");
    $graph->stamps(closed_circle($xvals[$numx-1],$yvals[$numx-1],'blue'));
  }
} else {
  $graph->stamps(closed_circle($xvals[0],$yvals[0],'blue'));
  if ($rcirc == 0) {
    $domain = Compute("[$xvals[0],$xvals[$numx-1])");
    $graph->stamps(open_circle($xvals[$numx-1],$yvals[$numx-1],'blue'));
  } else {
    $domain = Compute("[$xvals[0],$xvals[$numx-1]]");
    $graph->stamps(closed_circle($xvals[$numx-1],$yvals[$numx-1],'blue'));
  }
}
$lclosed = 0;
$rclosed = 0;
if ($lcirc == 0) {
  for ($i = 1; $i < $numx - 1; $i++) {
    if ($yvals[$i] == $miny) {
      $lclosed = 1;
    }
  }
  if ($yvals[$numx-1] == $miny && $rcirc == 1) {
    $lclosed = 1;
  }
}
if ($rcirc == 0) {
  for ($i = 1; $i < $numx - 1; $i++) {
    if ($yvals[$i] == $miny) {
      $lclosed = 1;
    }
  }
  if ($yvals[0] == $miny && $lcirc == 1) {
    $lclosed = 1;
  }
}
if ($lcirc == 0) {
  for ($i = 1; $i < $numx - 1; $i++) {
    if ($yvals[$i] == $maxy) {
      $rclosed = 1;
    }
  }
  if ($yvals[$numx-1] == $maxy && $rcirc == 1) {
    $rclosed = 1;
  }
}
if ($rcirc == 0) {
  for ($i = 1; $i < $numx - 1; $i++) {
    if ($yvals[$i] == $maxy) {
      $rclosed = 1;
    }
  }
  if ($yvals[0] == $maxy && $lcirc == 1) {
    $rclosed = 1;
  }
}
if ($rcirc == 1 && $lcirc == 1) {
  $lclosed = 1;
  $rclosed = 1;
}
if ($lclosed == 0 && $rclosed == 0) {
  $range = Compute("($miny,$maxy)");
} elsif ($lclosed == 1 && $rclosed == 0) { 
  $range = Compute("[$miny,$maxy)");
} elsif ($lclosed == 0 && $rclosed == 1) { 
  $range = Compute("($miny,$maxy]");
} else {
  $range = Compute("[$miny,$maxy]");
}
@incstr = ();
@decstr = ();

for ($i = 0; $i < $numx-1; $i++) {
  $lend = $i;
  $rend = $i;
  if ($yvals[$i] < $yvals[$i+1]) {
    do {
      $rend = $i+1;
      $i++;
    } while ($yvals[$i] < $yvals[$i+1] && $i < $numx-1);
  }
  if ($rend != $lend) {
    push(@incstr, Compute("($xvals[$lend], $xvals[$rend])"));
  }
}

for ($i = 0; $i < $numx-1; $i++) {
  $lend = $i;
  $rend = $i;
  if ($yvals[$i] > $yvals[$i+1]) {
    do {
      $rend = $i+1;
      $i++;
    } while ($yvals[$i] > $yvals[$i+1] && $i < $numx-1);
  }
  if ($rend != $lend) {
    push(@decstr, Compute("($xvals[$lend], $xvals[$rend])"));
  }
}

if (scalar(@incstr) != 0) {
  $inc = List(@incstr);
} else {
  $inc = List("none");
}
if (scalar(@decstr) != 0) {
  $dec = List(@decstr);
} else {
  $dec = List("none");
}
$const = List(Compute("($xvals[$chstr-1],$xvals[$chstr])"));

for ($i = 1; $i < $numx; $i++) {
  $graph->moveTo($xvals[$i-1], $yvals[$i-1]);
  $graph->lineTo($xvals[$i], $yvals[$i], 'blue', 3);
  if ($i != $numx - 1) {
    $graph->stamps(closed_circle($xvals[$i],$yvals[$i],'blue'));
  }
} 

HEADER_TEXT(<<'EOF');
<meta http-equiv="Cache-control" content="no-cache">
EOF

###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT

$PAR
$BCENTER
\{ image(insertGraph($graph), width=>$gridWidth, height=>$gridHeight, tex_size=>500 ); \}
$ECENTER 
$PAR

Given the graph of \(f(x)\) above, find the following:
$PAR
(a) Domain: \{ans_rule(20)\}
$PAR
(b) Range: \{ans_rule(20)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($domain)->cmp());
ANS(Compute($range)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    $PAR
    (a) \($domain\)
    $PAR
    (b) \( $range \)
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $PAR
Write your answer using interval notation.  $PAR
    ${BBOLD}Help:${EBOLD} \{ AnswerFormatHelp("intervals","Click here for help entering intervals.") \}
    $BR
    END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();