## DESCRIPTION
## Radicals and Rational Exponents: Simplifying Radicals
## ENDDESCRIPTION

## KEYWORDS('radical expression')

## DBsubject('Algebra') 
## DBchapter('Basic Algebra') 
## DBsection('Exponents and Radicals') 
## Date('Spring 2012')
## Author1('David Covert')
## Author2('Teri Christiansen')
## Author3('Rick Lynch')
## Institution('University of Missouri')
## TitleText1('College Algebra')
## EditionText1('4')
## AuthorText1('Beecher, Penna, Bittinger')
## Section1('R.7')
## Problem1('')


##################################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGunion.pl",
"MathObjects.pl",
"PGcourse.pl",
"parserMultiAnswer.pl",
"AnswerFormatHelp.pl",
"contextLimitedPowers.pl",
"PeriodicRerandomization.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");


###################################
# Setup


#
# Subclass the numeric functions
#
package my::Function::numeric;
our @ISA = ('Parser::Function::numeric');

#
# Override sqrt() to return a special value (usually 1) when evaluated
# effectively eliminating it from the product.
#
sub sqrt {
  my $self = shift;
  my $value = $self->context->flag("setSqrt");
  return $value+1 if $value && $_[0] == 1; # force sqrt(1) to be incorrect
  return $value if $value;
  return $self->SUPER::sqrt(@_);
}

#
# end of subclass
#
package main;

###########################

Context("Numeric");
#
# make sqrt() use our subclass
#
Context()->functions->set(sqrt=>{class=>'my::Function::numeric'});
Context()->flags->set(reduceConstantFunctions=>0);
Context()->variables->add(
y=>"Real",
t=>"Real",
s=>"Real",
u=>"Real",
v=>"Real",
p=>"Real",
q=>"Real",
r=>"Real",
w=>"Real",
z=>"Real");

$a = list_random(-5,-4,-3,-2,2,3,4,5);
$n = random(2,3,1);
$an = $a**$n;
$k = random(2,5,1);
$nk = $n*$k;

$var = list_random('x','y','z','w','p','q','r','s','t','u','v');
$var1 = list_random('x','y','z','w','t');
$var2 = list_random('p','q','r','u','v');
#
# Don't allow fractional powers (avoids 1/2 power)
# [Could subclass exponentiation to handle that as well]
#
LimitedPowers::OnlyPositiveIntegers();

if ($n == 2){
$expr = "\sqrt{$an $var^{$nk} }";
$tmp = abs($a);
$ans = Compute("$tmp $var**($k)");
}
else
{
$expr = "\sqrt[3]{$an $var^{$nk}} ";
$ans = Compute("$a $var**($k)");
}

Context()->variables->set($var=>{limits=>[5,10]});
Context()->variables->set($var1=>{limits=>[5,10]});
Context()->variables->set($var2=>{limits=>[5,10]});

$texanswer = "\($a $var^{$k}\)";

##############################################################

BEGIN_TEXT
Simplify. Assume that all variables represent positive real numbers.
$PAR
$BCENTER
\( $expr = \text{ }~\) \{ans_rule(20)\}
$ECENTER
$BR
Write your answer using radical notation if necessary.  
END_TEXT

##############################################################



if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    $texanswer
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
  $PAR
    ${BBOLD}Help:${EBOLD}
To enter the square root of a number use ${BBOLD}sqrt()${EBOLD}. For example, to give \(\sqrt{7x}\) as an answer, you would type sqrt(7x). If you mistakenly type sqrt 7x instead, Webwork will take this to mean \(x \sqrt{7}\), not \(\sqrt{7x}\). That is, you MUST put parenthesis around everything that you want to take the square root of. 
    $BR
    END_TEXT
}

Context()->normalStrings;

PeriodicStatus(); 





$showPartialCorrectAnswers = 1;

ANS( $ans-> cmp( checker => sub {
  my ($correct,$student,$ans) = @_;
  return 0 if $ans->{isPreview} || $correct != $student;
  #
  #  Get parsed formula for student and correct answers
  #
  $student = $ans->{student_formula};
  $correct = $correct->{original_formula} if defined $correct->{original_formula};
  #
  # check if equal when sqrt's are replaced by 1
  #
  Context()->flags->set(setSqrt => 1);
  delete $correct->{test_values}, $student->{test_values};
  my $OK = ($correct == $student);
  Context()->flags->set(setSqrt => 0);
  #
  Value::Error("Check to see if your answer is simplified.") unless $OK;
  return $OK;
  }, formatStudentAnswer=>"reduced"
  )
);






COMMENT('MathObject version');
ENDDOCUMENT();