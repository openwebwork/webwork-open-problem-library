# DESCRIPTION
# Gives the equation of a degree 3 poly and asks which graph represents it
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Polynomial and Rational Functions')
## DBsection('Polynomial Functions and their Graphs')
## KEYWORDS('polynomial','polynomials','graph')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("1");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
@pos = (0..3);
@posspos = (0..3);
for ($i = 0; $i < 4; $i++) {
  $pos[$i] = list_random(@posspos);
  for ($j = 0; $j < scalar(@posspos); $j++) {
    if ($posspos[$j] == $pos[$i] ) {
      $tmp = $posspos[$j];
      $posspos[$j] = $posspos[scalar(@posspos)-1];
      $posspos[scalar(@posspos)-1] = $tmp;
      pop(@posspos);
      $j--;
    }
  }
}

# the for loops around the randomized numbers are to make it more random
for ($i = 0; $i < random(20,50,1); $i++) {
  $case = random(0,1,1); # 0 - has two distinct zeros, 1 - has three distinct zeros
} 

if ($case == 0 || $case == 1) { # change later!!!!!!!!!!!!
  # the polynomials are hardcoded due to the difficulty of randomizing
  # each slot of polys is an array as follows:
  # 0 - z0, 1 - z1, 2 - z2, 3 - lead coeff num, 4 - den, 5 - abs(high local extrema), 
  # 6 - yint, 7 - yint if multiplicities switched

  $polys[0] = [-7,-2,-2,5,14,18,28,98];
  $polys[1] = [-7,-7,-2,5,14,18,98,28];
  $polys[2] = [-7,-1,-1,2,7,32,7,49];
  $polys[3] = [-7,-7,-1,2,7,32,49,7];
  $polys[4] = [-7,0,0,3,10,50,0,0];
  $polys[5] = [0,-7,-7,3,10,50,0,0];
  $polys[6] = [-7,1,1,2,7,75,7,-49]; #### den does not divide into max
  $polys[7] = [1,-7,-7,3,7,75,-49,7]; #### den does not divide into max
  $polys[8] = [-7,2,2,1,4,108,28,98];
  $polys[9] = [-7,-7,2,1,4,108,98,28];
  $polys[10] = [4,4,-7,1,28,196,112,-196];
  $polys[11] = [-7,-7,4,1,28,196,-196,112];
  $polys[12] = [-2,-2,-6,1,3,9,24,72];
  $polys[13] = [-2,-6,-6,1,3,9,72,24];
  $polys[14] = [-1,-1,-6,5,9,18,6,36];
  $polys[15] = [-6,-6,-1,2,9,18,36,6];
  $polys[16] = [0,0,-6,7,16,32,0,0];
  $polys[17] = [0,-6,-6,3,16,32,0,0];
  $polys[18] = [1,1,-6,1,2,50,6,-36];
  $polys[19] = [1,-6,-6,1,2,50,-36,6];
  $polys[20] = [2,2,-6,1,3,75,24,-72];
  $polys[21] = [2,-6,-6,1,3,75,-72,24];
  $polys[22] = [3,3,-6,1,9,108,54,-108];
  $polys[23] = [3,-6,-6,1,9,108,-108,54]; 
  $polys[24] = [-6,4,4,1,12,147,96,-144]; #### den does not divide max
  $polys[25] = [-6,-6,4,1,12,147,-144,96]; #### den does not divide max
  $polys[26] = [-6,5,5,1,15,196,150,-180]; #### den does not divide max
  $polys[27] = [5,-6,-6,1,15,196,-180,150]; #### den does not divide max 
  $polys[28] = [-2,-2,-5,1,2,4,20,50];
  $polys[29] = [-2,-5,-5,1,2,4,50,20];
  $polys[30] = [-1,-1,-5,1,5,9,5,25];
  $polys[31] = [-1,-5,-5,1,5,9,25,5];
  $polys[32] = [0,0,-5,5,6,18,0,0];
  $polys[33] = [0,-5,-5,5,6,18,0,0];
  $polys[34] = [-5,1,1,2,5,32,5,-25]; #### den does not divide max 
  $polys[35] = [1,-5,-5,2,5,32,-25,5]; #### den does not divide max 
  $polys[36] = [-5,2,2,3,10,50,20,-50];
  $polys[37] = [2,-5,-5,3,10,50,-50,20];
  $polys[38] = [-5,3,3,4,15,75,45,-75];
  $polys[39] = [-5,-5,3,4,15,75,-75,45];
  $polys[40] = [-5,4,4,3,20,108,80,-100]; #### den does not divide max 
  $polys[41] = [-5,-5,4,1,10,108,-100,80]; #### den does not divide max 
  $polys[42] = [-5,-5,5,2,25,147,125,-125]; #### den does not divide max 
  $polys[43] = [-5,5,5,2,25,147,-125,125]; #### den does not divide max 
  $polys[44] = [-5,6,6,1,15,196,180,-150]; #### den does not divide max 
  $polys[45] = [-5,-5,6,1,15,196,-150,180]; #### den does not divide max 
  $polys[46] = [0,0,-4,1,1,9,0,0];
  $polys[47] = [0,-4,-4,1,1,9,0,0];
  $polys[48] = [-4,1,1,1,2,18,4,-16];
  $polys[49] = [-4,-4,1,1,2,18,-16,4];
  $polys[50] = [-4,2,2,3,8,32,16,-32];
  $polys[51] = [2,-4,-4,3,8,32,-32,16];
  $polys[52] = [-4,5,5,1,20,108,100,-80]; #### den does not divide max 
  $polys[53] = [-4,-4,5,1,20,108,-80,100]; 
  $polys[54] = [-4,7,7,3,28,196,196,-112];
  $polys[55] = [-4,-4,7,3,28,196,-112,196];
  $polys[56] = [-3,2,2,1,6,18,12,-18];
  $polys[57] = [2,-3,-3,1,6,18,-18,12];
  $polys[58] = [-3,5,5,1,15,75,75,-45];
  $polys[59] = [-3,-3,5,1,15,75,-45,75];
  $polys[60] = [-2,7,7,1,7,108,98,-28];
  $polys[61] = [-2,-2,7,1,7,108,-28,98];
  $polys[62] = [0,0,4,1,3,9,0,0];
  $polys[63] = [0,4,4,1,3,9,0,0];
  $polys[64] = [0,6,6,3,16,32,0,0];
  $polys[65] = [0,0,6,5,16,32,0,0];
  $polys[66] = [0,0,7,9,25,50,0,0];
  $polys[67] = [0,7,7,9,25,50,0,0]; 
  $polys[68] = [-1,2,2,3,4,4,4,-2];
  $polys[69] = [-1,-1,2,3,4,4,-2,4];
  $polys[70] = [1,4,4,3,4,4,-16,-4];
  $polys[71] = [4,1,1,3,4,4,-4,-16];
  $polys[72] = [1,5,5,2,5,9,-25,-5]; #### den does not divide max 
  $polys[73] = [1,1,5,2,5,9,-5,-25]; #### den does not divide max 
  $polys[74] = [1,1,6,1,3,18,-6,-36]; #### den does not divide max 
  $polys[75] = [1,6,6,1,3,18,-36,-6]; #### den does not divide max 
  $polys[76] = [2,5,5,1,2,4,-50,-20];
  $polys[77] = [2,2,5,1,2,4,-20,-50];
  $numpolys = scalar(@polys)-1; # $numpolys starts counting from 0, not 1

  for ($i = 0; $i < random(20,50,1); $i++) {
    $choice = random(0,$numpolys,1);
    $flip = random(-1,1,2);
  }
  $z0 = $polys[$choice][0];
  $z1 = $polys[$choice][1];
  $z2 = $polys[$choice][2];
  $num = $polys[$choice][3]*$flip;
  $den = $polys[$choice][4];
  $high = $polys[$choice][5]*abs($num/$den);
  $yint = $polys[$choice][6]*$num/$den;
  $yints = $polys[$choice][7]*$num/$den;
  $max = ceil(max($high,abs($yint),abs($yints)));

  # 0 - correct
  # 1 - switches multiplicities
  # 2 - reflected
  # 3 - opposite zeros
  $expn[0] = sub { my $x = shift(); $num*($x - $z0)*($x - $z1)*($x - $z2)/$den };
  if ($z0 == $z1) {
    $expn[1] = sub { my $x = shift(); $num*($x - $z0)*(($x - $z2)**2)/$den };
  } elsif ($z1 == $z2) {
    $expn[1] = sub { my $x = shift(); $num*(($x - $z0)**2)*($x - $z2)/$den };
  }
  $expn[2] = sub { my $x = shift(); -$num*($x - $z0)*($x - $z1)*($x - $z2)/$den };
  $expn[3] = sub { my $x = shift(); $num*($x + $z0)*($x + $z1)*($x + $z2)/$den };
  
  if (abs($num/$den)==1) {
    if ($z0 == 0) {
      $dispfun = ($num < 0) ? "P(x) = -x" : "P(x) = x";
    } else {
      $dispfun = ($num < 0) ? "P(x) = -\left(x - $z0\right)" : "P(x) = \left(x - $z0\right)";
    }
  } elsif ($num < 0) {
    $tmp = -$num;
    if ($z0 == 0) {
      $dispfun = "P(x) = -\frac{$tmp}{$den} x";
    } else {
      $dispfun = "P(x) = -\frac{$tmp}{$den} \left(x - $z0\right)";
    }
  } else {
    if ($z0 == 0) {
      $dispfun = "P(x) = \frac{$num}{$den} x";
    } else {
      $dispfun = "P(x) = \frac{$num}{$den} \left(x - $z0\right)";
    }
  }
  
  if ($z0 == $z1) {
    if ($z2 == 0) {
      $dispfun = $dispfun."^2 x";
    } else {
      $dispfun = $dispfun."^2 \left(x - $z2\right)";
    }
  } else {
    if ($z2 == 0) {
      $dispfun = $dispfun."x^2";
    } else {
      $dispfun = $dispfun."\left(x - $z2\right)^2";
    }
  }
    
  $maxx = max(0,$z0,$z1,$z2,-min(0,$z0,$z1,$z2))+3;
  $maxy = $max+3;
  $minx = -$maxx;
  $miny = -$maxy;
}

$gsize = 500;
for ($i = 0; $i < 4; $i++) {
  $graphs[$i] = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
  for ($j = $minx; $j <= $maxx; $j++) {
    $graphs[$i]->moveTo($j,$miny);
    $graphs[$i]->lineTo($j,$maxy,'gray',1);
  }
  for ($j = $miny; $j <= $maxy; $j++) {
    $graphs[$i]->moveTo($minx,$j);
    $graphs[$i]->lineTo($maxx,$j,'gray',1);
  }
  $graphs[$i]->moveTo($minx, 0);
  $graphs[$i]->arrowTo($maxx, 0, 'black', 2);
  $graphs[$i]->arrowTo($minx, 0, 'black', 2);
  $graphs[$i]->moveTo(0, $miny);
  $graphs[$i]->arrowTo(0, $maxy, 'black', 2);
  $graphs[$i]->arrowTo(0, $miny, 'black', 2);
  $graphs[$i]->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

  for ($j = $minx+1; $j < $maxx; $j++) {
    if (($j != 0 && $j % 5 == 0) || $j == 1) {
      $graphs[$i]->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
    }
  }

  for ($j = $miny+1; $j < $maxy; $j++) {
    if (($j != 0 && $j % 5 == 0) || $j == 1) {
      $graphs[$i]->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
    }
  }
}

if ($case == 0 || $case == 1) { # change later!!!!!!!!!!!!
  $graphs[$pos[0]]->stamps(new Circle($z0,0,'5','blue','blue'));
  $graphs[$pos[0]]->stamps(new Circle($z1,0,'5','blue','blue'));
  $graphs[$pos[0]]->stamps(new Circle($z2,0,'5','blue','blue'));
  $graphs[$pos[1]]->stamps(new Circle($z0,0,'5','blue','blue'));
  $graphs[$pos[1]]->stamps(new Circle($z1,0,'5','blue','blue'));
  $graphs[$pos[1]]->stamps(new Circle($z2,0,'5','blue','blue'));
  $graphs[$pos[2]]->stamps(new Circle($z0,0,'5','blue','blue'));
  $graphs[$pos[2]]->stamps(new Circle($z1,0,'5','blue','blue'));
  $graphs[$pos[2]]->stamps(new Circle($z2,0,'5','blue','blue'));
  $graphs[$pos[3]]->stamps(new Circle(-$z0,0,'5','blue','blue'));
  $graphs[$pos[3]]->stamps(new Circle(-$z1,0,'5','blue','blue'));
  $graphs[$pos[3]]->stamps(new Circle(-$z2,0,'5','blue','blue'));

  $graphs[$pos[0]]->stamps(new Circle(0,$yint,'5','blue','blue'));
  $graphs[$pos[1]]->stamps(new Circle(0,$yints,'5','blue','blue'));
  $graphs[$pos[2]]->stamps(new Circle(0,-$yint,'5','blue','blue'));
  $graphs[$pos[3]]->stamps(new Circle(0,-$yint,'5','blue','blue'));
} else {
  
}

for ($i = 0; $i < 4; $i++) {
  $fun[$i] = new Fun($expn[$i], $graphs[$pos[$i]]);
  $fun[$i]->domain($minx,$maxx);
  $fun[$i]->steps(1500);
  $fun[$i]->weight(3);
}

$scale = 0.6;
@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize*$scale, height=>$gsize*$scale, tex_size=>300 );
}

Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, E=>{}, "none"=>{});
@possans = ("A", "B", "C", "D", "E");
$ans = $possans[$pos[0]];


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 
$PAR
Determine the correct graph of \(\displaystyle $dispfun\)
$PAR
Correct Answer: \{ans_rule(10)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(String($ans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem, since MC problem first attempt is skipped by
# using an if statement around problem statement and placing a message
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} \($ans\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Note:${EBOLD} You may click a graph to enlarge it.
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus();

COMMENT('Features Periodic Rerandomization');
ENDDOCUMENT();