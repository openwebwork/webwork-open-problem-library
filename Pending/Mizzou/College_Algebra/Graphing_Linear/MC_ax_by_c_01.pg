# DESCRIPTION
# 
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter()
## DBsection()
## KEYWORDS()
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "contextFraction.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("1");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Fraction-NoDecimals");
do {
  $a = non_zero_random(-9,9);
  $b = non_zero_random(-5,5);
} until (gcd($a,$b) == 1);
$c = random(1,5,1)*random(-1,1,2)*$b;

@pos = (0..3);
@posspos = (0..3);
for ($i = 0; $i < 4; $i++) {
  $pos[$i] = list_random(@posspos);
  for ($j = 0; $j < scalar(@posspos); $j++) {
    if ($posspos[$j] == $pos[$i] ) {
      $tmp = $posspos[$j];
      $posspos[$j] = $posspos[scalar(@posspos)-1];
      $posspos[scalar(@posspos)-1] = $tmp;
      pop(@posspos);
      $j--;
    }
  }
}

Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, E=>{}, "none"=>{});
@possans = ("A", "B", "C", "D", "E");
$ans = $possans[$pos[0]];

$maxx = max(abs($c/$b),abs($a),abs($b),abs($b)+abs($a)) + 3;
$maxy = $maxx;
$minx = -$maxx;
$miny = -$maxy;
$gsize = 500;
for ($i = 0; $i < 4; $i++) {
  $graphs[$i] = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
  for ($j = $minx; $j <= $maxx; $j++) {
    $graphs[$i]->moveTo($j,$miny);
    $graphs[$i]->lineTo($j,$maxy,'gray',1);
  }
  for ($j = $miny; $j <= $maxy; $j++) {
    $graphs[$i]->moveTo($minx,$j);
    $graphs[$i]->lineTo($maxx,$j,'gray',1);
  }
  $graphs[$i]->moveTo($minx, 0);
  $graphs[$i]->arrowTo($maxx, 0, 'black', 2);
  $graphs[$i]->arrowTo($minx, 0, 'black', 2);
  $graphs[$i]->moveTo(0, $miny);
  $graphs[$i]->arrowTo(0, $maxy, 'black', 2);
  $graphs[$i]->arrowTo(0, $miny, 'black', 2);
  $graphs[$i]->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

  for ($j = $minx+1; $j < $maxx; $j++) {
    if (($j != 0 && $j % 5 == 0) || $j == 1) {
      $graphs[$i]->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
    }
  }

  for ($j = $miny+1; $j < $maxy; $j++) {
    if (($j != 0 && $j % 5 == 0) || $j == 1) {
      $graphs[$i]->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
    }
  }
}

$e1 = -$a/$b;
$e2 = $c/$b;
$g = sub { my $x = shift(); return ($e1*$x +$e2); };
$b1 = sub { my $x = shift(); return (-$e1*$x +$e2); };
$b2 = sub { my $x = shift(); return ($e1*$x - $e2); };
$b3 = sub { my $x = shift(); return (-$b*$x/$a +$e2); };
$graphs[$pos[0]]->stamps(new Circle(0,$e2,5,'blue','blue'));
$graphs[$pos[0]]->stamps(new Circle($b,$e2-$a,5,'blue','blue'));
$graphs[$pos[1]]->stamps(new Circle(0,$e2,5,'blue','blue'));
$graphs[$pos[1]]->stamps(new Circle($b,$e2+$a,5,'blue','blue'));
$graphs[$pos[2]]->stamps(new Circle(0,-$e2,5,'blue','blue'));
$graphs[$pos[2]]->stamps(new Circle($b,-$e2-$a,5,'blue','blue'));
$graphs[$pos[3]]->stamps(new Circle(0,$e2,5,'blue','blue'));
$graphs[$pos[3]]->stamps(new Circle($a,$e2-$b,5,'blue','blue'));

$gfun = new Fun($g,$graphs[$pos[0]]);
$bfun1 = new Fun($b1,$graphs[$pos[1]]);
$bfun2 = new Fun($b2,$graphs[$pos[2]]);
$bfun3 = new Fun($b3,$graphs[$pos[3]]);
$gfun->steps(1500);
$bfun1->steps(1500);
$bfun2->steps(1500);
$bfun3->steps(1500);

$scale = 0.6;
@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize*$scale, height=>$gsize*$scale, tex_size=>500 );
}

Context()->texStrings;
if ($a == -1) {
  $eqn = "-x";
} elsif ($a == 1) {
  $eqn = "x";
} else {
  $eqn = "$a x";
}

if ($b == 1) {
  $eqn = $eqn."+y = $c";
} elsif ($b == -1) {
  $eqn = $eqn."-y = $c";
} else {
  $eqn = $eqn."+$b y = $c";
}


###########################################################################
# state the problem 
###########################################################################
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 
$PAR
Graph the equation \($eqn\).
$PAR
Correct Answer: \{ans_rule(10)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(String($ans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem, since MC problem first attempt is skipped by
# using an if statement around problem statement and placing a message
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} \($ans\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Note:${EBOLD} You may click a graph to enlarge it.
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus();

COMMENT('Features Periodic Rerandomization');
ENDDOCUMENT();