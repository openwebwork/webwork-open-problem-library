# DESCRIPTION
# 
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter()
## DBsection()
## KEYWORDS()
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
  "contextLimitedPowers.pl",
  "contextFraction.pl",
  "AnswerFormatHelp.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;

#
# Subclass the numeric functions
#
package my::Function::numeric;
our @ISA = ('Parser::Function::numeric');

#
# Override sqrt() to return a special value (usually 1) when evaluated
# effectively eliminating it from the product.
#
sub sqrt {
  my $self = shift;
  my $value = $self->context->flag("setSqrt");
  return $value+1 if $value && $_[0] == 1; # force sqrt(1) to be incorrect
  return $value if $value;
  return $self->SUPER::sqrt(@_);
}

#
# end of subclass
#
package main;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
Context()->functions->set(sqrt=>{class=>'my::Function::numeric'});
Context()->flags->set(reduceConstantFunctions=>0);
LimitedPowers::OnlyPositiveIntegers();

$r1 = random(2,5);
do {$r2 = random(2,5)} until ($r2 != $r1);
if ($r1 == 2) {
  $a = list_random(3,4,5,6,7,8,9,10,11,12,13,14,15,20);
} elsif ($r1 == 3) {
  $a = random(2,5);
} else {
  $a = random(2,3);
}
$ar = ($a)**$r1;


if ($r2 == 2) {
  $b2 = list_random(3,4,5,6,7,8,9,10,11,12,13,14,15,20);
  do {$b1 = list_random(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20)} until (gcd($b1,$b2) == 1);
} elsif ($r2 == 3) {
  $b2 = random(2,5);
  do {$b1 = random(2,5)} until (gcd($b1,$b2) == 1);
} else {
  $b2 = random(2,3);
  do {$b1 = random(2,3)} until ($b1 != $b2);
}
$br1 = ($b1)**$r2;
$br2 = ($b2)**$r2;

if ($r1 == 2) {
  $dispa = "\(\sqrt{$ar} = \)";
} else {
  $dispa = "\(\sqrt[$r1]{$ar} = \)";
}

if ($r2 == 2) {
  $dispb = "\(\displaystyle \sqrt{\frac{$br1}{$br2}} = \)";
} else {
  $dispb = "\(\displaystyle  \sqrt[$r2]{\frac{$br1}{$br2}} = \)";
}

$ans1 = Formula("$a");
$ans2 = Formula("$b1/$b2");


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Simplify.
$PAR
(a) $dispa \{ans_rule(20)\}
$PAR
(b) $dispb \{ans_rule(20)\}
$PAR
Write your answer using radical notation if necessary.
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS( $ans1-> cmp( checker => sub {
  my ($correct,$student,$ans) = @_;
  return 0 if $ans->{isPreview} || $correct != $student;
  #
  #  Get parsed formula for student and correct answers
  #
  $student = $ans->{student_formula};
  $correct = $correct->{original_formula} if defined $correct->{original_formula};
  #
  # check if equal when sqrt's are replaced by 1
  #
  Context()->flags->set(setSqrt => 1);
  delete $correct->{test_values}, $student->{test_values};
  my $OK = ($correct == $student);
  Context()->flags->set(setSqrt => 0);
  #
  Value::Error("Check to see if your answer is simplified.") unless $OK;
  return $OK;
  }, formatStudentAnswer=>"reduced"
  )
);

ANS( $ans2-> cmp( checker => sub {
  my ($correct,$student,$ans) = @_;
  return 0 if $ans->{isPreview} || $correct != $student;
  #
  #  Get parsed formula for student and correct answers
  #
  $student = $ans->{student_formula};
  $correct = $correct->{original_formula} if defined $correct->{original_formula};
  #
  # check if equal when sqrt's are replaced by 1
  #
  Context()->flags->set(setSqrt => 1);
  delete $correct->{test_values}, $student->{test_values};
  my $OK = ($correct == $student);
  Context()->flags->set(setSqrt => 0);
  #
  Value::Error("Check to see if your answer is simplified.") unless $OK;
  return $OK;
  }, formatStudentAnswer=>"reduced"
  )
);


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} (a) \($a\), $SPACE (b) \(\displaystyle \frac{$b1}{$b2}\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Help:${EBOLD} 
  \{ AnswerFormatHelp("exponents", "Click here for help writing exponents and square roots.") \}
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 

COMMENT('Features Periodic Rerandomization');
ENDDOCUMENT();