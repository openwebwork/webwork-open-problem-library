# DESCRIPTION
# Gives a number, opposite, or reciprocal and asks to find the others
# ENDDESCRIPTION

## DBsubject('Intermediate Algebra')
## DBchapter('Ch 01: Algebra, Mathematical Models, and Problem Solving')
## DBsection('Operations with Real Numbers and Simplifying Algebraic Expressions')
## KEYWORDS('real numbers')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
  "contextLimitedPolynomial.pl",
  "contextFraction.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("LimitedPolynomial-Strict");
@vars = ("x","y","z","p","q","m","n","k","u","v");
for ($i = 1; $i < scalar(@vars); $i++) {
  Context()->variables->add($vars[$i]=>"Real")
}
$m1 = random(2,9,1);
do {$m2 = random(2,9,1)} until ($m2 != $m1);
do {$m3 = random(-1,1,2)*random(1,9,1)} until ($m3 != $m1 && $m3 != $m1);
do {$m4 = random(-1,1,2)*random(1,9,1)} until ($m4 != ($m1 - $m2));
$var1 = $vars[random(0,scalar(@vars)-1,1)];
if ($m4 == 1) {
  $dispexpn1 = "$m1 $var1 - $m2\left($var1 - $m3\right) + $var1";
} elsif ($m4 == -1) {
  $dispexpn1 = "$m1 $var1 - $m2\left($var1 - $m3\right) - $var1";
} else {
  $dispexpn1 = "$m1 $var1 - $m2\left($var1 - $m3\right) + $m4 $var1";
}
$e11 = $m1 - $m2 + $m4;
$e12 = $m2*$m3;
$ans1 = Formula("$e11 $var1 + $e12")->reduce;

$den1 = random(2,12,2);
do {$den2 = random(2,12,2)} until ($den2 != $den1);
do {$den3 = random(2,12,2)} until ($den3 != $den1 && $den3 != $den2);
$den4 = random(3,7,2);
do {$num1 = random(1,$den1-1,1)} until (gcd($num1,$den1) == 1);
$n1 = $num1/$den1;
$dispn1 = "\frac{$num1}{$den1}";
do {$num2 = random(1,$den2-1,1)} until (gcd($num2,$den2) == 1 && $num2/$den2 != $n1);
$n2 = $num2/$den2;
$dispn2 = "\frac{$num2}{$den2}";
do {$num3 = random(1,$den3-1,1)} until (gcd($num3,$den3) == 1 && $num3/$den3 != $n1 && $num3/$den3 != $n2);
$n3 = $num3/$den3;
$dispn3 = "\frac{$num3}{$den3}";
do {$num4 = random(1,$den4-1,1)} until (gcd($num4,$den4) == 1 && $num4/$den4 != $n1 && $num4/$den4 != $n2 && $num4/$den4 != $n3);
$n4 = $num4/$den4;
$dispn4 = "\frac{$num4}{$den4}";

$var2 = $vars[random(0,scalar(@vars)-1,1)];
$case = random(0,1,1); # 0: -,+,-, 1: -,-,+
if ($case == 0) {
  $dispexpn2 = "$dispn1 $var2 - $dispn2  + $dispn3 $var2 - $dispn4";
  $e21 = $n1 + $n3;
  $e22 = -$n2 - $n4;
} else {
  $dispexpn2 = "$dispn1 $var2 - $dispn2  - $dispn3 $var2 + $dispn4";
  $e21 = $n1 - $n3;
  $e22 = -$n2 + $n4;
}
$ans2 = Formula("$e21 $var2 + $e22")->reduce;

Context("Fraction-NoDecimals")->texStrings;
if ($case == 0) {
  $dispe21 = Compute("($num1*$den3 + $num3*$den1)/($den1*$den3)");
  $dispe22 = Compute("(-$num2*$den4 - $num4*$den2)/($den2*$den4)");
} else {
  $dispe21 = Compute("($num1*$den3 - $num3*$den1)/($den1*$den3)");
  $dispe22 = Compute("(-$num2*$den4 + $num4*$den2)/($den2*$den4)");
}
if ($dispe21 == 1) {
  $dispans2 = "\displaystyle $var2 + $dispe22";
} elsif ($dispe21 == -1) {
  $dispans2 = "\displaystyle -$var2 + $dispe22";
} else {
  $dispans2 = "\displaystyle $dispe21 $var2 + $dispe22";
}

Context("LimitedPolynomial-Strict");
Context()->variables->are($var1=>"Real", $var2=>"Real");


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Simplify each expression:
$PAR
(a) \($dispexpn1 = \) \{ans_rule(25)\}
$PAR
(b) \(\displaystyle $dispexpn2 = \) \{ans_rule(25)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS($ans1->cmp());
ANS($ans2->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} (a) \($ans1\), $SPACE (b) \($dispans2\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 

COMMENT('Features Periodic Rerandomization');
ENDDOCUMENT();