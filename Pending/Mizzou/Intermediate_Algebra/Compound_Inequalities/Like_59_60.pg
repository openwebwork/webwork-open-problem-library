# DESCRIPTION
# Asks to solve a compound inequality
# ENDDESCRIPTION

## DBsubject('Intermediate Algebra')
## DBchapter('Ch 04: Inequalities and Problem Solving')
## DBsection('Compound Inequalities')
## KEYWORDS('inequalities', 'linear')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
  "AnswerFormatHelp.pl",
  "contextFraction.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Fraction-NoDecimals");
@ineqs = ("<", "\leq");
@bracks1 = ("(","[");
@bracks2 = (")","]");
for ($i = 0; $i < random(10,50); $i++) { #more random??
  $case1 = random(0,1,1);
  $case2 = random(0,1,1);
}
$ineq1 = $ineqs[$case1];
$ineq2 = $ineqs[$case2];
$a = random(-9,-1);
$b = random(2,5,1);
$c = non_zero_random(-8,8,1);
$d = random(1,5)*$b;
$dispineq = "$a $ineq1 $b(x + $c) $ineq2 $d";
$lep = Compute("($a/$b) - $c");
$rep = Compute("($d/$b) - $c");

Context("Interval");
$ans = Compute("$bracks1[$case1] $lep, $rep $bracks2[$case2]");

###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Solve the following inequality. Write your answer in interval notation or if no solutions exist write ${BBOLD}no solutions${EBOLD}. 
$PAR
\[
$dispineq
\]
$PAR
Answer:  \{ ans_rule(20) \}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS($ans->cmp(tolerance=>0.000000001, tolType=>"absolute"));


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} \(\left $bracks1[$case1] $lep, $rep \right $bracks2[$case2]\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Help:${EBOLD} \{ AnswerFormatHelp("intervals", "Click here for help entering intervals as answers.") \}
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 

COMMENT('Features Periodic Rerandomization');
ENDDOCUMENT();