# DESCRIPTION
# Asks to solve a space-filling problem
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Equations and Inequalities')
## DBsection('Modeling with Equations')
## KEYWORDS('equations')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
for ($i = 0; $i < random(10,50); $i++) {
  $case = random(0,1,1);
}

if ($case == 0) {
  $width = random(6,16,2);
  $package = random(6,20,2);
  $ans = ceil(($width**2)/$package);
  $question = "A package of floor tiles contains $package one-foot square tiles. Find how many packages should be bought to cover a square room whose sides measure $width feet.";
} else {
  do {
    $width = random(6,20,2);
    $length = random(6,20,2);
  } until (abs($width - $length) > 5);
  $package = random(20,50,5);
  $ans = ceil(($width*$length)/$package);
  $question = "One-foot-square ceiling tiles are sold in packages of $package. Find how many packages must be bought for a rectangular ceiling that is $width feet by $length feet.";  
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$question
$PAR
Answer: \{ans_rule(20)\} packages
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($ans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} \($ans\) packages
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 

COMMENT('Features Periodic Rerandomization');
ENDDOCUMENT();