# WeBWorK problem written by Carl Yao
# Portland Community College
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Exponential')
## KEYWORDS()
## TitleText1()
## EditionText1()
## AuthorText1()
## Section1()
## Problem1()
## Author('Carl Yao')
## Institution('PCC')



##############################################


DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGgraphmacros.pl",
  "PCCgraphMacros.pl",
  "PGchoicemacros.pl",
  "niceTables.pl",
  "PGcourse.pl",
);

 $refreshCachedImages = 1;


##############################################

TEXT(beginproblem());
Context("Numeric");
Context()->reduction->set('(-x)-y'=>0);    #So that the displayed inequalities
Context()->reduction->set('(-x)+y'=>0);    #will look as intended

$a=random(1,3,1)*random(-1,1,2);
$b=random(1,3,1)*random(-1,1,2);
$c=random(1,3,1)*random(-1,1,2);
$d=random(1,3,1)*random(-1,1,2);
$e=random(1,3,1)*random(-1,1,2);

$f[0] = Formula("x");
$f[1] = Formula("x**3");
$f[2] = Formula("1/x");
$f[3] = Formula("-x/abs($a)");
$f[4] = Formula("sin(x)");
$f[5] = Formula("$a");
$f[6] = Formula("abs(x)+$a");
$f[7] = Formula("x**2+$b");
$f[8] = Formula("-x**2+$c");
$f[9] = Formula("cos(x)");
$f[10] = Formula("1/x**2");
$f[11] = Formula("x+$d");
$f[12] = Formula("sqrt(x)");
$f[13] = Formula("(x+$e)**2");

$xmin = -5;         #The viewing window
$xmax = 5;
$ymin = -5;
$ymax = 5;


@graphs = ();             


#  Start making the graphs

for ( my $i=0; $i<16; $i++ ) {


#  Background

   $graphs[$i] = init_graph($xmin,$ymin,$xmax,$ymax,
          grid=>[$xmax-$xmin,$ymax-$ymin],axes=>[0,0],pixels=>[300,300]);


#  Labels

   $graphs[$i]->lb('reset');
   foreach my $j (1..4) {
      $graphs[$i]->lb( new Label(-4.7,  $j, $j,'black','center','middle'));
      $graphs[$i]->lb( new Label(-4.7, -$j,-$j,'black','center','middle'));
      $graphs[$i]->lb( new Label(  $j,-4.7, $j,'black','center','middle'));
      $graphs[$i]->lb( new Label( -$j,-4.7,-$j,'black','center','middle'));
   }
   $graphs[$i]->lb( new Label(4.7,0.2,'x','black','center','middle'));
   $graphs[$i]->lb( new Label(0.2,4.7,'y','black','center','middle'));


#  Define new graph colors

   $graphs[$i]->new_color("lightblue", 214,230,244); # RGB
   $graphs[$i]->new_color("darkblue",  100,100,255); 
   $graphs[$i]->new_color("lightgreen",156,215,151); # other color options
   $graphs[$i]->new_color("darkgreen",   0, 86, 34); # for future author use 
   $graphs[$i]->new_color("lightred",  245,234,229); # light red-purple
   $graphs[$i]->new_color("darkred",   159, 64, 16); # red-brown

   $graphs[$i]->new_color("white",   255, 255, 255); # needed to seal off
                                                     # areas bordered with 
                                                     # dashed lines

#  Choose colors

   $light[$i] = "lightblue";      # Graphs will all be blue
   $dark[$i] = "darkblue";        # This could be modified to give different
                                  # graphs different colors.
   

add_functions($graphs[$i], "$f[$i] for x in <-5,5> " .
    "using color:blue and weight:2");

}

#Create a hash and its inverse that randomizes the order of the four graphs.
@scramble = NchooseK(14,14);
@inverse = ();
for my $i (0..13) {
  $inverse[$scramble[$i]] = $i+1;
}

$mc = new_checkbox_multiple_choice();
$mc -> qa (
   "Select all functions that are neither odd nor even:", 
   "$inverse[11]",
   "$inverse[12]",
   "$inverse[13]",
);
$mc -> makeLast("1","2","3","4","5","6","7","8","9","10","11","12","13","14");

$size = 180;
$texsize = 100;

##############################################

BEGIN_PGML

[@ $mc -> print_q() @]*
[@ $mc -> print_a() @]*

[@EnlargeImageStatementPGML()@]**

END_PGML

BEGIN_TEXT
$PAR

\{LayoutTable(
[
['1.'.image(insertGraph( $graphs[ $scramble[0] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),
'2.'.image(insertGraph( $graphs[ $scramble[1] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),
'3.'.image(insertGraph( $graphs[ $scramble[2] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),
'4.'.image(insertGraph( $graphs[ $scramble[3] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),],
['5.'.image(insertGraph( $graphs[ $scramble[4] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),
'6.'.image(insertGraph( $graphs[ $scramble[5] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),
'7.'.image(insertGraph( $graphs[ $scramble[6] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),
'8.'.image(insertGraph( $graphs[ $scramble[7] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),],
['9.'.image(insertGraph( $graphs[ $scramble[8] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),
'10.'.image(insertGraph( $graphs[ $scramble[9] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),
'11.'.image(insertGraph( $graphs[ $scramble[10] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),
'12.'.image(insertGraph( $graphs[ $scramble[11] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),],
['13.'.image(insertGraph( $graphs[ $scramble[12] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),
'14.'.image(insertGraph( $graphs[ $scramble[13] ] ), 
   tex_size=>$texsize, height=>$size, width=>$size,
   extra_html_tags=>'alt="graph"'),],
],
align=>'>{\bfseries}l>{\bfseries}l>{\bfseries}l>{\bfseries}l',
allcellcss=>'padding: 10px;',
);
\}

END_TEXT


##############################################

$showPartialCorrectAnswers = 1;
ANS( checkbox_cmp( $mc->correct_ans() ) );

##############################################


BEGIN_PGML_SOLUTION

Odd functions are symmetric by the origin; even functions are symmetric by the [`y`]-axis. All other functions are neither odd nor even.

The correct answers are:

    [@$mc->correct_ans()@]*

END_PGML_SOLUTION

ENDDOCUMENT();