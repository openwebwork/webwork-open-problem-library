# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Decide which of six graphs represent even functions.
#
# Last update: Carl Yao 09/01/2018
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Function')
## DBsection('Domain and Range')
## KEYWORDS('function','odd','even','graph')
## DBCCSS('8.F','F-IF')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PCCgraphMacros.pl",
  "PGcourse.pl",
  "PGchoicemacros.pl",
  "pccTables.pl",
  "unionTables.pl",
);

##############################################
TEXT(beginproblem());

Context("Numeric");

$a = non_zero_random(-2,2,0.5);
$f0 = Formula("abs(x)+$a");

$b = non_zero_random(-2,2,0.5);
$f1 = Formula("$b*x**4-$b*x**2");

$c = non_zero_random(-2,2,0.5);
$f2 = Formula("$c*cos(x)");

$d = non_zero_random(-2,2,1);
$f3 = Formula("$d*x");

$e = non_zero_random(-2,2,1);
$f4 = Formula("x+$e");

$f = non_zero_random(-2,2,1);
$f5 = Formula("$f*sin(x)");


#Create a hash and its inverse that randomizes the order of the six graphs.
%scramble = ();
%inverse = ();
for my $i (0..5) {
  do {$temp = list_random(0..5)} until !(grep(/^$temp$/,values %scramble) );
  $scramble{$i} = $temp;
  $inverse{$temp} = $i;
};

$bound = 2;
($min[0], $max[0], $min[1], $max[1], $ticknum[0], $ticknum[1], $xticks_ref, $yticks_ref, $marksep[0], $marksep[1]) = NiceGraphParameters(
   [-$bound,$bound],
   [-$bound,$bound],centerOrigin=>1);

@xticks = @$xticks_ref;
@yticks = @$yticks_ref;

@gr=();
@ALTtags = ();

for my $i (0..5) {
  $gr[$i] = init_graph($min[0],$min[1],$max[0],$max[1],
   axes=>[0,0],
   grid=>[$ticknum[0],$ticknum[1]],
   size=>[xPixels(),yPixels()]
  );
  $gr[$i]->lb('reset');
  for my $j (@xticks) {
    if (abs($j)<10**(-10)) {next;}
    $gr[$i]->lb( new Label($j, -$marksep[1]/8, Real($j),'black','center','top'));
  }

  for my $j (@yticks) {
    if (abs($j)<10**(-10)) {next;}
    $gr[$i]->lb( new Label($marksep[0]/8, $j, Real($j),'black','left','middle'));
  }

  $gr[$i]->lb( new Label($min[0]+$marksep[0]/8, $max[1]-$marksep[1]/8, $ALPHABET[$inverse{$i}], 'black', 'left', 'top'));
  $ALTtags[$i] = "Graph $ALPHABET[$inverse{$i}]: ";
};



add_functions($gr[0], "$f0 for x in <$min[0],$max[0]> using color:blue and weight:1");

@x = (-1,0,1);
@y = ();
for my $i (@x) {
   push (@y, $f0->eval(x=>$i));
}
$ALTtags[0] .= "a ray starting at ($x[1],$y[1]) and passing ($x[0],$y[0]), connected with another ray starting at ($x[1],$y[1]) and passing ($x[2],$y[2])";

add_functions($gr[1], "$f1 for x in <$min[0],$max[0]] using color:blue and weight:1");
@x = (-0.5,-sqrt(1/6),0,sqrt(1/6),0.5);
@y = ();
for (my $i=0; $i<=$#x; $i++) {
   push (@y, $f1->eval(x=>$x[$i]));
   $x[$i] = Round($x[$i],2);
   $y[$i] = Round($y[$i],2);
}
if ($b>0) {
   $ALTtags[1] .= "a concave-up graph that begins on the left from positive infinity coming down to ($x[0],$y[0]), curves up to pass ($x[1],$y[1]), became concave down and passes (0,0) and ($x[3],$y[3]), became concave up again and passes ($x[4],$y[4]), and then continue to positive infinity";
} else {
   $ALTtags[1] .= "a concave-down graph that begins on the left from negative infinity coming up to ($x[0],$y[0]), curves down to pass ($x[1],$y[1]), became concave up and passes (0,0) and ($x[3],$y[3]), became concave down again and passes ($x[4],$y[4]), and then continue to negative infinity";
}

add_functions($gr[2], "$f2 for x in <$min[0],$max[0]> using color:blue and weight:1");
@x = (-Real(pi),0,Real(pi));
@y = ();
for my $i (@x) {
   push (@y, $f2->eval(x=>$i));
}
if ($c>0) {
   $ALTtags[2] .= "a wave that moves up and down as we read the graph from left to right, with (-pi,$y[0]) at the bottom, crossing (0,$y[1]) at the top, and crossing (pi,$y[2]) at the bottom, ...";
} else {
   $ALTtags[2] .= "a wave that moves up and down as we read the graph from left to right, with (-pi,$y[0]) at the top, crossing (0,$y[1]) at the bottom, and crossing (pi,$y[2]) at the top, ...";
}

add_functions($gr[3], "$f3 for x in <$min[0],$max[0]> using color:blue and weight:1");
@x = (-1,0,1);
@y = ();
for my $i (@x) {
   push (@y, $f3->eval(x=>$i));
}
$ALTtags[3] .= "a graph connecting the following points in order with straight lines: ($x[0],$y[0]), ($x[1],$y[1]), ($x[2],$y[2])";

add_functions($gr[4], "$f4 for x in <$min[0],$max[0]> using color:blue and weight:1");
@x = (-1,0,1);
@y = ();
for my $i (@x) {
   push (@y, $f4->eval(x=>$i));
}
$ALTtags[4] .= "a graph connecting the following points in order with straight lines: ($x[0],$y[0]), ($x[1],$y[1]), ($x[2],$y[2])";

add_functions($gr[5], "$f5 for x in <$min[0],$max[0]> using color:blue and weight:1");
@x = (-Real(pi)/2,0,Real(pi)/2);
@y = ();
for my $i (@x) {
   push (@y, $f5->eval(x=>$i));
}
if ($c>0) {
   $ALTtags[5] .= "a wave that moves up and down as we read the graph from left to right, with (-pi/2,$y[0]) at the bottom, crossing (0,0), and (pi/2,$y[2]) at the top, ...";
} else {
   $ALTtags[5] .= "a wave that moves up and down as we read the graph from left to right, with (-pi/2,$y[0]) at the top, crossing (0,0), and (pi/2,$y[2]) at the bottom, ...";
}

$mc = new_checkbox_multiple_choice();
$mc -> qa (
"Select the letters of graphs of even functions", 
  "$ALPHABET[$inverse{0}]",
  "$ALPHABET[$inverse{1}]",                
  "$ALPHABET[$inverse{2}]",
);
$mc -> extra(
  "$ALPHABET[$inverse{3}]",
  "$ALPHABET[$inverse{4}]",
  "$ALPHABET[$inverse{5}]",
);
$mc -> makeLast("A","B","C","D","E","F","None of the above");


##############################################

BEGIN_PGML

[@EnlargeImageStatementPGML()@]**

END_PGML

Context()->texStrings;

BEGIN_TEXT
$BCENTER
\{ 

LayoutTable([
[image( insertGraph($gr[$scramble{0}]), width=>xScreen(), height=>yScreen(), tex_size=>TeXscalar(), extra_html_tags=>'alt = "$ALTtags[$scramble{0}]" title = "$ALTtags[$scramble{0}]"'  ),
image( insertGraph($gr[$scramble{1}]), width=>xScreen(), height=>yScreen(), tex_size=>TeXscalar(), extra_html_tags=>'alt = "$ALTtags[$scramble{1}]" title = "$ALTtags[$scramble{1}]"'  ),],
[image( insertGraph($gr[$scramble{2}]), width=>xScreen(), height=>yScreen(), tex_size=>TeXscalar(), extra_html_tags=>'alt = "$ALTtags[$scramble{2}]" title = "$ALTtags[$scramble{2}]"'  ),
image( insertGraph($gr[$scramble{3}]), width=>xScreen(), height=>yScreen(), tex_size=>TeXscalar(), extra_html_tags=>'alt = "$ALTtags[$scramble{3}]" title = "$ALTtags[$scramble{3}]"'  )],
[image( insertGraph($gr[$scramble{4}]), width=>xScreen(), height=>yScreen(), tex_size=>TeXscalar(), extra_html_tags=>'alt = "$ALTtags[$scramble{4}]" title = "$ALTtags[$scramble{4}]"'  ),
image( insertGraph($gr[$scramble{5}]), width=>xScreen(), height=>yScreen(), tex_size=>TeXscalar(), extra_html_tags=>'alt = "$ALTtags[$scramble{5}]" title = "$ALTtags[$scramble{5}]"'  )],
], allcellcss => "padding:20pt;")
\}
$ECENTER
$PAR

END_TEXT

Context()->normalStrings;

BEGIN_PGML

[@$mc -> print_q() @]**  
    [@$mc -> print_a() @]*

END_PGML

##############################################

$showPartialCorrectAnswers = 0;

ANS( checkbox_cmp( $mc->correct_ans() ) );



#######################################################

Context()->texStrings;

BEGIN_SOLUTION

Even functions are symmetric by the \(y\)-axis. Graphs \{$mc->correct_ans()\} are even functions.

END_SOLUTION



ENDDOCUMENT();
