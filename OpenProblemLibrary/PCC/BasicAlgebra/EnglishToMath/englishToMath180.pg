# WeBWorK problem written by Alex Jordan
# Portland Community College
#
# Rewrite an English phrase as a mathematical expression 
#
# Last edited: Jordan 8/23/13
#
# ENDDESCRIPTION

## DBCCSS('6.EE.2.a')
## DBsubject(Algebra)
## DBchapter(Algebra of real numbers and simplifying expressions)
## DBsection(Algebraic expressions)
## Institution(PCC)
## Author(Alex Jordan, Carl Yao, Chris Hughes)
## MLT(English_to_expression)
## Level(2)
## MO(1)
## KEYWORDS('expression','english-to-math')



##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PCCmacros.pl",
  "parserImplicitPlane.pl",
  "contextTypeset.pl",
  "PGcourse.pl",
);

##############################################

Context("Numeric");
Context()->flags->set(reduceConstants=>0);


do {
$a = random(1,3,1);
do {$b = $a+random(1,8,1);} until (gcd($a,$b) == 1);

$c = random(1,3,1);
do {$d = $c+random(1,8,1);} until (gcd($c,$d) == 1);

} until ($a*$d != $c*$b);

$e = random(1,9,1);

$index = random(0,1);
@opWords = ("more than", "less than");
$opPhrase = $opWords[$index];

@toMaths = ('+','-');
$toMath = @toMaths[$index];

$eqWord = list_random('is', 'gives', 'yields');

Context("ImplicitPlane");
Context()->flags->set(showExtraParens=>0);
Context()->flags->set(reduceConstants=>0);
$ans = Compute("$a/$b x $toMath $e = $c/$d x");


##############################################

TEXT(beginproblem());

BEGIN_PGML

Translate the following phrase into a math expression or equation (whichever is appropriate). Use [`x`] to represent the unknown number.

    [@numberWord($e,capital=>1)@] [$opPhrase] the product of [@numberWord($a/$b,denominator=>$b)@] and a number [$eqWord] [@numberWord($c/$d,denominator=>$d)@] of that number.

    [______________]

END_PGML

##############################################

ANS($ans->cmp(
  cmp_class => "a linear equation",
  correct_ans=>Parser::Formula(Context("Typeset") , $ans->{correct_ans})->string,
  correct_ans_latex_string=>Parser::Formula(Context("Typeset") , $ans->{correct_ans})->TeX, 
  checker => sub {
  my ($correct,$student,$ansHash) = @_;
  $result = ($correct == $student);
  my $context = Context();
  Context("Typeset");
  $student = Parser::Formula(Context("Typeset"), $ansHash->{original_student_ans});
  $ansHash->{preview_text_string} = $student->string;
  $ansHash->{preview_latex_string} = $student->TeX;
  $ansHash->{student_ans} = $student->string;  
  Context($context);
  return $result
}));


BEGIN_PGML_SOLUTION

The word '[$eqWord]' implies equality, so we have

    [@numberWord($e,capital=>1)@] [$opPhrase] the product of [@numberWord($a/$b,denominator=>$b)@] and a number [`=`] [@numberWord($c/$d,denominator=>$d)@] of that number.

When a fraction precedes the word 'of', it implies that the fraction should be multiplied by what follows. So we have:

    [@numberWord($e,capital=>1)@] [$opPhrase] the product of [@numberWord($a/$b,denominator=>$b)@] and a number [`=\frac{[$c]}{[$d]} x`] 

Also the phrase 'product of' implies that we should use multiplication. So we have:

    [`[$e]`] [$opPhrase] [`\frac{[$a]}{[$b]}x=\frac{[$c]}{[$d]} x`] 

And the phrase '[$opPhrase]' indicates that we should use the [`[$toMath]`] symbol, but the order of the numbers needs to be reversed. So the answer is 

    [`[@Parser::Formula(Context("Typeset") , $ans->{correct_ans})->TeX@]`]

END_PGML_SOLUTION

ENDDOCUMENT();


