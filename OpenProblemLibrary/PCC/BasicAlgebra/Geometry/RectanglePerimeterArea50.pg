# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Find the perimeter and area of a rectangle with a rectangular missing piece.
#
# Last edited by Yao 4/3/2017
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Problem Solving with Equations')
## KEYWORDS('area','perimeter','triangle')
## DBCCSS('6.G.1')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "parserNumberWithUnits.pl",
  "PCCmacros.pl",
  "PGcourse.pl",
);

##############################################

Context("Numeric");

$unit = "m";

$base = random(10,16,1);
$height = random(7,$base-1,1);
$heightCut = random(2,$height-2,1);
$baseCut = random(2,$base-5,1);
$baseLeft = ($base-$baseCut)/2;

$xmin = 0;         #The viewing window
$xmax = $base*240/210;
$ymin = 0;
$ymax = (210*$height/$base+30)*$height/(210*$height/$base);

$labelShift = $xmax/40;
$cornersize = $xmax*10/240;

$perimeter = 2*($base + $height+$heightCut);
$area = $base*$height-$baseCut*$heightCut;

$baseU = NumberWithUnits("$base $unit");
$heightU = NumberWithUnits("$height $unit");
$baseCutU = NumberWithUnits("$baseCut $unit");
$heightCutU = NumberWithUnits("$heightCut $unit");
$baseLeftU = NumberWithUnits("$baseLeft $unit");
$perimeterU = NumberWithUnits("$perimeter $unit");
$areaU = NumberWithUnits("$area $unit^2");

@x = (
   ($xmax-$base)/2,
   ($xmax-$base)/2+$baseLeft,
   ($xmax+$base)/2-$baseLeft,
   ($xmax+$base)/2
);
@y = (
   ($ymax-$height)/2,
   ($ymax+$height)/2-$heightCut,
   ($ymax+$height)/2
);

for my $i (0..2) {
   $picture[$i] = init_graph($xmin,$ymin,$xmax,$ymax,
      pixels=>[240,240*$ymax/$xmax]);

   $picture[$i]->lb( new Label(($x[1]+$x[2])/2, $y[0],"$baseU",'black','center','top','large'));
   $picture[$i]->lb( new Label($x[3],($y[0]+$y[2])/2,"$heightU",'black','center','bottom','large','vertical'));
   $picture[$i]->lb( new Label(($x[0]+$x[1])/2,$y[2],"$baseLeftU",'black','center','bottom','large'));
   $picture[$i]->lb( new Label(($x[2]+$x[3])/2,$y[2],"$baseLeftU",'black','center','bottom','large'));
   $picture[$i]->lb( new Label($x[1],($y[1]+$y[2])/2,"$heightCutU",'black','center','bottom','large','vertical'));

   $picture[$i]->new_color("darkblue",  100,100,255); 

   $picture[$i]->moveTo($x[0],$y[0]);
   $picture[$i]->lineTo($x[0],$y[2], darkblue,3);
   $picture[$i]->lineTo($x[1],$y[2], darkblue,3); 
   $picture[$i]->lineTo($x[1],$y[1], darkblue,3);
   $picture[$i]->lineTo($x[2],$y[1], darkblue,3);
   $picture[$i]->lineTo($x[2],$y[2], darkblue,3);
   $picture[$i]->lineTo($x[3],$y[2], darkblue,3);
   $picture[$i]->lineTo($x[3],$y[0], darkblue,3);
   $picture[$i]->lineTo($x[0],$y[0], darkblue,3);

   $picture[$i]->moveTo($x[0],$y[0]+$cornersize);
   $picture[$i]->lineTo($x[0]+$cornersize,$y[0]+$cornersize, darkblue,1);
   $picture[$i]->lineTo($x[0]+$cornersize,$y[0], darkblue,1);

   $picture[$i]->moveTo($x[0],$y[2]-$cornersize);
   $picture[$i]->lineTo($x[0]+$cornersize,$y[2]-$cornersize, darkblue,1);
   $picture[$i]->lineTo($x[0]+$cornersize,$y[2], darkblue,1);

   $picture[$i]->moveTo($x[3],$y[2]-$cornersize);
   $picture[$i]->lineTo($x[3]-$cornersize,$y[2]-$cornersize, darkblue,1);
   $picture[$i]->lineTo($x[3]-$cornersize,$y[2], darkblue,1);

   $picture[$i]->moveTo($x[3],$y[0]+$cornersize);
   $picture[$i]->lineTo($x[3]-$cornersize,$y[0]+$cornersize, darkblue,1);
   $picture[$i]->lineTo($x[3]-$cornersize,$y[0], darkblue,1);

   #$picture[$i]->moveTo($x[1]-$cornersize,$y[2]);
   #$picture[$i]->lineTo($x[1]-$cornersize,$y[2]-$cornersize, darkblue,1);
   #$picture[$i]->lineTo($x[1],$y[2]-$cornersize, darkblue,1);

   $picture[$i]->moveTo($x[2]+$cornersize,$y[2]);
   $picture[$i]->lineTo($x[2]+$cornersize,$y[2]-$cornersize, darkblue,1);
   $picture[$i]->lineTo($x[2],$y[2]-$cornersize, darkblue,1);

   $picture[$i]->moveTo($x[1]+$cornersize,$y[1]);
   $picture[$i]->lineTo($x[1]+$cornersize,$y[1]+$cornersize, darkblue,1);
   $picture[$i]->lineTo($x[1],$y[1]+$cornersize, darkblue,1);

   $picture[$i]->moveTo($x[2]-$cornersize,$y[1]);
   $picture[$i]->lineTo($x[2]-$cornersize,$y[1]+$cornersize, darkblue,1);
   $picture[$i]->lineTo($x[2],$y[1]+$cornersize, darkblue,1);
}

$picture[1]->lb( new Label(($x[1]+$x[2])/2,$y[1]-$labelShift,"$base-2*$baseLeft=$baseCutU",'red','center','middle','large'));
$picture[1]->lb( new Label($x[0]-2.5*$labelShift,($y[0]+$y[2])/2,"$heightU",'red','left','middle','large'));
$picture[1]->lb( new Label($x[2],($y[1]+$y[2])/2,"$heightCutU",'red','center','middle','large'));

$picture[2]->lb( new Label(($x[1]+$x[2])/2,$y[1]-$labelShift,"$base-2*$baseLeft=$baseCutU",'red','center','middle','large'));
$picture[2]->moveTo($x[1],$y[2]);
$picture[2]->lineTo($x[2],$y[2], red,1,"dashed");

@alt= ();
$alt[0] = "The graph shows a rectangle with one rectangular piece missing. Starting at the bottom left corner, a vertical segment travels up for a distance, turns right and travels for $baseLeftU, goes down for $heightCutU, turns right for a distance, goes up for a distance, turns right and travels for $baseLeftU, goes down for $heightU, and finally turns left for $baseU.";

$alt[1] = "The graph shows a rectangle with one rectangular piece missing. Starting at the bottom left corner, a vertical segment travels up for $heightU, turns right and travels for $baseLeftU, goes down for $heightCutU, turns right for a distance marked as $base-2*$baseLeft=$baseCutU, goes up for $heightCutU, turns right and travels for $baseLeftU, goes down for $heightU, and finally turns left for $baseU.";

$alt[2] = "The graph shows a rectangle with one rectangular piece missing. Starting at the bottom left corner, a vertical segment travels up for a distance, turns right and travels for $baseLeftU, goes down for $heightCutU, turns right for a distance marked as $base-2*$baseLeft=$baseCutU, goes up for a distance, turns right and travels for $baseLeftU, goes down for $heightU, and finally turns left for $baseU. A dashed line connects the top of the missing rectangle, making it clear this polygon is a bigger rectangle with a smaller rectangle taken out.";

##############################################

TEXT(beginproblem());

BEGIN_PGML

Find the perimeter and area of this polygon.

>>[@ image(insertGraph( $picture[0]  ), width=>240, extra_html_tags => "alt = '$alt[0]' title = '$alt[0]' ") @]*<<

    Its perimeter is [_]{$perimeterU}{5} and its area is [_]{$areaU}{5}. 

[@KeyboardInstructions(q!(Use [|m|]* for meters and [|m^2|]* for square meters.)!)@]**

END_PGML

##############################################

BEGIN_PGML_SOLUTION

>>[@ image(insertGraph( $picture[1]  ),  width=>240, extra_html_tags => "alt = '$alt[1]' title = '$alt[1]' ") @]*<<

To find the perimeter of this shape, we mark all missing lengths. Next, we start from the bottom left corner of the rectangle, travel up and around the whole shape, and add up the length of all sides:

[``\begin{aligned}[t]
      \text{perimeter} &= [$height] + [$baseLeft] + [$heightCut] + [$baseCut] + [$heightCut] + [$baseLeft] + [$height] + [$base] \\
       & =[$perimeter]
     \end{aligned}``]

The polygon's perimeter is [`[$perimeterU]`]. 

----

>>[@ image(insertGraph( $picture[2]  ),  width=>240, extra_html_tags => "alt = '$alt[2]' title = '$alt[2]' ") @]*<<

To find the polygon's area, we will find the big rectangle's area, and then subtract the missing piece:

    [``
\begin{aligned}
   \text{area} &= \text{big rectangle's area} - \text{small rectangle's area} \\
   &= [$base]\cdot[$height] - [$baseCut]\cdot[$heightCut] \\
   &= [$base*$height] - [$baseCut*$heightCut] \\
   &= [$area]
\end{aligned}
    ``]

The polygon's area is [`[$areaU]`]. 

END_PGML_SOLUTION

ENDDOCUMENT();
