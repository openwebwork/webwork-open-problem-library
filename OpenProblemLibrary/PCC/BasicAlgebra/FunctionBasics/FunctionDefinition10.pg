# WeBWorK problem written by Carl Yao, 2013
# Portland Community College
#
# Tell whether a set of ordered pairs qualify as a function.
#
# Last updated: Jordan 8/3/13; Yao, 6/26/13
# ENDDESCRIPTION
 
## DBsubject('Algebra')
## DBchapter('Function')
## DBsection('Domain and Range')
## KEYWORDS('function','definition','domain','range')
## DBCCSS('F-IF1.1')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')
 
##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "parserPopUp.pl",
  "PGML.pl",
  "PCCmacros.pl",
  "PGcourse.pl",
);



##############################################


Context("Interval");


$yes = "describes";
$no = "does not describe";

$n = 'no';

do 
{
   for my $i (0..3)
   {
       $points[$i] = '';
       my %f = '';
       my %finv = '';
       $function[$i] = $yes;
       $oneToOne[$i] = 'yes';
       for my $j (0..$i+1) 
       {
          $dom[$i][$j] = random(-10,10,1);
          $ran[$i][$j] = random(0,10,1);
          if (defined $f{$dom[$i][$j]} and $f{$dom[$i][$j]} != $ran[$i][$j])
             {$function[$i] = $no;
              $badinput[$i] = $dom[$i][$j];
              $badoutput1[$i] = $f{$dom[$i][$j]};
              $badoutput2[$i] = $ran[$i][$j];
             };
          if (defined $finv{$ran[$i][$j]} and $finv{$ran[$i][$j]} != $dom[$i][$j]) 
             {$oneToOne[$i] = 'no';
              $twoinputs1[$i] = $finv{$ran[$i][$j]};
              $twoinputs2[$i] = $dom[$i][$j];
              $oneoutput[$i] = $ran[$i][$j];
             };
          $f{$dom[$i][$j]} = $ran[$i][$j];
          $finv{$ran[$i][$j]} = $dom[$i][$j];
          if ($j == 0) 
          {
             $domain[$i] = Set("{$dom[$i][$j]}")
          } else 
          {  
             $domain[$i] = $domain[$i]+Set("{$dom[$i][$j]}")
          };
          if ($j == 0) 
          {
             $range[$i] = Set("{$ran[$i][$j]}")
          } else 
          { 
             $range[$i] = $range[$i] + Set("{$ran[$i][$j]}");
          };
          $points[$i] = $points[$i]."($dom[$i][$j],$ran[$i][$j])";
          $points[$i] = $points[$i].',' if ($j < $i+1);
       };
#       $oneToOne[$i] = 'yes' if ($function[$i] eq $yes);
   };
} 
until ( grep( /^$yes$/, @function ) and grep( /^$no$/, @function ) and grep( /^$n$/, @oneToOne ) );#make sure each happens at least once


$points0 = $points[0];
$points1 = $points[1];
$points2 = $points[2];
$points3 = $points[3];



$popup0 = PopUp(
  ['?',$yes,$no],
  $function[0], # correct answer
);

$popup1 = PopUp(
  ['?',$yes,$no],
  $function[1], # correct answer
);

$popup2 = PopUp(
  ['?',$yes,$no],
  $function[2], # correct answer
);

$popup3 = PopUp(
  ['?',$yes,$no],
  $function[3], # correct answer
);








##############################################

TEXT(beginproblem());

BEGIN_PGML

Do these sets of ordered pairs make functions of [`x`]? What are their domains and ranges? [@KeyboardInstructions('Since domains and ranges are _sets_ of numbers, you should be using [`\{`] and [`\}`] in your answers.')@]**

a.  [`\Big\{[$points0]\Big\}`]  

    This set of ordered pairs [_____]{$popup0} a function of [`x`]. This set of ordered pairs has domain [______________]{Set($domain[0]->value)} and range [______________]{Set($range[0]->value)}.

b.  [`\Big\{[$points1]\Big\}`]  

    This set of ordered pairs [_____]{$popup1} a function of [`x`]. This set of ordered pairs has domain [______________]{Set($domain[1]->value)} and range [______________]{Set($range[1]->value)}.

c.  [`\Big\{[$points2]\Big\}`]  

    This set of ordered pairs [_____]{$popup2} a function of [`x`]. This set of ordered pairs has domain [______________]{Set($domain[2]->value)} and range [______________]{Set($range[2]->value)}.

d.  [`\Big\{[$points3]\Big\}`]  

    This set of ordered pairs [_____]{$popup3} a function of [`x`]. This set of ordered pairs has domain [______________]{Set($domain[3]->value)} and range [______________]{Set($range[3]->value)}.


END_PGML


##############################################



for my $i (0..3) {
  if ($function[$i] eq $yes) {
  $solnString[$i] = "Since there are no instances of a value appearing for an input [`x`] more than once alongside _different_ outputs [`y`], this set of ordered pairs is a function of [`x`].";
  if ($oneToOne[$i] eq 'no') {$solnString[$i] = $solnString[$i]." Note that it is fine for a function to have more than one input (like [`$twoinputs1[$i]`] and [`$twoinputs2[$i]`]) lead to the same output, in this case [`$oneoutput[$i]`]."};
}
  else {
  $solnString[$i] = "Since the input [`$badinput[$i]`] corresponds to more than one output ([`$badoutput1[$i]`] and [`$badoutput2[$i]`]), this set of ordered pairs is not a function of [`x`].";
}

}


($solnString0, $solnString1, $solnString2, $solnString3) = @solnString;

($domain0, $domain1, $domain2, $domain3) = @domain;

($range0, $range1, $range2, $range3) = @range;





BEGIN_PGML_SOLUTION

a. [`\Big\{[$points0]\Big\}`]  

    [$solnString0]**

    The domain is the set of [`x`]-values: [`[$domain0]`]  

    The range is the set of [`y`]-values: [`[$range0]`]  
    ----

b. [`\Big\{[$points1]\Big\}`]  

    [$solnString1]**

    The domain is the set of [`x`]-values: [`[$domain1]`]  

    The range is the set of [`y`]-values: [`[$range1]`]  
    ----

c. [`\Big\{[$points2]\Big\}`]  

    [$solnString2]**

    The domain is the set of [`x`]-values: [`[$domain2]`]  

    The range is the set of [`y`]-values: [`[$range2]`]  
    ----

d. [`\Big\{[$points3]\Big\}`]  

    [$solnString3]**

    The domain is the set of [`x`]-values: [`[$domain3]`]  

    The range is the set of [`y`]-values: [`[$range3]`]  
    

END_PGML_SOLUTION

ENDDOCUMENT();
