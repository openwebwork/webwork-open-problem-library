# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Give a function's graph, find values of f(a); find f(   )=b. Graph is a parabola.
#
# Last update: Carl Yao 04/14/2014
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Function')
## DBsection()
## KEYWORDS('function','graph')
## DBCCSS('8.F','F-IF')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PCCgraphMacros.pl",
  "parserAssignment.pl",
  "answerHints.pl",
  "PCCmacros.pl",
  "PGtikz.pl",
  "ORCCA.pl",
  "contextFiniteSolutionSets.pl",
  "PGcourse.pl",
);


##############################################
TEXT(beginproblem());

Context("Numeric");
$var = "x";


Context()->flags->set(reduceConstants=>0, reduceConstantFunctions=>0, formatStudentAnswer=>parsed);

parser::Assignment->Allow;

Context()->operators->redefine(',',using=>',',from=>'Numeric');
    Context()->operators->redefine('or',using=>',',from=>'Numeric');
    Context()->operators->set(
      ','=>{string=>' or ',TeX=>'\hbox{ or }'},
      'or'=>{string=>' or ',TeX=>'\hbox{ or }'}
    );
    Context()->lists->set(List => {separator => " or "});

# add solution strings to context- this means that if
# students enter these (and they are not correct), then 
# WW will not give a Context warning
Context()->strings->add("no real solutions"=>{},
  "no real solution"=>{alias=>'no real solutions'}, 
  "none"=>{alias=>'no real solutions'}, 
  );

Context()->noreduce('(-x)-y','(-x)+y');


$xMin = -4;
$xMax = -$xMin;
$yMin = -4;
$yMax = -$yMin;

$a = random(-1,1,2);
$c = $a>0 ? $yMin+1 : $yMax-1;
$b = random(-2,2,1);

$func = Compute("$a*(x-$b)**2+$c")->reduce;

#($p0x,$p0y) will be used in f($p0x)=?
#($p1x,$p1y) and ($p2x,$p2y) will be used in f(?)=$p2y
$p0x = $b+random(-1,1,2)*random(1,2,1);
$p1x = abs($p0x-$b)==1 ? $b+random(-1,1,2)*2 : $b+random(-1,1,2)*1;
$p2x = ($p1x-$b)>0 ? $b-($p1x-$b) : $b+($b-$p1x);

$p0y = $a*($p0x-$b)**2+$c;
$p1y = $a*($p1x-$b)**2+$c;
$p2y = $p1y;

$ansList = List($p1x,$p2x);

($min[0], $max[0], $min[1], $max[1], $ticknum[0], $ticknum[1], $xticks_ref, $yticks_ref, $marksep[0], $marksep[1]) = NiceGraphParameters([$xMin,$xMax],[$yMin,$yMax],centerOrigin=>1);

@xticks = @$xticks_ref;
@yticks = @$yticks_ref;

if ($a > 0)
   {@xvalues = num_sort($min[0], $max[0], sqrt(($max[0]-$c)/$a)+$b, -sqrt(($max[0]-$c)/$a)+$b)}
else
   {@xvalues = num_sort($min[0], $max[0], sqrt(($min[0]-$c)/$a)+$b, -sqrt(($min[0]-$c)/$a)+$b)}


$gr[0] = createTikZImage();
$gr[0]->addToPreamble(latexImagePreamble());
$gr[0]->BEGIN_TIKZ
\begin{axis}[
    xmin = $min[0],
    xmax = $max[0],
    ymin = $min[1],
    ymax = $max[1],
    xtick =,
    ytick =,
    minor xtick = {$min[0],...,$max[0]},
    minor ytick = {$min[1],...,$max[1]},
  ]
  \addplot+[domain=$xvalues[1]:$xvalues[2]] {$func};
  \legend{\(y=f(x)\)};
\end{axis}
END_TIKZ


$gr[1] = createTikZImage();
$gr[1]->addToPreamble(latexImagePreamble());
$gr[1]->BEGIN_TIKZ
\begin{axis}[
    xmin = $min[0],
    xmax = $max[0],
    ymin = $min[1],
    ymax = $max[1],
    xtick =,
    ytick =,
    minor xtick = {$min[0],...,$max[0]},
    minor ytick = {$min[1],...,$max[1]},
  ]
  \addplot+[domain=$xvalues[1]:$xvalues[2]] {$func};
  \legend{\(y=f(x)\)};
  \addplot[soliddot] coordinates {($p0x,$p0y)} node[right] {\(($p0x,$p0y)\)};
  \addplot[asymptote] coordinates {($p0x,$min[1]) ($p0x,$max[1])};
\end{axis}
END_TIKZ


$gr[2] = createTikZImage();
$gr[2]->addToPreamble(latexImagePreamble());
$gr[2]->BEGIN_TIKZ
\begin{axis}[
    xmin = $min[0],
    xmax = $max[0],
    ymin = $min[1],
    ymax = $max[1],
    xtick =,
    ytick =,
    minor xtick = {$min[0],...,$max[0]},
    minor ytick = {$min[1],...,$max[1]},
  ]
  \addplot+[domain=$xvalues[1]:$xvalues[2]] {$func};
  \legend{\(y=f(x)\)};
  \addplot[soliddot] coordinates {($p1x,$p1y)} node[below] {\(($p1x,$p1y)\)};
  \addplot[soliddot] coordinates {($p2x,$p2y)} node[below] {\(($p2x,$p2y)\)};
  \addplot[asymptote] coordinates {($min[0],$p1y) ($max[0],$p1y)};
\end{axis}
END_TIKZ


$ALT0 = "graph of a parabola passing through the points ($p0x,$p0y), ($p1x,$p1y) and ($p2x,$p2y)";
$ALT1 = "This is the graph of aparabola passing through the points ($p0x,$p0y), ($p1x,$p1y) and ($p2x,$p2y). A dashed vertical line x=$p0x intersects the parabola at ($p0x,$p0y).";
$ALT2 = "This is the graph of a parabola passing through the points ($p0x,$p0y), ($p1x,$p1y) and ($p2x,$p2y). A dashed horizontal line y=$p1y intersects the parabola at ($p1x,$p1y) and ($p2x,$p2y).";


Context("Numeric");
Context()->flags->set(showMixedNumbers=>0);

parser::Assignment->Allow;
Context()->operators->redefine('or',using=>',',from=>'Numeric');
Context()->operators->set(","=>{string=>"or",TeX=>"or ",perl=>","});

$xeqansList = List(Formula("x=$p1x"),Formula("x=$p2x"));


Context("FiniteSolutionSets");
$solset = Formula("{$p1x,$p2x}");

##############################################
Context("LimitedNumeric");
BEGIN_PGML

Function [`f`] is graphed.

[@EnlargeImageStatementPGML()@]**


>>[@image($gr[0], width=>300, tex_size=>TeXscalar(), extra_html_tags=>"alt = '$ALT0' title = '$ALT0'") @]*<<


a. Find [``f([$p0x])``].  
   [_]{Compute($p0y)}{10}

a. Solve [``f(x)=[$p1y]``].  
   [_]{$solset}{20}

END_PGML


##############################################

BEGIN_PGML_SOLUTION

To evaluate [`f([$p0x])`], we understand that we have been given an [`x`]-value of [`[$p0x]`]. On the graph, we draw a dotted vertical line at [`x=[$p0x]`], and it intersects the function's graph at [`([$p0x],[$p0y])`]. This implies [`f([$p0x])=[$p0y]`]. See the graph below.

>>[@image($gr[1], width=>300, tex_size=>TeXscalar(), extra_html_tags=>"alt = '$ALT1' title = '$ALT1'") @]*<<

To solve [`f(x)=[$p1y]`], we understand that we have been given a [`y`]-value of [`[$p1y]`]. On the graph, we draw a dotted horizontal line at [`y=[$p1y]`], and it intersects the function's graph at [`([$p1x],[$p1y])`] and [`([$p2x],[$p2y])`]. This implies [`f([$p1x])=[$p1y]`] and [`f([$p2x])=[$p2y]`]. See the graph below.

>>[@image($gr[2], width=>300, tex_size=>TeXscalar(), extra_html_tags=>"alt = '$ALT2' title = '$ALT2'") @]*<<

END_PGML_SOLUTION


ENDDOCUMENT();
