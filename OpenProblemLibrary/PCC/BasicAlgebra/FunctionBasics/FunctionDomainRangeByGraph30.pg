# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Give a function's graph, find its domain and range. 
# Function is a piece of horizontal line.
#
# Last update: Jordan 9/15/13; Carl Yao 09/13/13
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Function')
## DBsection('Domain and Range')
## KEYWORDS('function','domain','range','graph')
## DBCCSS('8.F','F-IF')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PCCgraphMacros.pl",
  "PGtikz.pl",
  "ORCCA.pl",
  "PCCmacros.pl",
  "PGcourse.pl",
);

##############################################
TEXT(beginproblem());

Context("Numeric");
Context()->noreduce('(-x)-y','(-x)+y');


$m = 0;
$b = non_zero_random(-4,4,1);
$func = Compute("$m*x+$b")->reduce;

$domainLowX = random(-4,-1,1);
$domainLowY = $func->eval(x=>$domainLowX);

$domainHighX = random($domainLowX+3,4,1);
$domainHighY = $func->eval(x=>$domainHighX);

$leftOpen = random(0,1,1);
$rightOpen = random(0,1,1);
if ($leftOpen) {
   $leftOpenClose = "open";
   $leftInclusive = "not included";
} else {
   $leftOpenClose = "closed";
   $leftInclusive = "included";
}
if ($rightOpen) {
   $rightOpenClose = "open";
   $rightInclusive = "not included";
} else {
   $rightOpenClose = "closed";
   $rightInclusive = "included";
}


   $rangeLowX = $domainLowX;
   $rangeLowY = $domainLowY;
   $rangeHighX = $domainHighX;
   $rangeHighY = $domainHighY;
   $bottomOpenClose = $leftOpenClose;
   $bottomInclusive = $leftInclusive;
   $topOpenClose = $rightOpenClose;
   $topInclusive = $rightInclusive;


($min[0], $max[0], $min[1], $max[1], $ticknum[0], $ticknum[1], $xticks_ref, $yticks_ref, $marksep[0], $marksep[1]) = NiceGraphParameters([0,$domainLowX,$domainHighX],[0,$rangeLowY,$rangeHighY],centerYaxis=>1);

@xticks = @$xticks_ref;
@yticks = @$yticks_ref;

$left = ($leftOpen==1) ? 'hollowdot' : 'soliddot';
$right = ($rightOpen==1) ? 'hollowdot' : 'soliddot';


$gr = createTikZImage();
$gr->addToPreamble(latexImagePreamble());
$gr->BEGIN_TIKZ
\begin{axis}[
    xmin = $min[0],
    xmax = $max[0],
    ymin = $min[1],
    ymax = $max[1],
    xtick =,
    ytick =,
    minor xtick =,
    minor ytick =,
  ]
  \addplot+[-] coordinates {($domainLowX,$domainLowY) ($domainHighX,$domainHighY)};
  \addplot[$left] coordinates {($domainLowX,$domainLowY)} node[below left] {\(($domainLowX,$domainLowY)\)};
  \addplot[$right] coordinates {($domainHighX,$domainHighY)} node[below right] {\(($domainHighX,$domainHighY)\)};
\end{axis}
END_TIKZ



$ALT = "graph of a linear segment from ($domainLowX,$domainLowY) to ($domainHighX,$domainHighY), with the point ($domainLowX,$domainLowY) $leftOpenClose and the point ($domainHighX,$domainHighY) $rightOpenClose";


Context("Interval");
$intRange = Set($domainLowY);

if (($leftOpen==1) && ($rightOpen==1)) {
   $intDomain = Compute("($domainLowX,$domainHighX)");
} elsif (($leftOpen==0) && ($rightOpen==1)) {
   $intDomain = Compute("[$domainLowX,$domainHighX)");
} elsif (($leftOpen==1) && ($rightOpen==0)) {
   $intDomain = Compute("($domainLowX,$domainHighX]");
} else {
   $intDomain = Compute("[$domainLowX,$domainHighX]");
}


##############################################
Context("LimitedNumeric");
BEGIN_PGML

A function is graphed.

[@EnlargeImageStatementPGML()@]**

>>[@image($gr, width=>300, tex_size=>TeXscalar(), extra_html_tags=>"alt = '$ALT' title = '$ALT'") @]*<<

[@KeyboardInstructions('Use interval notation or set notation.')@]**

    This function has domain [______________]{$intDomain} and range [______________]{$intRange}.


END_PGML
##############################################

BEGIN_PGML_SOLUTION

First, let's find the domain of this function. A function's domain is the collection of all its valid inputs. These are the [`x`] values for which we could use the graph to find an output. The end-point on the left side is [`([$domainLowX],[$domainLowY])`]. This point is [$leftOpenClose], so the value [`[$domainLowX]`] is [$leftInclusive] in the domain. The end-point on the right side is [`([$domainHighX],[$domainHighY])`]. This point is [$rightOpenClose], so the value [`[$domainHighX]`] is [$rightInclusive] in the domain.

Any [`x`]-value in between [`[$domainLowX]`] and [`[$domainHighX]`] is a valid input. So the domain of the function is [`[$intDomain]`].


Next, let's find the range of this function. A function's range is the collection of possible outputs. These are the [`y`]-values of all of the points that we see shaded on the segment.

The function has only one possible output value, [`[$domainLowY]`], so its range is [`[$intRange]`].

END_PGML_SOLUTION


ENDDOCUMENT();
