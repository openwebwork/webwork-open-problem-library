# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Add two radicals with variables.
#
# Last edited: Carl Yao 8/3/16
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Exponents and Radicals')
## KEYWORDS('simplify','radical','exponent')
## DBCCSS('8.EE')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

 
DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "parserRadioButtons.pl",
  "PCCmacros.pl",
  "PGcourse.pl",
);

######################################

TEXT(beginproblem());
Context("Numeric");
$var1 = list_random('x','y','z','t','r','m','n','a','b','c');
do {$var2 = list_random('x','y','z','t','r','m','n','a','b','c');} until ($var1 ne $var2);
Context()->variables->are($var1=>'Real',$var2=>'Real');

$root = 2;

$inRad = list_random(2,3,5,6,7,10);

@num = (2,3,5,7,$var1,$var2);
$numOfNums = 4;
$numOfVars = 2;
@power = ();
@integer = ();

   do {
      for (my $i=0;$i<=1;$i++) {
         for (my $j=0;$j<$numOfNums;$j++) {
            $power[$i][$j] = list_random(0,2,4,6);
         }
      }

      $temp = random(0,3,1);
      if ($temp==0) {
         $power[0][4] = random(3,9,2);
         $power[0][5] = random(3,9,2);
      } elsif ($temp==1) {
         $power[0][4] = random(3,9,2);
         $power[0][5] = random(2,10,2);
      } elsif($temp==2) {
         $power[0][4] = random(2,10,2);
         $power[0][5] = random(3,9,2);
      } elsif($temp==3) {
         $power[0][4] = random(2,10,2);
         $power[0][5] = random(2,10,2);
      }

      $power[1][4] = $power[0][4];
      $power[1][5] = $power[0][5];

      for (my $i=0; $i<2; $i++) {
         if ($inRad==2) {$power[$i][0]++;}
         if ($inRad==3) {$power[$i][1]++;}
         if ($inRad==5) {$power[$i][2]++;}
         if ($inRad==6) {$power[$i][0]++;$power[$i][1]++;}
         if ($inRad==7) {$power[$i][3]++;}
         if ($inRad==10) {$power[$i][0]++;$power[$i][2]++;}
      }

      $integer[0] = 2**$power[0][0]*3**$power[0][1]*5**$power[0][2]*7**$power[0][3];
      $integer[1] = 2**$power[1][0]*3**$power[1][1]*5**$power[1][2]*7**$power[1][3];

   } until ( ($integer[0]<=500) && ($integer[0]>=20) && ($integer[1]<=500) && ($integer[1]>=20) && ($integer[0] != $integer[1]) );

   @allString = ();
   @numString = ();
   @varString = ();
   for (my $i=0;$i<=1;$i++) {
      for (my $j=0;$j<=$#num;$j++) {
         if ($power[$i][$j]>1) {
            $allString[$i] .= "$num[$j]^{$power[$i][$j]} \cdot ";
            if ($j<$numOfNums) {$numString[$i] .= "$num[$j]^{$power[$i][$j]} \cdot ";}
            else {$varString[$i] .= "$num[$j]^{$power[$i][$j]} ";}
         } elsif ($power[$i][$j]==1) {
            $allString[$i] .= "$num[$j] \cdot ";
            if ($j<$numOfNums) {$numString[$i] .= "$num[$j] \cdot ";}
            else {$varString[$i] .= "$num[$j] ";}
         }
      }
      $allString[$i] = substr($allString[$i],0,length($allString[$i])-7);
      $numString[$i] = substr($numString[$i],0,length($numString[$i])-7);
   }

   $numOut=0;
   $numIn=0;
   @outString = ();
   @inString = ();
   @outNum = (1,1);
   @inNum = (1,1);
   @outVar = ();
   @inVar = ();
   for (my $i=0; $i<=1; $i++) {
      for (my $j=0; $j<=$#num; $j++) {
         $numOut = int($power[$i][$j]/$root);
         if ($numOut==1) {
            $outString[$i] .= "$num[$j] \cdot ";
            if ($j<$numOfNums) {$outNum[$i] *= $num[$j];}
            else {$outVar[$i] .= "$num[$j] ";}
         } elsif ($numOut != 0) {
            $outString[$i] .= "$num[$j]^{$numOut} \cdot ";
            if ($j<$numOfNums) {$outNum[$i] *= $num[$j]**$numOut;}
            else {$outVar[$i] .= "$num[$j]^{$numOut} ";}
         }
         $numIn = $power[$i][$j]%$root;
         if ($numIn==1) {
            $inString[$i] .= "$num[$j] \cdot ";
            if ($j<$numOfNums) {$inNum[$i] *= $num[$j];}
            else {$inVar[$i] .= "$num[$j] ";}
         }
      }
   }

for (my $i=0; $i<2; $i++) {
   $inString[$i] = substr($inString[$i],0,length($inString[$i])-7);
}

$ansOutNum = $outNum[0]+$outNum[1];
$ansOutVar = $outVar[0];
$ansInNum = $inNum[0];
$ansInVar = $inVar[0];

$temp = $integer[0]+$integer[1];

$problem = "\sqrt{$integer[0] $varString[0]} + \sqrt{$integer[1] $varString[1]}";
$ansString0 = "$ansOutNum $ansOutVar \cdot \sqrt{$ansInNum $ansInVar}";
$ansString1 = "$outNum[0] $outVar[0] \cdot \sqrt{$inNum[0] $inVar[0]} +$outNum[1] $outVar[1] \cdot \sqrt{$inNum[1] $inVar[1]}";
$ansString2 = "$outVar[0] \cdot \sqrt{$temp}";
$ansString3 = "$problem";

#Create a hash and its inverse that randomizes the order of the four choices.
%scramble = ();
%inverse = ();
for my $i (0..3) {
  do {$temp = list_random(0..3)} until !(grep(/^$temp$/,values %scramble) );
  $scramble{$i} = $temp;
  $inverse{$temp} = $i;
};

#Create 4 choices
@choices=();

   $choices[$scramble{0}] = $ansString0;
   $choices[$scramble{1}] = $ansString1;
   $choices[$scramble{2}] = $ansString2;
   $choices[$scramble{3}] = $ansString3;

$radio = RadioButtons(
  ["A","B","C","D"],
  $ALPHABET[$scramble{0}], # correct answer
  order => ["A","B","C","D"], separator=>$BR.$SPACE.$SPACE.$SPACE
);

#####################################################

BEGIN_PGML

Simplify [`` [$problem] ``]. Assume all variables are positive.

END_PGML

Context()->texStrings;
BEGIN_TEXT

$PAR
$SPACE$SPACE$SPACE A: $SPACE$SPACE$SPACE \( $choices[0] \)
$PAR
$SPACE$SPACE$SPACE B: $SPACE$SPACE$SPACE \( $choices[1] \)
$PAR
$SPACE$SPACE$SPACE C: $SPACE$SPACE$SPACE \( $choices[2] \)
$PAR
$SPACE$SPACE$SPACE D: $SPACE$SPACE$SPACE \( $choices[3] \)
$PAR
$SPACE$SPACE$SPACE\{ $radio->buttons() \}

END_TEXT
Context()->normalStrings;

############################################################

ANS( $radio->cmp() );

##############################################

$s1 = $allString[0];
$s2 = $allString[1];
$s4 = "$ansString0";
$s3 = "$outString[0] \sqrt{$inString[0]} + $outString[1] \sqrt{$inString[1]}";

BEGIN_PGML_SOLUTION

    [`` 
\begin{aligned}[t]
   &\phantom{{}=}[$problem] \\
   &= \sqrt{[$s1]} + \sqrt{[$s2]} \\
   &= [$s3] \\
   &= [$ansString1] \\
   &= [$s4] 
\end{aligned}
    ``]

The correct answer is [`[@ $radio->correct_ans() @]*`].

END_PGML_SOLUTION

######################################



ENDDOCUMENT();
