# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Simplify 4th-root radical with only numbers inside.
#
# Last edited: Carl Yao 7/26/16
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Exponents and Radicals')
## KEYWORDS('simplify','radical','exponent')
## DBCCSS('8.EE')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

 
DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PCCmacros.pl",
  "PGcourse.pl",
);

######################################

TEXT(beginproblem());
Context("Numeric");
$showPartialCorrectAnswers = 1;

$var = "x";

@num = (2,3,5,7);
@power = ();
@numOut=();
@numIn=();

   do {
      $power[0]=random(0,4,1);
      $power[1]=random(0,4,1);
      $power[2]=random(0,4,1);
      $power[3]=random(0,2,1);
      $integer = 2**$power[0]*3**$power[1]*5**$power[2]*7**$power[3];
      $ok1 = 0;
      $ok2 = 0;
      for (my $i=0;$i<=3;$i++) {
         if ($power[$i]>3) {$ok1=1;}
         if ($power[$i]%4 !=0) {$ok2=1;}
      }
   } until ( ($integer<=500) && ($integer>=20) && ($ok1==1) && ($ok2==1) );

   $allString = "";
   $numString = "";
   for (my $i=0;$i<=3;$i++) {
      if ($power[$i]>1) {
         $allString .= "$num[$i]^{$power[$i]} \cdot ";
         if ($i<4) {$numString .= "$num[$i]^{$power[$i]} \cdot ";}
      } elsif ($power[$i]==1) {
         $allString .= "$num[$i] \cdot ";
         if ($i<4) {$numString .= "$num[$i] \cdot ";}
      }
   }
   $allString = substr($allString,0,length($allString)-7);
   $numString = substr($numString,0,length($numString)-7);

   $outString = "";
   $inString = "";
   $outNum = 1;
   $inNum = 1;
   $outNumC = 0;
   $inNumC = 0;
   $outVar = "";
   $inVar = "";
   for (my $i=0; $i<=3; $i++) {
      $numOut[$i] = int($power[$i]/4);
      if ($numOut[$i]==1) {
         $outString .= "$num[$i] \cdot ";
         $outNumC++;
         if ($i<4) {$outNum *= $num[$i];}
         else {$outVar .= "$var";}
      } elsif ($numOut[$i]!=0) {
         $outString .= "$num[$i]^{$numOut[$i]} \cdot ";
         $outNumC += $numOut[$i];
         if ($i<4) {$outNum *= $num[$i]**$numOut[$i];}
         else {$outVar .= "$var^{$numOut[$i]}";}
      }
      $numIn[$i] = $power[$i]%4;
      if ($numIn[$i]==1) {
         $inString .= "$num[$i] \cdot ";
         $inNumC++;
         if ($i<4) {$inNum *= $num[$i];}
         else {$inVar .= "$var";}
      } elsif ($numIn[$i]!=0) {
         $inString .= "$num[$i]^{$numIn[$i]} \cdot ";
         $inNumC += $numIn[$i];
         if ($i<4) {$inNum *= $num[$i]**$numIn[$i];}
         else {$inVar .= "$var^{$numIn[$i]}";}
      }
   }

$inString = substr($inString,0,length($inString)-7);

$problem = "\sqrt[4]{$integer}";
$ans1 = Compute("$outNum");
$ans2 = Compute("$inNum");
$ansString = "$outNum \cdot \sqrt[4]{$inNum}";

#####################################################

BEGIN_PGML

Simplify [`` [$problem] ``].

    [`` [$problem] =``] [_]{$ans1}[``\cdot \sqrt[4]{(}``] [_]{$ans2} [``)``]

END_PGML

##############################################

$s1 = "";
if ( ($outNumC>1) || ($inNumC>1) ) {
   $s1 = "&=$ansString";
}

BEGIN_PGML_SOLUTION

First, we use a prime factor tree to do:

    [`` [$integer] = [$numString] ``]

Next, we use [` \sqrt[4]{x^4}=x `] to simplify the expression. The full solution is:

    [`` 
\begin{aligned}[t]
   &\phantom{{}=}[$problem] \\
   &= \sqrt[4]{[$allString]} \\
   &= [$outString] \sqrt[4]{[$inString]} \\
   [$s1]
\end{aligned}
    ``]

END_PGML_SOLUTION

######################################



ENDDOCUMENT();
