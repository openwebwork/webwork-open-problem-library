# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Multiply two quart radicals with variables.
#
# Last edited: Carl Yao 7/29/16
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Exponents and Radicals')
## KEYWORDS('simplify','radical','exponent')
## DBCCSS('8.EE')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

 
DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "parserRadioButtons.pl",
  "PCCmacros.pl",
  "PGcourse.pl",
);

######################################

TEXT(beginproblem());
Context("Numeric");
$var1 = list_random('x','y','z','t','r','m','n','a','b','c');
do {$var2 = list_random('x','y','z','t','r','m','n','a','b','c');} until ($var1 ne $var2);
Context()->variables->are($var1=>'Real',$var2=>'Real');

$root = 4;
$numOfNums = 3;
$numOfTerms = 5;

@num = (2,3,5,$var1,$var2);
@power = ();
@integer = ();
@numOut=();
@numIn=();

do {

   do {
      for (my $i=0;$i<=1;$i++) {
         for (my $j=0;$j<$numOfTerms;$j++) {
            $power[$i][$j] = random(0,4,1);
         }
      }
      for (my $i=0;$i<$numOfTerms;$i++) {
         $power[2][$i] = $power[0][$i]+$power[1][$i];
      }
      $integer[0] = 2**$power[0][0]*3**$power[0][1]*5**$power[0][2];
      $integer[1] = 2**$power[1][0]*3**$power[1][1]*5**$power[1][2];
      $integer[2] = $integer[0]*$integer[1];
      $ok1 = 0;
      $ok2 = 0;
      for (my $i=0;$i<$numOfNums;$i++) {
         if ($power[2][$i]>=$root) {$ok1=1;}
         if ($power[2][$i]%$root!=0) {$ok2=1;}
      }
   } until ( ($integer[2]<=500) && ($integer[2]>=20) && ($ok1==1) && ($ok2==1) && ($integer[0]>1) && ($integer[1]>1) );

   @allString = ();
   @numString = ();
   @varString = ();
   for (my $i=0;$i<=1;$i++) {
      for (my $j=0;$j<$numOfTerms;$j++) {
         if ($power[$i][$j]>1) {
            $allString[$i] .= "$num[$j]^{$power[$i][$j]} \cdot ";
            if ($j<$numOfNums) {$numString[$i] .= "$num[$j]^{$power[$i][$j]} \cdot ";}
            else {$varString[$i] .= "$num[$j]^{$power[$i][$j]} ";}
         } elsif ($power[$i][$j]==1) {
            $allString[$i] .= "$num[$j] \cdot ";
            if ($j<$numOfNums) {$numString[$i] .= "$num[$j] \cdot ";}
            else {$varString[$i] .= "$num[$j] ";}
         }
      }
      $allString[$i] = substr($allString[$i],0,length($allString[$i])-7);
      $numString[$i] = substr($numString[$i],0,length($numString[$i])-7);
   }

   for (my $j=0;$j<$numOfTerms;$j++) {
      if ($power[2][$j]>1) {
         $allString[2] .= "$num[$j]^{$power[2][$j]} \cdot ";
       } elsif ($power[2][$j]==1) {
         $allString[2] .= "$num[$j] \cdot ";
      }
   }
   $allString[2] = substr($allString[2],0,length($allString[2])-7);

   $outString = "";
   $inString = "";
   $outNum = 1;
   $inNum = 1;
   $outVar = "";
   $inVar = "";
   for (my $i=0; $i<$numOfTerms; $i++) {
      $numOut[$i] = int($power[2][$i]/$root);
      if ($numOut[$i]==1) {
         $outString .= "$num[$i] \cdot ";
         if ($i<$numOfNums) {$outNum *= $num[$i];}
         else {$outVar .= "$num[$i] ";}
      } elsif ($numOut[$i]!=0) {
         $outString .= "$num[$i]^{$numOut[$i]} \cdot ";
         if ($i<$numOfNums) {$outNum *= $num[$i]**$numOut[$i];}
         else {$outVar .= "$num[$i]^{$numOut[$i]} ";}
      }
      $numIn[$i] = $power[2][$i]%$root;
      if ($numIn[$i]==1) {
         $inString .= "$num[$i] \cdot ";
         if ($i<$numOfNums) {$inNum *= $num[$i];}
         else {$inVar .= "$num[$i] ";}
      } elsif ($numIn[$i]!=0) {
         $inString .= "$num[$i]^{$numIn[$i]} \cdot ";
         if ($i<$numOfNums) {$inNum *= $num[$i]**$numIn[$i];}
         else {$inVar .= "$num[$i]^{$numIn[$i]} ";}
      }
   }

} until ( ($inNum != $outNum) && ($integer[0]**(1/$root)!=int($integer[0]**(1/$root))) && ($integer[1]**(1/$root)!=int($integer[1]**(1/$root))) );

$inString = substr($inString,0,length($inString)-7);

$problem = "\sqrt[$root]{$integer[0] $varString[0]} \cdot \sqrt[$root]{$integer[1] $varString[1]}";
$ansString0 = "$outNum $outVar"." \cdot \sqrt[$root]{$inNum $inVar}";
$ansString1 = "$inNum"."$outVar"." \cdot \sqrt[$root]{$outNum $inVar}";
$ansString2 = "$outNum $inVar"." \cdot \sqrt[$root]{$inNum $outVar}";
$ansString3 = "$inNum"."$inVar"." \cdot \sqrt[$root]{$outNum $outVar}";

#Create a hash and its inverse that randomizes the order of the four choices.
%scramble = ();
%inverse = ();
for my $i (0..3) {
  do {$temp = list_random(0..3)} until !(grep(/^$temp$/,values %scramble) );
  $scramble{$i} = $temp;
  $inverse{$temp} = $i;
};

#Create 4 choices
@choices=();

   $choices[$scramble{0}] = $ansString0;
   $choices[$scramble{1}] = $ansString1;
   $choices[$scramble{2}] = $ansString2;
   $choices[$scramble{3}] = $ansString3;

$radio = RadioButtons(
  ["A","B","C","D"],
  $ALPHABET[$scramble{0}], # correct answer
  order => ["A","B","C","D"], separator=>$BR.$SPACE.$SPACE.$SPACE
);

#####################################################

BEGIN_PGML

Simplify [`` [$problem] ``]. Assume all variables are positive.

END_PGML

Context()->texStrings;
BEGIN_TEXT

$PAR
$SPACE$SPACE$SPACE A: $SPACE$SPACE$SPACE \( $choices[0] \)
$PAR
$SPACE$SPACE$SPACE B: $SPACE$SPACE$SPACE \( $choices[1] \)
$PAR
$SPACE$SPACE$SPACE C: $SPACE$SPACE$SPACE \( $choices[2] \)
$PAR
$SPACE$SPACE$SPACE D: $SPACE$SPACE$SPACE \( $choices[3] \)
$PAR
$SPACE$SPACE$SPACE\{ $radio->buttons() \}

END_TEXT
Context()->normalStrings;

############################################################

ANS( $radio->cmp() );

##############################################

$s1 = $allString[0];
$s2 = $allString[1];
$s3 = $allString[2];
if ( ($outString eq "$outNum"."$outVar"." \cdot ") && ($inString eq "$inNum"."$inVar") ) {
   $s4 = "";
} else {
   $s4 = "&= $ansString0";
}

BEGIN_PGML_SOLUTION

When we multiply the same type of radicals (like square root), we can combine two radicals into one:

    [`` \sqrt[4]{x} \cdot \sqrt[4]{y} = \sqrt[4]{xy} ``]

The solution is:

    [`` 
\begin{aligned}[t]
   &\phantom{{}=}[$problem] \\
   &= \sqrt[4]{[$s1]} \cdot \sqrt[4]{[$s2]} \\
   &= \sqrt[4]{[$s3]} \\
   &= [$outString] \sqrt[4]{[$inString]} \\
   [$s4]
\end{aligned}
    ``]

The correct answer is [`[@ $radio->correct_ans() @]*`].

END_PGML_SOLUTION

######################################



ENDDOCUMENT();
