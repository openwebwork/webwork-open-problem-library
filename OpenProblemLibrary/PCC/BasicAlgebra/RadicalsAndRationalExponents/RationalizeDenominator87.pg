# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Rationalize denominator with 4th root. There are variables.
#
# Last edited: Carl Yao 8/6/16
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Exponents and Radicals')
## KEYWORDS('simplify','radical','exponent','rationalize')
## DBCCSS('8.EE')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

 
DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "parserRadioButtons.pl",
  "PCCmacros.pl",
  "PGcourse.pl",
);

######################################

TEXT(beginproblem());
Context("Numeric");
$var1 = list_random('x','y','z','t','r','m','n','a','b','c');
do {$var2 = list_random('x','y','z','t','r','m','n','a','b','c');} until ($var1 ne $var2);
Context()->variables->are($var1=>'Real',$var2=>'Real');
$showPartialCorrectAnswers = 1;

do {

   $root = 4;
   $numOfNums = 0;

   @num = (2,3,5,7,$var1,$var2);
   @power = ();

   do {
      $power[0]=0;
      $power[1]=0;
      $power[2]=0;
      $power[3]=0;
      $power[4]=list_random(1,2,3,5,6,7,9,10,11);
      do {$power[5]=list_random(1,2,3,5,6,7,9,10,11);} until ($power[4]!=$power[5]);
      $integer = 2**$power[0]*3**$power[1]*5**$power[2]*7**$power[3];
      $ok1 = 0;
      $ok2 = 0;
      for (my $i=0;$i<=$#num;$i++) {
         if ($power[$i]>4) {$ok1=1;}
         if ($power[$i]%4 !=0) {$ok2=1;}
      }
   } until ( ($ok1==1) && ($ok2==1) );

   $allString = "";
   $numString = "";
   for (my $i=4;$i<=$#num;$i++) {
      if ($power[$i]>1) {
         $allString .= "$num[$i]^{$power[$i]} \cdot ";
         if ($i<$numOfNums) {$numString .= "$num[$i]^{$power[$i]} \cdot ";}
      } elsif ($power[$i]==1) {
         $allString .= "$num[$i] \cdot ";
         if ($i<$numOfNums) {$numString .= "$num[$i] \cdot ";}
      }
   }
   $allString = substr($allString,0,length($allString)-7);
   $numString = substr($numString,0,length($numString)-7);

   $outString = "";
   $outString2 = "";
   $inString = "";
   $outNum = 1;
   $outNum2 = 1;
   $inNum = 1;
   $outVar = "";
   $outVar2 = "";
   $inVar = "";
   $ansDenVar = "";
   $toMultiplyString = "";
   $toMultiplyNum = 1;
   $toMultiplyVar = "";
   for (my $i=4; $i<=$#num; $i++) {
      $numOut = int($power[$i]/$root);
      if ($numOut==1) {
         $outString .= "$num[$i] \cdot ";
         if ($i<$numOfNums) {$outNum *= $num[$i];}
         else {$outVar .= "$num[$i] ";$ansDenVar .= "$num[$i]^{2} ";}
      } elsif ($numOut!=0) {
         $outString .= "$num[$i]^{$numOut} \cdot ";
         if ($i<$numOfNums) {$outNum *= $num[$i]**$numOut;}
         else {
            $outVar .= "$num[$i]^{$numOut} ";
            $temp = $numOut+1;
            $ansDenVar .= "$num[$i]^{$temp} ";
          }
      } else {if ($i>=$numOfNums) {$ansDenVar .= "$num[$i] ";}}
      $numIn = $power[$i]%$root;
      $temp = $root-$numIn;
      if ($numIn==1) {
         $inString .= "$num[$i] \cdot ";
         $toMultiplyString .= "$num[$i]^{$temp} \cdot ";
         $outNum2 *= $num[$i];
         $outString2 .= "$num[$i] \cdot ";
         if ($i<$numOfNums) {
            $inNum *= $num[$i]; 
            $toMultiplyNum *= $num[$i]**$temp;
         } else {
            $inVar .= "$num[$i] "; 
            $outVar2 .= "$num[$i] ";
            $toMultiplyVar .= "$num[$i]^{$temp} ";
         }
      } elsif ($numIn!=0) {
         $inString .= "$num[$i]^{$numIn} \cdot ";
         $outNum2 *= $num[$i];
         $outString2 .= "$num[$i] \cdot ";
         if ($i<$numOfNums) {
            $inNum *= $num[$i]**$numIn;
            $toMultiplyNum *= $num[$i]**$temp;
         } else {
            $inVar .= "$num[$i]^{$numIn} "; 
            $outVar2 .= "$num[$i] ";
            if ($temp==1) {
               $toMultiplyVar .= "$num[$i] ";
               $toMultiplyString .= "$num[$i] \cdot ";
            } else {
               $toMultiplyVar .= "$num[$i]^{$temp} ";
               $toMultiplyString .= "$num[$i]^{$temp} \cdot ";
            }
         }
      }
   }
} until ($toMultiplyVar ne $inVar);

$inString = substr($inString,0,length($inString)-7);
$toMultiplyString = substr($toMultiplyString,0,length($toMultiplyString)-7);
$outString2 = substr($outString2,0,length($outString2)-7);

$ansDenNum = $outNum*$inNum;
$s4 = ($power[4]==1) ? "$var1" : "$var1^{$power[4]}";
$s5 = ($power[5]==1) ? "$var2" : "$var2^{$power[5]}";

$problem = "\frac{1}{\sqrt[4]{$s4 $s5}}";
$ansString0 = "\frac{\sqrt[4]{$toMultiplyVar}}{$ansDenVar}";
$ansString1 = "\frac{\sqrt[4]{$inVar}}{$outVar}";
$ansString2 = "\frac{\sqrt[4]{$inVar}}{$ansDenVar}";
$ansString3 = "\frac{\sqrt[4]{$toMultiplyVar}}{$outVar}";

#Create a hash and its inverse that randomizes the order of the four choices.
%scramble = ();
%inverse = ();
for my $i (0..3) {
  do {$temp = list_random(0..3)} until !(grep(/^$temp$/,values %scramble) );
  $scramble{$i} = $temp;
  $inverse{$temp} = $i;
};

#Create 4 choices
@choices=();

   $choices[$scramble{0}] = $ansString0;
   $choices[$scramble{1}] = $ansString1;
   $choices[$scramble{2}] = $ansString2;
   $choices[$scramble{3}] = $ansString3;

$radio = RadioButtons(
  ["A","B","C","D"],
  $ALPHABET[$scramble{0}], # correct answer
  order => ["A","B","C","D"], separator=>$BR.$SPACE.$SPACE.$SPACE
);

#####################################################

BEGIN_PGML

Simplify [`` [$problem] ``]. Make sure to rationalize the denominator. Assume all variables are positive.

END_PGML

Context()->texStrings;
BEGIN_TEXT

$PAR
$SPACE$SPACE$SPACE A: $SPACE$SPACE$SPACE \( $choices[0] \)
$PAR
$SPACE$SPACE$SPACE B: $SPACE$SPACE$SPACE \( $choices[1] \)
$PAR
$SPACE$SPACE$SPACE C: $SPACE$SPACE$SPACE \( $choices[2] \)
$PAR
$SPACE$SPACE$SPACE D: $SPACE$SPACE$SPACE \( $choices[3] \)
$PAR
$SPACE$SPACE$SPACE\{ $radio->buttons() \}

END_TEXT
Context()->normalStrings;

############################################################

ANS( $radio->cmp() );

##############################################

BEGIN_PGML_SOLUTION

    [`` 
\begin{aligned}[t]
   &\phantom{{}=}[$problem] \\
   &= \frac{1}{[$outString] \sqrt[4]{[$inString]}} \\
   &= \frac{1 \cdot \sqrt[4]{[$toMultiplyString]}}{[$outVar] \cdot \sqrt[4]{[$inString]} \cdot \sqrt[4]{[$toMultiplyString]}} \\
   &= \frac{\sqrt[4]{[$toMultiplyString]}}{[$outVar] ([$outString2])} \\
   &= [$ansString0]
\end{aligned}
    ``]

The correct answer is [`[@ $radio->correct_ans() @]*`].

END_PGML_SOLUTION

######################################



ENDDOCUMENT();
