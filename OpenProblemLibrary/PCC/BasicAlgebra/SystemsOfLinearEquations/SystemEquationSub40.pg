# WeBWorK problem written by Chris Hughes, 2013
# Portland Community College
#
# Solve the system of linear equations
#     a x + b y =e
#     c x + d y = f
# where only ONE of a, b, c, d is ZERO, and the rest will be (non-zero) integer values on the interval [-5,5]
#
# The solution is, (x,y), where x and y are both integers on the interval
# [-10,10].
#
# Last updated: Carl Yao, 6/25/13
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Lines', 'Equations')
## KEYWORDS('linear','equation','solve','system','integer')
## DBCCSS('8.EE.8','A-REI.3','A-REI.5')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
   "PGML.pl",
  "PCCmacros.pl",
  "PGcourse.pl",
);

##############################################

Context("Point");
Context()->parens->set("[" => {type => "Interval", close => "]"});
Context()->parens->set("{" => {type => "Set", close => "}"});
Context()->parens->set("<" => {type => "Vector", close => ">"});

#This approach guarantees integer solutions

# start with the solution
$x=random(-10,10,1);
$y=random(-10,10,1);

# set up the system
#     a x + b y = e
#     c x + d y = f
# need to make sure that
#     ad - bc != 0

# initialize the variables
$a=1;
$c=1;
$b=1;
$d=1;

while($a*$d -$c*$b == 0){
$a=random(-5,5,1);
if($a==0)
{
    # if $a==0 then we don't want any of the other variables
    # to be 0 
    $b=non_zero_random(-5,5,1);
}
else
{
    # otherwise $b can be anything
    $b=random(-5,5,1);
}
if($a*$b==0)
{
    # if one of $a or $b is  0, then we don't want $c to be 0
    $c=non_zero_random(-5,5,1);
}
else
{
    # otherwise $c can be zero
    $c=random(-5,5,1);
}
if($a*$b*$c==0)
{
    # if one of $a, $b, or $c is 0, then we don't want $d to be 0
    $d=non_zero_random(-5,5,1);
}
else
{
    # otherwise it must be 0 for this particular problem
    $d=0
}
}

# globally set the reductions one time
# so that we can then merely call ->reduce;
Context()->noreduce('(-x)-y','(-x)+y');

$topLeft = Formula("$a*x+$b*y")->reduce;
$e = $topLeft->eval(x=>$x,y=>$y);

$botLeft = Formula("$c*x+$d*y")->reduce;
$f = $botLeft->eval(x=>$x,y=>$y);

# add solution strings to context- this means that if
# students enter these (and they are not correct), then 
# WW will not give a Context warning
Context()->strings->add("no solution"=>{},
  "no solutions"=>{alias=>'no solution'}, 
  "none"=>{alias=>'no solution'}, 
  "infinite number of solutions"=>{}, 
  "infinite"=>{alias=>'infinite number of solutions'},
  "infinite solutions"=>{alias=>'infinite number of solutions'});

##############################################
TEXT(beginproblem());
BEGIN_PGML
Solve the following system of equations.

[```\left\{\begin{aligned}
  [$topLeft] & =  [$e] \\
  [$botLeft] & =  [$f] 
\end{aligned}\right.```]

[@KeyboardInstructions('If there is one solution, enter it as an ordered pair. If there is no solution, enter [|no solution|]*. If there is an infinite number of solutions, enter [|infinite number of solutions|]*.')@]**

[_________________________________]{Compute("($x,$y)")}

END_PGML

$commonConclusion = "The solution to the system is [`($x,$y)`]. It is left as an exercise to check. Please also note that you may have solved this problem a different way.";

# solution key
if($a==0)
{
  #  by = e
  #  ax + dy = f
  # should be solved by using y from the first equation
  $lhs=Formula("$c*x+$d*$y")->reduce;
  # the first step depends on if |$b|=1
  if(abs($b)!=1)
  {
      $firststep="Let's solve the first equation for [`y`]; we divide both sides of the equation by [`$b`], so [`y=$y`].";
  }
  else
  {
      $firststep="Clearly the first equation tells us that [`y=$y`]";
  }
BEGIN_PGML_SOLUTION
* [$firststep]**
* We find [`x`] by substituting this value of [`y`] in to the second equation: [`[$lhs]=[$f]`], and solving for [`x`].
* This gives [`x=[$x]`].
* [$commonConclusion]**
END_PGML_SOLUTION
}
elsif($b==0)
{
  #  ax = e
  #  ax + dy = f
  # should be solved by using x from the first equation
  $lhs=Formula("$c*$x+$d*y")->reduce;

  # the first step depends on if |$a|=1
  if(abs($a)!=1)
  {
      $firststep="Let's solve the first equation for [`x`]; we divide both sides of the equation by [`$a`], so [`x=$x`].";
  }
  else
  {
      $firststep="Clearly the first equation tells us that [`x=$x`].";
  }
BEGIN_PGML_SOLUTION
*  [$firststep]**
* We find [`y`] by substituting this value of [`x`] in to the second equation: [`[$lhs]=[$f]`], and solving for [`y`].
* This gives [`y=[$y]`].
* [$commonConclusion]**
END_PGML_SOLUTION
}
elsif($c==0)
{
  #  ax + by = e
  #       dy = f
  # should be solved by using y from the second equation
  $lhs=Formula("$a*x+$b*$y")->reduce;
  # the first step depends on if |$d|=1
  if(abs($d)!=1)
  {
      $firststep="Let's solve the second equation for [`y`]; we divide both sides of the equation by [`$d`], so [`y=$y`].";
  }
  else
  {
      $firststep="Clearly the second equation tells us that [`y=$y`].";
  }
BEGIN_PGML_SOLUTION
* [$firststep]**
* We find [`x`] by substituting this value of [`y`] in to the first equation: [`[$lhs]=[$e]`], and solving for [`x`].
* This gives [`x=[$x]`].
* [$commonConclusion]**
END_PGML_SOLUTION
}
elsif($d==0)
{
  #  ax + by = e
  #       cx = f
  # should be solved by using x from the second equation
  $lhs=Formula("$a*$x+$b*y")->reduce;

  # the first step depends on if |$c|=1
  if(abs($c)!=1)
  {
      $firststep="Let's solve the second equation for [`x`]; we divide both sides of the equation by [`$c`], so [`x=$x`].";
  }
  else
  {
      $firststep="Clearly the second equation tells us that [`x=$x`].";
  }
BEGIN_PGML_SOLUTION
*  [$firststep]**
* We find [`y`] by substituting this value of [`x`] in to the first equation: [`[$lhs]=[$e]`], and solving for [`y`].
* This gives [`y=[$y]`].
* [$commonConclusion]**
END_PGML_SOLUTION
}

TEXT(PGML::Format2(<<'END_PGML_HINT'));
*Hint*
* The solution is an ordered pair, so you'll write it in the form [`(x,y)`]
* Both [`x`] and [`y`] are integers between [`-10`] and [`10`]
END_PGML_HINT

##############################################

ENDDOCUMENT();
