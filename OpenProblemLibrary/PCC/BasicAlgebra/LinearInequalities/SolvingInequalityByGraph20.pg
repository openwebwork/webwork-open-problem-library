
DOCUMENT();

############################################################
# Load Macros
############################################################
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "AnswerFormatHelp.pl",
  "PGgraphmacros.pl",
  "PCCmacros.pl",
  "PGcourse.pl",
);

############################################################
# Header
############################################################
TEXT(beginproblem());

############################################################
# PG Setup
############################################################


Context('Numeric');
$h = random(-4,4,1);
$k = random(-4,4,1);
$x = ($h < 0) ? random(-6,$h-1,1) : random($h+1,6,1);
$y = ($k < 0) ? random($k+1,6,1) : random(-6,$k-1,1);
$c = ($y-$k)/($x - $h)**2;
$f = Formula("$c*(x-$h)^2+$k");

@gr = ();
for my $i (0..2) {
  $gr[$i] = init_graph(-7,-7,7,7,
    axes=>[0,0],
    grid=>[14,14],
    size=>[240,240]
  );
  $gr[$i]->lb('reset');
  for $j (-6..6){
    if (Real($j)==0) {next;}
    $gr[$i]->lb(new Label($j,0,$j,'black','center','top','large'));
    $gr[$i]->lb(new Label(0,$j,$j,'black','right','middle','large'));
  };
  $yexit = ($c < 0) ? -7 : 7;
  @xvalues = num_sort(-7,7,sqrt(($yexit-$k)/$c)+$h,-sqrt(($yexit-$k)/$c)+$h);
  add_functions($gr[$i], "$f for x in <$xvalues[1],$xvalues[2]> using color:blue and weight:1");
  $px = 14/240;

  $gr[$i]->moveTo($xvalues[1]+$px,$c*($xvalues[1]+$px-$h)**2+$k);
  $gr[$i]->arrowTo($xvalues[1],$c*($xvalues[1]-$h)**2+$k,'blue',1);
  $gr[$i]->moveTo($xvalues[2]-$px,$c*($xvalues[2]-$px-$h)**2+$k);
  $gr[$i]->arrowTo($xvalues[2],$c*($xvalues[2]-$h)**2+$k,'blue',1);
}

@x = num_sort($x,2*$h-$x);

@symbols = ('\lt','\le','\gt','\ge');
@words = ('less than','less than or equal to','greater than','greater than or equal to');
@in = ();
if (random(0,1,1)==0) {
  $in[0] = random(0,1,1);
  $in[1] = random(2,3,1);
} else {
  $in[0] = random(2,3,1);
  $in[1] = random(0,1,1);
}
$symbol0 = $symbols[$in[0]];
$symbol1 = $symbols[$in[1]];

@alt = ( );
$uod = $c > 0 ? 'upward' : 'downward';
$alt[0] = "This is the graph of a parabola with its vertex at ($h,$k). The parabola faces $uod. It passes the points ($x[0],$y) and ($x[1],$y).";

@s0 = (
  " Those two points are open.",
  " Those two points are closed."
);

@s1 = (
  " On the parabola, the segment between x=$x[0] to x=$x[1] are highlighted.",
  " On the parabola, the segment from negative infinity to x=$x[0], and the segment from x=$x[1] to infinity are highlighted.",
);

@s2 = (
  Interval("($x[0],$x[1])"),
  Interval("[$x[0],$x[1]]"),
  Union("(-inf,$x[0])U($x[1],inf)"),
  Union("(-inf,$x[0]]U[$x[1],inf)"),
);

sub graphOpenDots {
  my $p = shift;
  $gr[$p]->stamps( open_circle($x[0],$y,'red') );
  $gr[$p]->stamps( open_circle($x[1],$y,'red') );
}

sub graphClosedDots {
  my $p = shift;
  $gr[$p]->stamps( closed_circle($x[0],$y,'red') );
  $gr[$p]->stamps( closed_circle($x[1],$y,'red') );
}

sub highlightBetween {
  my $p = shift;
  add_functions($gr[$p], "$f for x in <$x[0],$x[1]> using color:red and weight:1");
}

sub highlightEnds {
  my $p = shift;
  add_functions($gr[$p], "$f for x in <$xvalues[1],$x[0]> using color:red and weight:1");
  add_functions($gr[$p], "$f for x in <$x[1],$xvalues[2]> using color:red and weight:1");
  $px = 14/240;
  $gr[$p]->moveTo($xvalues[1]+$px,$c*($xvalues[1]+$px-$h)**2+$k);
  $gr[$p]->arrowTo($xvalues[1],$c*($xvalues[1]-$h)**2+$k,'red',1);
  $gr[$p]->moveTo($xvalues[2]-$px,$c*($xvalues[2]-$px-$h)**2+$k);
  $gr[$p]->arrowTo($xvalues[2],$c*($xvalues[2]-$h)**2+$k,'red',1);
}

$alt[1] .= $alt[0];
$alt[2] .= $alt[0];
@ans = ();
for my $i (0..1) {
  if ($in[$i]==0) {
    $alt[$i+1] .= $s0[0];
    if ($c > 0) {
      $ans[$i] = $s2[0];
      $alt[$i+1] .= $s1[0];
      &highlightBetween($i+1);
    } else {
      $ans[$i] = $s2[2];
      $alt[$i+1] .= $s1[1];
      &highlightEnds($i+1);
    }
    &graphOpenDots($i+1);
  } elsif ($in[$i]==1) {
    $alt[$i+1] .= $s0[1];
    if ($c > 0) {
      $ans[$i] = $s2[1];
      $alt[$i+1] .= $s1[0];
      &highlightBetween($i+1);
    } else {
      $ans[$i] = $s2[3];
      $alt[$i+1] .= $s1[1];
      &highlightEnds($i+1);
    }
    &graphClosedDots($i+1);
  } elsif ($in[$i]==2) {
    $alt[$i+1] .= $s0[0];
    if ($c > 0) {
      $ans[$i] = $s2[2];
      $alt[$i+1] .= $s1[1];
      &highlightEnds($i+1);
    } else {
      $ans[$i] = $s2[0];
      $alt[$i+1] .= $s1[0];
      &highlightBetween($i+1);
    }
    &graphOpenDots($i+1);
  } else {
    $alt[$i+1] .= $s0[1];
    if ($c > 0) {
      $ans[$i] = $s2[3];
      $alt[$i+1] .= $s1[1];
      &highlightEnds($i+1);
    } else {
      $ans[$i] = $s2[1];
      $alt[$i+1] .= $s1[0];
      &highlightBetween($i+1);
    }
    &graphClosedDots($i+1);
  }
}


############################################################
# Body
############################################################

BEGIN_PGML
A graph of [`f`] is given. Use the graph alone to solve the compound inequalities.

>>[@ image(insertGraph($gr[0]), tex_size=>400, height=>400, width=>400,
extra_html_tags=>"alt= '$alt[0]' title= '$alt[0]'"
) @]*<<

[@KeyboardInstructions(q?Write your solution sets in interval notation.?)@]**

1.  [`f(x) [$symbol0] [$y]`]

    [__________]{$ans[0]}

1.  [`f(x) [$symbol1] [$y]`]

    [__________]{$ans[1]}

END_PGML

############################################################
# End Problem
############################################################

BEGIN_PGML_SOLUTION

###Question 1

To meet the condition [`f(x) [$symbol0] [$y]`], the function's [`y`]-value must be [$words[$in[0]]] [`[$y]`]. The corresponding segment(s) is/are highlighted in the following graph.

>>[@ image(insertGraph($gr[1]), tex_size=>400, height=>400, width=>400,
extra_html_tags=>"alt= '$alt[1]' title= '$alt[1]'"
) @]*<<

The corresponding [`x`]-values on the segment(s) is [`[$ans[0]]`].

###Question 2

To meet the condition [`f(x) [$symbol1] [$y]`], the function's [`y`]-value must be [$words[$in[1]]] [`[$y]`]. The corresponding segment(s) is/are highlighted in the following graph.

>>[@ image(insertGraph($gr[2]), tex_size=>400, height=>400, width=>400,
extra_html_tags=>"alt= '$alt[2]' title= '$alt[2]'"
) @]*<<

The corresponding [`x`]-values on the segment(s) is [`[$ans[1]]`].

END_PGML_SOLUTION

ENDDOCUMENT();
