# WeBWorK problem written by Alex Jordan
# Portland Community College
#
# 
# Use the associative property of addition.
#
# Last edited: Jordan 8/23/13
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Algebraic Expressions','Equivalent Expressions','Reordering and Regrouping')
## KEYWORDS('associative')
## DBCCSS('')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')




##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PCCmacros.pl",
  "PGcourse.pl",
);

   

    

##############################################

do {$var1 = RandomVariableName();} until ($var1 ne uc($var1));
do {$var2 = RandomVariableName();} until (($var2 ne uc($var2)) and ($var2 ne $var1));
do {$var3 = RandomVariableName();} until (($var3 ne uc($var3)) and ($var3 ne $var1) and ($var3 ne $var2));


Context("Numeric");
Context()->variables->are($var1=>'Real',$var2=>'Real',$var3=>'Real');
Context()->noreduce('(-x)-y','(-x)+y');
Context()->flags->set(reduceConstants=>0);
Context()->lists->set(AbsoluteValue => {open => "(", close => ")"});
Context()->parens->set("(" => {removable=>0, type => "AbsoluteValue", close => ")"});


Context()->variables->set($var1 => {limits => [-2,2]});
Context()->variables->set($var2 => {limits => [-2,2]});
Context()->variables->set($var3 => {limits => [-2,2]});

$giv = Formula("$var1+$var2+$var3");
$ans0 = Formula("($var1+$var2)+$var3");
$ans1 = Formula("$var1+($var2+$var3)");



##############################################
TEXT(beginproblem());

BEGIN_PGML

The expression [`[$giv]`] would be ambiguous if we did not have a left-to-right reading convention.  Use grouping symbols to emphasize the order that these additions should be carried out.

    [____________]

Use the associative property of addition to write an equivalent (but different) algebraic expression.

    [____________]


END_PGML
##############################################

ANS($ans0->cmp(checker => sub {
      my ($correct,$student,$ans) = @_;

      # Because of the absolute value hack for parens, make sure to test at both pos and neg input:
      $student ->{test_at} = [[-1,-1,-1],[-1,-1,1],[-1,1,-1],[-1,1,1],[1,-1,-1],[1,-1,1],[1,1,-1],[1,1,1]];
      $correct->{test_at} = [[-1,-1,-1],[-1,-1,1],[-1,1,-1],[-1,1,1],[1,-1,-1],[1,-1,1],[1,1,-1],[1,1,1]];

      Value->Error("This expression is algebraically equivalent to the given expression, but it is not what is asked for") if (($student == $giv) or ($student == $ans1) or (($student == $correct) and ($student ne $correct)));
      return ($student eq $correct);
    }));


ANS($ans1->cmp(checker => sub {
      my ($correct,$student,$ans) = @_;

      # Because of the absolute value hack for parens, make sure to test at both pos and neg input:
      $student ->{test_at} = [[-1,-1,-1],[-1,-1,1],[-1,1,-1],[-1,1,1],[1,-1,-1],[1,-1,1],[1,1,-1],[1,1,1]];
      $correct->{test_at} = [[-1,-1,-1],[-1,-1,1],[-1,1,-1],[-1,1,1],[1,-1,-1],[1,-1,1],[1,1,-1],[1,1,1]];
      $ans0->{test_at} = [[-1,-1,-1],[-1,-1,1],[-1,1,-1],[-1,1,1],[1,-1,-1],[1,-1,1],[1,1,-1],[1,1,1]];
      $giv->{test_at} = [[-1,-1,-1],[-1,-1,1],[-1,1,-1],[-1,1,1],[1,-1,-1],[1,-1,1],[1,1,-1],[1,1,1]];

      Value->Error("This expression is algebraically equivalent to the given expression, but it is not what is asked for") if (($student == $giv) or ($student == $ans0) or (($student == $correct) and ($student ne $correct)));
      return ($student eq $correct);
    }));



##############################################

BEGIN_PGML_SOLUTION

Since we read left-to-right, when there is potentially ambiguity about which operation to carry out first, we should carry out the left operation first:

    [``\begin{aligned}
    [$giv] & =[$ans0]
    \end{aligned}``]

Note that this is how we proceed only because the two operations were both addition. If say, one had been multiplication, that would have higher priority regardless of whether it was written first.

To use the associative property of addition, we leave terms written in their original order, but change the grouping symbols so that a different addition has higher priority:

    [``\begin{aligned}
    [$giv] & =[$ans0]\\
           &= [$ans1]
    \end{aligned}``]

END_PGML_SOLUTION

ENDDOCUMENT();


