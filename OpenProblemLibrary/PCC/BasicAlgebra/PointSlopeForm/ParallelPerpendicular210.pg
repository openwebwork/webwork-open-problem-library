# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Line k's equation is given in x+By=C.
# Line ell is perpendicular to k, and a point on line ell is given.
# Find line ell's equation.
#
# Last edited: Yao 9/12/13
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Linear Equations')
## KEYWORDS('slope','linear','equation','point-slope','slope-intercept','fraction','perpendicular')
## DBCCSS('8.F.3','A-CED')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "parserImplicitPlane.pl",
  "parserAssignment.pl",
  "PGcourse.pl",
  "contextFraction.pl",
);

##############################################

Context("Fraction");
Context()->variables->are(x=>'Real', y=>'Real');
Context()->noreduce('(-x)-y','(-x)+y');

do {
   $numM=1;
   $denM=random(2,9,1);
   $signM = random(-1,1,2);
   $mm = Fraction($numM,$denM)*$signM;
   $bm = non_zero_random(-5,5,1);

   $numN = $denM;
   $denN = $numM;
   $mn = -1*$signM*Fraction($numN,$denN);
   do {$bn=non_zero_random(-5,5,1);} until ($bn!=$bm);

   $x1=$denN*non_zero_random(-5,5,1);
   $y1=$mn*$x1+$bn;
} until ($y1!=0);

if ($signM>0) {
   $lineMLeft = Compute("x-$denM*y")->reduce;
   $lineMRight = -$bm*$denM;
} else {
   $lineMLeft = Compute("x+$denM*y")->reduce;
   $lineMRight = $bm*$denM;
}

$lineMSI = Compute("$mm*x+$bm")->reduce;

$lineNSI = Compute("$mn*x+$bn")->reduce;
$lineNPSLeft = Compute("y-$y1")->reduce;
$lineNPSRight = Compute("$mn*(x-$x1)")->reduce;


Context("ImplicitPlane");
Context()->flags->set(showExtraParens=>0);
Context()->variables->are(x=>'Real', y=>'Real');
Context()->flags->set(showExtraParens=>0);

Context()->texStrings;
$absX1 = abs($x1);
$absY1 = abs($y1);
if (($x1>0) && ($y1>0)) {
   $ansPSstringTeX = "y-$y1=$mn(x-$x1)"; 
} elsif (($x1<0) && ($y1>0)) {
   $ansPSstringTeX = "y-$y1=$mn(x+$absX1)"; 
} elsif (($x1>0) && ($y1<0)) {
   $ansPSstringTeX = "y+$absY1=$mn(x-$x1)"; 
} else {
   $ansPSstringTeX = "y+$absY1=$mn(x+$absX1)"; 
}
$ansSIstringTeX = "y=$mn x+$bn";
Context()->normalStrings;
$ansPSstring = "$lineNPSLeft=$lineNPSRight"; 

$ansPS = ImplicitPlane($ansPSstring);

Context("Numeric");
Context()->noreduce('(-x)-y','(-x)+y');
Context()->variables->are(x=>'Real', y=>'Real');
Context()->flags->set(reduceConstants=>0);
parser::Assignment->Allow;
$ansSI=Compute("y=x+$bn")->reduce;
$ansSI=$ansSI->substitute(x=>Formula("$mn x"));


##############################################

TEXT(beginproblem());

BEGIN_PGML

Line [`k`] has the equation [`[$lineMLeft]=[$lineMRight]`].

Line [`\ell`] is perpendicular to line [`k`] and passes through the point [`([$x1],[$y1])`]. 

Find line [`\ell`]'s equation in both slope-intercept form and point-slope form.

    An equation for [`\ell`] in slope-intercept form is: [_______________]{$ansSI->cmp(correct_ans_latex_string => $ansSIstringTeX)}.

    An equation for [`\ell`] in point-slope form is: [_______________].

END_PGML

##############################################

Context()->flags->set(reduceConstants=>0);
Context()->flags->set(reduceConstantFormulas=>0);

ANS($ansPS->cmp(correct_ans_latex_string => $ansPSstringTeX
   ) -> withPostFilter(sub {
      my $ansHash = shift;
        my $student = $ansHash->{original_student_ans};
        my @sides = split('=',"$student");

      #if it's an implicit plane object, reset how student's answer is displayed:
      if (defined $ansHash->{student_formula}) {
      if ($ansHash->{student_formula}->cmp_class eq "an Implicit line") {
        $ansHash->{preview_text_string} = "$sides[0]=$sides[1]";
        my $leftTex = Formula("$sides[0]")->TeX;
        my $rightTex = Formula("$sides[1]")->TeX;
        $ansHash->{preview_latex_string} = "$leftTex=$rightTex";
        $ansHash->{student_ans} = $ansHash->{original_student_ans};
      }
      };

      #if they have the line correct, then check each side to see if the sides are correct
      if ($ansHash->{score}) {
         if (Formula("y-$y1") != Formula("$sides[0]") and Formula("y-$y1") != Formula("$sides[1]")) {
         $ansHash->{score} = 0;                 
         $ansHash->{ans_message} = "This is an equation for the line, but it is not the point-slope equation that uses the given point"; 
         }  
      }
      return $ansHash;
    }));

################################################################

$s2=$signM*$numM;
$neg1 = $signM>0 ? "" : "-";

$s1 = -$mn*$x1;
$absS1 = abs($s1);
$s1Output = $s1>0 ? "+$s1" : "-$absS1";

$absY1 = abs($y1);
$y1Output = $y1>0 ? "+$absY1" : "-$absY1";

BEGIN_PGML_SOLUTION

First, we need to find line [`k`]'s slope:

    [``
\begin{aligned}
   [$lineMLeft] &= [$lineMRight] \\
   [$lineMLeft] \mathbf{-x} &= [$lineMRight] \mathbf{-x} \\
   [$denM*$signM*-1]y &= -x+[$lineMRight] \\
   \frac{[$denM*$signM*-1]y}{[$denM*$signM*-1]} &= \frac{-x}{[$denM*$signM*-1]} + \frac{[$lineMRight]}{[$denM*$signM*-1]} \\
   y &= [$lineMSI]
\end{aligned}
    ``]

When two lines are perpendicular, the product of their slopes is [`-1`]. We just found that line [`k`]'s slope is [`[$mm]`]. Assume line [`\ell`]'s slope is [`s`], and we have:

    [``
\begin{aligned}
   [$mm]\cdot s &= -1 \\
   [$denM*$signM] \cdot \left([$mm]\right)\cdot s &= [$denM*$signM] \cdot (-1) \\
   s &= [$mn]
\end{aligned}
    ``]

We found that line [`\ell`]'s slope is [`[$mn]`]. 

An easier method to find line [`\ell`]'s slope is to find the negative reciprocal of line [`k`]'s slope:

1. Identify line [`k`]'s slope: [` [$mm] `]
2. Flip line [`k`]'s slope: [` [$neg1]\frac{[$denM]}{[$numM]} =[$neg1][$denM]`]
3. Change the sign of the number: [` [$mn] `]

Now we know line [`\ell`]'s slope, [`[$mn]`], and a point on it, [` ([$x1],[$y1]) `]. We substitute these numbers into the generic formula of a line's point-slope form equation:

    [`y-y_{1}=m(x-x_{1})`] 

and we have:

    [`
\begin{aligned}
   y-y_{1} &= m(x-x_{1}) \\
   y-([$y1]) &= [$mn][x-([$x1])] \\
   [$lineNPSLeft] &= [$lineNPSRight]
\end{aligned}
`]

So the line has an equation in point-slope form: [`[$ansPSstringTeX] `].

----

The slope-intercept form of a line equation looks like [`y=mx+b`], where [`m`] is the slope and [`b`] is the [`y`]-intercept. We can take the point-slope form and solve for [`y`].

    [``
\begin{aligned}
   [$lineNPSLeft] &= [$lineNPSRight]\\
   [$lineNPSLeft] &= [$mn]x+\left([$mn]\right)([$x1*-1]) \\
   [$lineNPSLeft] &= [$mn]x[$s1Output]\\
   [$lineNPSLeft] \mathbf{{}[$y1Output]} &= [$mn]x[$s1Output]\mathbf{{}[$y1Output]}\\
   y &= [$lineNSI] \\
\end{aligned}
    ``]

So the line's equation in slope-intercept form is [`[$ansSIstringTeX]`].



END_PGML_SOLUTION

ENDDOCUMENT();

