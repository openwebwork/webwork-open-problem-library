# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Line k's equation is given in y=Mx+B form. M is a negative fraction.
# Line ell is parallel to k, and a point on line ell is given.
# Find line ell's equation.
#
# Last edited: Yao 9/12/13
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Linear Equations')
## KEYWORDS('slope','linear','equation','point-slope','slope-intercept','fraction','parallel')
## DBCCSS('8.F.3','A-CED')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "parserImplicitPlane.pl",
  "parserAssignment.pl",
  "PGcourse.pl",
  "contextFraction.pl",
);

##############################################

Context("Fraction");
Context()->variables->are(x=>'Real', y=>'Real');
Context()->noreduce('(-x)-y','(-x)+y','(-x)*y','x*(-y)','-n');

$num = random(1,9,1);
$den = random(2,9,1);
while (gcd($num,$den)!=1) {$den = random(2,9,1);}

$m= -Fraction($num,$den);
$b=non_zero_random(-5,5,1);

$x1=$den*non_zero_random(-3,3,1);
$y1=$m*$x1+$b;

do {$b1=non_zero_random(-10,10,1);} until ($b1!=$b);
$lineM = Compute("$m*x+$b1")->reduce;
$lineNSI = Compute("$m*x+$b")->reduce;
$lineNPSLeft = Compute("y-$y1")->reduce;
$lineNPSRight = Compute("$m*(x-$x1)")->reduce;


Context("ImplicitPlane");
Context()->flags->set(showExtraParens=>0);
Context()->variables->are(x=>'Real', y=>'Real');
Context()->flags->set(showExtraParens=>0);

Context()->texStrings;
$absX1 = abs($x1);
$absY1 = abs($y1);
if (($x1>0) && ($y1>0)) {
   $ansPSstringTeX = "y-$y1=$m(x-$x1)"; 
} elsif (($x1<0) && ($y1>0)) {
   $ansPSstringTeX = "y-$y1=$m(x+$absX1)"; 
} elsif (($x1>0) && ($y1<0)) {
   $ansPSstringTeX = "y+$absY1=$m(x-$x1)"; 
} else {
   $ansPSstringTeX = "y+$absY1=$m(x+$absX1)"; 
}
$ansSIstringTeX = "y=$m x+$b";
Context()->normalStrings;
$ansPSstring = "$lineNPSLeft=$lineNPSRight"; 

$ansPS = ImplicitPlane($ansPSstring);
#$ansPS = ImplicitPlane("y-$y1=$m(x-$x1)");

Context("Numeric");
Context()->noreduce('(-x)-y','(-x)+y','(-x)*y','x*(-y)','-n');
Context()->variables->are(x=>'Real', y=>'Real');
Context()->flags->set(reduceConstants=>0);
parser::Assignment->Allow;
$ansSI=Compute("y=x+$b")->reduce;
$ansSI=$ansSI->substitute(x=>Formula("$m x"));


##############################################

TEXT(beginproblem());

BEGIN_PGML

Line [`k`] has the equation [`y=[$lineM]`].

Line [`\ell`] is parallel to line [`k`], but passes through the point [`([$x1],[$y1])`]. 

Find an equation for line [`\ell`] in both slope-intercept form and point-slope form.

    An equation for [`\ell`] in slope-intercept form is: [_______________]{$ansSI->cmp(correct_ans_latex_string => $ansSIstringTeX)}.

    An equation for [`\ell`] in point-slope form is: [_______________].

END_PGML

##############################################

Context()->flags->set(reduceConstants=>0);
Context()->flags->set(reduceConstantFormulas=>0);

ANS($ansPS->cmp(correct_ans_latex_string => $ansPSstringTeX
   ) -> withPostFilter(sub {
      my $ansHash = shift;
        my $student = $ansHash->{original_student_ans};
        my @sides = split('=',"$student");

      #if it's an implicit plane object, reset how student's answer is displayed:
      if (defined $ansHash->{student_formula}) {
      if ($ansHash->{student_formula}->cmp_class eq "an Implicit line") {
        $ansHash->{preview_text_string} = "$sides[0]=$sides[1]";
        my $leftTex = Formula("$sides[0]")->TeX;
        my $rightTex = Formula("$sides[1]")->TeX;
        $ansHash->{preview_latex_string} = "$leftTex=$rightTex";
        $ansHash->{student_ans} = $ansHash->{original_student_ans};
      }
      };

      #if they have the line correct, then check each side to see if the sides are correct
      if ($ansHash->{score}) {
         if (Formula("y-$y1") != Formula("$sides[0]") and Formula("y-$y1") != Formula("$sides[1]")) {
         $ansHash->{score} = 0;                 
         $ansHash->{ans_message} = "This is an equation for the line, but it is not the point-slope equation that uses the given point"; 
         }  
      }
      return $ansHash;
    }));


$absmx1 = -$m*$x1;
$absy1 = abs($y1);
$step = ($y1>0) ? "\mathbf{{}+$y1}" : "\mathbf{{}-$absy1}";

BEGIN_PGML_SOLUTION

When two lines are parallel, they have the same slope. Since line [`k`]'s slope is [`[$m]`], line [`\ell`]'s slope is also [`[$m]`].

Now we know line [`\ell`]'s slope, and a point on it: [` ([$x1],[$y1]) `]. We substitute these numbers into the generic formula for a point-slope equation for a line:

    [``y-y_{1}=m(x-x_{1})``] 

and we have:

    [``
\begin{aligned}
   y-y_{1} &= m(x-x_{1}) \\
   y-([$y1]) &= [$m][x-([$x1])] \\
   [$lineNPSLeft] &= [$lineNPSRight]
\end{aligned}
``]

So the line has an equation in point-slope form: [`[$ansPSstringTeX]`].

----

The slope-intercept form of a line equation looks like [`y=mx+b`], where [`m`] is the slope and [`b`] is the [`y`]-intercept. We can take the point-slope form and solve for [`y`].

    [``
\begin{aligned}
   [$lineNPSLeft] &= [$lineNPSRight]\\
   [$lineNPSLeft] &= [$m]x+[$absmx1]\\
   [$lineNPSLeft] [$step] &= [$m]x+[$absmx1] [$step]\\
   y &= [$m]x+[$b]\\
\end{aligned}
``]

So the line's equation in slope-intercept form is [`[$ansSIstringTeX]`].



END_PGML_SOLUTION

ENDDOCUMENT();

