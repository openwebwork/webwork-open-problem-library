# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Template
#
# Calculate 0.4*70, 0.04*70, 0.004*700
# 
# Last updated: Yao, 12/20/2013
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('')
## KEYWORDS('decimal','multiply')
## DBCCSS('5.NBT.7')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Carl Yao')
## Institution('PCC')

##############################################


DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl",
);

##############################################

sub moveOutput {
   my ($new,$old) = @_;
   if (Real($new/$old)==1) {return "did not move";}
   elsif (Real($new/$old)==10) {return "moved to the right once";}
   elsif (Real($new/$old)==100) {return "moved to the right twice";}
   elsif (Real($new/$old)==1000) {return "moved to the right three times";}
   elsif (Real($new/$old)==0.1) {return "moved to the left once";}
   elsif (Real($new/$old)==0.01) {return "moved to the left twice";}
   elsif (Real($new/$old)==0.001) {return "moved to the left three times";}
}

sub moveOutputShould {
   my ($new,$old) = @_;
   if (Real($new/$old)==1) {return "not move";}
   elsif (Real($new/$old)==10) {return "move to the right once";}
   elsif (Real($new/$old)==100) {return "move to the right twice";}
   elsif (Real($new/$old)==1000) {return "move to the right three times";}
   elsif (Real($new/$old)==0.1) {return "move to the left once";}
   elsif (Real($new/$old)==0.01) {return "move to the left twice";}
   elsif (Real($new/$old)==0.001) {return "move to the left three times";}
}

##############################################

Context("LimitedNumeric");
#Context()->{format}{number} = "%9d";

do {
   $int00 = random(2,9,1);
   $int01 = random(2,9,1);
   $product0 = $int00*$int01;

   @num1 = ($int00/1000,$int00/100,$int00/10);
   @num2 = ($int01*10,$int01*100,$int01*1000);

   $int10 = splice(@num1,random(0,$#num1,1),1);
   $int11 = splice(@num2,random(0,$#num2,1),1);
   $product1 = $int10*$int11;
   $move10 = moveOutput($int10,$int00);
   $move11 = moveOutput($int11,$int01);
   $move1 = moveOutput($product1,$product0);
   $movingText = moveOutputShould($product1,$product0);

   $int20 = splice(@num1,random(0,$#num1,1),1);
   $int21 = splice(@num2,random(0,$#num2,1),1);
   $product2 = $int20*$int21;

   $int30 = splice(@num1,random(0,$#num1,1),1);
   $int31 = splice(@num2,random(0,$#num2,1),1);
   $product3 = $int30*$int31;
} until ( ($product1!=$product2) && ($product1!=$product3) && ($product2!=$product3) );

##############################################

TEXT(beginproblem());

BEGIN_PGML

Calculate the following without using a calculator:

a.    [`` [$int10] \cdot [$int11] = ``] [___________]{$product1}

a.    [`` [$int20] \cdot [$int21] = ``] [___________]{$product2}

a.    [`` [$int30] \cdot [$int31] = ``] [___________]{$product3}

END_PGML

##############################################

BEGIN_PGML_SOLUTION

We will show how to calculate the first problem: [` [$int10] \cdot [$int11] `].

1. From [`[$int00]`] to [`[$int10]`], the decimal point [$move10].
2. From [`[$int01]`] to [`[$int11]`], the decimal point [$move11].
3. Altogether, the decimal point [$move1].
4. Since [`[$int00] \cdot [$int01] = [$product0] `], to calculate [`[$int10] \cdot [$int11] `], the decimal point of [`[$product0]`] should [$movingText], and we have: [`[$int10] \cdot [$int11] = [$product1] `].

*Solutions:*

a.    [``[$int10] \cdot [$int11] = [$product1] ``]
a.    [``[$int20] \cdot [$int21] = [$product2] ``]
a.    [``[$int30] \cdot [$int31] = [$product3] ``]


END_PGML_SOLUTION

ENDDOCUMENT();


