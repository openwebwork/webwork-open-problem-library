# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Read a whole number like 1,204,067
#
#
# Last updated: Yao 2/10/2017
# ENDDESCRIPTION

## DBCC('6.EE.1')
## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Algebraic Expressions')
## KEYWORDS('integer','operation','integer exponent','evaluate')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Carl Yao')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PCCmacros.pl",
  "parserRadioButtons.pl",
  "PGcourse.pl",
);

##############################################

Context("Numeric");

@digits = ( );
@ans = ( );

for my $i (0..3) {
   $ans[$i] = "";
}

$num = "";

$digits[6] = random(1,9,1);
for my $i (0..2) {
   $ans[$i] .= numberWord($digits[6]).' million ';
}
$ans[1] .= ' and ';
$num .= $digits[6].',';

for (my $i=5; $i>=3; $i--) {
   $digits[$i] = random(1,9,1);
   $num .= $digits[$i];
}
$num .= ',';

$zero = random(0,1,1);
if ($zero==0) {
   $digits[5] = 0;
   substr($num,2,1) = '0';
   $ans[0] .= numberWord(10*$digits[4]+$digits[3]).' thousand ';
   $ans[1] .= numberWord(10*$digits[4]+$digits[3]).' thousand and ';
   $ans[2] .= numberWord(10*$digits[4]+$digits[3]).' thousand ';
   $ans[3] .= numberWord($digits[6]).' thousand '.numberWord(10*$digits[4]+$digits[3]).' thousand ';
} else {
   $digits[4] = 0;
   substr($num,3,1) = '0';
   $ans[0] .= numberWord($digits[5]).' hundred '.numberWord(10*$digits[4]+$digits[3]).' thousand ';
   $ans[1] .= numberWord($digits[5]).' hundred '.numberWord(10*$digits[4]+$digits[3]).' thousand and ';
   $ans[2] .= numberWord($digits[5]).' hundred and '.numberWord(10*$digits[4]+$digits[3]).' thousand ';
   $ans[3] .= numberWord($digits[6]).' thousand '.numberWord($digits[5]).' hundred '.numberWord(10*$digits[4]+$digits[3]).' thousand ';
}

for (my $i=2; $i>=0; $i--) {
   $digits[$i] = random(1,9,1);
   $num .= $digits[$i];
}
if ($zero==0) {
   $digits[1] = 0;
   substr($num,-2,1) = '0';
   $ans[0] .= numberWord($digits[2]).' hundred '.numberWord($digits[0]);
   $ans[1] .= numberWord($digits[2]).' hundred '.numberWord($digits[0]);
   $ans[2] .= numberWord($digits[2]).' hundred and '.numberWord($digits[0]);
   $ans[3] .= numberWord($digits[2]).' hundred '.numberWord($digits[0]);
} else {
   $digits[2] = 0;
   substr($num,-3,1) = '0';
   $ans[0] .= numberWord(10*$digits[1]+$digits[0]);
   $ans[1] .= numberWord(10*$digits[1]+$digits[0]);
   $ans[2] .= numberWord(10*$digits[1]+$digits[0]);
   $ans[3] .= numberWord(10*$digits[1]+$digits[0]);
}


#Create a hash and its inverse that randomizes the order of the four choices.
%scramble = ();
%inverse = ();
@answersShuffled = ();
for my $i (0..3) {
  do {$temp = list_random(0..3)} until !(grep(/^$temp$/,values %scramble) );
  $scramble{$i} = $temp;
  $inverse{$temp} = $i;
  $answersShuffled[$i] = $ans[$scramble{$i}];
};

$correctAns = $answersShuffled[$inverse{0}];

$radio = RadioButtons(
   ~~@answersShuffled,
   $correctAns, # correct answer
   labels => "ABC",
);

##############################################

ANS( $radio->cmp() );

##############################################

TEXT(beginproblem());

BEGIN_PGML

How to read the number [`[$num]`]?

    [@$radio->buttons()@]*

END_PGML

##############################################

BEGIN_PGML_SOLUTION

The number [`[$num]`] reads:

    [$ans[0]]

Note that we don't use the word "and" when we read whole numbers.

END_PGML_SOLUTION

ENDDOCUMENT();

