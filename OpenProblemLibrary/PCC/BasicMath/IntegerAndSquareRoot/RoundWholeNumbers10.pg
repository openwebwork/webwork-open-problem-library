# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Round a whole number to a certain digit.
#
# Last edited: Yao 9/25/13
#
# ENDDESCRIPTION

## DBsubject('Elementary School')
## DBchapter('')
## DBsection('')
## KEYWORDS('round','whole number')
## DBCCSS('4.NBT.3')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Carl Yao')
## Institution('PCC')


##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl",

);

##############################################

Context("Numeric");
Context()->flags->set(
  tolerance => Context()->flag(zeroLevel),
  tolType => "absolute",
);

$numDigits = 7;

%digits = (
   "ten",10,
   "hundred",100,
   "thousand",1000,
   "ten thousand",10000,
   "hundred thousand",100000,
);

$roundToWord = list_random("ten","hundred","thousand","ten thousand","hundred thousand");

$roundToDigit = $digits{$roundToWord};

$rightDigit = log($roundToDigit)/log(10)-1;
$leftDigit = $numDigits - $rightDigit - 1;


$left = random(10**($leftDigit-2),10**$leftDigit-1,1);
$middle1 = random(0,4,1);
$right = $roundToDigit==10 ? 0 : random(1,$roundToDigit/10-1,1);
$num1 = round($left*10**($rightDigit+1)+$middle1*10**$rightDigit+$right);
$ans1 = $left*10**($rightDigit+1);

$middle2 = random(5,9,1);
$num2 = round($left*10**($rightDigit+1)+$middle2*10**$rightDigit+$right);
$ans2 = ($left+1)*10**($rightDigit+1);

#Randomize questions
if (random(0,1,1)==1) {
   ($num1,$num2)=($num2,$num1);
   ($ans1,$ans2)=($ans2,$ans1);
   ($middle1, $middle2) = ($middle2,$middle1);
}

#These are used in the Correct Answer field.

$ans1 = round($ans1);
$ans2 = round($ans2);

$correctAns1 = "$ans1";
$correctAns2 = "$ans2";

$ans1 = Compute($ans1);
$ans2 = Compute($ans2);


##############################################

TEXT(beginproblem());

BEGIN_PGML

Round the following numbers to the nearest _[$roundToWord]_. (Don't use commas in your answer.)

a.    [`` [$num1] = ``] [_____________]

a.    [`` [$num2] = ``] [_____________]

END_PGML

###################################################

ANS( Compute($ans1)->cmp(correct_ans_latex_string=>$correctAns1,correct_ans=>$correctAns1)->withPostFilter(sub {
   my $ansHash = shift;
   $ansHash->{preview_text_string} = $ansHash->{original_student_ans};
   $ansHash->{preview_latex_string} = $ansHash->{original_student_ans};
   $ansHash->{student_ans} = $ansHash->{original_student_ans};
   return $ansHash;
}));

ANS( Compute($ans2)->cmp(correct_ans_latex_string=>$correctAns2,correct_ans=>$correctAns2)->withPostFilter(sub {
   my $ansHash = shift;
   $ansHash->{preview_text_string} = $ansHash->{original_student_ans};
   $ansHash->{preview_latex_string} = $ansHash->{original_student_ans};
   $ansHash->{student_ans} = $ansHash->{original_student_ans};
   return $ansHash;
}));

##############################################

$num1Left = round($left);
$num2Left = round($left);
$num1Right = round($middle1*10**$rightDigit+$right);
$num2Right = round($middle2*10**$rightDigit+$right);
$place = round($left-int($left/10)*10);
$upper =round( ($left+1)*10**($rightDigit+1));
$lower = round($left*10**($rightDigit+1));

if ($ans1>$num1) {
   $biggerOrSmaller1 = "greater than [`4`]";
   $roundUpOrNot1 = "";
   $biggerOrSmaller2 = "smaller than [`5`]";
   $roundUpOrNot2 = "do not";
} else {
   $biggerOrSmaller1 = "smaller than [`5`]";
   $roundUpOrNot1 = "do not";
   $biggerOrSmaller2 = "greater than [`4`]";
   $roundUpOrNot2 = "";
}

############################################

BEGIN_PGML_SOLUTION

First, let's review the names of place values. Look at the number

    [`` 2{,}345{,}678 ``]

The name of each place is:

    [``
\begin{aligned}[t]
   2 & \rightarrow \text{ millions} \\
   3 & \rightarrow \text{ hundred thousands} \\
   4 & \rightarrow \text{ ten thousands} \\
   5 & \rightarrow \text{ thousands} \\
   6 & \rightarrow \text{ hundreds} \\
   7 & \rightarrow \text{ tens} \\
   8 & \rightarrow \text{ ones} 
\end{aligned}
    ``]

This problem asks you to round numbers to the nearest [$roundToWord].

###1st number  

For the first number [`[$num1]`], the number in the [$roundToWord]s place is [`[$place]`]. 

We break the first number [`[$num1]`] into two parts: [`[$num1Left]`] and [`[$num1Right]`]. The rounded value is either [`[$upper]`] or [`[$lower]`].

Look at the digit immediately following the [$roundToWord]s place: [`[$middle1]`]. Since this digit is [$biggerOrSmaller1]**, we [$roundUpOrNot1] round up and have [`[$correctAns1]`].

###2nd number  

For the second number [`[$num2]`], the number in the [$roundToWord]s place is also [`[$place]`]. 

We break the second number [`[$num2]`] into two parts: [`[$num2Left]`] and [`[$num2Right]`]. The rounded value is either [`[$upper]`] or [`[$lower]`].

Look at the digit immediately following the [$roundToWord]s place: [`[$middle2]`]. Since this digit is [$biggerOrSmaller2]**, we [$roundUpOrNot2] round up and have [`[$correctAns2]`].

END_PGML_SOLUTION

ENDDOCUMENT();


