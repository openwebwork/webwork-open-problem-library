# DESCRIPTION
# Gives four graphs and asks to determine which corresponds to given equation.
# The graphs are even roots.
# The correct graph always has hori, vert shft and random vert, refl str or shr.
# The correct graph has nothing else.
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Transformations of functions and graphs)
## DBsection(Three or more transformations)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## Level(3)
## KEYWORDS('graph transformations','transformations of functions','quadratic')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "unionTables.pl",
  "PGchoicemacros.pl",
);

TEXT(beginproblem());
$refreshCachedImages = 1;
$showPartialCorrectAnswer = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$maxXVal = 13;
$maxYVal = $maxXVal;
$gridWidth = 450;
$gridHeight = 450;

# initialize graphs, draw grid manually, and label axes
for ($i = 0; $i < 6; $i++) {
  $graphs[$i] = init_graph(-$maxXVal, -$maxYVal, $maxXVal, $maxYVal, size => [$gridWidth, $gridHeight]);
}

for ($i = -$maxYVal + 1; $i < $maxYVal; $i++) {
  for ($j = 0; $j < 6; $j++) {
    if ($i != 0) {
      $graphs[$j]->moveTo(-$maxXVal, $i);
      $graphs[$j]->lineTo($maxXVal, $i, 'gray', 1);
    }
  }
}

for ($i = -$maxXVal+1; $i < $maxXVal+1; $i++) {
  for ($j = 0; $j < 6; $j++) {
    if ($i != 0) {
      $graphs[$j]->moveTo($i, -$maxYVal);
      $graphs[$j]->lineTo($i, $maxYVal, 'gray', 1);
    }
  }
}

for ($j = 0; $j < 6; $j++) {
  $graphs[$j]->moveTo(-$maxXVal, 0);
  $graphs[$j]->arrowTo($maxXVal, 0, 'black', 1);
  $graphs[$j]->arrowTo(-$maxXVal, 0, 'black', 1);
  $graphs[$j]->moveTo(0, -$maxYVal);
  $graphs[$j]->arrowTo(0, $maxYVal, 'black', 1);
  $graphs[$j]->arrowTo(0, -$maxYVal, 'black', 1);
  $graphs[$j]->lb(new Label($maxXVal-0.1, 0.2, 'x', 'black','bottom', 'right'));
  $graphs[$j]->lb(new Label(0.6, $maxYVal-0.1, 'y', 'black', 'top', 'left'));
  $graphs[$j]->lb(new Label(1,-0.1,'1', 'black', 'top','center'));
  $graphs[$j]->lb(new Label(5,-0.1,'5', 'black', 'top','center'));
  $graphs[$j]->lb(new Label(10,-0.1,'10', 'black', 'top','center'));
  $graphs[$j]->lb(new Label(-5,-0.1,'-5', 'black', 'top','center'));
  $graphs[$j]->lb(new Label(-10,-0.1,'-10', 'black', 'top','center'));
  
  $graphs[$j]->lb(new Label(-0.1,0.5,'1', 'black', 'bottom', 'right'));
  $graphs[$j]->lb(new Label(-0.1,4.5,'5', 'black', 'bottom', 'right'));
  $graphs[$j]->lb(new Label(-0.1,9.5,'10', 'black', 'bottom', 'right'));
  $graphs[$j]->lb(new Label(-0.1,-5.5,'-5', 'black', 'bottom', 'right'));
  $graphs[$j]->lb(new Label(-0.1,-10.5,'-10', 'black', 'bottom', 'right'));
}


# setup coefficients and equation to display
Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, E=>{}, F=>{});
$n = list_random(2,4,6,8);
$origeqn = ($n == 2) ? "\displaystyle f(x) = \sqrt{x}" : "\displaystyle f(x) = \sqrt[$n]{x}";

# set up plots and answer
@positions = NchooseK(6,6);
$a = non_zero_random(-5,5);
do {$b = non_zero_random(-5,5)} until (abs($b/$a) != 1);
do {$c = non_zero_random(-5,5)} until (abs($c/$a) != 1 && abs($c/$b) != 1);

$n1 = ($n == 2) ? $n+1 : $n-1;
$goodexpn = sub { my $x = shift(); return $a*(($x - $b)**(1/$n))+$c; };
$goodfun = new Fun($goodexpn, $graphs[$positions[0]]);
$goodfun->steps(1500);
$goodfun->domain($b,15);

$badexpn1 = sub { my $x = shift(); return $a*(($x + $b)**(1/$n))+$c; };
$badfun1 = new Fun($badexpn1, $graphs[$positions[1]]);
$badfun1->steps(1500);
$badfun1->domain(-$b,15);

$badexpn2 = sub { my $x = shift(); return -$a*(($x - $b)**(1/$n))+$c; };
$badfun2 = new Fun($badexpn2, $graphs[$positions[2]]);
$badfun2->steps(1500);
$badfun2->domain($b,15);

$badexpn3 = sub {
  my $x = shift();
  return $a*(($x - $b)**(1/$n1))+$c if $x > $b;
  return -$a*(abs($x-$b)**(1/$n1))+$c;
};
$badfun3 = new Fun($badexpn3, $graphs[$positions[3]]);
$badfun3->steps(1500);
$badfun3->domain(-15,15);

$badexpn4 = sub {
  my $x = shift();
  return $a*(($x + $b)**(1/$n1))+$c if $x > -$b;
  return -$a*(abs($x+$b)**(1/$n1))+$c;
};
$badfun4 = new Fun($badexpn4, $graphs[$positions[4]]);
$badfun4->steps(1500);
$badfun4->domain(-15,15);

$badexpn5 = sub {
  my $x = shift();
  return -$a*(($x - $b)**(1/$n1))-$c if $x > $b;
  return $a*(abs($x-$b)**(1/$n1))-$c;
};
$badfun5 = new Fun($badexpn5, $graphs[$positions[5]]);
$badfun5->steps(1500);
$badfun5->domain(-15,15);


@figs = (0..3);
for ($i = 0; $i < 6; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>300, height=>300, tex_size=>250 );
}

@possans = ("A", "B", "C", "D", "E", "F");
$answer = $possans[$positions[0]];

$dispeqn = ($n == 2) ? nicestring([$a],["\sqrt{x - $b} + $c"]) : nicestring([$a],["\sqrt[$n]{x - $b} + $c"]);



###########################################################################
# state the problem 
###########################################################################
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1], $figs[2]]).
  TableSpace(5,0).
  AlignedRow(["A", "B", "C"]).
  TableSpace(25,6).
  AlignedRow([$figs[3], $figs[4], $figs[5]]).
  TableSpace(5,0).
  AlignedRow(["D", "E", "F"]).
EndTable();
\}
$ECENTER 
$PAR
Use transformations to determine which graph represents the equation 
$PAR
\[
g(x) = $dispeqn
\] 
$PAR
transformed from \($origeqn\). You may click a graph to enlarge it.
$PAR
Correct Letter: \{ans_rule\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(String($answer)->cmp());




COMMENT('Desc: Find the graph of the given transformed function from the four given graphs. $BR
Function Type: x^{1/n}, n = 2,4,6,8 $BR
Transformations: horiz shift, vert shift, vert refl/str/shr random');
ENDDOCUMENT();