# DESCRIPTION
# Determine the relation of the given graph. It is a vertical/horizontal line 
# segment or a vertical/horizontal ray with varying open/close endpoint(s).
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Algebra of real numbers and simplifying expressions)
## DBsection(Inequalities and intervals)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## Level(2)
## KEYWORDS('relations','graphs','relation','graph')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PGstandard.pl",
  "PGgraphmacros.pl",
  "PGchoicemacros.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;
$refreshCachedImages = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$case = random(0,1); # 0 - line segment, 1 - ray
if ($case == 0) {
$hvline = random(0,1);     # 0 - horizontal line, 1 - vertical line
$ldopen = random(0,1);    # 0 - open dot, 1 - close dot (right hand or upper dot)
$ruopen = random(0,1);   # (left hand or lower dot)
@ineqs = ("<", "\leq");
$ineq1 = $ineqs[$ldopen];
$ineq2 = $ineqs[$ruopen];

($p1x, $p1y) = (non_zero_random(-7,1), non_zero_random(-7,1));
if ($hvline == 0) {
  do {$p2x = $p1x + random(2,7)} until ($p2x != 0 && abs($p2x - $p1x) > 2);
  $p2y = $p1y;
} else {
  do {$p2y = $p1y + random(2,7)} until ($p2y != 0 && abs($p2y - $p1y) > 2);
  $p2x = $p1x;
}

## bad relations
($q1x, $q1y, $q2x, $q2y, $ldopenq, $ruopenq) = ($p1y, $p1x, $p2y, $p2x, $ldopen, $ruopen);
if ($ldopen != $ruopen) {
  ($s1x, $s1y, $s2x, $s2y, $ldopens, $ruopens) = ($p1x, $p1y, $p2x, $p2y, $ruopen, $ldopen);
  ($t1x, $t1y, $t2x, $t2y, $ldopent, $ruopent) = ($p1y, $p1x, $p2y, $p2x, $ruopen, $ldopen);
} else {
  $tmp = ($ldopen + 1) % 2;
  ($s1x, $s1y, $s2x, $s2y, $ldopens, $ruopens) = ($p1x, $p1y, $p2x, $p2y, $tmp, $tmp);
  ($t1x, $t1y, $t2x, $t2y, $ldopent, $ruopent) = ($p1y, $p1x, $p2y, $p2x, $tmp, $tmp);
}
$ineq1q = $ineqs[$ldopenq];
$ineq2q = $ineqs[$ruopenq];
$ineq1s = $ineqs[$ldopens];
$ineq2s = $ineqs[$ruopens];
$ineq1t = $ineqs[$ldopent];
$ineq2t = $ineqs[$ruopent];

$n = max(abs($p1x), abs($p2x), abs($p1y), abs($p2y)) + 3;
} else {
do {
  $ldopen = random(0,2);    # 0 - open dot, 1 - close dot, 2 - arrow
  $ruopen = random(0,2)
} until ($ldopen + $ruopen != 4 && ($ldopen == 2 || $ruopen == 2));  
$hvline = random(0,1);     # 0 - horizontal line, 1 - vertical line

($p1x, $p1y) = (non_zero_random(-7,1), non_zero_random(-7,1));
if ($hvline == 0) {
  do {$p2x = $p1x + random(2,7)} until ($p2x != 0);
  $p2y = $p1y;
} else {
  do {$p2y = $p1y + random(2,7)} until ($p2y != 0);
  $p2x = $p1x;
}


# bad relations
# q's - same line orientation, same endpt coords, change endpoint open close/close
# s's - different line orientation, swap endpoint coords, same endpoint open/close
# t's - different line orientation, swap endpoints coords, change endpoint open/close
if ($ruopen != 2) {
  ($q1x, $q1y, $q2x, $q2y, $ldopenq, $ruopenq, $hvlineq) = ($p1x, $p1y, $p2x, $p2y, $ldopen, ($ruopen+1)%2, $hvline);
} else {
  ($q1x, $q1y, $q2x, $q2y, $ldopenq, $ruopenq, $hvlineq) = ($p1x, $p1y, $p2x, $p2y, ($ldopen+1)%2, $ruopen,  $hvline);
}
($s1x, $s1y, $s2x, $s2y, $ldopens, $ruopens, $hvlines) = ($p1y, $p1x, $p2y, $p2x, $ldopen, $ruopen, ($hvline+1)%2); 
if ($ruopen != 2) {
  ($t1x, $t1y, $t2x, $t2y, $ldopent, $ruopent, $hvlinet) = ($p1y, $p1x, $p2y, $p2x, $ldopen, ($ruopen+1)%2, ($hvline+1)%2); 
} else {
  ($t1x, $t1y, $t2x, $t2y, $ldopent, $ruopent, $hvlinet) = ($p1y, $p1x, $p2y, $p2x, ($ldopen+1)%2, $ruopen, ($hvline+1)%2); 
}
$n = max(abs($p1x), abs($p2x), abs($p1y), abs($p2y)) + 3;
}

$ticks = max(2,ceil($n/3));
($maxx, $maxy, $minx, $miny, $gsize, $gnum, $tickx, $ticky) = ($n, $n, -$n, -$n, 500, 4, $ticks, $ticks);
$graph = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
for ($j = $minx; $j <= $maxx; $j++) {
  $graph->moveTo($j,$miny);
  $graph->lineTo($j,$maxy,'gray',1);
}
for ($j = $miny; $j <= $maxy; $j++) {
  $graph->moveTo($minx,$j);
  $graph->lineTo($maxx,$j,'gray',1);
}
$graph->moveTo($minx, 0);
$graph->arrowTo($maxx, 0, 'black', 2);
$graph->arrowTo($minx, 0, 'black', 2);
$graph->moveTo(0, $miny);
$graph->arrowTo(0, $maxy, 'black', 2);
$graph->arrowTo(0, $miny, 'black', 2);
$graph->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
$graph->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

for ($j = $minx+1; $j < $maxx; $j++) {
  if (($j != 0 && $j % $tickx == 0) || $j == 1) {
    $graph->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
  }
}

for ($j = $miny+1; $j < $maxy; $j++) {
  if (($j != 0 && $j % $ticky == 0) || $j == 1) {
    $graph->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
  }
}


$dot = 7;
$lwid = 4;
if ($case == 0) {
$graph->moveTo($p1x,$p1y);
$graph->lineTo($p2x,$p2y, 'blue', $lwid);
if ($ldopen == 0) {
  $graph->stamps(new Circle($p1x,$p1y,$dot,'blue','white'));
} else {
  $graph->stamps(new Circle($p1x,$p1y,$dot,'blue','blue'));
}
if ($ruopen == 0) {
  $graph->stamps(new Circle($p2x,$p2y,$dot,'blue','white'));
} else {
  $graph->stamps(new Circle($p2x,$p2y,$dot,'blue','blue'));
}
$answer_ch[0] = ($hvline == 0) ? "\{ (x, $p1y) \mbox { }|\mbox{ } $p1x $ineq1 x $ineq2 $p2x \}" : " \{ ($p1x, y) \mbox { }|\mbox{ } $p1y $ineq1 y $ineq2 $p2y \}";
$answer_ch[1] = ($q1y == $q2y) ? "\{ (x, $q1y) \mbox { }|\mbox{ } $q1x $ineq1q x $ineq2q $q2x \}" : "\{ ($q1x, y) \mbox { }|\mbox{ } $q1y $ineq1q y $ineq2q $q2y\}";
$answer_ch[2] = ($s1y == $s2y) ? "\{ (x, $s1y) \mbox { }|\mbox{ } $s1x $ineq1s x $ineq2s $s2x \}" : "\{ ($s1x, y) \mbox { }|\mbox{ } $s1y $ineq1s y $ineq2s $s2y\}";
$answer_ch[3] = ($t1y == $t2y) ? "\{ (x, $t1y) \mbox { }|\mbox{ } $t1x $ineq1t x $ineq2t $t2x \}" : "\{ ($t1x, y) \mbox { }|\mbox{ } $t1y $ineq1t y $ineq2t $t2y\}";
} else {
if ($ldopen == 0 || $ldopen == 1) {
  $graph->moveTo($p1x,$p1y);
  if ($hvline == 0) {
    $graph->arrowTo($n,$p1y, 'blue', $lwid);
  } else {
    $graph->arrowTo($p1x,$n, 'blue', $lwid);
  }
  if ($ldopen == 0) {
    $graph->stamps(new Circle($p1x,$p1y,$dot,'blue','white'));
  } else { 
    $graph->stamps(new Circle($p1x,$p1y,$dot,'blue','blue'));
  }
} else {
  $graph->moveTo($p2x,$p2y);
  if ($hvline == 0) {
    $graph->arrowTo(-$n,$p2y, 'blue', $lwid);
  } else {
    $graph->arrowTo($p2x,-$n, 'blue', $lwid);
  }
  if ($ruopen == 0) {
    $graph->stamps(new Circle($p2x,$p2y,$dot,'blue','white'));
  } else {
    $graph->stamps(new Circle($p2x,$p2y,$dot,'blue','blue'));
  }
}

@geq = (">", "\geq");
@leq = ("<", "\leq");
if ($hvline == 0) {
  $answer_ch[0] = ($ldopen == 2) ? "\{ (x,$p1y) \mbox{ }|\mbox{ } x $leq[$ruopen] $p2x \}" : "\{ (x,$p1y) \mbox{ }|\mbox{ } x $geq[$ldopen] $p1x \}";
} else {
  $answer_ch[0] = ($ldopen == 2) ? "\{ ($p1x,y) \mbox{ }|\mbox{ } y $leq[$ruopen] $p2y \}" : "\{ ($p1x,y) \mbox{ }|\mbox{ } y $geq[$ldopen] $p1y\}";
}
if ($hvlineq == 0) {
  $answer_ch[1] = ($ldopenq == 2) ? "\{ (x,$q1y) \mbox{ }|\mbox{ } x $leq[$ruopenq] $q2x \}" : "\{ (x,$q1y) \mbox{ }|\mbox{ } x $geq[$ldopenq] $p1x \}";
} else {
  $answer_ch[1] = ($ldopenq == 2) ? "\{ ($q1x,y) \mbox{ }|\mbox{ } y $leq[$ruopenq] $q2y \}" : "\{ ($q1x,y) \mbox{ }|\mbox{ } y $geq[$ldopenq] $q1y\}";
}

if ($hvlines == 0) {
  $answer_ch[2] = ($ldopens == 2) ? "\{ (x,$s1y) \mbox{ }|\mbox{ } x $leq[$ruopens] $s2x \}" : "\{ (x,$s1y) \mbox{ }|\mbox{ } x $geq[$ldopens] $s1x \}";
} else {
  $answer_ch[2] = ($ldopens == 2) ? "\{ ($s1x,y) \mbox{ }|\mbox{ } y $leq[$ruopens] $s2y \}" : "\{ ($s1x,y) \mbox{ }|\mbox{ } y $geq[$ldopens] $s1y\}";
}

if ($hvlinet == 0) {
  $answer_ch[3] = ($ldopent == 2) ? "\{ (x,$t1y) \mbox{ }|\mbox{ } x $leq[$ruopent] $t2x \}" : "\{ (x,$t1y) \mbox{ }|\mbox{ } x $geq[$ldopent] $t1x \}";
} else {
  $answer_ch[3] = ($ldopent == 2) ? "\{ ($t1x,y) \mbox{ }|\mbox{ } y $leq[$ruopent] $t2y \}" : "\{ ($t1x,y) \mbox{ }|\mbox{ } y $geq[$ldopent] $t1y\}";
}
}

$scale = 0.8;
$fig = image(insertGraph($graph), width=>$gsize*$scale, height=>$gsize*$scale, tex_size=>400);

Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, "none"=>{}, "E"=>{alias=>"none"}, "none of the above"=>{alias=>"none"});
@pos = shuffle(4);
@dispanswers = (0..3);
for ($i = 0; $i <= 3; $i++) {$dispanswers[$pos[$i]] = $answer_ch[$i]};
@answers = ("A", "B", "C", "D");
$answer = String($answers[$pos[0]]);


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$BCENTER
\{ $fig \}
$ECENTER 
$PAR
Choose the letter corresponding to the relation having the above graph or type ${BBOLD}none${EBOLD} if none of the listed relations have the given graph.
$PAR
A. \($dispanswers[0]\)
$PAR
B. \($dispanswers[1]\)
$PAR
C. \($dispanswers[2]\)
$PAR
D. \($dispanswers[3]\)
$PAR
Answer: \{ans_rule(40)\}
END_TEXT
Context()->normalStrings;


###########################################################################
# check the answer  
###########################################################################
ANS($answer->cmp());



COMMENT('Desc: Determine the relation of the given graph. It is a vertical/horizontal line segment or a vertical/horizontal ray with varying open/close endpoint(s).');
ENDDOCUMENT();