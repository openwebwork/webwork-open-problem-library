# DESCRIPTION
# Determine the correct graph corresponding to the given relation. The relation is always a vertical
# line segment with varying open/closed endpoints.
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Algebra of real numbers and simplifying expressions)
## DBsection(Inequalities and intervals)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## MLT(match-graph-inequality)
## Level(2)
## KEYWORDS('relations','graphs','relation','graph')

###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PGstandard.pl",
  "PGgraphmacros.pl",
  "PGchoicemacros.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;
$refreshCachedImages = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$hvline = 1;     # 0 - horizontal line, 1 - vertical line
$ldopen = random(0,1);    # 0 - open dot, 1 - close dot (right hand or upper dot)
$ruopen = random(0,1);   # (left hand or lower dot)
@ineqs = ("<", "\leq");
$ineq1 = $ineqs[$ldopen];
$ineq2 = $ineqs[$ruopen];

($p1x, $p1y) = (non_zero_random(-7,1), non_zero_random(-7,1));
if ($hvline == 0) {
  do {$p2x = $p1x + random(2,7)} until ($p2x != 0);
  $p2y = $p1y;
} else {
  do {$p2y = $p1y + random(2,7)} until ($p2y != 0);
  $p2x = $p1x;
}

$relation = ($hvline == 0) ? "\{ (x, $p1y) | $p1x $ineq1 x $ineq2 $p2x \}" : " \{ ($p1x, y) | $p1y $ineq1 y $ineq2 $p2y \}";

# bad relations
# q's - swap coordinates, same inequalities
# s's - swap inequalities, same coordinates if ineq different, otherwise, change inequalities
# t's - swap both if ineq different, otherwise change inequalities
($q1x, $q1y, $q2x, $q2y, $ldopenq, $ruopenq) = ($p1y, $p1x, $p2y, $p2x, $ldopen, $ruopen);
if ($ldopen != $ruopen) {
  ($s1x, $s1y, $s2x, $s2y, $ldopens, $ruopens) = ($p1x, $p1y, $p2x, $p2y, $ruopen, $ldopen);
  ($t1x, $t1y, $t2x, $t2y, $ldopent, $ruopent) = ($p1y, $p1x, $p2y, $p2x, $ruopen, $ldopen);
} else {
  $tmp = ($ldopen + 1) % 2;
  ($s1x, $s1y, $s2x, $s2y, $ldopens, $ruopens) = ($p1x, $p1y, $p2x, $p2y, $tmp, $tmp);
  ($t1x, $t1y, $t2x, $t2y, $ldopent, $ruopent) = ($p1y, $p1x, $p2y, $p2x, $tmp, $tmp);
}

# set up graphs
$n = max(abs($p1x), abs($p2x), abs($p1y), abs($p2y)) + 3;
$ticks = max(2,ceil($n/3));
($maxx, $maxy, $minx, $miny, $gsize, $gnum, $tickx, $ticky) = ($n, $n, -$n, -$n, 500, 4, $ticks, $ticks);
for ($i = 0; $i < $gnum; $i++) {
  $graphs[$i] = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
  for ($j = $minx; $j <= $maxx; $j++) {
    $graphs[$i]->moveTo($j,$miny);
    $graphs[$i]->lineTo($j,$maxy,'gray',1);
  }
  for ($j = $miny; $j <= $maxy; $j++) {
    $graphs[$i]->moveTo($minx,$j);
    $graphs[$i]->lineTo($maxx,$j,'gray',1);
  }
  $graphs[$i]->moveTo($minx, 0);
  $graphs[$i]->arrowTo($maxx, 0, 'black', 2);
  $graphs[$i]->arrowTo($minx, 0, 'black', 2);
  $graphs[$i]->moveTo(0, $miny);
  $graphs[$i]->arrowTo(0, $maxy, 'black', 2);
  $graphs[$i]->arrowTo(0, $miny, 'black', 2);
  $graphs[$i]->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

  for ($j = $minx+1; $j < $maxx; $j++) {
    if (($j != 0 && $j % $tickx == 0) || $j == 1) {
      $graphs[$i]->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
    }
  }

  for ($j = $miny+1; $j < $maxy; $j++) {
    if (($j != 0 && $j % $ticky == 0) || $j == 1) {
      $graphs[$i]->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
    }
  }
}

@pos = shuffle(4);
$dot = 7;
$lwid = 4;
$graphs[$pos[0]]->moveTo($p1x,$p1y);
$graphs[$pos[0]]->lineTo($p2x,$p2y, 'blue', $lwid);
if ($ldopen == 0) {
  $graphs[$pos[0]]->stamps(new Circle($p1x,$p1y,$dot,'blue','white'));
} else {
  $graphs[$pos[0]]->stamps(new Circle($p1x,$p1y,$dot,'blue','blue'));
}
if ($ruopen == 0) {
  $graphs[$pos[0]]->stamps(new Circle($p2x,$p2y,$dot,'blue','white'));
} else {
  $graphs[$pos[0]]->stamps(new Circle($p2x,$p2y,$dot,'blue','blue'));
}

$graphs[$pos[1]]->moveTo($q1x,$q1y);
$graphs[$pos[1]]->lineTo($q2x,$q2y, 'blue', $lwid);
if ($ldopenq == 0) {
  $graphs[$pos[1]]->stamps(new Circle($q1x,$q1y,$dot,'blue','white'));
} else {
  $graphs[$pos[1]]->stamps(new Circle($q1x,$q1y,$dot,'blue','blue'));
}
if ($ruopenq == 0) {
  $graphs[$pos[1]]->stamps(new Circle($q2x,$q2y,$dot,'blue','white'));
} else {
  $graphs[$pos[1]]->stamps(new Circle($q2x,$q2y,$dot,'blue','blue'));
}

$graphs[$pos[2]]->moveTo($s1x,$s1y);
$graphs[$pos[2]]->lineTo($s2x,$s2y, 'blue', $lwid);
if ($ldopens == 0) {
  $graphs[$pos[2]]->stamps(new Circle($s1x,$s1y,$dot,'blue','white'));
} else {
  $graphs[$pos[2]]->stamps(new Circle($s1x,$s1y,$dot,'blue','blue'));
}
if ($ruopens == 0) {
  $graphs[$pos[2]]->stamps(new Circle($s2x,$s2y,$dot,'blue','white'));
} else {
  $graphs[$pos[2]]->stamps(new Circle($s2x,$s2y,$dot,'blue','blue'));
}

$graphs[$pos[3]]->moveTo($t1x,$t1y);
$graphs[$pos[3]]->lineTo($t2x,$t2y, 'blue', $lwid);
if ($ldopent == 0) {
  $graphs[$pos[3]]->stamps(new Circle($t1x,$t1y,$dot,'blue','white'));
} else {
  $graphs[$pos[3]]->stamps(new Circle($t1x,$t1y,$dot,'blue','blue'));
}
if ($ruopent == 0) {
  $graphs[$pos[3]]->stamps(new Circle($t2x,$t2y,$dot,'blue','white'));
} else {
  $graphs[$pos[3]]->stamps(new Circle($t2x,$t2y,$dot,'blue','blue'));
}

$scale = 0.6;
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize*$scale, height=>$gsize*$scale, tex_size=>500 );
}

Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, "none"=>{}, "E"=>{alias=>"none"}, "none of the above"=>{alias=>"none"});
@answers = ("A", "B", "C", "D");
$answer = String($answers[$pos[0]]);


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 
$PAR
Choose the correct graph from above of the relation 
$PAR \[$relation\] $PAR
or type ${BBOLD}none${EBOLD} if the answer is none of the above.
$PAR
Answer: \{ans_rule(10)\}
END_TEXT
Context()->normalStrings;


###########################################################################
# check the answer  
###########################################################################
ANS($answer->cmp());




COMMENT('Desc: Determine the correct graph corresponding to the given relation. The relation is always a vertical line segment with varying open/closed endpoints.');
ENDDOCUMENT();