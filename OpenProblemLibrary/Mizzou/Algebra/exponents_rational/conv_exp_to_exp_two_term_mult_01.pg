## DESCRIPTION
## Radicals and Rational Exponents: Rational Exponents
## ENDDESCRIPTION


## Author1('David Covert')
## Author2('Teri Christiansen')
## Author3('Rick Lynch')
## DBsubject(Algebra)
## DBchapter(Properties of exponents, rational exponents and radicals)
## DBsection(Properties of rational exponents and radicals)
## Date(Spring 2012)
## Institution(University of Missouri)
## Level(2)
## TitleText1('College Algebra')
## AuthorText1('Beecher, Penna, Bittinger')
## EditionText1('4')
## Section1('.7')
## Problem1('')
## KEYWORDS('radical expression', 'rational powers')


##################################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGunion.pl",
"MathObjects.pl",
"PGcourse.pl",
"parserMultiAnswer.pl",
"AnswerFormatHelp.pl",
"contextLimitedPowers.pl",
"contextFraction.pl",
);

TEXT(beginproblem());


###################################
# Setup


#
# Subclass the numeric functions
#
package my::Function::numeric;
our @ISA = ('Parser::Function::numeric');

#
# Override sqrt() to return a special value (usually 1) when evaluated
# effectively eliminating it from the product.
#
sub sqrt {
  my $self = shift;
  my $value = $self->context->flag("setSqrt");
  return $value+1 if $value && $_[0] == 1; # force sqrt(1) to be incorrect
  return $value if $value;
  return $self->SUPER::sqrt(@_);
}

#
# end of subclass
#
package main;

###########################

Context("Numeric");
#
# make sqrt() use our subclass
#
Context()->functions->set(sqrt=>{class=>'my::Function::numeric'});
Context()->flags->set(reduceConstantFunctions=>0);
Context()->variables->add(
y=>"Real",
t=>"Real",
s=>"Real",
u=>"Real",
v=>"Real",
p=>"Real",
q=>"Real",
r=>"Real",
w=>"Real",
z=>"Real");

$var = list_random('x','y','z','w','p','q','r','s','t','u','v');
$var1 = list_random('x','y','z','w','t');
$var2 = list_random('p','q','r','u','v');

$a = random(1,5,1);
do {$b = random(2,10,1)} until ($b >= $a && gcd($a,$b) ==1);
$c = random(1,5,1);
do {$d = random(2,10,1)} until ($d >= $c && gcd($c,$d) ==1);
$e = random(2,6,1);
do {$f = random(2,10,1)} until (gcd($f, $e) ==1);

$num1 = $a*$e;
$num2 = $c*$e;
$den1 = $b*$f;
$den2 = $d*$f;

$expression = " \left( $var1^{ \frac{$a}{$b} } \cdot $var2^{\frac{$c}{$d} } \right)^{\frac{$e}{$f}}";

Context("Fraction-NoDecimals")->operators->undefine("+", "-", "*");
$exp1 = Fraction($num1,$den1);
$exp2 = Fraction($num2,$den2);

##########################





Context()->texStrings;
BEGIN_TEXT
Simplify and write the following in exponential notation. If
$PAR
\[
$expression = $var1^{m} \cdot $var2^n
\]
$PAR
then
$PAR
\(m = \) \{ANS_RULE(10)\}
$SPACE $SPACE and $SPACE $SPACE
\(n = \) \{ANS_RULE(10)\}
END_TEXT

Context()->normalStrings;

$showPartialCorrectAnswers = 1;

ANS(Compute($exp1)->cmp);
ANS(Compute($exp2)->cmp);

ENDDOCUMENT();
