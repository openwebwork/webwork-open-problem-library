# DESCRIPTION
# Gives the graph of a piecewise function and asks for the intervals
# for which it is inc/dec/const, as well as domain and range
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Functions)
## DBsection(Graphs)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## MLT(OPL6id02)
## Level(3)
## TitleText1('College Algebra')
## AuthorText1('Beecher, Penna, Bittinger')
## EditionText1('4')
## Section1('2.1')
## Problem1('3')
## KEYWORDS('functions', 'piecewise', 'graphs', 'increasing', 'decreasing','domain','range')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PGgraphmacros.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$maxXVal = 11;
$maxYVal = $maxXVal;
$gridWidth = 500;
$gridHeight = 500;

# initialize graphs, draw grid manually, and label axes
$graph = init_graph(-$maxXVal, -$maxYVal, $maxXVal, $maxYVal, size => [$gridWidth, $gridHeight]);

for ($i = -$maxYVal + 1; $i < $maxYVal; $i++) {
  for ($j = 0; $j < 4; $j++) {
    if ($i != 0) {
      $graph->moveTo(-$maxXVal, $i);
      $graph->lineTo($maxXVal, $i, 'gray', 1);
    }
  }
}

for ($i = -$maxXVal+1; $i < $maxXVal+1; $i++) {
  for ($j = 0; $j < 4; $j++) {
    if ($i != 0) {
      $graph->moveTo($i, -$maxYVal);
      $graph->lineTo($i, $maxYVal, 'gray', 1);
    }
  }
}

for ($j = 0; $j < 4; $j++) {
  $graph->moveTo(-$maxXVal, 0);
  $graph->arrowTo($maxXVal, 0, 'black', 2);
  $graph->arrowTo(-$maxXVal, 0, 'black', 2);
  $graph->moveTo(0, -$maxYVal);
  $graph->arrowTo(0, $maxYVal, 'black', 2);
  $graph->arrowTo(0, -$maxYVal, 'black', 2);
  $graph->lb(new Label($maxXVal-0.1, -0.2, 'x', 'black', 'top', 'right'));
  $graph->lb(new Label(0.4, $maxYVal-0.1, 'y', 'black', 'top', 'left'));
  $graph->lb(new Label(1,-0.1,'1', 'black', 'top','center'));
  $graph->lb(new Label(5,-0.1,'5', 'black', 'top','center'));
  $graph->lb(new Label(10,-0.1,'10', 'black', 'top','center'));
  $graph->lb(new Label(-5,-0.1,'-5', 'black', 'top','center'));
  $graph->lb(new Label(-10,-0.1,'-10', 'black', 'top','center'));
  
  $graph->lb(new Label(-0.1,0.7,'1', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,4.7,'5', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,9.7,'10', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,-5.3,'-5', 'black', 'bottom', 'right'));
  $graph->lb(new Label(-0.1,-10.3,'-10', 'black', 'bottom', 'right'));
}

$min = -$maxXVal;
$max =  $maxXVal;
$x[0] = random(-10,-7);
$x[1] = $x[0] + random(2,4);
$x[2] = $x[1] + random(0,2);
$x[3] = $x[2] + random(2,4);
$x[4] = $x[3] + random(0,2);
$x[5] = $x[4] + random(2,3);
do {$x[6] = random($min+1,$max-1)} until ($x[6] > $x[5]+1);
$y[0] = non_zero_random(-7,7);
$y[1] = $y[0];
do {$y[2] = random($min+4,$max-4)} until ($y[2] != $y[1]);
do {$y[3] = random($min+4,$max-4)} until ($y[3] != $y[2]);
if ($y[3] - $y[2] < 0) {
  $y[4] = random($y[3]+2,$max-1);
} else {
  $y[4] = random($min+1, $y[3]-2);
}
do {$y[5] = random($min+2,$max-2)} until ($y[5] != $y[4]);
if ($y[4] < $y[5]) { 
  do {$y[6] = random($min+1,$max-1)} until ($y[6] < $y[5]);  # forces 
} else {                                                     #   
  do {$y[6] = random($min+1,$max-1)} until ($y[6] > $y[5]);  # V shape
}

$graph->moveTo($x[0],$y[0]);
$graph->lineTo($x[1],$y[1],'blue',3);
$graph->moveTo($x[2],$y[2]);
$graph->lineTo($x[3],$y[3],'blue',3);
$graph->moveTo($x[4],$y[4]);
$graph->lineTo($x[5],$y[5],'blue',3);
$graph->lineTo($x[6],$y[6],'blue',3);

# draw dots, compute domain and range;
$op[0] = random(0,1); # 0 - closed, 1 - open
$op[1] = random(0,1);
if ($x[1] == $x[2]) { 
  $op[2] = 1 - $op[1];
} else {
  $op[2] = random(0,1);
}
$op[3] = random(0,1);
if ($x[3] == $x[4]) {
  $op[4] = 1 - $op[3];
} else {
  $op[4] = random(0,1);
}
$op[5] = 0; # always closed
$op[6] = random(0,1);

for ($i = 0; $i <= 6; $i++) {
  if ($op[$i]) {
    $graph->stamps(new Circle($x[$i],$y[$i],'4','blue','white'));
  } else {
    $graph->stamps(new Circle($x[$i],$y[$i],'4','blue','blue'));
  }
}

if ($op[0]) {
  if ($op[1]) {
    $domain1 = "($x[0],$x[1])";
  } else {
    $domain1 = "($x[0],$x[1]]";
  }
} else {
  if ($op[1]) {
    $domain1 = "[$x[0],$x[1])";
  } else {
    $domain1 = "[$x[0],$x[1]]";
  }
}
$range1 = "[$y[0],$y[1]]";

if ($op[2]) {
  if ($op[3]) {
    $domain2 = "($x[2],$x[3])";
    if ($y[2] < $y[3]) {
      $range2 = "($y[2],$y[3])";
    } else {
      $range2 = "($y[3],$y[2])";
    }
  } else {
    $domain2 = "($x[2],$x[3]]";
    if ($y[2] < $y[3]) {
      $range2 = "($y[2],$y[3]]";
    } else {
      $range2 = "[$y[3],$y[2])";
    }
  }
} else {
  if ($op[3]) {
    $domain2 = "[$x[2],$x[3])";
    if ($y[2] < $y[3]) {
      $range2 = "[$y[2],$y[3])";
    } else {
      $range2 = "($y[3],$y[2]]";
    }
  } else {
    $domain2 = "[$x[2],$x[3]]";
    if ($y[2] < $y[3]) {
      $range2 = "[$y[2],$y[3]]";
    } else {
      $range2 = "[$y[3],$y[2]]";
    }
  }
}

$up = 1;
if ($y[4] < $y[5]) {
  $compy = min($y[4],$y[6]);
  $up = 0;
} else {
  $compy = max($y[4],$y[6]);
}
if ($op[4]) {
  if ($op[6]) {
    $domain3 = "($x[4],$x[6])";
    if ($up == 1) {
      $range3 = "[$y[5],$compy)";
    } else {
      $range3 = "($compy,$y[5]]";
    }
  } else {
    $domain3 = "($x[4],$x[6]]";
    if ($up == 1) {
      if ($y[6] < $compy) {
        $range3 = "[$y[5],$y[4])";
      } else {
        $range3 = "[$y[5],$compy]";
      }
    } else {
      if ($y[6] > $compy) {
        $range3 = "($y[4],$y[5]]";
      } else {
        $range3 = "[$compy,$y[5]]";
      }
    }
  }
} else {
  if ($op[6]) {
    $domain3 = "[$x[4],$x[6])";
    if ($up == 1) {
      if ($y[4] < $compy) {
        $range3 = "[$y[5],$y[6])";
      } else {
        $range3 = "[$y[5],$compy]";
      }
    } else {
      if ($y[4] > $compy) {
        $range3 = "($y[6],$y[5]]";
      } else {
        $range3 = "[$compy,$y[5]]";
      }
    }
  } else {
    $domain3 = "[$x[4],$x[6]]";
    if ($up == 1) {
      $range3 = "[$y[5],$compy]";
    } else {
      $range3 = "[$compy,$y[5]]";
    }
  }
}

# compute increasing and decreasing intervals
@decstr = ();
@incstr = ();
if ($y[3] - $y[2] < 0) {
  push(@decstr, "($x[2],$x[3])");
} else {
  push(@incstr, "($x[2],$x[3])");
}

if ($y[5] - $y[4] < 0) {
  push(@decstr, "($x[4],$x[5])");
  push(@incstr, "($x[5],$x[6])");
  $minima = List($y[0],$y[5]);
  $maxima = List($y[0]);
} else {
  push(@incstr, "($x[4],$x[5])");
  push(@decstr, "($x[5],$x[6])");
  $maxima = List($y[0],$y[5]);
  $minima = List($y[0]);
}

# answers
Context("Interval");
Context()->strings->add("none"=>{});
$domain = List(Compute("$domain1 U $domain2 U $domain3"));
$range = List(Compute("$range1 U $range2 U $range3"));

$inc = Union(join("U",@incstr));
$dec = Union(join("U",@decstr));

$const = List(Compute("($x[0],$x[1])"));


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT

$PAR
$BCENTER
\{ image(insertGraph($graph), width=>$gsize, height=>$gsize, tex_size=>500 ); \}
$ECENTER 
$PAR

Given the graph of \(f(x)\) above, find the following.  In parts (a)-(e) write your answers using \{helpLink("interval", "interval notation")\}: $BR
$PAR
(a) Domain: \{ans_rule(20)\} $BR
(b) Range: \{ans_rule(20)\} $BR
$PAR 
In parts (c)-(e) do not include endpoints in the intervals. (People disagree on  whether or not to call a function "strictly increasing" at an endpoint). In other words, pretend all your intervals are open.$BR
(c) Set on which \(f(x)\) is strictly increasing: \{ans_rule(30)\}  $BR
(d) Set on which \(f(x)\) is strictly decreasing: \{ans_rule(30)\} $BR
(e) Set on which \(f(x)\) is constant: \{ans_rule(30)\} 
$PAR
In parts (f),(g) list the \(y\)-coordinates (\(y=f(x)\)) of the local maxima and minima.  Use commas to separate distinct values if there are more than one.  Enter NONE if there are none.  $PAR
(f) Local maxima: \{ans_rule(20)\} $BR  
(g) Local minima: \{ans_rule(20)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($domain)->cmp());
ANS(Compute($range)->cmp());
ANS(Compute($inc)->cmp());
ANS(Compute($dec)->cmp());
ANS(Compute($const)->cmp());
ANS(Compute($maxima)->cmp());
ANS(Compute($minima)->cmp());


ENDDOCUMENT();
