# DESCRIPTION
# Find all the listed information for the given graph.
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Functions)
## DBsection(Graphs)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## MLT(OPL6id02)
## Level(3)
## KEYWORDS('graphs', 'equations', 'inequalities', 'zeros', 'intercepts')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PGstandard.pl",
  "PGgraphmacros.pl",
  "parserPopUp.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;
$refreshCachedImages = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric")->strings->add(none=>{}, "does not exist"=>{});
@x = (0..8); @y = (0..8);
$x[2] = random(-6,-2,2);
$x[3] = $x[2]/2;
$x[4] = 0;
$x[0] = $x[2] + random(-6,-2,2);
$x[1] = ($x[2]+$x[0])/2;
$x[5] = -$x[3]; $x[6] = -$x[2]; $x[7] = -$x[1]; $x[8] = -$x[0];
$y[0] = 0; $y[2] = 0; $y[4] = 0; $y[6] = 0; $y[8] = 0;
$y[1] = random(3,9)*random(-1,1,2);
do {$y[3] = random(3,9)*random(-1,1,2)} until ($y[3] != $y[1]);

$eo = random(0,1); # 0 - graph will be even, 1 - graph will be odd

$y[5] = ($eo == 0) ? $y[3] : -$y[3];
$y[7] = ($eo == 0) ? $y[1] : -$y[1];

$popeo = ($eo == 0) ? PopUp(["select", "even", "odd", "neither"], "even") : PopUp(["select", "even", "odd", "neither"], "odd");
$ineq = random(0,3);
@ineqstrs = ("\geq",">","\leq","<");
$ineqstr = $ineqstrs[$ineq];

$chby = 0; $chb = 0;
for ($i = 1; $i <= 3; $i = $i+2) {
  if (abs($y[$i]) > $chby) { $chby = abs($y[$i]); $chb = $i; }
}
if ($eo == 0) {
  $bx = List($x[$chb], $x[8-$chb]);
  $by = $y[$chb];
} else {
  $chlr = random(0,1); # 0 - left, 1 - right
  $bx = ($chlr == 0) ? List($x[$chb]) : List($x[8-$chb]);
  $by = ($chlr == 0) ? $y[$chb] : $y[8-$chb];
} 

do {$cha = random(1,7,2)} until ($cha != $chb && $cha != 8 - $chb);
$ax = $x[$cha];
$ay = $y[$cha];

do {$cy = non_zero_random(-$chby+1, $chby-1)} until ($cy != $y[1] && $cy != $y[3] && $cy != $y[5] && $cy != $y[7]);


$sqr = max(abs($x[0]), abs($y[1]), abs($y[3])) + 2;
($maxx, $maxy, $minx, $miny, $gsize, $tickx, $ticky) = ($sqr, $sqr, -$sqr, -$sqr, 600, 5, 5);
$graph = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
for ($i = $minx; $i <= $maxx; $i++) {
  $graph->moveTo($i,$miny);
  $graph->lineTo($i,$maxy,'gray',1);
}
for ($i = $miny; $i <= $maxy; $i++) {
  $graph->moveTo($minx,$i);
  $graph->lineTo($maxx,$i,'gray',1);
}
$graph->moveTo($minx, 0);
$graph->arrowTo($maxx, 0, 'black', 2);
$graph->arrowTo($minx, 0, 'black', 2);
$graph->moveTo(0, $miny);
$graph->arrowTo(0, $maxy, 'black', 2);
$graph->arrowTo(0, $miny, 'black', 2);
$graph->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
$graph->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

for ($i = $minx+1; $i < $maxx; $i++) {
  if (($i != 0 && $i % $tickx == 0) || $i == 1) {
    $graph->lb(new Label($i,-0.1,$i, 'black', 'top','center'));
  }
}

for ($i = $miny+1; $i < $maxy; $i++) {
  if (($i != 0 && $i % $ticky == 0) || $i == 1) {
    $graph->lb(new Label(-0.1,$i,$i, 'black', 'middle', 'right'));
  }
}

$graph->stamps(new Circle($x[0],$y[0],4,'blue','blue'));
$graph->moveTo($x[0],$y[0]);
for (my $i = 0; $i < 8; $i++) {
  $graph->lineTo($x[$i+1],$y[$i+1],'blue',3);
  $graph->stamps(new Circle($x[$i+1],$y[$i+1],5,'blue','blue'));
}

$scale = 0.8;
$fig = image(insertGraph($graph), width=>$gsize*$scale, height=>$gsize*$scale, tex_size=>250);


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Given the graph of \(y = f(x)\) below, answer all of the following questions.
$PAR
$BCENTER
\{ $fig \}
$ECENTER 
$PAR
(a) List the intervals where \(f\) is increasing: \{ans_rule(35)\} $BR
(b) List the intervals where \(f\) is decreasing: \{ans_rule(35)\} $BR
(c) List the ${BITALIC}distinct${EITALIC} \(y\)-values of the local maximums, if any exist: \{ans_rule(20)\} $BR
(d) List the ${BITALIC}distinct${EITALIC} \(y\)-values of the  local minimums, if any exist: \{ans_rule(20)\} $BR
(e) Find the \(y\)-value of the  maximum, if it exists: \{ans_rule(10)\} $BR
(f) Find the \(y\)-value of the minimum, if it exists: \{ans_rule(10)\}
END_TEXT
Context()->normalStrings;


###########################################################################
# check the answer  
###########################################################################
Context("Interval")->strings->add("none"=>{}, "does not exist"=>{});
@inc = (); @dec = ();
for ($i = 0; $i < 8; $i++) {
  $a = $x[$i]; $b = 100; 
  while ($y[$i] < $y[$i+1]) {
    $b = $x[$i+1]; $i++;
  }
  if ($b != 100) {
    push(@inc, Interval("($a,$b)"));
  } else {
    while ($y[$i] > $y[$i+1]) {
      $b = $x[$i+1]; $i++;
    }
    push(@dec, Interval("($a,$b)"));
  }
  $i--;
}
$inc = List(@inc); $dec = List(@dec);
ANS($inc->cmp());
ANS($dec->cmp());

@lmax = ();  @lmin = ();
for ($i = 1; $i < 8; $i++) {
  if ($y[$i-1] < $y[$i] && $y[$i+1] < $y[$i]) {
    if (scalar(@lmax) == 0) { 
      push(@lmax,$y[$i]);
    } else {
      $check = 1;
      for ($j = 0; $j < scalar(@lmax); $j++) {
        $check = 0 if $lmax[$j] == $y[$i];
      }
      push(@lmax,$y[$i]) if $check == 1;
    }
  } elsif ($y[$i-1] > $y[$i] && $y[$i+1] > $y[$i]) {
    if (scalar(@lmin) == 0) { 
      push(@lmin,$y[$i]);
    } else {
      $check = 1;
      for ($j = 0; $j < scalar(@lmin); $j++) {
        $check = 0 if $lmin[$j] == $y[$i];
      }
      push(@lmin,$y[$i]) if $check == 1;
    }
  }
}
@lmax = num_sort(@lmax);
@lmin = num_sort(@lmin);
$lmax = List(@lmax);  $lmin = List(@lmin);
ANS($lmax->cmp());
ANS($lmin->cmp());

$amax = 0; $amin = 0;
for ($i = 1; $i < 9; $i++) {
  if ($y[$i] > $amax) {
    $amax = $y[$i];
  } elsif ($y[$i] < $amin) {
    $amin = $y[$i];
  }
}
ANS(List(Compute($amax))->cmp());
ANS(List(Compute($amin))->cmp());




COMMENT('Created in 2013.
$BR
Desc: Find all the listed information for the given graph.');
ENDDOCUMENT();