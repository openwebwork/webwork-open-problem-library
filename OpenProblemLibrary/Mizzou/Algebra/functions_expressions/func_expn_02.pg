# DESCRIPTION
# Gives the steps that a function applies to x and asks for the corresponding expression and domain.
# It will always be three steps chosen from adding/subtracting, multiplying/dividing, and take sqrt.
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Functions)
## DBsection(Domain and range)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## MLT(OPL6dr1)
## Level(3)
## KEYWORDS('domain of a function', 'functions', 'function notation')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PGstandard.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Interval");
Context()->flags->set(reduceConstantFunctions=>0);
Context()->variables->are(x=>"Real", X=>"Real", f=>"Real", F=>"Real");

$s1_ch = random(0,4); # 0 - add, 1 - subtract, 2 - multiply, 3 - divide, 4 - take square root of
$s2_ch = ($s1_ch <= 1) ? random(2,3) : (($s1_ch == 4) ? random(0,1) : list_random(0,1,4));
if ($s1_ch <= 3 && $s2_ch <=3) {
  $s3_ch = 4;
} elsif ($s1_ch <= 1 || $s2_ch <= 1) {
  $s3_ch = random(2,3);
} else {
  $s3_ch = random(0,1);
}

@words = ("add", "subtract", "multiply", "divide");
$n1 = random(2,15);
do {$n2 = random(2,15)} until ($n2 != $n1);
do {$n3 = random(2,15)} until ($n3 != $n1 && $n3 != $n2);
$w1 = ($s1_ch <= 1) ? "$words[$s1_ch] $n1" : (($s1_ch != 4) ? "$words[$s1_ch] by \($n1\)" : "take the square root");
$w2 = ($s2_ch <= 1) ? "$words[$s2_ch] $n2" : (($s2_ch != 4) ? "$words[$s2_ch] by \($n2\)" : "take the square root");
$w3 = ($s3_ch <= 1) ? "$words[$s3_ch] $n3" : (($s3_ch != 4) ? "$words[$s3_ch] by \($n3\)" : "take the square root");

if ($s1_ch <= 1) {
  $pm = ($s1_ch == 0) ? "+" : "-";
  if ($s2_ch <= 3) {
    if ($s2_ch == 2) {
      $fun = "sqrt($n2 (x $pm $n1))";
      $dfun = "\sqrt{$n2 (x $pm $n1)}";
    } else {
      $fun = "sqrt((x $pm $n1)/$n2)";
      $dfun = "\sqrt{\frac{x $pm $n1}{$n2}}";
    }
  } else {
    if ($s3_ch == 2) {
      $fun = "$n3 sqrt(x $pm $n1)";
      $dfun = "$n3 \sqrt{x $pm $n1}";
    } else {
      $fun = "sqrt(x $pm $n1)/$n3";
      $dfun = "\frac{\sqrt{x $pm $n1}}{$n3}";
    }
  }
  $domain = ($s1_ch == 0) ? "[-$n1,infinity)" : "[$n1,infinity)";
  if ($s1_ch == 0) { #necessary otherwise will give "cannot generate enough valid points..." error
    ANS(fun_cmp(Formula($fun),limits=>[-$n1,-$n1+1]))
  } else {
    ANS(fun_cmp(Formula($fun),limits=>[$n1,$n1+1]));
  }
  $ddomain = ($s1_ch == 0) ? "[-$n1,\infty)" : "[$n1,\infty)"
} elsif ($s2_ch <= 1) {
  $pm = ($s2_ch == 0) ? "+" : "-";
  if ($s1_ch <= 3) {
    if ($s1_ch == 2) {
      $fun = "sqrt($n1 x $pm $n2)";
      $dfun = "\sqrt{$n1 x $pm $n2}";
      $domain = ($s2_ch == 0) ? "[-$n2/$n1,infinity)" : "[$n2/$n1,infinity)";
      $n12 = $n2/$n1;
      if ($s1_ch == 0) { #necessary otherwise will give "cannot generate enough valid points..." error
        ANS(fun_cmp(Formula($fun),limits=>[-$n12,-$n12+1]))
      } else {
        ANS(fun_cmp(Formula($fun),limits=>[$n12,$n12+1]));
      }
      $n1t = $n1/gcd($n1,$n2);  $n2t = $n2/gcd($n1,$n2);
      $ddomain = ($s2_ch == 0) ? "\left[-\frac{$n2t}{$n1t},\infty\right)" : "\left[\frac{$n2t}{$n1t},\infty\right)";
    } else {
      $fun = "sqrt(x/$n1 $pm $n2)";
      $dfun = "\sqrt{\frac{x}{$n1} $pm $n2}";
      $n12 = $n1*$n2;
      $domain = ($s2_ch == 0) ? "[-$n12,infinity)" : "[$n12,infinity)";
      if ($s2_ch == 0) { #necessary otherwise will give "cannot generate enough valid points..." error
        ANS(fun_cmp(Formula($fun),limits=>[-$n12,-$n12+1]))
      } else {
        ANS(fun_cmp(Formula($fun),limits=>[$n12,$n12+1]));
      }
      $ddomain = ($s2_ch == 0) ? "[-$n12,\infty)" : "[$n12,\infty)"; 
    }
  } else {
    if ($s3_ch == 2) {
      $fun = "$n3 (sqrt(x) $pm $n2)";
      $dfun = "$n3 (\sqrt{x} $pm $n2)";
    } else {
      $fun = "(sqrt(x) $pm $n2)/$n3";
      $dfun = "\frac{\sqrt{x} $pm $n2}{$n3}";
    }
    $domain = "[0,infinity)";
    ANS(fun_cmp(Formula($fun),limits=>[0,1]));
    $ddomain = "[0,\infty)";
  }
} elsif ($s3_ch <= 1) {
  $pm = ($s3_ch == 0) ? "+" : "-";
  if ($s1_ch <= 3) {
    if ($s1_ch == 2) {
      $fun = "sqrt($n1 x) $pm $n3";
      $dfun = "\sqrt{$n1 x} $pm $n3";
    } else {
      $fun = "sqrt(x/$n1) $pm $n3";
      $dfun = "\sqrt{\frac{x}{$n1}} $pm $n3";
    }
  } else {
    if ($s2_ch == 2) {
      $fun = "$n2 sqrt(x) $pm $n3";
      $dfun = "$n2 \sqrt{x} $pm $n3";
    } else {
      $fun = "sqrt(x)/$n2 $pm $n3";
      $dfun = "\frac{\sqrt{x}}{$n2} $pm $n3";
    }
  }
  $domain = "[0,infinity)";
  ANS(fun_cmp(Formula($fun),limits=>[0,1]));
  $ddomain = "[0,\infty)";
}
$domain = Interval($domain);


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Find an expression for \(f(x)\) and state its domain in interval notation given that \(f\) is the function that takes a real number \(x\) and performs the following three steps in order: $PAR
\(\hspace{0.1in}\) (1) $w1, $PAR
\(\hspace{0.1in}\) (2) $w2, and then $PAR
\(\hspace{0.1in}\) (3) $w3.
$PAR
\(f(x) = \) \{ans_rule(20)\} $BR
Domain: \{ans_rule(20)\}
END_TEXT
Context()->normalStrings;


###########################################################################
# check the answer  
###########################################################################
ANS($domain->cmp());



COMMENT('Edited and updated in 2012/2013.
$BR
Desc: Gives the steps that a function applies to x and asks for the corresponding expression and domain. It will always be three steps chosen from adding/subtracting, multiplying/dividing, and take sqrt.');
ENDDOCUMENT();