# DESCRIPTION
# Compare the function values of two graphs
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Functions)
## DBsection(Graphs)
## Institution(University of Missouri-Columbia)
## Author(Patrick Spencer)
## MLT(OPL6graphineq)
## MLTleader(1)
## Level(3)
## KEYWORDS('graphs', 'equations', 'inequalities', 'zeros', 'intercepts')


# Initialize {{{
###########################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PGstandard.pl",
  "PGgraphmacros.pl",
  "parserPopUp.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;
$refreshCachedImages = 1;
#}}}=======================================================

# Pick good points {{{
###########################################################
Context("Numeric")->strings->add(none=>{}, "does not exist"=>{});
# sline = straight line
# $sline_middle_x = random(-1,1);
$sline_middle_x = 0;
$sline_left_x = random(-9,-7);
$sline_left_y = random(-5,-3);
$sline_slope = $sline_left_y / ($sline_left_x - $sline_midde_x);
$sline_right_x = -$sline_left_x;
$sline_right_y = -$sline_left_y;

# pfunc = piecewise function
# There are three points where the blue function intersects
# the x-axis. pfunc_1_x is the left most point. sline_middle_x
# is the middle point and pfunc_2_x is the right point.
$pfunc_1_x = random(-6,-5);
$mountain_x = random(-3,-2);
$mountain_y = random(3,8);

$pfunc_2_x = random(5, 6);
$valley_x = random(2,3);
$valley_y = random(-3,-8);
#}}}=======================================================

# Construct Cartesian plane {{{
###########################################################
$plane_width=max(abs($sline_left_x),abs($mountain_y),abs($valley_y),abs($sline_right_x))+1;
($maxx, $maxy, $minx, $miny, $gsize, $tickx, $ticky) = ($plane_width, $plane_width, -$plane_width, -$plane_width, 600, 1, 1);
if ($sqr > 6) {$tickx = 2; $ticky = 2};
$graph = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
for ($i = $minx; $i <= $maxx; $i++) {
  $graph->moveTo($i,$miny);
  $graph->lineTo($i,$maxy,'gray',1);
}
for ($i = $miny; $i <= $maxy; $i++) {
  $graph->moveTo($minx,$i);
  $graph->lineTo($maxx,$i,'gray',1);
}
$graph->moveTo($minx, 0);
$graph->arrowTo($maxx, 0, 'black', 2);
$graph->arrowTo($minx, 0, 'black', 2);
$graph->moveTo(0, $miny);
$graph->arrowTo(0, $maxy, 'black', 2);
$graph->arrowTo(0, $miny, 'black', 2);
$graph->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
$graph->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

for ($i = $minx+1; $i < $maxx; $i++) {
  if (($i != 0 && $i % $tickx == 0) || $i == 1) {
    $graph->lb(new Label($i,-0.1,$i, 'black', 'top','center'));
  }
}

for ($i = $miny+1; $i < $maxy; $i++) {
  if (($i != 0 && $i % $ticky == 0) || $i == 1) {
    $graph->lb(new Label(-0.1,$i,$i, 'black', 'middle', 'right'));
  }
}
#}}}=======================================================

# Plot points {{{
###########################################################
$graph->stamps(new Circle($sline_middle_x,0,4,'blue','blue'));
$graph->stamps(new Circle($sline_left_x,$sline_left_y,4,'blue','blue'));
$graph->stamps(new Circle($sline_right_x,$sline_right_y,4,'blue','blue'));
$graph->stamps(new Circle($pfunc_1_x,0,4,'blue','blue'));
$graph->stamps(new Circle($mountain_x,$mountain_y,4,'blue','blue'));
$graph->stamps(new Circle($pfunc_2_x,0,4,'blue','blue'));
$graph->stamps(new Circle($valley_x,$valley_y,4,'blue','blue'));
#}}}=======================================================

# Draw lines {{{
###########################################################

# a function for straight line between two points
sub straightLine {
  my($x1,$y1,$x_2,$y2,$t) = @_;
  return $y1+(($y2-$y1)/($x2-$x1))*($t - $x1);
};

$line1 = sub {
  my $t = shift();
  ($x1,$y1) = ($sline_left_x,$sline_left_y);
  ($x2,$y2) = ($pfunc_1_x,0);
  return &straightLine($x1,$y1,$x2,$y2,$t);
};
$line1f = new Fun($line1,$graph);
$line1f->domain($sline_left_x,$pfunc_1_x);
$line1f->steps(1500);
$line1f->weight(2);
$line1f->color(blue);

$line2 = sub {
  my $t = shift();
  ($x1,$y1) = ($pfunc_1_x,0);
  ($x2,$y2) = ($mountain_x,$mountain_y);
  return &straightLine($x1,$y1,$x2,$y2,$t);
};
$line2f = new Fun($line2,$graph);
$line2f->domain($pfunc_1_x,$mountain_x);
$line2f->steps(1500);
$line2f->weight(2);
$line2f->color(blue);

$line3 = sub {
  my $t = shift();
  ($x1,$y1) = ($mountain_x,$mountain_y);
  ($x2,$y2) = ($sline_middle_x,$sline_middle_y);
  return &straightLine($x1,$y1,$x2,$y2,$t);
};
$line3f = new Fun($line3,$graph);
$line3f->domain($mountain_x,$sline_middle_x);
$line3f->steps(1500);
$line3f->weight(2);
$line3f->color(blue);

$line4 = sub {
  my $t = shift();
  ($x1,$y1) = ($sline_middle_x,$sline_middle_y);
  ($x2,$y2) = ($valley_x,$valley_y);
  return &straightLine($x1,$y1,$x2,$y2,$t);
};
$line4f = new Fun($line4,$graph);
$line4f->domain($sline_middle_x,$valley_x);
$line4f->steps(1500);
$line4f->weight(2);
$line4f->color(blue);

$line5 = sub {
  my $t = shift();
  ($x1,$y1) = ($valley_x,$valley_y);
  ($x2,$y2) = ($pfunc_2_x,0);
  return &straightLine($x1,$y1,$x2,$y2,$t);
};
$line5f = new Fun($line5,$graph);
$line5f->domain($valley_x,$pfunc_2_x);
$line5f->steps(1500);
$line5f->weight(2);
$line5f->color(blue);

$line6 = sub {
  my $t = shift();
  ($x1,$y1) = ($pfunc_2_x,0);
  ($x2,$y2) = ($sline_right_x,$sline_right_y);
  return &straightLine($x1,$y1,$x2,$y2,$t);
};
$line6f = new Fun($line6,$graph);
$line6f->domain($pfunc_2_x,$sline_right_x);
$line6f->steps(1500);
$line6f->weight(2);
$line6f->color(blue);

# the strightline 'g' which we compare to the other func 'f'
$straight_line = sub {
  my $t = shift();
  ($x1,$y1) = ($sline_left_x,$sline_left_y);
  ($x2,$y2) = ($sline_right_x,$sline_right_y);
  return &straightLine($x1,$y1,$x2,$y2,$t);
};
$singf = new Fun($straight_line,$graph);
$singf->domain($sline_left_x,$sline_right_x);
$singf->steps(1500);
$singf->weight(2);
$singf->color(red);

# label lines
$graph->lb(new Label(5.8, -3.8, 'y=f(x)', 'blue', 'bottom', 'right'));
$graph->lb(new Label(-4.5, -3.8, 'y=g(x)', 'red', 'bottom', 'right'));

$scale = 0.8;
$fig = image(insertGraph($graph), width=>$gsize*$scale, height=>$gsize*$scale, tex_size=>250);
#}}}=======================================================

# State the problem {{{
###########################################################

# pick a random integer.
# If it's 0 our function if f, otherwise it's g
@func_list = ("f","g");
$ran_func_a = $func_list[random(0,1)];
$ran_func_b = $func_list[random(0,1)];
$ran_func_c = $func_list[random(0,1)];

Context()->texStrings;
BEGIN_TEXT
$BCENTER
\{ $fig \}
$BR
$ECENTER
$PAR
Given the graph of \(y = f(x)\) (drawn in blue) and \(y = g(x) \) (drawn in red) below, answer all of the following questions.
$PAR
(a) Solve \($ran_func_a (x) = 0\): \{ans_rule(35)\} $BR
(b) Solve \($ran_func_b (x) \geq 0\): \{ans_rule(35)\} $BR
(c) Solve \($ran_func_c (x) < 0\): \{ans_rule(35)\} $BR
(d) Solve \(f(x) = g(x)\): \{ans_rule(35)\} $BR
(e) Solve \(f(x) \leq g(x)\): \{ans_rule(35)\} $BR
(f) Solve \(f(x) > g(x)\): \{ans_rule(35)\} $BR
END_TEXT
Context()->normalStrings;
#}}}=======================================================

# Check the answer {{{
###########################################################
  Context("Interval")->strings->add("none"=>{}, "does not exist"=>{});
  if ( $ran_func_a == 0 ) {
    # here $ran_func_a == 0 means random function is f
    # the other choice is 1 i.e. the function is g
    $x_zeros = List($pfunc_1_x,$sline_middle_x,$pfunc_2_x);
  } else {
    $x_zeros =  List($sline_middle_x);
  }
  ANS($x_zeros->cmp());

  $func_greater_zero = Interval("[$pfunc_1_x,$sline_middle_x]U[$pfunc_2_x,$sline_right_x]");
  ANS($func_greater_zero->cmp());

  $func_less_zero = Interval("($sline_left_x,$pfunc_1_x)U($sline_middle_x,$pfunc_2_x)");
  ANS($func_less_zero->cmp());

  $f_equal_g = List($sline_left_x,$sline_middle_x,$sline_right_x);
  ANS($f_equal_g->cmp());

  $leq_ans = Interval("[$sline_middle_x,$sline_right_x]");
  ANS($leq_ans->cmp());

  if ($ran_func_f eq 'f') {
    # if the random function chosen for part f happens to be 'f'
    # then we know the inequality is f leq g.
    $gr_ans = List(Interval("($sline_left_x,$sline_middle_x)"));
  } else {
    # if the random function chosen for part f happens to be 'g'
    # then we know the inequality is g leq f.
    $gr_ans = List(Interval("($sline_middle_x,$sline_right_x)"));  }
  ANS($gr_ans->cmp());
#}}}=======================================================



COMMENT('
Desc: Find all the listed information for the given graph.');
#}}}=======================================================

ENDDOCUMENT();


