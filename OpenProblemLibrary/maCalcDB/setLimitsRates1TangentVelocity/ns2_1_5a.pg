##DESCRIPTION
## tsuda tagged and PAID on 2-20-2004
## updated -rac 12/2014

## DBsubject(Calculus - single variable)
## DBchapter(Limits and continuity)
## DBsection(Applications - instantaneous rate of change)
## Date(6/3/2002)
## Level(3)
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Stewart')
## EditionText1('6')
## Section1('2.1')
## Problem1('5')
## KEYWORDS('derivative','definition', 'average velocity')

##  Find the derivative of an oracle function using
##  the definition of the derivative.
##ENDDESCRIPTION

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
#  "answerHints.pl",
#  "PGnumericalmacros.pl",
  "PGcourse.pl"
);

# define function to be evaluated
####################
# This should be made more realistic to match the
# the word problem
####################
Context("Numeric");

$a= random(-14,-18,1);
$b= random(20,20,1);
$c = random(20,40,.1);
$x0=random(.1,1,0.1);

TEXT(beginproblem());

# A warning that we are using javaScript
TEXT(M3("",
"\begin{rawhtml}
<NOSCRIPT> This problem requires that Java Script be enabled </NOSCRIPT> \end{rawhtml}
",
"<NOSCRIPT> This problem requires that Java Script be enabled </NOSCRIPT>"
));

Context()->texStrings;
BEGIN_TEXT
Below is an "oracle" function. An oracle function is a function presented interactively.
When you type in an \(t\) value, and press the --f--\(>\) button and
the value \(f(t)\) appears in the right hand window.  There are three lines, so you can easily calculate
three different values of the function at one time.

$PAR
The function f(t) represents the height in feet of a ball thrown into the air, \(t\) seconds after it has been thrown.

Calculate the velocity  $x0 seconds after the ball has been thrown.
$PAR
The velocity at \( $x0 \) = \{ans_rule(20) \}  You can use a
\{htmlLink(alias("${htmlDirectory}calc.html"), "calculator" ,q!TARGET = "calculator"!) \}

$PAR
END_TEXT
Context()->normalStrings;

HEADER_TEXT(<<END_HEADER);
<SCRIPT LANGUAGE="JavaScript">
<!-- Begin
function func(x) {
        return $a*x*x + $b*x + $c
}
-->
</SCRIPT>

END_HEADER

$javaScript2 = begintable(3) .
               MODES(HTML =>q{<TR>
                                        <TH>t</TH><TH></TH><TH>f(t)</TH>
                                        <TR>},
                                        TeX => "t & \(\rightarrow\) & f(t)\\"
                                ) .
                                row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(t\)}' ),
                                    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->" 
                        OnClick="this.form.Output.value=func(this.form.Input.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output"   Size="30">}, TeX => 'result: \(f(t)\)')
                                ) .
                                row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input2"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(t\)}' ),
                                    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->" 
                        OnClick="this.form.Output2.value=func(this.form.Input2.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output2"   Size="30">}, TeX => 'result: \(f(t)\)')
                                ) .
                                row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input3"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(t\)}' ),
                                    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->" 
                        OnClick="this.form.Output3.value=func(this.form.Input3.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output3"   Size="30">}, TeX => 'result: \(f(t)\)')
                                ) . endtable();



TEXT($javaScript2);    

Context()->texStrings; 
BEGIN_TEXT
$PAR
Remember this technique for finding velocities.  Later we will use the same method to find the
derivative of functions such as \(f(t) \).

END_TEXT
Context()->normalStrings;

# The answer

$ans = Real(2*$a*$x0 + $b);

#We are allowing 1 percent error for the answer.
# we'll modify the answer messages a bit to give some encouragement.
ANS($ans->cmp(
  checker => sub {
    my ( $correct, $student, $ansHash ) = @_;
    my $error = $student - $correct; 
    my $relerror = 100* abs($error/$correct) unless abs($correct) <.000000001 ;
    $relerror = 0 unless defined($relerror);
    if ($relerror < 1 ) {
        $ansHash->{ans_message} = "Good.  Your answer is off by only about $error";
        return 1;
    } elsif ($relerror < 10 ) {
      Value->Error('Your answer is within 10%. ');
    } elsif($relerror < 50) {
      Value->Error('Your answer is within 50%.  ');
    } else {
      Value->Error('Your answer is off by more than 50%.');
    }       
  }
));

                       
ENDDOCUMENT();
