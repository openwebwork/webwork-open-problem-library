# DESCRIPTION
# Problem from Calculus, single variable, Hughes-Hallett et al., 4th ed.
# WeBWorK problem written by Gavin LaRose, <glarose@umich.edu>
# ENDDESCRIPTION

## Tagged by glr 02/08/09

## DBsubject(Calculus - single variable)
## DBchapter(Techniques of integration)
## DBsection(Approximation)
## Institution(University of Michigan)
## Author(Gavin LaRose)
## MLT(approx_06)
## Level(3)
## TitleText1('Calculus')
## AuthorText1('Hughes-Hallett')
## EditionText1('4')
## Section1('7.5')
## Problem1('1 3 5')
## TitleText2('Calculus')
## AuthorText2('Hughes-Hallett')
## EditionText2('5')
## Section2('7.5')
## Problem2('1 3 5')
## TitleText3('Calculus')
## AuthorText3('Hughes-Hallett')
## EditionText3('6')
## Section3('7.5')
## Problem3('1 3 5')
## KEYWORDS('calculus', 'integral', 'definite integrals', 'numerical calculation')

## Textbook tags
## HHChapter1('Integration')
## HHChapter2('Integration')


DOCUMENT();
loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"PGgraphmacros.pl",
"MathObjects.pl",
"hhAdditionalMacros.pl",
);

Context("Numeric");

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;  # all multiple guess; turn into 0?

# We consider a set of functions and draw the different approximations
# in the first four cases the range is [0,2]x[0,6]; in the second
# four, [0,2]x[-6,0]
@func = ( "x^2 + 1", "5 - x^2", "5*(1-e^(-2*x))", "5/(x+1)^3",
          "x^2 - 5", "-x^2",    "-5*(1-e^(-2*x))", "-5/(x+1)^3", );

# pick four, two from each case
@whichf = ( random(0,3,1) );
$tmpf = random(0,3,1);  $tmpf = ($tmpf+1)%4 if ( $tmpf == $whichf[0] );
push(@whichf, $tmpf);
push(@whichf, random(4,7,1));
$tmpf = random(0,3,1);  $tmpf = ($tmpf+1)%4 if ( $tmpf+4 == $whichf[2] );
push(@whichf, $tmpf + 4);

# shuffle these
($sRef, $zind) = shufflemap( scalar(@whichf) );
@whichf = ( $whichf[$sRef->{0}], $whichf[$sRef->{1}], $whichf[$sRef->{2}], 
	    $whichf[$sRef->{3}], );

# generate graphs for each 
@gr = ();
$gr[0] = init_graph(0, ($whichf[0] > 3 ? -6 : -1), 2, ($whichf[0] > 3 ? 1 : 6),
	 	    axes=>[0,0], grid=>[1,1]);
$gr[1] = init_graph(0, ($whichf[1] > 3 ? -6 : -1), 2, ($whichf[1] > 3 ? 1 : 6),
		    axes=>[0,0], grid=>[1,1]);
$gr[2] = init_graph(0, ($whichf[2] > 3 ? -6 : -1), 2, ($whichf[2] > 3 ? 1 : 6),
		    axes=>[0,0], grid=>[1,1]);
$gr[3] = init_graph(0, ($whichf[3] > 3 ? -6 : -1), 2, ($whichf[3] > 3 ? 1 : 6),
		    axes=>[0,0], grid=>[1,1]);
$gr[4] = init_graph(0, ($whichf[2] > 3 ? -6 : -1), 2, ($whichf[2] > 3 ? 1 : 6),
		    axes=>[0,0], grid=>[1,1]);
$gr[5] = init_graph(0, ($whichf[3] > 3 ? -6 : -1), 2, ($whichf[3] > 3 ? 1 : 6),
		    axes=>[0,0], grid=>[1,1]);
for( my $i=0; $i<6; $i++ ) { $gr[$i]->lb('reset'); }
add_functions( $gr[0], "$func[$whichf[0]] for x in <0,2> using color:blue " .
	       "and weight:2" );
add_functions( $gr[1], "$func[$whichf[1]] for x in <0,2> using color:blue " .
	       "and weight:2" );
add_functions( $gr[2], "$func[$whichf[2]] for x in <0,2> using color:blue " .
	       "and weight:2" );
add_functions( $gr[3], "$func[$whichf[3]] for x in <0,2> using color:blue " .
	       "and weight:2" );
add_functions( $gr[4], "$func[$whichf[2]] for x in <0,2> using color:blue " .
	       "and weight:2" );
add_functions( $gr[5], "$func[$whichf[3]] for x in <0,2> using color:blue " .
	       "and weight:2" );
# and add 'a' and 'b' indicators at x=0.5 and x=1.5
for( my $i=0; $i<6; $i++ ) {
    $ylab = ( $whichf[$i] > 3 ) ? -.25 : .1;
    # $gr[$i]->lb(new Label(0.5, $ylab, 'a', 'black', 'center', 'top'));
    # $gr[$i]->lb(new Label(1.5, $ylab, 'b', 'black', 'center', 'top'));
    $j = ( $whichf[$i] < 4 ) ? 'top' : 'bottom';
    $gr[$i]->lb(new Label(0.5, 0, 'a', 'black', 'center', $j));
    $gr[$i]->lb(new Label(1.5, 0, 'b', 'black', 'center', $j));
    $gr[$i]->moveTo(0.5,0);
    $gr[$i]->lineTo(0.5,$ylab,'black');
    $gr[$i]->moveTo(1.5,0);
    $gr[$i]->lineTo(1.5,$ylab,'black');
}

# figure out which method to associate with which graph
@meth = ();
$meth[0] = random(0,2,1);
$meth[1] = random(0,2,1); $meth[1] = ($meth[1]+1)%3 
    if ( $meth[1] == $meth[0] );

# ok, now get the others
$meth[2] = 0;
foreach my $i ( 2,3 ) {
    while ( $meth[$i] == $meth[0] || $meth[$i] == $meth[1] ) {
        $meth[$i]++; 
    }
    $meth[3] = $meth[2]+1 if ( $i == 2 );
}

# to the first two, we add a random integration method in pictures
# we'll ask which methods these are
@typeeq = ( new_multiple_choice(), new_multiple_choice() );
# and if they're over or under estimates
@esttype = ( new_multiple_choice(), new_multiple_choice(),
	     new_multiple_choice(), new_multiple_choice(), );
# for our solution, we save a version of the answers we can print
@ans = ();

# add the integration methods to the first two graphs and the solutions
$left = random(0,1,1);
for my $i ( 0,1,4,5 ) {
    my $mtmp = ( $i<4 ) ? $meth[$i] : $meth[$i-2];
    my $wf = ( $i<4 ) ? $whichf[$i] : $whichf[$i-2];

    if ( $mtmp == 0 || $mtmp == 1 ) {  # then plot one of left or right
        if ( $left && $i<4 ) {
	    $gr[$i]->moveTo(0.5,0);
	    $gr[$i]->lineTo( 0.5, f($wf, 0.5), 'black' );
	    $gr[$i]->lineTo( 1, f($wf, 0.5), 'black' );
	    $gr[$i]->lineTo( 1, 0, 'black' );
	    $gr[$i]->lineTo( 1, f($wf, 1), 'black' );
	    $gr[$i]->lineTo( 1.5, f($wf, 1), 'black' );
	    $gr[$i]->lineTo( 1.5, 0, 'black' );
	    if ( $i < 4 ) {
	    	$typeeq[$i]->qa("Which integration method is shown?","left rule");
	    	$typeeq[$i]->extra("right rule","midpoint rule","trapezoid rule");
	    	$esttype[$i]->qa("Is this method an over- or underestimate?",
			         ($whichf[$i] == 0 || $whichf[$i] == 2 ||
			          $whichf[$i] == 4 || $whichf[$i] == 7) ?
			          "under" : "over");
	    	$esttype[$i]->extra( ($whichf[$i] == 0 || $whichf[$i] == 2 ||
			          $whichf[$i] == 4 || $whichf[$i] == 7) ? 
				 'over' : 'under' );
		push( @ans, 'left rule' );
		push( @ans, ($whichf[$i] == 0 || $whichf[$i] == 2 ||
			          $whichf[$i] == 4 || $whichf[$i] == 7) ?
			          "under" : "over" );
	    }
 	} else {
	    $gr[$i]->moveTo(0.5,0);
	    $gr[$i]->lineTo( 0.5, f($wf, 1), 'black' );
	    $gr[$i]->lineTo( 1, f($wf, 1), 'black' );
	    $gr[$i]->lineTo( 1, 0, 'black' );
	    $gr[$i]->lineTo( 1, f($wf, 1.5), 'black' );
	    $gr[$i]->lineTo( 1.5, f($wf, 1.5), 'black' );
	    $gr[$i]->lineTo( 1.5, 0, 'black' );
	    if ( $i < 4 ) {
	    	$typeeq[$i]->qa("Which integration method is shown?","right rule");
	    	$typeeq[$i]->extra("left rule","midpoint rule","trapezoid rule");
	    	$esttype[$i]->qa("Is this method an over- or underestimate?",
			         ($whichf[$i] == 0 || $whichf[$i] == 2 ||
			          $whichf[$i] == 4 || $whichf[$i] == 7) ?
			          "over" : "under");
	    	$esttype[$i]->extra( ($whichf[$i] == 0 || $whichf[$i] == 2 ||
			          $whichf[$i] == 4 || $whichf[$i] == 7) ? 
				     'under' : 'over' );
                push(@ans, 'right rule');
		push(@ans, ($whichf[$i] == 0 || $whichf[$i] == 2 ||
			          $whichf[$i] == 4 || $whichf[$i] == 7) ? 
				     'under' : 'over' );
	    }
	}
    } elsif ( $mtmp == 2 ) {  # plot midpoint
	$gr[$i]->moveTo(0.5,0);
	$gr[$i]->lineTo(0.5, f($wf,0.75), 'black');
	$gr[$i]->lineTo(1, f($wf,0.75), 'black');
	$gr[$i]->lineTo(1, 0, 'black');
	$gr[$i]->lineTo(1, f($wf,1.25), 'black');
	$gr[$i]->lineTo(1.5, f($wf,1.25), 'black');
	$gr[$i]->lineTo(1.5, 0, 'black');
	if ( $i < 4 ) {
	    $typeeq[$i]->qa("Which integration method is shown?","midpoint rule");
	    $typeeq[$i]->extra("left rule","right rule","trapezoid rule");
	    $esttype[$i]->qa("Is this method an over- or underestimate?",
			     ($whichf[$i] == 0 || $whichf[$i] == 3 ||
			      $whichf[$i] == 4 || $whichf[$i] == 6) ?
			     "under" : "over");
	    $esttype[$i]->extra( ($whichf[$i] == 0 || $whichf[$i] == 3 ||
			      $whichf[$i] == 4 || $whichf[$i] == 6) ? 
			         'over' : 'under' );
	    push( @ans, 'midpoint rule' );
	    push( @ans, ($whichf[$i] == 0 || $whichf[$i] == 3 ||
			      $whichf[$i] == 4 || $whichf[$i] == 6) ? 
			         'over' : 'under' );
	}
    } elsif ( $mtmp == 3 ) {  # plot trap
	$gr[$i]->moveTo(0.5,0);
	$gr[$i]->lineTo(0.5, f($wf,0.5), 'black');
	$gr[$i]->lineTo(1, f($wf,1), 'black');
	$gr[$i]->lineTo(1, 0, 'black');
	$gr[$i]->moveTo(1, f($wf,1));
	$gr[$i]->lineTo(1.5, f($wf,1.5), 'black');
	$gr[$i]->lineTo(1.5, 0, 'black');
	if ( $i < 4 ) {
	    $typeeq[$i]->qa("Which integration method is shown?","trapezoid rule");
	    $typeeq[$i]->extra("left rule","right rule","right rule");
	    $esttype[$i]->qa("Is this method an over- or underestimate?",
			     ($whichf[$i] == 0 || $whichf[$i] == 3 ||
			     $whichf[$i] == 4 || $whichf[$i] == 6) ?
			     "over" : "under");
	    $esttype[$i]->extra( ($whichf[$i] == 0 || $whichf[$i] == 3 ||
			     $whichf[$i] == 4 || $whichf[$i] == 6) ? 
			         'under' : 'over' );
	    push(@ans, 'trapezoid rule');
	    push(@ans, ($whichf[$i] == 0 || $whichf[$i] == 3 ||
			     $whichf[$i] == 4 || $whichf[$i] == 6) ?
			     "over" : "under" );
	}
    }
}

# ok, almost there.  finish off the over/underestimate questions
@askmeth = ();
foreach my $i ( 2, 3 ) {
    if ( $meth[$i] == 0 || $meth[$i] == 1 ) {
	if ( $left ) {   # ask for right; we drew the left
	    push( @askmeth, "right rule" );
	    $esttype[$i]->qa("Is this method an over- or underestimate?",
			     ($whichf[$i] == 0 || $whichf[$i] == 2 ||
			      $whichf[$i] == 4 || $whichf[$i] == 7) ?
			      "over" : "under");
	    $esttype[$i]->extra( ($whichf[$i] == 0 || $whichf[$i] == 2 ||
			      $whichf[$i] == 4 || $whichf[$i] == 7) ? 
				 'under' : 'over' );
	    push( @ans, ($whichf[$i] == 0 || $whichf[$i] == 2 ||
			      $whichf[$i] == 4 || $whichf[$i] == 7) ?
			      "over" : "under" );
	} else {         # ask for left
	    push( @askmeth, "left rule" );
	    $esttype[$i]->qa("Is this method an over- or underestimate?",
			     ($whichf[$i] == 0 || $whichf[$i] == 2 ||
			      $whichf[$i] == 4 || $whichf[$i] == 7) ?
			      "under" : "over");
	    $esttype[$i]->extra( ($whichf[$i] == 0 || $whichf[$i] == 2 ||
			      $whichf[$i] == 4 || $whichf[$i] == 7) ? 
				 'over' : 'under' );
	    push( @ans, ($whichf[$i] == 0 || $whichf[$i] == 2 ||
			      $whichf[$i] == 4 || $whichf[$i] == 7) ?
			      "under" : "over" );
	}
    } elsif ( $meth[$i] == 2  ) { # ask for mid
        push( @askmeth, "midpoint rule" );
	$esttype[$i]->qa("Is this method an over- or underestimate?",
			 ($whichf[$i] == 0 || $whichf[$i] == 3 ||
			 $whichf[$i] == 4 || $whichf[$i] == 6) ?
			 "under" : "over");
	$esttype[$i]->extra( ($whichf[$i] == 0 || $whichf[$i] == 3 ||
			 $whichf[$i] == 4 || $whichf[$i] == 6) ? 
			     'over' : 'under' );
	push( @ans, ($whichf[$i] == 0 || $whichf[$i] == 3 ||
			 $whichf[$i] == 4 || $whichf[$i] == 6) ?
			 "under" : "over" );
    } elsif ( $meth[$i] == 3 ) {  # ask for trap
	push( @askmeth, "trapezoid rule" );
	$esttype[$i]->qa("Is this method an over- or underestimate?",
			 ($whichf[$i] == 0 || $whichf[$i] == 3 ||
			 $whichf[$i] == 4 || $whichf[$i] == 6) ?
			 "over" : "under");
	$esttype[$i]->extra( ($whichf[$i] == 0 || $whichf[$i] == 3 ||
			 $whichf[$i] == 4 || $whichf[$i] == 6) ? 
			     'under' : 'over' );
	push( @ans, ($whichf[$i] == 0 || $whichf[$i] == 3 ||
			 $whichf[$i] == 4 || $whichf[$i] == 6) ?
			 "over" : "under" );
    }
}

# useful function for generating points on the graphs
sub f {
    my ( $i, $x ) = @_;
    if ( $i == 0 )    { return( $x*$x + 1 ); }
    elsif ( $i == 1 ) { return( 5 - $x*$x ); }
    elsif ( $i == 2 ) { return( 5*(1 - exp(-2*$x)) ); }
    elsif ( $i == 3 ) { return( 5/((1 + $x)**3) ); }
    elsif ( $i == 4 ) { return( $x*$x - 5 ); }
    elsif ( $i == 5 ) { return( -1*$x*$x ); }
    elsif ( $i == 6 ) { return( -5*(1 - exp(-2*$x)) ); }
    elsif ( $i == 7 ) { return( -5/((1 + $x)**3) ); }
}
  
Context()->texStrings;
BEGIN_TEXT

Consider the four functions shown below.  On the first two, an
approximation for \(\int_a^b\,f(x)\,dx\) is shown.
$PAR
$BCENTER
\{ begintable(4) \}
\{ row( "${BBOLD}1.$EBOLD", image( insertGraph($gr[0]), 'tex_size'=>300 ),
	"${BBOLD}2.$EBOLD", image( insertGraph($gr[1]), 'tex_size'=>300 ) ), \}
\{ row( "${BBOLD}3.$EBOLD", image( insertGraph($gr[2]), 'tex_size'=>300 ),
	"${BBOLD}4.$EBOLD", image( insertGraph($gr[3]), 'tex_size'=>300 ) ), \}
\{ endtable() \}
$BR
${BITALIC}(Click on any graph to get a larger version.)$EITALIC
$ECENTER
$PAR
${BBOLD}1.$EBOLD
For graph number 1, 
\{ $typeeq[0]->print_q() \}
\{ $typeeq[0]->print_a() \}
$PAR
\{ $esttype[0]->print_q() \}
\{ $esttype[0]->print_a() \}

$PAR
${BBOLD}2.$EBOLD
For graph number 2,
\{ $typeeq[1]->print_q() \}
\{ $typeeq[1]->print_a() \}
$PAR
\{ $esttype[1]->print_q() \}
\{ $esttype[1]->print_a() \}

$PAR
${BBOLD}3.$EBOLD
On a copy of graph number 3, sketch an estimate with \(n=2\)
subdivisions using the $askmeth[0].
$BR
\{ $esttype[2]->print_q() \}
\{ $esttype[2]->print_a() \}

$PAR
${BBOLD}4.$EBOLD
On a copy of graph number 4, sketch an estimate with \(n=2\)
subdivisions using the $askmeth[1].
$BR
\{ $esttype[3]->print_q() \}
\{ $esttype[3]->print_a() \}

END_TEXT
Context()->normalStrings;

ANS(radio_cmp( $typeeq[0]->correct_ans() ) );
ANS(radio_cmp( $esttype[0]->correct_ans() ) );
ANS(radio_cmp( $typeeq[1]->correct_ans() ) );
ANS(radio_cmp( $esttype[1]->correct_ans() ) );
ANS(radio_cmp( $esttype[2]->correct_ans() ) );
ANS(radio_cmp( $esttype[3]->correct_ans() ) );

$a1 = $ans[0];
$a2 = $ans[1];
$a3 = $ans[2];
$a4 = $ans[3];
$a5 = $ans[4];
$a6 = $ans[5];

# SOLUTION IS WRONG; correct_ans() returns "A","B", etc.

Context()->texStrings;
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR SOLUTION $PAR

We can see by inspection or by looking at how the functions
increase/decrease or their concavity that graph 1 shows the 
$a1 and gives an 
$a2 estimate.
$PAR

Similarly, graph 2 shows the 
$a3 and gives an 
$a4 estimate.
$PAR

The graphs showing the numerical estimates for graphs 3 and 4 are
shown below.
$BR
$BCENTER
\{begintable(4)\}
\{ row( "${BBOLD}3.$EBOLD", image( insertGraph($gr[4]), 'tex_size'=>300 ),
	"${BBOLD}4.$EBOLD", image( insertGraph($gr[5]), 'tex_size'=>300 ),) \}
\{endtable()\}
$BR
${BITALIC}(Click on any graph to get a larger version.)$EITALIC
$ECENTER
$PAR
Then graph 3, showing the $askmeth[0], gives an
$a5 estimate.

$PAR
Then graph 4, showing the $askmeth[1], gives an
$a6 estimate.

END_SOLUTION
Context()->normalStrings;


COMMENT('MathObject version');
ENDDOCUMENT();
