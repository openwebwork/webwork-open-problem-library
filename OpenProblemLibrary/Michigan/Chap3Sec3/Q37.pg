# DESCRIPTION
# Problem from Calculus, single variable, Hughes-Hallett et al., 4th ed.
# WeBWorK problem written by Gavin LaRose, <glarose@umich.edu>
# ENDDESCRIPTION

## Tagged by glr 12/04/08

## Author('Gavin LaRose');
## DBsubject(Calculus - single variable)
## DBchapter(Differentiation)
## DBsection(Product rule (without trigonometric functions))
## Institution(University of Michigan)
## MLT(prodruleNoTrigGraphical)
## Level(4)
## MO(1)
## TitleText1('Calculus')
## AuthorText1('Hughes-Hallett')
## EditionText1('4')
## Section1('3.3')
## Problem1('37 39')
## TitleText2('Calculus')
## AuthorText2('Hughes-Hallett')
## EditionText2('5')
## Section2('3.3')
## Problem2('37 39')
## TitleText3('Calculus')
## AuthorText3('Hughes-Hallett')
## EditionText3('6')
## Section3('3.3')
## Problem3('37 39')
## KEYWORDS('calculus','derivative','product rule', 'quotient rule')

## Textbook tags
## HHChapter1('Short-Cuts to Differentiation')
## HHChapter2('Short-Cuts to Differentiation')


DOCUMENT();
loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"PGgraphmacros.pl",
"MathObjects.pl",
);

Context("Numeric");
Context()->strings->add( dne=>{} );

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

# the original version of this uses 
#   f(x) = -( (1/2)^5 - 2(x/2)^4 - 2.2(x/2.8)^3 + (x/2)^2 - x/2.6 - .75
#   g(x) = -(3(.8(x/1.4) + 1)^3 - 8(.8(x/1.4) + 1)^2)/2 - 2
# but it's hard to read values off these graphs.  So we substitute
# some piecewise functions instead.

# original version:
  # values of f
  # @f = ( -1.05837, -1.20922, -0.75, -0.386935, 0.327596 );
  # rounded
  # @fr = ( -1.1, -1.2, -0.75, -0.4, 0.33 );
  # values of f'
  # @fp = ( -1.26822, 0.440156, 0.384615, 0.440156, 1.03947 );
  # @frp = ( -1.25, 0.45, 0.4, 0.45, 1.05 );

  # values of g
  # @g = ( -1.91399, -1.38338, 0.5, 2.05685, 1.60787 );
  # rounded
  # @gr = ( -1.9, -1.4, 0.5, 2.05, 1.6 );
  # values of g'
  # @gp = ( -0.705539, 1.48688, 2., 0.833819, -2.01166 );
  # @grp = ( -0.71, 1.5, 2., 0.83, -2 );

  # $images = row( image( "figQ37a.gif", tex_size=>300 ), 
  #                image( "figQ37b.gif", tex_size=>300 ) );

# new version
$graphf = init_graph(-3,-3,3,3,axes=>[0,0],grid=>[6,6],size=>[250,250]);
$graphg = init_graph(-3,-3,3,3,axes=>[0,0],grid=>[6,6],size=>[250,250]);
# the functions we're using are 
@fn = ( Formula("-4*(x+3)+3"),	  Formula("2*(x+1.5)-3"),
	Formula("2(x+0.5)/3-1"), Formula("2*(x-2.5)+1") );
@gn = ( Formula("-2*(x+3)+1"),	  Formula("4*(x+1.5)/3-2"),
	Formula("-4*(x-1.5)+2") );
plot_functions(
    $graphf,
    "$fn[0] for x in <-3,-1.5> using color:blue and weight:2",
    "$fn[1] for x in <-1.5,-0.5> using color:blue and weight:2",
    "$fn[2] for x in <-0.5,2.5> using color:blue and weight:2",
    "$fn[3] for x in <2.5,3> using color:blue and weight:2",
);
plot_functions(
    $graphg,
    "$gn[0] for x in <-3,-1.5> using color:red and weight:2",
    "$gn[1] for x in <-1.5,1.5> using color:red and weight:2",
    "$gn[2] for x in <1.5,3> using color:red and weight:2",
);
$images = row( image( insertGraph($graphf), tex_size=>300, height=>250,
		      width=>250, extra_html_tags=>'alt="graph of ' .
		      'a piecewise linear function extending from ' .
		      '(-3,3) to (-1.5,-3) to (-0.5,-1) to (2.5,1) ' .
		      'to (3,2)."' ),
	       image( insertGraph($graphg), tex_size=>300, height=>250,
		      width=>250, extra_html_tags=>'alt="graph of ' .
		      'a piecewise linear function extending from ' .
		      '(-3,1) to (-1.5,-2) to (1.5,2) to (2.75,-3)."' ) );

sub f { 
    my $x = shift();
    if ( $x < -1.5 )	{ return( $fn[0]->eval(x=>$x) ); }
    elsif ( $x < -0.5 )	{ return( $fn[1]->eval(x=>$x) ); }
    elsif ( $x < 2.5 )	{ return( $fn[2]->eval(x=>$x) ); }
    else		{ return( $fn[3]->eval(x=>$x) ); }
}
sub fp {
    my $x = shift();
    if ( $x < -1.5 )	{ return( $fn[0]->D->eval(x=>$x) ); }
    elsif ( $x < -0.5 )	{ return( $fn[1]->D->eval(x=>$x) ); }
    elsif ( $x < 2.5 )	{ return( $fn[2]->D->eval(x=>$x) ); }
    else		{ return( $fn[3]->D->eval(x=>$x) ); }
}
sub g { 
    my $x = shift();
    if ( $x < -1.5 )	{ return( $gn[0]->eval(x=>$x) ); }
    elsif ( $x < 1.5 )	{ return( $gn[1]->eval(x=>$x) ); }
    else		{ return( $gn[2]->eval(x=>$x) ); }
}
sub gp {
    my $x = shift();
    if ( $x < -1.5 )	{ return( $gn[0]->D->eval(x=>$x) ); }
    elsif ( $x < 1.5 )	{ return( $gn[1]->D->eval(x=>$x) ); }
    else		{ return( $gn[2]->D->eval(x=>$x) ); }
}

$x0 = random(-2,2,1);
$x1 = random(-2,2,1);
while ( abs($x1 - $x0) < 2 || g($x1) == 0 ) { $x1 = random(-2,2,1); }

@q = ( "\( h'($x0) = \)" . ans_rule(35),
       "\( k'($x1) = \)" . ans_rule(35) );

Context()->texStrings;
BEGIN_TEXT

Let \( h(x)=f(x)\cdot g(x) \),
and \( k(x)=f(x)/g(x) \).  
Use the figures below to find the ${BBOLD}exact$EBOLD values of the indicated derivatives.
$PAR
$BCENTER
\{ begintable(2) \}
$images
\{ row( "\( f(x) \)", "\( g(x) \)" ) \}
\{ endtable() \}
$ECENTER
$PAR

\{ OL( @q ) \}
$BR
${BITALIC}(Enter ${BBOLD}dne$EBOLD for any answer where the
derivative does not exist.)$EITALIC

END_TEXT
Context()->normalStrings;

# old version
  # $i0 = $x0 + 2;
  # $i1 = $x1 + 2;
  # $ans = (($fp[$i1])*($g[$i1])-($f[$i1])*($gp[$i1]))/(($g[$i1])*($g[$i1]));

  # ANS( num_cmp( "$f[$i0]*$gp[$i0] + $fp[$i0]*$g[$i0]", 'tol' => 0.3 ) );
  # this doesn't work if we use 'tol'=>0.3, but does if we leave it out
  # ANS( num_cmp( "(($fp[$i1])*($g[$i1])-($f[$i1])*($gp[$i1]))/(($g[$i1])^2)"),
  # this works in either case
  # ANS( num_cmp( "$ans", 
  #                'tol' => 0.3 ) );

  # $hpx0 = round(100*($f[$i0]*$gp[$i0] + $fp[$i0]*$g[$i0]))/100;
  # $kpx1 = round(100*(($fp[$i1]*$g[$i1]-$f[$i1]*$gp[$i1])/($g[$i1])**2))/100;

# new version
$f0 = f($x0);  $fp0 = fp($x0);  $g0 = g($x0);  $gp0 = gp($x0);
$f1 = f($x1);  $fp1 = fp($x1);  $g1 = g($x1);  $gp1 = gp($x1);

$f0r = round(1000*$f0)/1000;    $sf0 = ( $f0r eq $f0 ) ? '=' : '\approx';
$fp0r = round(1000*$fp0)/1000;  $sfp0 = ( $fp0r eq $fp0 ) ? '=' : '\approx';
$f1r = round(1000*$f1)/1000;    $sf1 = ( $f1r eq $f1 ) ? '=' : '\approx';
$fp1r = round(1000*$fp1)/1000;  $sfp1 = ( $fp1r eq $fp1 ) ? '=' : '\approx';
$g0r = round(1000*$g0)/1000;    $sg0 = ( $g0r eq $g0 ) ? '=' : '\approx';
$gp0r = round(1000*$gp0)/1000;  $sgp0 = ( $gp0r eq $gp0 ) ? '=' : '\approx';
$g1r = round(1000*$g1)/1000;    $sg1 = ( $g1r eq $g1 ) ? '=' : '\approx';
$gp1r = round(1000*$gp1)/1000;  $sgp1 = ( $gp1r eq $gp1 ) ? '=' : '\approx';


$ans0 = "$fp0*$g0 + $f0*$gp0";
$ans0n = $fp0*$g0 + $f0*$gp0;
$ans0nr = round(($fp0*$g0 + $f0*$gp0)*1000)/1000;
$ans1 = "($fp1*$g1 - $f1*$gp1)/(($g1)^2)";
$ans1n = ($fp1*$g1 - $f1*$gp1)/(($g1)*($g1));
$ans1nr = round(1000*(($fp1*$g1 - $f1*$gp1)/(($g1)*($g1))))/1000;

# $ans1 = 1;
# $ans1n = 1;
# $ans1nr = 1;
# TEXT("f0,f1,fp0,fp1,g0,g1,gp0,gp1 = $f0,$f1,$fp0,$fp1,$g0,$g1,$gp0,$gp1");

$s0 = (( $ans0n eq $ans0nr ) ? '=' : '\approx');
$s1 = (( $ans1n eq $ans1nr ) ? '=' : '\approx');

ANS( Compute($ans0)->cmp() );
ANS( Compute($ans1)->cmp() );

Context()->texStrings;

Context()->texStrings;
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR SOLUTION $PAR

${BBOLD}A.$EBOLD
From the graphs, we find \( f($x0) $sf0 $f0r \), 
\( f'($x0) $sfp0  $fp0r \),
\( g($x0) $sg0 $g0r \), and \( g'($x0) $sgp0 $gp0r \).  
By the product rule,
\[
h'($x0) = f'($x0)\cdot g($x0) + f($x0)\cdot g'($x0) $s0 $ans0nr.
 \]

$PAR
${BBOLD}B.$EBOLD
Similarly, from the graphs, we find \( f($x1) $sf1 $f1r \), 
\( f'($x1) $sfp1 $fp1r \),
\( g($x1) $sg1 $g1r \), and \( g'($x1) $sgp1 $gp1r \).  
By the quotient rule,
\[
k'($x1) = \frac{f'($x1)\cdot g($x1)-f($x1)\cdot g'($x1)}{(g($x1))^2} $s1
$ans1nr
 \]

END_SOLUTION
Context()->normalStrings;

COMMENT('MathObject version');

ENDDOCUMENT();
