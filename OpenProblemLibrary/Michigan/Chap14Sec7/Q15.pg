# DESCRIPTION
# Problem from Calculus, multi-variable, Hughes-Hallett et al.,
# originally from 5ed (with updates)
# WeBWorK problem written by Gavin LaRose, <glarose@umich.edu>
# ENDDESCRIPTION

## Tagged by glr 01/11/10


## DBsubject(Calculus - multivariable)
## DBchapter(Differentiation of multivariable functions)
## DBsection(Partial derivatives)
## Institution(University of Michigan)
## Author(Gavin LaRose)
## MLT(2varTaylor)
## MLTleader(1)
## Level(2)
## MO(1)
## TitleText1('Calculus')
## AuthorText1('Hughes-Hallett')
## EditionText1('5')
## Section1('14.7')
## Problem1('15')
## TitleText2('Calculus')
## AuthorText2('Hughes-Hallett')
## EditionText2('6')
## Section2('14.7')
## Problem2('15')
## KEYWORDS('chain rule', 'multivariable', 'functions', 'calculus', 'derivatives', 'second derivative')

## Textbook tags
## HHChapter1('Differentiating Functions of Several Variables')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
# "parserNumberWithUnits.pl",
# "parserFormulaWithUnits.pl", 
# "parserFormulaUpToConstant.pl",
# "PGcourse.pl",
);

Context("Numeric");
Context()->variables->add( y=>'Real' );
$showPartialCorrectAnswers = 1;

$whichfunc = random(0,4,1);
$a = random(1,5,1);
$asq = $a*$a;
if ( $whichfunc == 1 ) {
    $func = Compute( "e^x*cos($a*y)" )->reduce();
    $funcx = Compute( "e^x" );
    $funcy = Compute( "cos($a*y)" )->reduce();
    $taylorx = Compute( "1 + x + x^2/2" );
    $taylory = Compute( "1 - ($a*y)^2/2" )->reduce();
    $fx = $func;    $fy = Compute( "-$a*e^x*sin($a*x)" );
    $fxx = $func;   $fyy = Compute( "-$asq*$func" );
    $fxy = Compute( "-$a*e^x*sin($a*y)" );
} elsif ( $whichfunc == 2 ) {
    $func = Compute( "e^x*sin($a*y)" )->reduce();
    $funcx = Compute( "e^x" );
    $funcy = Compute( "sin($a*y)" )->reduce();
    $taylorx = Compute( "1 + x + x^2/2" );
    $taylory = Compute( "$a*y" )->reduce();
    $fx = $func;    $fy = Compute( "$a*e^x*cos($a*x)" );
    $fxx = $func;   $fyy = Compute( "-$asq*$func" );
    $fxy = Compute( "$a*e^x*cos($a*y)" );
} elsif ( $whichfunc == 3 ) {
    $func = Compute( "e^y*cos($a*x)" )->reduce();
    $funcx = Compute( "e^x" );
    $funcy = Compute( "cos($a*y)" )->reduce();
    $taylorx = Compute( "1 + x + x^2/2" );
    $taylory = Compute( "1 - ($a*y)^2/2" )->reduce();
    $fy = $func;    $fx = Compute( "-$a*e^y*sin($a*x)" );
    $fyy = $func;   $fxx = Compute( "-$asq*$func" );
    $fxy = Compute( "-$a*e^y*sin($a*x)" );
} else {
    $func = Compute( "e^y*sin($a*x)" )->reduce();
    $funcx = Compute( "sin($a*x)" )->reduce();
    $funcy = Compute( "e^y" );
    $taylorx = Compute( "$a*x" )->reduce();
    $taylory = Compute( "1 + y + y^2/2" );
    $fy = $func;    $fx = Compute( "$a*e^y*cos($a*x)" );
    $fyy = $func;   $fxx = Compute( "-$asq*$func" );
    $fxy = Compute( "$a*e^y*cos($a*x)" );
}

$f0 = $func->eval( x=>0, y=>0 );
$fx0 = $fx->eval( x=>0, y=>0 );
$fy0 = $fy->eval( x=>0, y=>0 );
$fxx0 = $fxx->eval( x=>0, y=>0 );
$fyy0 = $fyy->eval( x=>0, y=>0 );
$fxy0 = $fxy->eval( x=>0, y=>0 );

$taylor = Compute( "$f0 + $fx0*(x) + $fy0*(y) + ($fxx0/2)*(x^2) + " .
                   "($fxy0)*(x)*(y) + ($fyy0/2)*(y^2)" )->reduce();

Context()->texStrings;
TEXT(beginproblem());
BEGIN_TEXT

Find the quadratic Taylor polynomial \(Q(x,y)\) approximating
\[ f(x,y) = $func \]
about \( (0,0) \).

$PAR
\(Q(x,y) = \) \{ ans_rule(65) \}

END_TEXT
Context()->normalStrings;

ANS($taylor->cmp() );

Context()->texStrings;
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR SOLUTION $PAR

The quadratic Taylor expansion about (0,0) is given by
\[
  f(x,y) \approx Q(x,y) = f(0,0) + f_x(0,0)x + f_y(0,0)y +
    \frac12 f_{xx}(0,0)x^2
\]
\[ + f_{xy}(0,0)xy + \frac12 f_{yy}(0,0)y^2.
\]
First we find all the relevant derivatives.
\( f(x,y) = $func\), so
\[ f_x(x,y) = $fx\qquad\mbox{and}\qquad f_y(x,y) = $fy, \]
and
\[ f_{xx}(x,y) = $fxx,
f_{yy}(x,y) = $fyy, \]
and
\[ f_{xy}(x,y) = $fxy. \]

Now we evaluate each of these derivatives at (0,0) and substitute into
the formula to get  as our final answer:

\[ Q(x,y) = $taylor. \]

Notice this is the same as what you get if you multiply the quadratic
approximations for \($funcx\) and \($funcy\), getting
\(($taylorx)($taylory)\), and then keep only the
terms of degree 2 or less.

END_SOLUTION
Context()->normalStrings;


;
ENDDOCUMENT();
