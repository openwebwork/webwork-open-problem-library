# DESCRIPTION
# Problem from Calculus, single variable, Hughes-Hallett et al., 4th ed.
# WeBWorK problem written by Gavin LaRose, <glarose@umich.edu>
# ENDDESCRIPTION

## Tagged by glr 10/21/08

## Author('Gavin LaRose');
## DBsubject(Algebra)
## DBchapter(Exponential and logarithmic expressions and functions)
## DBsection(Applications and models - general)
## Institution(University of Michigan)
## MLT(PercentGrowthDecay)
## Level(3)
## MO(1)
## TitleText1('Calculus')
## AuthorText1('Hughes-Hallett')
## EditionText1('4')
## Section1('1.2')
## Problem1('13')
## TitleText2('Calculus')
## AuthorText2('Hughes-Hallett')
## EditionText2('5')
## Section2('1.2')
## Problem2('19')
## TitleText3('Calculus')
## AuthorText3('Hughes-Hallett')
## EditionText3('6')
## Section3('1.2')
## Problem3('25')
## TitleText4('Applied Calculus')
## AuthorText4('Hughes-Hallett')
## EditionText4('4')
## Section4('1.5')
## Problem4('29')
## KEYWORDS('calculus','function', 'exponential function', 'exponentials')

## Textbook tags
## HHChapter1('A Library of Functions')
## HHChapter2('A Library of Functions')


DOCUMENT();
loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"MathObjects.pl",
);

Context("Numeric");

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

$red = random(65,85,5);
$sm = random(5,20,5);

Context()->texStrings;
BEGIN_TEXT

Suppose that a photocopy machine can reduce copies to $red percent of their
original size.  By copying an already reduced copy, further reductions
can be made.
$PAR
${BBOLD}1.$EBOLD
If a page is reduced to $red percent, what percent enlargement is needed to
return it to its original size?
$BR
answer = \{ans_rule(35)\} percent

$PAR
${BBOLD}2.$EBOLD
Estimate the number of times in succession that a page must be
copied to make the final copy less than $sm percent of the size of the
original.
$BR
number of times = \{ans_rule(35)\}

END_TEXT
Context()->normalStrings;

$n_lower = int(log($sm/100)/log($red/100));
$n_upper = $n_lower+1;

ANS( Compute("100*(100/$red)")->with(tolType=>'absolute', 
				     tolerance=>'.51')->cmp() );
ANS( Compute("$n_upper")->with(tolType=>'absolute', tolerance=>'.51')->cmp() );

$red_dec = $red/100;
$enl_dec = round(100000/$red)/1000;
$enl = 100*$enl_dec;
$sm_dec = $sm/100;
$shrink1 = round(10000*$red_dec**($n_lower))/10000;
$shrink2 = round(10000*$red_dec**($n_upper))/10000;

Context()->texStrings;
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR SOLUTION $PAR

${BBOLD}1.$EBOLD
We have
\[
\hbox{Reduced size }=($red_dec)\cdot\hbox{ Original size}
\]
or
\[
\hbox{ Original size}=\frac1{($red_dec)}\hbox{ Reduced size } =
($enl_dec)\hbox{ Reduced size,}
\]
so the copy must be enlarged by a factor of $enl_dec, which means it is
enlarged to $enl percent of the reduced size.

$PAR
${BBOLD}2.$EBOLD
If a page is copied \(n\) times, then
\[ \hbox{New size }=($red_dec)^n\cdot\hbox{ Original.} \]
We want to solve for \(n\) so that
\( ($red_dec)^n = $sm_dec. \)
By trial and error, we find 
\( ($red_dec)^{$n_lower} = $shrink1 \) and 
\( ($red_dec)^{$n_upper} = $shrink2\).  So
the page needs to be copied $n_upper times.

END_SOLUTION
Context()->normalStrings;

COMMENT('MathObject version.pl');

ENDDOCUMENT();
