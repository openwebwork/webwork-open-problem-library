# DESCRIPTION
# Problem from Calculus, single variable, Hughes-Hallett et al., 4th ed.
# WeBWorK problem written by Gavin LaRose, <glarose@umich.edu>
# ENDDESCRIPTION

## Tagged by glr 02/12/09

## DBsubject(Calculus - single variable)
## DBchapter(Techniques of integration)
## DBsection(Approximation)
## Institution(University of Michigan)
## Author(Gavin LaRose)
## Level(3)
## MO(1)
## TitleText1('Calculus')
## AuthorText1('Hughes-Hallett')
## EditionText1('4')
## Section1('7.6')
## Problem1('5')
## TitleText2('Calculus')
## AuthorText2('Hughes-Hallett')
## EditionText2('5')
## Section2('7.6')
## Problem2('5')
## KEYWORDS('calculus', 'integral', 'approximation', 'definite integrals', 'simpson', 'errors')

## Textbook tags
## HHChapter1('Integration')
## HHChapter2('Integration')


DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGchoicemacros.pl",
"parserMultiAnswer.pl",
# "PGcourse.pl",
);

Context("Numeric");
Context()->flags->set( tolerance=>.01 );
$showPartialCorrectAnswers = 1;

$a = random(3,6,1);
$h = $a/2;
$d = $a/4;
$f = $a/8;

$actual = Compute("e^$a - 1");
$actualN = exp($a) - 1;

# find the approximations with two and four steps
@approx2 = ( Compute("$h*(1 + e^($h))"), Compute("$h*(e^($h) + e^($a))"),
	     Compute("($d)*(1 + 2*e^($h) + e^($a))"),
	     Compute("$h*(e^($d) + e^(3*$d))") );

# find simpson separately
$simp2 = Compute("(2*($approx2[3]) + ($approx2[2]))/3")->with(tolerance=>.01);

@approx4 = ( Compute("$d*(1 + e^($d) + e^($h) + e^(3*$d))"),
	     Compute("$d*(e^($d) + e^($h) + e^(3*$d) + e^($a))"),
	     Compute("($f)*(1 + 2*e^($d) + 2*e^($h) + 2*e^(3*$d) + e^($a))"),
	     Compute("$d*(e^($f) + e^(3*$f) + e^(5*$f) + e^(7*$f))") );
$simp4 = Compute("(2*($approx4[3]) + ($approx4[2]))/3")->with(tolerance=>.01);

# to find error, the corresponding numerical values are
# @approx2 = ( $h*(1 + exp($h)), $h*(exp($h) + exp($a)),
# 	     ($d)*(1 + 2*exp($h) + exp($a)),
# 	     $h*(exp($d) + exp(3*$d)) );

# @approx4 = ( $d*(1 + exp($d) + exp($h) + exp(3*$d)),
# 	     $d*(exp($d) + exp($h) + exp(3*$d) + exp($a)),
# 	     ($f)*(1 + 2*exp($d) + 2*exp($h) + 2*exp(3*$d) + exp($a)),
# 	     $d*(exp($f) + exp(3*$f) + exp(5*$f) + exp(7*$f)) );

# then the errors are 
@error2 = ( Compute("($actual) - ($approx2[0])")->with(tolerance=>.01),
	    Compute("($actual) - ($approx2[1])")->with(tolerance=>.01),
	    Compute("($actual) - ($approx2[2])")->with(tolerance=>.01),
	    Compute("($actual) - ($approx2[3])")->with(tolerance=>.01) );
@error4 = ( Compute("($actual) - ($approx4[0])")->with(tolerance=>.01),
	    Compute("($actual) - ($approx4[1])")->with(tolerance=>.01),
	    Compute("($actual) - ($approx4[2])")->with(tolerance=>.01),
	    Compute("($actual) - ($approx4[3])")->with(tolerance=>.01) );

$serr2 = Compute( "($actual) - ($simp2)" )->with( tolerance=>.01 );
$serr4 = Compute( "($actual) - ($simp4)" )->with( tolerance=>.01 );

# and the ratios are
@errorRatios = ( Compute("$error2[0]/$error4[0]")->with(tolerance=>.01),
		 Compute("$error2[1]/$error4[1]")->with(tolerance=>.01),
		 Compute("$error2[2]/$error4[2]")->with(tolerance=>.01),
		 Compute("$error2[3]/$error4[3]")->with(tolerance=>.01) );

$sratio = Compute( "($serr2)/($serr4)" )->with( tolerance=>.01 );

## we use a big multianswer evaluator to keep track of all of the pieces
##    that are interrelated
$allAns = MultiAnswer( $actual, @approx2, $simp2, @error2, $serr2,
		       @approx4, $simp4, @error4, $serr4, @errorRatios,
		       $sratio )->with(
    singleAnswer => 0,
    checker => sub {
	my ( $corref, $sturef, $self ) = @_;
	my @cor = @{$corref};  my @stu = @{$sturef};

	my @ret = (0)x26;

	$ret[0] = 1 if ( $stu[0] == $cor[0] );

	## these are the actual answer and the numerical approximations,
	##    which we can check verbatim
	foreach my $i ( 1, 2, 3, 4, 5, 11, 12, 13, 14, 15 ) {
	    $ret[$i] = 1 if ( $cor[$i] == $stu[$i] );
	}

	## then for the errors, check to be sure that the student has
	##    the correct calculated value
	foreach my $i ( 6, 7, 8, 9, 10, 16, 17, 18, 19, 20 ) {
	    $stest = Compute($stu[$i])->with(tolerance=>.05);
	    $ctest = Compute($cor[$i])->with(tolerance=>.05);

	    if ( $ctest == $stu[$i] ) {
		$ret[$i] = 1;
	    } elsif ( $stest == $stu[0] - $stu[$i-5] ) {
		$ret[$i] = 1;
		$self->setMessage( ($i+1), "Your error calculation is " .
				   "correct, but one or both of your " .
				   "approximation or exact value(s) " .
				   "is (are) incorrect." );
	    }
	}
#	warn( "i = $i; stu = " . join(", ", @stu) );

	## and for the ratios, we just check the values for the
	##    student's ratios
	foreach my $i ( 21, 22, 23, 24, 25 ) {
	    $stest = Compute($stu[$i])->with(tolerance=>.05);
	    $ctest = Compute($cor[$i])->with(tolerance=>.05);

	    if ( $ctest == $stu[$i] ) {
		$ret[$i] = 1;

	    } elsif ( $stest == $stu[$i-15]/$stu[$i-5] ) {
		$ret[$i] = 1;
		$self->setMessage( ($i+1), "Your ratio calculation is " .
				   "correct, but one or both of your " .
				   "error value(s) is (are) incorrect." );
	    }
	}

#	warn( "stu = " . join(", ", @stu) );
	return [@ret];
    }
);

TEXT(beginproblem());
Context()->texStrings;
BEGIN_TEXT

${BITALIC}${BBOLD}Note: for this problem, because later answers depend
on earlier ones, you must enter answers for all answer blanks for the
problem to be correctly graded.  If you would like to get feedback
before you completed all computations, enter a "1" for each answer
you did not yet compute and then submit the problem.  (But note that
this will, obviously, result in a problem submission.)$EBOLD$EITALIC

$PAR

${BBOLD}(a)$EBOLD
What is the exact value of \( \int_{0}^{$a}\,e^x\,dx \)?
$BR
\( \int_{0}^{$a}\,e^x\,dx = \) \{ $allAns->ans_rule(10) \}

$PAR
${BBOLD}(b)$EBOLD
$BR
Find LEFT(2), RIGHT(2), TRAP(2), MID(2), and SIMP(2); compute the
error for each.
$BCENTER
\{ begintable(6) \}
\{ row( "", "LEFT(2)", "RIGHT(2)", "TRAP(2)", "MID(2)", "SIMP(2)" ) \}
\{ row( "value", $allAns->ans_rule(10), $allAns->ans_rule(10),
	$allAns->ans_rule(10), $allAns->ans_rule(10),
        $allAns->ans_rule(10) ) \}
\{ row( "error", 
	$allAns->ans_rule(10), $allAns->ans_rule(10), 
	$allAns->ans_rule(10), $allAns->ans_rule(10),
        $allAns->ans_rule(10) ) \}
\{ endtable() \}
$ECENTER

$PAR
${BBOLD}(c)$EBOLD
$BR
Repeat part (b) with \( n=4 \) (instead of \( n=2 \)).
$BCENTER
\{ begintable(6) \}
\{ row( "", "LEFT(4)", "RIGHT(4)", "TRAP(4)", "MID(4)", "SIMP(4)" ) \}
\{ row( "value", $allAns->ans_rule(10), $allAns->ans_rule(10),
	$allAns->ans_rule(10), $allAns->ans_rule(10),
        $allAns->ans_rule(10) ) \}
\{ row( "error", 
	$allAns->ans_rule(10), $allAns->ans_rule(10),
	$allAns->ans_rule(10), $allAns->ans_rule(10),
        $allAns->ans_rule(10) ) \}
\{ endtable() \}
$ECENTER

$PAR
${BBOLD}(d)$EBOLD
$BR
For each rule in part (b), as \( n \) goes from \( n=2 \) to \( n=4 \), 
does the error go down approximately as you would expect?  Explain by
calculating the ratios of the errors:
$BR
Error LEFT(2)/Error LEFT(4) =   \{ $allAns->ans_rule(10) \} $BR
Error RIGHT(2)/Error RIGHT(4) = \{ $allAns->ans_rule(10) \} $BR
Error TRAP(2)/Error TRAP(4) =   \{ $allAns->ans_rule(10) \} $BR
Error MID(2)/Error MID(4) =     \{ $allAns->ans_rule(10) \} $BR
Error SIMP(2)/Error SIMP(4) =   \{ $allAns->ans_rule(10) \}
$BR
${BITALIC}(Be sure that you can explain in words why these do (or
don't) make sense.)$EITALIC


END_TEXT
Context()->normalStrings;

ANS( $allAns->cmp() );

$anapprox = round(10000*$actualN)/10000;
@app2r = ();   @err2r = ();
@app4r = ();   @err4r = ();
foreach ( @approx2 ) { push( @app2r, round(10000*$_)/10000 ); }
foreach ( @error2 ) { push( @err2r, round(10000*$_)/10000 ); }
foreach ( @approx4 ) { push( @app4r, round(10000*$_)/10000 ); }
foreach ( @error4 ) { push( @err4r, round(10000*$_)/10000 ); }

Context()->texStrings;
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR SOLUTION $PAR

${BBOLD}(a)$EBOLD
\( \int_{0}^{$a}\,e^x\,dx = e^x\bigg|_{0}^{$a} = e^$a - e^0 
  \approx $anapprox\ldots\)

$PAR
${BBOLD}(b)$EBOLD
Computing the sums directly, since \(\Delta x=$h\), we have
$BR
LEFT(2) \( = $h\cdot e^0 + $h\cdot e^{$h} \approx $app2r[0] \) $BR
RIGHT(2) \( = $h\cdot e^{$h} + $h\cdot e^{$a} \approx $app2r[1] \) $BR
TRAP(2) \( = \frac 1 2 ( $app2r[0] + $app2r[1] ) \approx $app2r[2] \) $BR
MID(2) \( = $h\cdot e^{$d} + $h\cdot e^{3\cdot $d} \approx $app2r[3] \) $BR
and
SIMP(2) = (2 MID(2) + TRAP(2))/3 \( \approx $simp2 \).
$BR
And the errors are just the actual value minus the approximate values,
or
$BR
error(LEFT(2)) = $err2r[0]; error(RIGHT(2)) = $err2r[1];
error(TRAP(2)) = $err2r[2]; error(MID(2)) = $err2r[3];
and error(SIMP(2)) = $serr2.

$PAR
${BBOLD}(c)$EBOLD
Similarly, since \(\Delta x = $f\), we have
$BR
LEFT(4) = $app4r[0]; error = $err4r[0] $BR
RIGHT(4) = $app4r[1]; error = $err4r[1] $BR
TRAP(4) = $app4r[2]; error = $err4r[2] $BR
MID(4) = $app4r[3]; error = $err4r[3] $BR
SIMP(4) = $simp4; error = $serr4.

$PAR
${BBOLD}(d)$EBOLD
For LEFT and RIGHT, we expect the error to go down by 1/2, and this
is very roughly what we see.  For MID and TRAP, we expect the error to
go down by 1/4, and this is approximately what we see.  For SIMP, we
expect the error to go down by 1/16, again as observed.

END_SOLUTION
Context()->normalStrings;

COMMENT('MathObject version');

ENDDOCUMENT();
