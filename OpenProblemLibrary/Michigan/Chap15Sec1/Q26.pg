# DESCRIPTION
# Problem from Calculus, multi-variable, Hughes-Hallett et al.,
# originally from 5ed (with updates)
# WeBWorK problem written by Gavin LaRose, <glarose@umich.edu>
# ENDDESCRIPTION

## Tagged by glr 01/11/10


## DBsubject(Calculus - multivariable)
## DBchapter(Differentiation of multivariable functions)
## DBsection(Extreme values and optimization)
## Institution(University of Michigan)
## Author(Gavin LaRose)
## MLT(ListCritPtsAndClassify)
## Level(4)
## MO(1)
## TitleText1('Calculus')
## AuthorText1('Hughes-Hallett')
## EditionText1('5')
## Section1('15.1')
## Problem1('27')
## TitleText2('Calculus')
## AuthorText2('Hughes-Hallett')
## EditionText2('6')
## Section2('15.1')
## Problem2('31')
## KEYWORDS('extrema', 'multivariable', 'functions', 'calculus', 'derivatives')

## Textbook tags
## HHChapter1('Optimization: Local and Global Extrema')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"parserMultiAnswer.pl",
# "parserNumberWithUnits.pl",
# "parserFormulaWithUnits.pl", 
# "parserFormulaUpToConstant.pl",
# "PGcourse.pl",
);

Context("Point");
Context()->constants->add( m=>6, n=>7, k=>3.55612 );
Context()->flags->set( formatStudentAnswer=>'parsed',
		       formatCorrectAnswer=>'parsed' );
Context()->strings->add( maximum=>{}, minimum=>{}, 'saddle point'=>{},
			 none=>{} );

$showPartialCorrectAnswers = 1;

$whichf = random(0,3,1);
$a = random( 2,5,1 );
$b = random( 1,3,1 );
$asq  = $a*$a;
$twob = 2*$b;
$whichf = 3;
if ( $whichf == 0 ) {
    $func = Compute( "1 - cos($a*x) - $b*y^2" )->reduce();
    $fx = "$a \sin($a x)";
    $fy = "-$twob y";
    $fxx = "$asq \cos($a x)";
    $fyy = "-$twob";
    $fxy = "0";

    $sol1 = "x = n\pi/$a";
    $sol1note = " (where \(n\) is any integer)";
    $sol2 = "y = 0";
    $sol2note = "";

    $critPts  = List( Point("(0,0)"), Point("(m*pi/$a,0)"),
		   Point("(n*pi/$a,0)") );
    @ptsd = ( "(0,0)", "(\frac{m\pi}{$a}, 0)", "(\frac{n\pi}{$a}, 0)" );
    $classify = List( String("saddle point"), String("saddle point"), 
		      String("maximum") );

    $dzero = "D < 0";
    $dzeronote = "";
    $done  = "D < 0";
    $donenote = "";
    $dtwo  = "D > 0";
    $dtwonote = " and \(f_{xx} < 0\)";

} elsif ( $whichf == 1 ) {
    $func = Compute( "1 - cos($a*x) + $b*y^2" )->reduce();
    $fx = "$a \sin($a x)";
    $fy = "$twob y";
    $fxx = "$asq \cos($a x)";
    $fyy = "$twob";
    $fxy = "0";

    $sol1 = "x = n\pi/$a";
    $sol1note = " (where \(n\) is any integer)";
    $sol2 = "y = 0";
    $sol2note = "";

    $critPts  = List( Point("(0,0)"), Point("(m*pi/$a,0)"),
		   Point("(n*pi/$a,0)") );
    @ptsd = ( "(0,0)", "(\frac{m\pi}{$a}, 0)", "(\frac{n\pi}{$a}, 0)" );
    $classify = List( String("minimum"), String("minimum"),
		      String("saddle point") );

    $dzero = "D > 0";
    $dzeronote = " and \(f_{xx} > 0\)";
    $done  = "D > 0";
    $donenote = " and \(f_{xx} > 0\)";
    $dtwo  = "D < 0";
    $dtwonote = "";

} elsif ( $whichf == 2 ) {
    $func = Compute( "1 - $b*x^2 - cos($a*y)" )->reduce();
    $fx = "-$twob x";
    $fy = "$a\sin($a y)";
    $fxx = "-$twob";
    $fyy = "$asq \cos($a y)";
    $fxy = "0";

    $sol1 = "x = 0";
    $sol1note = "";
    $sol2 = "y = n\pi/$a";
    $sol2note = " (where \(n\) is any integer)";

    $critPts  = List( Point("(0,0)"), Point("(0,m*pi/$a)"),
		   Point("(0,n*pi/$a)") );
    @ptsd = ( "(0,0)", "(0,\frac{m\pi}{$a})", "(0,\frac{n\pi}{$a})" );
    $classify = List( String("saddle point"), String("saddle point"),
		      String("maximum") );

    $dzero = "D < 0";
    $dzeronote = "";
    $done  = "D < 0";
    $donenote = "";
    $dtwo  = "D > 0";
    $dtwonote = " and \(f_{xx} < 0\)";

} else {
    $func = Compute( "1 + $b*x^2 - cos($a*y)" )->reduce();
    $fx = "$twob x";
    $fy = "$a\sin($a y)";
    $fxx = "$twob";
    $fyy = "$asq \cos($a y)";
    $fxy = "0";

    $sol1 = "x = 0";
    $sol1note = "";
    $sol2 = "y = n\pi/$a";
    $sol2note = " (where \(n\) is any integer)";

    $critPts  = List( Point("(0,0)"), Point("(0,m*pi/$a)"),
		   Point("(0,n*pi/$a)") );
    @ptsd = ( "(0,0)", "(0,\frac{m\pi}{$a})", "(0,\frac{n\pi}{$a})" );
    $classify = List( String("minimum"), String("minimum"),
		      String("saddle point") );

    $dzero = "D > 0";
    $dzeronote = " and \(f_{xx} > 0\)";
    $done  = "D > 0";
    $donenote = " and \(f_{xx} > 0\)";
    $dtwo  = "D < 0";
    $dtwonote = "";
}

$anschek = MultiAnswer( $critPts, $classify )->with(
    singleResult => 0,
    allowBlankAnswers => 1,
    checkTypes => 0,
    checker => sub {
	my ( $cor, $stu, $self ) = @_;
	my ($corList, $corClass) = @$cor;
	my ($stuList, $stuClass) = @$stu;
	$stuList = List( $stuList ) if ( ref( $stuList ) ne 'Value::List' );
	$stuClass = List( $stuClass ) if ( ref( $stuClass ) ne 'Value::List' );

	## now $corList and $stuList should be lists of points,
	##    and the class veriables lists of strings
	my @corPts = $corList->value;
	my @stuPts = $stuList->value;
	my @corStr = $corClass->value;
	my @stuStr = $stuClass->value;

	if ( @corPts != @stuPts ) {
	    $self->setMessage( 1, "You have given too " .
			       ((@corPts > @stuPts) ? "few " : "many ") .
			       "points." );
	}

	my @ret = ( 0, 0 );
	my $numpts = ( @corPts > @stuPts ) ? @corPts : @stuPts;
	my $retInc = 1/$numpts;

	my $i = 0; my $j = 0;
	my %matched = ();
	foreach my $cpt ( @corPts ) {
	    $j = 0;
	    foreach my $spt ( @stuPts ) {
		$matched{$j} = 0 if ( ! defined( $matched{$j} ) );
		if ( $matched{$j} ) {
		    $j++;
		    next;
		}

		if ( ref($cpt) eq ref($spt) && $cpt == $spt  ) {
		    $ret[0] += $retInc;
		    $matched{$j} = 1;

		    if ( $j < @stuStr ) {
			if ( ref($corStr[$i]) eq ref($stuStr[$j]) &&
			     $corStr[$i] == $stuStr[$j] ) {
			    $ret[1] += $retInc;
			}
		    }
		}
		$j++;
	    }
	    $i++;
	}
	$ret[0] = sprintf("%.2f", $ret[0]);
	$ret[1] = sprintf("%.2f", $ret[1]);
	return [ @ret ];
    } );

Context()->texStrings;
TEXT(beginproblem());
BEGIN_TEXT

Let
\[ f(x,y) = $func. \]
Find all critical points and classify them as
local maxima, local minima, saddle points, or none of these.

$PAR
critical points: \{ $anschek->ans_rule(55) \}
$BR
${BITALIC}(give your points as a comma separated list of (x,y)
coordinates.  if your answer includes points that occur at a
sequence of values, e.g., at every odd integer, or at any constant
multiple of another value, use ${BBOLD}m$EBOLD for any non-zero even
integer, ${BBOLD}n$EBOLD for any non-zero odd integer, and/or
${BBOLD}k$EBOLD for other arbitrary constants.)$EITALIC
$PAR
classifications: \{ $anschek->ans_rule(55) \}
$BR
${BITALIC}(give your answers in a comma separated list, specifying
${BBOLD}maximum$EBOLD, ${BBOLD}minimum$EBOLD, ${BBOLD}saddle point$EBOLD,
or ${BBOLD}none$EBOLD for each, in the same order as you entered your
critical points)$EITALIC

END_TEXT
Context()->normalStrings;

ANS($anschek->cmp() );

@class = $classify->value;
@pts   = $critPts->value;

Context()->texStrings;
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR SOLUTION $PAR

To find the critical points, we must solve the equations
\( f_x = $fx = 0 \) and \( f_y = $fy = 0 \).
The first equation has solution
\( $sol1 \)$sol1note, and the second equation,
\( $sol2 \)$sol2note.  Thus our critical points are
\( $ptsd[0], $ptsd[1], \) and \( $ptsd[2]\)
(where \(m\) is any non-zero even integer
and \(n\) is any non-zero odd integer).

$PAR
We calculate
\[ D=(f_{xx})(f_{yy})-(f_{xy})^2 =
    ($fxx)($fyy) - ($fxy)^2. \]
Thus, at \((0,0)\), \($dzero\)$dzeronote, so this is a \($class[0]\).
Similarly, at \($ptsd[1]\), \($done\)$donenote, so this is a \($class[1]\),
and at \($ptsd[2]\), \($dtwo\)$dtwonote, so this is a \($class[2]\),

END_SOLUTION
Context()->normalStrings;


;
ENDDOCUMENT();
