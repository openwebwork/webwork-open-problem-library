# DESCRIPTION
# Problem from Calculus, single variable, Hughes-Hallett et al., 4th ed.
# WeBWorK problem written by Gavin LaRose, <glarose@umich.edu>
# ENDDESCRIPTION

## Tagged by glr 02/08/09

## DBsubject(Calculus - single variable)
## DBchapter(Applications of differentiation)
## DBsection(Increasing/decreasing functions and local extrema)
## Institution(University of Michigan)
## Author(Gavin LaRose)
## Level(3)
## TitleText1('Calculus')
## AuthorText1('Hughes-Hallett')
## EditionText1('4')
## Section1('4.1')
## Problem1('25')
## TitleText2('Calculus')
## AuthorText2('Hughes-Hallett')
## EditionText2('5')
## Section2('4.1')
## Problem2('33')
## TitleText3('Calculus')
## AuthorText3('Hughes-Hallett')
## EditionText3('6')
## Section3('4.1')
## Problem3('32')
## KEYWORDS('concavity', 'increasing and decreasing functions', 'maxima', 'minima')

## Textbook tags
## HHChapter1('Using the Derivative')
## HHChapter2('Using the Derivative')

DOCUMENT();
loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
# "hhAdditionalMacros.pl",
"extraAnswerEvaluators.pl",
"PGasu.pl",                    # get pc_evaluator
"MathObjects.pl",
);
 
Context("Numeric");

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

# number of max/min, and their x-values
$numextrema = random(2,3,1);
@m = ();
$m[0] = random(1,3,1);
$m[1] = $m[0] + list_random(2,3);
$m[2] = $m[1] + list_random(2,3) if ( $numextrema == 3 );

@yvals = ();

# should we cross the x-axis before $m[0]?
if ( list_random(0,1) ) {
    $y[$m[0]] = random(1,5,2);
    for ( my $i=$m[0]-1; $i>=0; $i-- ) {
	$y[$i] = $y[$i+1] - random(1,3,1);
	$y[$i]-- if ( $y[$i] == 0 );
    }
    if ( $y[0] > 0 ) {
	$y[0] = -1;
    }
} else {
    $y[$m[0]] = random(3,7,1);
    for ( my $i=$m[0]-1; $i>=0; $i-- ) {
    	$y[$i] = $y[$i+1] - list_random(1,2);
	$y[$i]-- if ( $y[$i] == 0 );
    }
}

# now fill between $m[0] and $m[1], making the function cross the
#   axis between the two
for ( my $i=$m[0]+1; $i<=$m[1]; $i++ ) {
    $y[$i] = $y[$i-1] - random(1,3,1);
    $y[$i]-- if ( $y[$i] == 0 );
}
$y[$m[1]] = -2 if ( $y[$m[1]] > 0 );

# and between $m[1] and $m[2], if there's a third extremum, or to the 
#   end, otherwise
$stopx = ( $numextrema == 3 ) ? $m[2] : 10;

for ( my $i=$m[1]+1; $i<=$stopx; $i++ ) {
    $y[$i] = $y[$i-1] + random(1,2,1);
    $y[$i]++ if ( $y[$i] == 0 );
}
# originally $y[$m[1]]; I think this is a typo
$y[$stopx] = 2 if ( $y[$stopx] < 0 );

# finally, fill in the rest of the values if we're not done
if ( $numextrema == 3 ) {
    for ( my $i=$m[2]+1; $i<=10; $i++ ) {
	$y[$i] = $y[$i-1] - random(1,3,1);
	$y[$i]-- if ( $y[$i] == 0 );
    }
}

# a list of descriptions of the extrema, and of where there are 
#   zeros in the function
@mdescr = ( );
@z = ( );
@zdescr = ( );

# should we reflect about the x axis? 
if ( list_random(0,1) ) {
    $mdescr[0] = 'mininum';
    $mdescr[1] = 'maximum';
    $mdescr[2] = 'minimum' if ( $numextrema == 3 );
    for ( my $i=0; $i<11; $i++ ) { $y[$i] = -1*$y[$i]; }
} else { 
    $mdescr[0] = 'maximum';
    $mdescr[1] = 'minimum';
    $mdescr[2] = 'maximum' if ( $numextrema == 3 );
}

# now find zeros
for ( my $i=0; $i<10; $i++ ) {
    if ( $y[$i]*$y[$i+1] < 0 ) {
	push(@z, ($i+0.5));
	if ( $y[$i] > 0 ) {
	    push( @zdescr, 'maximum' );
	} else {
	    push( @zdescr, 'minimum' );
	}
    }
}
@zsign = ();
if ( $zdescr[0] eq 'maximum' ) { 
    $zsign[0] = 'positive';
    $zsign[1] = 'negative';
} else {
    $zsign[0] = 'negative';
    $zsign[1] = 'positive';
}


# assemble solution lists
$mans = '';
for ( my $i=0; $i<@m; $i++ ) {
    $mans .= "($m[$i], " . substr($mdescr[$i],0,3). "),";
}
if ( $mdescr[0] eq 'maximum' ) {
    $mansAlt = "(0,min)," . $mans . "(10,";
    $mansAlt .= ( $numextrema == 3 ) ? "min)" : "max)";
} else { 
    $mansAlt = "(0,max)," . $mans . "(10,";
    $mansAlt .= ( $numextrema == 3 ) ? "max)" : "min)";
}
$mans =~ s/,$//;

$zans = '';
for ( my $i=0; $i<@z; $i++ ) {
    $zans .= "($z[$i]," . substr($zdescr[$i],0,3) . "),";
}
$zans =~ s/,$//;

Context()->texStrings;
BEGIN_TEXT
The following table gives values of the differentiable function \( y=f(x) \).

\{ begintable(12) \}
\{ row( "${BITALIC}x$EITALIC", "0", "1", "2", "3", "4",
        "5", "6", "7", "8", "9", "10" ) \}
\{ row( "${BITALIC}y$EITALIC", @y ) \}
\{ endtable() \}


Estimate the \( x \)-values of critical points of \( f(x) \)
on the interval \( 0 < x < 10 \). Classify each critical point as a
local maximum, local minimum, or neither.
$BR
$BITALIC(Enter your critical points as comma-separated
xvalue,classification pairs.  For example, if you found the
critical points$EITALIC 
\( x = -2 \) 
${BITALIC}and$EITALIC
\( x = 3 \)${BITALIC}, and that the first
was a local minimum and the second neither a minimum nor a
maximum, you should enter$EITALIC  
${BBOLD}(-2,min), (3,neither)$EBOLD.  
${BITALIC}Enter$EITALIC
${BBOLD}none$EBOLD 
${BITALIC}if there are no critical points.)$EITALIC
$PAR
critical points and classifications: \{ ans_rule(65) \}

$PAR
Now assume that the table gives values of the continuous function
\( y=f'(x) \) (instead of \( f(x) \)).  Estimate and classify critical
points of the function \( f(x) \).
$PAR
critical points and classifications: \{ ans_rule(65) \}

END_TEXT
Context()->normalStrings;


# ANS(classify_num_cmp( $mans, 'strings'=>['none'], 'tol'=>0.999 ) );
# ANS(classify_num_cmp( $zans, 'strings'=>['none'], 'tol'=>0.499 ) );
## change: allow only the answer without the endpoints
# ANS(pc_evaluator(
# 	[ interval_cmp( $mans, 'strings'=>['max','min','neither','none'],
# 			'unions'=>'no', 'tol'=>0.999 ), 1, '' ],
# 	[ interval_cmp( $mansAlt, 'strings'=>['max','min','neither','none'],
# 			'unions'=>'no', 'tol'=>0.999 ), 1, '' ], 
#       ) );
ANS(interval_cmp( $mans, 'strings'=>['max','min','neither','none'],
		   'unions'=>'no', 'tol'=>0.999 ) );
ANS(interval_cmp( $zans, 'strings'=>['max','min','neither','none'],
		   'unions'=>'no', 'tol'=>0.499 ) );
# for testing
# ANS(num_cmp(1));
# ANS(num_cmp(1));

$otherext = '';
for ( $i=1; $i<@m; $i++ ) {
    $otherext .= ", and a local $mdescr[$i] at about \( x = $m[$i]\)";
}
$x0 = $z[0] - 0.5;
$x1 = $z[0] + 0.5;

$otherext2 = '';
for ( $i=1; $i<@z; $i++ ) {
    $otherext2 .= ", and a local $zdescr[$i] at about " . 
	"\(x = $z[$i]\)";
}
$otherext2 =~ s/, and//;

Context()->texStrings;
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR SOLUTION $PAR

${BBOLD}1.$EBOLD
It appears that this function has a local $mdescr[0] at about
\( x = $m[0] \)$otherext.  Note that because we're told that the
function is given for the open interval (0,10) the endpoints are not
properly critical points, or maxima/minima.

$PAR

${BBOLD}2.$EBOLD
If the table gives values of the derivative, critical
points occur where \(f'(x) = 0\).  Since \(f'\) is continuous, such 
a point occurs between $x0 and $x1, so there is a critical
point somewhere around $z[0].  
Since \(f'\) is $zsign[0] for values less than $z[0]
and $zsign[1] for values greater than $z[0], it appears  
that \(f\) has a 
local $zdescr[0] at about \( x = $z[0] \).  
Similarly, it seems that \(f\) has $otherext2.

END_SOLUTION
Context()->normalStrings;


COMMENT('MathObject version');
ENDDOCUMENT();
