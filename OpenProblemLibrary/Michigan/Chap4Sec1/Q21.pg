# DESCRIPTION
# Problem from Calculus, single variable, Hughes-Hallett et al., 4th ed.
# WeBWorK problem written by Gavin LaRose, <glarose@umich.edu>

## Tagged by glr 02/08/09

## DBsubject(Calculus - single variable)
## DBchapter(Applications of differentiation)
## DBsection(Increasing/decreasing functions and local extrema)
## Institution(University of Michigan)
## Author(Gavin LaRose)
## Level(3)
## MO(1)
## TitleText1('Calculus')
## TitleText2('Calculus')
## TitleText3('Calculus')
## TitleText4('Applied Calculus')
## TitleText5('Calculus')
## AuthorText1('Hughes-Hallett')
## AuthorText2('Hughes-Hallett')
## AuthorText3('Hughes-Hallett')
## AuthorText4('Hughes-Hallett')
## AuthorText5('Hughes-Hallett')
## EditionText1('4')
## EditionText2('5')
## EditionText3('6')
## EditionText4('4')
## EditionText5('7')
## Section1('4.1')
## Section2('4.1')
## Section3('4.1')
## Section4('4.1')
## Section5('4.1')
## Problem1('21')
## Problem2('37')
## Problem3('35')
## Problem4('23')
## Problem5('48')
## KEYWORDS('concavity', 'increasing and decreasing functions', 'maxima', 'minima')

## Textbook tags
## HHChapter1('Using the Derivative')
## HHChapter2('Using the Derivative')

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "extraAnswerEvaluators.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "PGcourse.pl"
);
 
Context("Numeric")->strings->add( min=>{}, max=>{}, neither=>{} );

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

$a = random(2,9,1);
$c = random(1,9,1);
$s = random(4,8,1);
$r = $s + non_zero_random(-1,1,1);
$r1 = $r - 1;
$s1 = $s - 1;
$rc = $r*$c;
$rps = $r+$s;
$x0 = "$rc/$rps";
$x0r = round(1000*$x0)/1000;

if ( ($r/2) == int($r/2) ) {  # then $r is even...
#    $ans = "0=min,$r*$c/($r+$s)=max,$c=neither";
    $ans = "(0,min),($r*$c/($r+$s),max),($c,neither)";
    $pointList = List( Compute(0), Compute("$r*$c/($r+$s)"), Compute("$c") );
    $typeList = List( String("min"), String("max"), String("neither") );
# solution variables
    $evenexp = $s1;
    $neithercrit = $c;
    $othercrit = 0;
} else {
#    $ans = "0=neither,$r*$c/($r+$s)=max,$c=min";
    $ans = "(0,neither),($r*$c/($r+$s),max),($c,min)";
    $pointList = List( Compute(0), Compute("$r*$c/($r+$s)"), Compute("$c") );
    $typeList = List( String("neither"), String("max"), String("min") );
# solution variables
    $evenexp = $r1;
    $neithercrit = 0;
    $othercrit = $c;
}

$ansCheck = MultiAnswer( $pointList, $typeList )->with(
    singleResult=>0,
    allowBlankAnswers=>1,
    checker=>sub {
        my ( $c, $s, $ansHash ) = @_;
	my @cpt = $c->[0]->value;
	my @spt = $s->[0]->value;
	my @cty = $c->[1]->value;
	my @sty = $s->[1]->value;

	my @ptMatch = ( -1, -1, -1 );
	my @stuPtIndex = ( 0, 1, 2 );
	for( my $i=0; $i<@cpt; $i++ ) {
	    foreach my $j ( @stuPtIndex ) {
		if ( $spt[$j] ne '' && $cpt[$i] == $spt[$j] &&
		     ($ptMatch[$i] == -1) ) {
		    $ptMatch[$i] = $j;
		    @stuPtIndex = ( grep { $_ !~ /$j/ } @stuPtIndex );
		    last;
		}
	    }
	}
	foreach my $s ( @spt ) {
	    if ( grep( /^$s$/, @spt ) > 1 ) {
		$ansHash->setMessage(1, "One of your points is repeated");
		last;
	    }
	}
	## we can now mark the first list right or wrong
	my @res = ( 0, 0 );
	foreach my $m ( @ptMatch ) {
	    $res[0] += .333 if ( $m > -1 );
	}
	$res[0] = sprintf("%0.2f", $res[0])*1;

	## now check the corresponding types
	if ( @sty > @spt ) {
	    $ansHash->setMessage(2, "You have more types than points specified.");
	} else {
	    for ( my $i=0; $i<@ptMatch; $i++ ) {
		if ( $ptMatch[$i] == -1 ) {
		    next;
		} elsif ( $cty[$i] == $sty[$ptMatch[$i]] ) {
		    $tyMatch[$i] = 1;
		}
	    }
	    my @ordinals = ( 'first', 'second', 'third' );
	    my @wrStr = ();
	    for( my $i=0; $i< @tyMatch; $i++ ) {
		my $m = $tyMatch[$i];
		$res[1] += .333*$m;
		if ( ! $m && $ptMatch[$i] > -1 ) {
		    push( @wrStr, $ordinals[$ptMatch[$i]] );
		}
	    }
	    $res[1] = sprintf("%0.2f", $res[1])*1;
	    if ( $res[1] > 0 && $res[1] < 1 && @spt == 3 ) {
		if ( @wrStr > 1 ) {
		    @wrStr = lex_sort( @wrStr );
		    $ansHash->setMessage(2, "Your $wrStr[0] and $wrStr[1] " .
					 "classifications are incorrect." );
		} else {
		    $ansHash->setMessage(2, "Your $wrStr[0] " .
					 "classification is incorrect." );
		}
	    }
	}

	return [ @res ];
    }
);

Context()->texStrings;
BEGIN_TEXT

Find and classify the critical points of\( f(x)=$a x^{$r}($c - x)^$s \) as
local maxima and minima.
$BR
Critical points: \(x = \) \{ $ansCheck->ans_rule(25) \}
$BR
Classifications: \{ $ansCheck->ans_rule(25) \}
$BR
$BITALIC(Enter your critical points and classifications as
comma-separated lists, and enter the types in the same order
as your critical points.  Note that you must enter something
in both blanks for either to be evaluated.  For the types,
enter ${BBOLD}min$EBOLD, ${BBOLD}max$EBOLD, or
${BBOLD}neither$EBOLD.$EITALIC

END_TEXT
Context()->normalStrings;

# ANS( classify_num_cmp( $ans, 'strings'=>['none'] ) );
# ANS( interval_cmp( $ans, 'strings'=>['none','min','max','neither'], 
# 		   'unions'=>'no' ) );
ANS( $ansCheck->cmp() );

Context()->texStrings;
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR SOLUTION $PAR

Differentiating using the product rule gives 
\( f'(x) = $a\left( $r x^{$r1} ($c - x)^{$s} - 
    $s x^{$r}($c - x)^{$s1} \right) \).
Critical points are where this is zero, or, where
\( $a x^{$r1} ($c-x)^{$s1} \left( $r($c - x) - $s x \right) = 
   $a x^{$r1} ($c-x)^{$s1} \left( $rc - $rps x \right) = 0 \).
So critical points are \( x = 0 \), \( x = $c \) and 
\(x = $x0\).  Because $evenexp, the multiplicity of the root 
\(x=$neithercrit\), is even, the derivative does not 
change sign at \(x = $neithercrit\).  Checking points on either
side of the other two critical points shows that 
\( x = $othercrit \) is a local minimum (\(f'\) changes from
negative to positive) and \( x = $x0 \) is a local maximum.

END_SOLUTION
Context()->normalStrings;

;

ENDDOCUMENT();
