##DESCRIPTION
## DBsubject(Set theory and logic)
## DBchapter(First order logic)
## DBsection(Translation)
## Institution(NAU)
## Level(2)
## KEYWORDS('proposition')
##ENDDESCRIPTION


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           );


TEXT(beginproblem(), $BR, $BR,$BR);


# Since this is a matching question, we do not usually wish to tell students
# which parts of the matching question have been answered correctly and which
# areincorrect.  That is too easy.  To accomplish this we set the following
# flag to zero.
$showPartialCorrectAnswers = 0;

# Make a new match list
$ml = new_match_list();
# enter questions and matching answers
$ml -> qa (
"\( A \not \subseteq B \)",        
"\( (\exists x)(x \in A \ \wedge \ x \not \in B) \)",               
"\( B\subseteq A \)",        
"\( (\forall x)(x\not \in A \  \implies x\not \in B) \)",
"\( A\cup B\not=\emptyset \)",
"\( (\exists x)(x\in A \ \vee x\in B) \)",       
"\( \widetilde{A\cup B}\not = \emptyset \)",         
"\( (\exists x)(x \not\in A \ \wedge \ x \not \in B) \)",
"\( A\cap B=\emptyset \)",
"\( (\forall x)(x \in A \ \implies \ x \not \in B) \)"
);

# Choose three of the question and answer pairs at random.
$ml->choose(3);

# Now print the text using $ml->print_q for the questions
# and $ml->print_a to print the answers.
# The following code is needed to make the enumeration work right within tables
# when LaTeX output is being used.
# It is an example of the powerful tools of TeX and perl which are available
# for each PG problem author. 
# Once we figure out the best way to protect enumerated lists automatically
# we will include it in the tables macro.  Meantime, it is better to have
# have to do it by hand, rather than to have the wrong thing done automatically.

$BSPACING = MODES( TeX               => '\hbox to .5\linewidth {\hspace{0.5cm}\vbox {',
                                   HTML            =>' ',
                                   Latex2HTML => ' '
);
$ESPACING = MODES(TeX => '}}', HTML =>'', Latex2HTML => '');
sub protect_enumerated_lists {
        my @in = @_;
        my @out = ();
        foreach my $item (@in) {
                push(@out, $BSPACING . $item . $ESPACING);
        }
        @out;
}
# End of code for protecting enumerated lists in TeX.
BEGIN_TEXT
$PAR

Match each statement with an equivalent symbolic sentence. $BR
\{ $ml -> print_q \}
$PAR
\{$ml -> print_a \}
$PAR
END_TEXT

ANS( str_cmp( $ml->ra_correct_ans )   ) ;

ENDDOCUMENT();        # This should be the last executable line in the problem.