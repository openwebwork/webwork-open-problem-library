##DESCRIPTION
## DBsubject(Operations research)
## DBchapter(Algorithms)
## DBsection(Bin packing)
## Institution(NAU)
## Author(N.Spencer Sitton)
## MLT(or-bin-mixed)
## MLTleader(1)
## Level(2)
## KEYWORDS('bin packing')
##ENDDESCRIPTION

# File Created: 06/13/05
# Location: Northern Arizona University
# Course: MAT 114

DOCUMENT();      

loadMacros("PGstandard.pl",
           "PGnauBinpacking.pl",
           "PGchoicemacros.pl",
);

TEXT( &beginproblem );
$showPartialCorrectAnswers = 0;

do{ 
  @list=();
  $min = random( 90, 180, 30 );
  $max = random( 300, 420, 60 );
  $binmin = ceil( $max*2 );
  $binmax = ceil( $max*2.5 );
  $binsize = random( $binmin, $binmax, 30 );
  $n = random( 11, 16, 1 );
    for( $i = 0; $i < $n; $i++ ){
    push @list, random( 90, $max, 30 );
    }
  @newlist1 = PGnextfit( $binsize, @list );
  @newlist2 = PGfirstfit( $binsize, @list );
  @newlist3 = PGworstfit( $binsize, @list );
  @newlist4 = PGdfirstfit( $binsize, @list );
  @newlist5 = PGdnextfit( $binsize, @list );
  @newlist6 = PGdworstfit( $binsize, @list );

  $ans1 = max( @newlist1 );
  $ans2 = max( @newlist2 );
  $ans3 = max( @newlist3 );
  $ans4 = max( @newlist4 );
  $ans5 = max( @newlist5 );
  $ans6 = max( @newlist6 );

  @alg = ( 'next-fit', 'first-fit', 'worst-fit', 'first-fit-decreasing', 'next-fit-decreasing', 'worst-fit-decreasing' );
  @ans = ( $ans1, $ans2, $ans3, $ans4, $ans5, $ans6 );

  @slice = NchooseK( 6, 4 );

  $fans1 = $ans[$slice[0]];
  $fans2 = $ans[$slice[1]];
  $fans3 = $ans[$slice[2]];
  $fans4 = $ans[$slice[3]];
} until( $fans1 != $fans2 && $fans3 != $fans4 );

$minutes = $binsize / 60;

for( $i = 0; $i < ( $n - 2 ); $i++ ){ $num = $list[ $i ];
push @newlist, $num;}
push @newlist, $list[ $n - 2 ].' and '.$list[n - 1]; 


BEGIN_TEXT

Songs from your favorite band are \{join ", ", @newlist\} seconds long. Suppose you want to store these songs on compact disks. If a compact disk can hold $minutes minutes determine the following:
$BR(a)The number of compact disks necessary using the $alg[$slice[0]] algorithm is \{ans_rule(10)\}.
$BR(b)The $alg[$slice[1]]  heuristic requires \{ans_rule(10)\} compact disks.
$BR(c)The number of compact dis
ks necessary using the $alg[$slice[2]] algorithm is \{ans_rule(10)\}.
$BR(d)The $alg[$slice[3]] algorithm requires \{ans_rule(10)\} compact disks.

END_TEXT

ANS(num_cmp($fans1));
ANS(num_cmp($fans2));
ANS(num_cmp($fans3));
ANS(num_cmp($fans4));

ENDDOCUMENT(); 


