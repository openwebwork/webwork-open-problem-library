##DESCRIPTION
# Modified by Jim.Swift@nau.edu to make figures smaller and use concave up/down.
## DBsubject(Calculus - single variable)
## DBchapter(Applications of differentiation)
## DBsection(Summary of curve sketching)
## Institution(NAU)
## Author(Nandor Sieben)
## MLT(SCS_function_analysis)
## MLTleader(1)
## Level(3)
## KEYWORDS('calculus', 'derivatives' , 'curve sketching' , 'function analysis')
##ENDDESCRIPTION

DOCUMENT() ;    

loadMacros(
"PGstandard.pl",
"PGnauGraphics.pl",
# "PG.pl",
# "PGbasicmacros.pl",
"PGchoicemacros.pl",
# "PGanswermacros.pl",
# "PGauxiliaryFunctions.pl",
"PGgraphmacros.pl",
# "PGdiffeqmacros.pl",
# "unionMacros.pl",
) ;

TEXT(&beginproblem) ;
$showPartialCorrectAnswers = 0 ;

$slope = list_random(-2,-.5,.5,2);

$xpixels = 300;
$ypixels = 300;

sub generate{
@slopes=($slope);
@dxs=(3,4,6,7)[NchooseK(4,4)];
@xs=(-10);
$i=random(-7,7,1);
@ys=($i);
@conv=();
@dirs=();
@point=();

for ($i=0;$i<4;$i++) {
   $a = pop @slopes;
   push @slopes, $a;
   do {
   if ($a==-2) {
      $aa=list_random(-.5,0,0,0);
   }
   if ($a==-.5) {
      $aa=list_random(-.5,-2,-2,-2);
   }
   if ($a==0) {
      $aa=list_random(-2,2);
   }
   if ($a==.5) {
      $aa=list_random(2,2,2,.5);
   }
   if ($a==2) {
      $aa=list_random(.5,0,0,0);
   }
   } until ($i!=4 || $aa!=0);
   push @slopes, $aa;
   $x = pop @xs;
   push @xs, ($x,$x+$dxs[$i]);
    
   $y = pop @ys;
   $dir=($a+$aa)/2;
   if ($dir) {
      $dir=$dir/abs($dir);
   }
   push @dirs, $dir;
   $temp=$aa-$a;
   if ($temp==0) {
     $shape=abs($a);
   }
   else {
     $temp = $temp/abs($temp);
     if (abs($temp)>0.5) {
       $shape=1;
     }
     else {
       $shape=.5;
     }
   }
#   push @conv, ('concave down','straight','concave up')[$temp+1];
   push @conv, $temp;
   push @ys, ($y,$y+$shape*$dir*$dxs[$i]); 
}
}

while (1) {
  &generate();
  $s1=join " ", @slopes;
  $redo=0;
  for ($i=1;$i< -1+scalar @slopes; $i++) {
    if ($slopes[$i-1]==$slopes[$i] && $slopes[$i]==$slopes[$i+1] ) {
       $redo = 1;;
    }
  }
  if ($redo) {
    redo;
  }
  @ylist=@ys;
  $lastslope = pop @slopes;
  push @slopes, $lastslope;
  @ylist=num_sort(@ylist);
  $min=shift @ylist;
  $max=pop @ylist;
  if ($max-$min < 20 && $lastslope != 0) {
    $sh=0;
    if ($max>=10) {
      $sh=10-$max-1;
    }
    if ($min<-10) {
      $sh=-10-$min+1;
    }
    for ($i=0;$i<scalar @ys;$i++) {
      $ys[$i] += $sh;
    }
    last;
  }
}


for ($i=0; $i<-1+scalar @conv; $i++) {
  if ($conv[$i] > 0 && $conv[$i+1] > 0 && $slopes[$i+1]==0) {
    push @point, -1;
    next;
  }
  if ($conv[$i] < 0 && $conv[$i+1] < 0 && $slopes[$i+1]==0) {
    push @point, 1;
    next;
  }
  if ($conv[$i] != $conv[$i+1] ) {
    push @point, 0;
    next;
  }
  if ($conv[$i] == 0 && $conv[$i+1]==0 ) {
    push @point, 0;
    next;
  }
  push @point, 2;
} 

for ($i=0;$i<4;$i++) {
  $fdir[$i]=pop_up_list('?'=>'?????????','inc'=>'increasing','dec'=>'decreasing','const'=>'constant');
  if ($i<3) {
    $fpt[$i] =pop_up_list('?'=>'?????????','nothing'=>'nothing','max'=>'loc max','min'=>'loc min',
                          'infl'=>'inflection','corn'=>'corner');
  }
}
for ($i=0;$i<4;$i++) {
  $fcon[$i]=pop_up_list('?'=>'?????????','concave up'=>'concave up','concave down'=>'concave down','straight'=>'straight');
}

for ($i=0;$i<4;$i++) {
  $fpsgn[$i]=pop_up_list('?'=>'?????????','+'=>'+','-'=>'-','0'=>'0');
  if ($i<3) {
     $fppt[$i]=pop_up_list('?'=>'?????????','+'=>'+','-'=>'-','0'=>'0','undef'=>'undef');
  }
}
for ($i=0;$i<4;$i++) {
  $fpdir[$i]=pop_up_list('?'=>'?????????','inc'=>'increasing','dec'=>'decreasing','const'=>'constant');
}

for ($i=0;$i<4;$i++) {
  $fppsgn[$i]=pop_up_list('?'=>'?????????','+'=>'+','-'=>'-','0'=>'0');
  if ($i<3) {
     $fpppt[$i]=pop_up_list('?'=>'?????????','+'=>'+','-'=>'-','0'=>'0','undef'=>'undef');
  }
}



@row1 = ("\(x\)",""  ,"\(x<$xs[1]\)","\(x=$xs[1]\)","\($xs[1]<x<$xs[2]\)",
               "\(x = $xs[2]\)","\($xs[2]<x<$xs[3]\)","\(x=$xs[3]\)","\($xs[3]<x\)");
@row2 = ("\(f\)",""  ,$fdir[0],$fpt[0],$fdir[1],$fpt[1],$fdir[2],$fpt[2],$fdir[3]);
@row3 = ("","" ,$fcon[0],"",$fcon[1],'',$fcon[2],"",$fcon[3]);
@row4 = ("\(f'\)","" ,$fpsgn[0],$fppt[0],$fpsgn[1],$fppt[1],$fpsgn[2],$fppt[2],$fpsgn[3]);
@row5 = ("","" ,$fpdir[0],"",$fpdir[1],'',$fpdir[2],"",$fpdir[3]);
@row6 = ("\(f''\)","",$fppsgn[0],$fpppt[0],$fppsgn[1],$fpppt[1],$fppsgn[2],$fpppt[2],$fppsgn[3]);

$graph = init_graph(-10,-10,10,10,axes =>[0,0], grid =>[10,10], 'pixels'=>[$xpixels,$ypixels]);
$hermite_obj = new Hermite( [@xs],[@ys],[@slopes]);
$fun_obj = new Fun($hermite_obj->rf_f,$graph);

for ($i=0; $i<scalar @slopes; $i++) {
  if ($slopes[$i]!=0) {
    $slopes[$i] /= abs($slopes[$i]);
  }
}

$s2=join " ", @dirs;
$s3=join " ", @point;
$s4=join ",", @conv;


BEGIN_TEXT

$BBOLD Function Analysis $EBOLD 

$PAR
The graph of the function  \(f \) is given below. Assume that \(f \) is as smooth as the graph allows.
$BR

\{Plot($graph)\}
$BR 
Fill in the function analysis table.
$BR
\{begintable(9).
row(@row1).
row("").
row(@row2).
row(@row3).
row("").
row(@row4).
row(@row5).
row("").
row(@row6).
endtable()\}$BR
END_TEXT

ANS(str_cmp(('dec','const','inc')[$dirs[0]+1]));
ANS(str_cmp(('min','infl','max','nothing')[$point[0]+1]));
ANS(str_cmp(('dec','const','inc')[$dirs[1]+1]));
ANS(str_cmp(('min','infl','max','nothing')[$point[1]+1]));
ANS(str_cmp(('dec','const','inc')[$dirs[2]+1]));
ANS(str_cmp(('min','infl','max','nothing')[$point[2]+1]));
ANS(str_cmp(('dec','const','inc')[$dirs[3]+1]));

ANS(str_cmp(('concave down','straight','concave up')[$conv[0]+1]));
ANS(str_cmp(('concave down','straight','concave up')[$conv[1]+1]));
ANS(str_cmp(('concave down','straight','concave up')[$conv[2]+1]));
ANS(str_cmp(('concave down','straight','concave up')[$conv[3]+1]));

ANS(str_cmp(('-','0','+')[$dirs[0]+1]));
ANS(str_cmp(('-','0','+')[$slopes[1]+1]));
ANS(str_cmp(('-','0','+')[$dirs[1]+1]));
ANS(str_cmp(('-','0','+')[$slopes[2]+1]));
ANS(str_cmp(('-','0','+')[$dirs[2]+1]));
ANS(str_cmp(('-','0','+')[$slopes[3]+1]));
ANS(str_cmp(('-','0','+')[$dirs[3]+1]));

ANS(str_cmp(('dec','const','inc')[$conv[0]+1]));
ANS(str_cmp(('dec','const','inc')[$conv[1]+1]));
ANS(str_cmp(('dec','const','inc')[$conv[2]+1]));
ANS(str_cmp(('dec','const','inc')[$conv[3]+1]));

ANS(str_cmp(('-','0','+')[$conv[0]+1]));
ANS(str_cmp(('+','0','-')[$point[0]+1]));
ANS(str_cmp(('-','0','+')[$conv[1]+1]));
ANS(str_cmp(('+','0','-')[$point[1]+1]));
ANS(str_cmp(('-','0','+')[$conv[2]+1]));
ANS(str_cmp(('+','0','-')[$point[2]+1]));
ANS(str_cmp(('-','0','+')[$conv[3]+1]));


ENDDOCUMENT() ; 


