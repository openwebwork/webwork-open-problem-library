##DESCRIPTION
## DBsubject(Operations research)
## DBchapter(Algorithms)
## DBsection(Scheduling)
## Institution(scheduling)
## Author(Ty Thompson)
## MLT(ListProc)
## Level(3)
## KEYWORDS('bin packing')
##ENDDESCRIPTION

# File Created: 6/15/05
# Location: Northern Arizona University

DOCUMENT();
loadMacros("PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "PGnauScheduling.pl",
           "PGnauGraphics.pl"
);

TEXT(beginproblem());

# get a graph ...
$info = PickSchedule();
@graph_info = split ";", $info;
$vertex_data = $graph_info[0];
$connect_data = $graph_info[1];

# load the picture ...
$i = 0;
$schedule = DrawSchedule($vertex_data, $connect_data);

#randomize the number of machines
$rand_int = random(1,5,1);
if ($rand_int == 5){$machine_count = 4}
if ($rand_int >= 3 && $rand_int <= 4){$machine_count = 3}
if ($rand_int >= 1 && $rand_int <= 2){$machine_count = 2}

$task_count = scalar (split ",",$vertex_data) / 3;

# randomize the priority list ... 
$priority_list_1 = RandomIntList($task_count);
$priority_list_2 = RandomIntList($task_count);
$priority_list_3 = RandomIntList($task_count);

@list_proc_solution_1 = ListProc($vertex_data,$connect_data,$priority_list_1, $machine_count);
$time_1 = pop @list_proc_solution_1;
@list_proc_solution_2 = ListProc($vertex_data,$connect_data,$priority_list_2, $machine_count);
$time_2 = pop @list_proc_solution_2;
@list_proc_solution_3 = ListProc($vertex_data,$connect_data,$priority_list_3, $machine_count);
$time_3 = pop @list_proc_solution_3;

for($i=0; $i<$machine_count; $i++){
   push @list_1, "Processor ", $i + 1, " : ", ans_rule(25), "$BR";
}
for($i=0; $i<$machine_count; $i++){
   push @list_2, "Processor ", $i + 1, " : ", ans_rule(25), "$BR";
}
for($i=0; $i<$machine_count; $i++){
   push @list_3, "Processor ", $i + 1, " : ", ans_rule(25), "$BR";
}

# find the minimum time
push @times, $time_1; push @times, $time_2; push @times, $time_3;
$answer_2 = FindMinimum(@times);
if ($answer_2 == $time_1){push @answer_1, 1;}
if ($answer_2 == $time_2){push @answer_1, 2;}
if ($answer_2 == $time_3){push @answer_1, 3;}
$ans_1 = join ",",@answer_1;

#TEXT "Correct Answer is list ", $answer_1, " in a time of ", $answer_2;

$priority_list_1 = join "", "T", $priority_list_1;
$priority_list_1 =~ s/,/,T/g;
$priority_list_2 = join "", "T", $priority_list_2;
$priority_list_2 =~ s/,/,T/g;
$priority_list_3 = join "", "T", $priority_list_3;
$priority_list_3 =~ s/,/,T/g;

BEGIN_TEXT
$PAR
$BR
\{
Plot($schedule);
\}
$BR
Consider the order-requirement digraph above, and the priority lists given below:
$BR
List 1 : \{ $priority_list_1 \}
$BR
List 2 : \{ $priority_list_2 \}
$BR
List 3 : \{ $priority_list_3 \}
$BR
$PAR
Using Priority List 1, apply the list-processing algorithm to schedule the \{ $task_count \} tasks on \{ $machine_count \} processors.  Enter the task labels and idle times (if any) in order for each processor, separated by commas.  For example: 3,T1,T2,4,T5,6 
$PAR  
\{join ' ',@list_1\}
$PAR
Using Priority List 2, apply the list-processing algorithm to schedule the \{ $task_count \} tasks on \{ $machine_count \} processors.
$PAR  
\{join ' ',@list_2\}
$PAR
Using Priority List 3, apply the list-processing algorithm to schedule the \{ $task_count \} tasks on \{ $machine_count \} processors.
$PAR  
\{join ' ',@list_3\}
$PAR
Which priority list(s) will be completed in the least amount of time : 1, 2 or 3?  Comma separate and order the list numbers, if more than one list has the smallest completion time.
$PAR
List number(s) =  \{ans_rule(10)\}
$PAR
What is the smallest possible completion time?
$PAR
Completion time = \{ans_rule(10)\}
$BR
$BR
END_TEXT

for($i=0; $i<$machine_count; $i++){
  ANS(ListProcEval($vertex_data, $list_proc_solution_1[$i]));
}
for($i=0; $i<$machine_count; $i++){
  ANS(ListProcEval($vertex_data, $list_proc_solution_2[$i]));
}
for($i=0; $i<$machine_count; $i++){
  ANS(ListProcEval($vertex_data, $list_proc_solution_3[$i]));
}

ANS(str_cmp($ans_1, filters=>['remove_whitespace', 'ignore_order']));
ANS(num_cmp($answer_2));
ENDDOCUMENT();