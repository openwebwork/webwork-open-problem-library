##DESCRIPTION
## DBsubject(Operations research)
## DBchapter(Algorithms)
## DBsection(Scheduling)
## Institution(scheduling)
## Author(Ty Thompson)
## MLT(EListProc)
## Level(2)
## KEYWORDS('bin packing')
##ENDDESCRIPTION

# File Created: 7/1/05
# Location: Northern Arizona University

DOCUMENT();
loadMacros("PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "PGnauScheduling.pl",
           "PGnauGraphics.pl"
);

TEXT(beginproblem());

# get a graph ...
$info = PickSchedule('easy');
@graph_info = split ";", $info;
$vertex_data = $graph_info[0];
$connect_data = $graph_info[1];

# load the picture ...
$i = 0;
$schedule = DrawSchedule($vertex_data, $connect_data);

#set the machine max
$machine_max = 4;

# make random choices ...
$machine_count_1 = random(2,$machine_max - 1, 1);
do{
  $machine_count_2 = random(2,$machine_max, 1);
} while ($machine_count_2 <= $machine_count_1);

$task_count = scalar (split ",",$vertex_data)/3;

# randomize the priority list ... 
$priority_list = RandomIntList($task_count);

# find the solutions ...
@list_proc_solution_1 = ListProc($vertex_data, $connect_data, $priority_list, $machine_count_1);
$time_1 = pop @list_proc_solution_1;
@list_proc_solution_2 = ListProc($vertex_data, $connect_data, $priority_list, $machine_count_2);
$time_2 = pop @list_proc_solution_2;

$answer = $time_1 - $time_2;

$priority_list = join "", "T", $priority_list;
$priority_list =~ s/,/,T/g;

for($i=0; $i<$machine_count_2; $i++){
   push @list_2, "Processor ", $i + 1, " : ", ans_rule(25), "$BR";
}

BEGIN_TEXT
$PAR
\{
Plot($schedule);
\}
$BR
Consider the order-requirement digraph above (where all indicated weights are in minutes) and the priority list
\{ $priority_list \}.
Using the list-processing algorithm, the 
\{ $task_count \} tasks may be completed on \{ $machine_count_1 \} 
processors in a time of \{ $time_1 \}.  If instead \{ $machine_count_2 \}
processors are used, how much time (if any) is saved?
$PAR
Schedule the \{ $task_count \} tasks on \{ $machine_count_2 \} processors.  Enter the task labels and idle times (if any) in order for each 
processor, separated by commas.  
For example: 3,T1,T2,4,T5,6 
$PAR  
\{join ' ',@list_2\}
$PAR
$BR
Time savings = \{ans_rule(10)\}
$BR
$BR
END_TEXT
for($i=0; $i<$machine_count_2; $i++){
  ANS(ListProcEval($vertex_data, $list_proc_solution_2[$i]));
}
ANS(num_cmp($answer));
ENDDOCUMENT();