##DESCRIPTION
## DBsubject(Operations research)
## DBchapter(Algorithms)
## DBsection(Scheduling)
## Institution(Scheduling)
## Author(Ty Thompson)
## MLT(CritPath)
## MLTleader(1)
## Level(2)
## KEYWORDS('bin packing')
##ENDDESCRIPTION

# File Created: 7/1/05
# Location: Northern Arizona University

DOCUMENT(); 
    
loadMacros("PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "PGnauScheduling.pl",
           "PGnauGraphics.pl"
);

TEXT(&beginproblem);

# get a graph ...
$info = PickSchedule();
@graph_info = split ";", $info;
$vertex_data = $graph_info[0];
$connect_data = $graph_info[1];

# load the picture ...
$schedule = DrawSchedule($vertex_data, $connect_data);
$crit_path_solution = CritList($vertex_data, $connect_data);

#randomize the number of machines
$rand_int = random(1,5,1);
if ($rand_int == 5){$machine_count = 4}
if ($rand_int >= 3 && $rand_int <= 4){$machine_count = 3}
if ($rand_int >= 1 && $rand_int <= 2){$machine_count = 2}

@list_proc_solution = ListProc($vertex_data,$connect_data,$crit_path_solution,$machine_count);
$time = pop @list_proc_solution;

# the answer boxes are called ...
$ans_first = ans_rule(30);
for($i=0; $i<$machine_count; $i++){
   push @list, "Processor ", $i + 1, " : ", ans_rule(25), "$BR";
}
$ans_last = ans_rule(10);

BEGIN_TEXT
$PAR
\{
Plot($schedule);
\}
$PAR
Consider the order-requirement digraph above, where all indicated weights are in minutes.  Using critical-path scheduling, what should the priority list be?
$PAR
Enter the task list, ordered left-to-right, separating task labels by commas.  For example: T4,T1,T2,T5,T3 :  \{ $ans_first \}
$PAR
Schedule the \{ $task_count \} tasks on \{ $machine_count \} processors.
Enter the task labels and idle times (if any) in order for each 
processor, separated by commas.  
For example: 3,T1,T2,4,T5,6 
$PAR  
\{join ' ',@list\}
$PAR
How much time does the resulting schedule require?
$PAR
Time required (minutes) : \{ $ans_last \}
$BR
END_TEXT
ANS(str_cmp($crit_path_solution,filters=>['remove_whitespace','ignore_case']));
for($i=0; $i<$machine_count; $i++){
  ANS(ListProcEval($vertex_data, $list_proc_solution[$i]));
}
ANS(num_cmp($time));
ENDDOCUMENT();
 