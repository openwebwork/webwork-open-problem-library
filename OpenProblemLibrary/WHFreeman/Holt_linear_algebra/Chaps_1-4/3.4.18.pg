##DESCRIPTION
##
##ENDDESCRIPTION


## DBsubject(Linear algebra)
## DBchapter(Matrix factorizations)
## DBsection(LU factorization)
## Date(6/3/2013)
## Author(Darwyn Cook)
## Level(3)
## MO(1)
## TitleText1('Linear Algebra with Applications')
## AuthorText1('Holt')
## EditionText1('1')
## Section1('3.4')
## Problem1('18')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "freemanMacros.pl",
   "parserMultiAnswer.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Matrix");
$sample = Matrix([[2,3,-1],[-2,-5,6]]);
do {
do {
do {
do {
$L = Matrix([[1,0,0,0],
[Compute(random(-9,9)),1,0,0],
[Compute(random(-9,9)),Compute(random(-9,9)),1,0],
[Compute(random(-9,9)),Compute(random(-9,9)),Compute(random(-9,9)),1]]);

$U = Matrix([[Compute(non_zero_random(-9,9)),Compute(random(-9,9)),Compute(random(-9,9)),Compute(random(-9,9))],
[0,Compute(non_zero_random(-9,9)),Compute(random(-9,9)),Compute(random(-9,9))],
[0,0,Compute(non_zero_random(-9,9)),Compute(random(-9,9))],
[0,0,0,Compute(non_zero_random(-9,9))]]);
$A = $L * $U;
} until ($A->element(2,1) == 0 && $A->element(3,1) != 0 && $A->element(4,1) != 0);

$n11 = -($A->element(3,1))/($A->element(1,1));
$n12 = -($A->element(4,1))/($A->element(1,1));
} until ($n11 != 0 && $n12 != 0);
$str11 = nicestring([$n11,1],["R_1","R_3"])."&\Rightarrow R_3";
$str12 = nicestring([$n12,1],["R_1","R_4"])."&\Rightarrow R_4";
$E1 = Matrix([1,0,0,0],[0,1,0,0],[$n11,0,1,0],[$n12,0,0,1]);
$A1 = $E1*$A;

$L21 = 0;  $L31 = -$n11;  $L41 = -$n12;
$n21 = -($A1->element(3,2))/($A1->element(2,2));
$n22 = -($A1->element(4,2))/($A1->element(2,2));
} until ($n21 != 0 && $n22 != 0);
$L32 = -$n21;  $L42 = -$n22;
$L1 = "\left[\begin{array}{rrr} 1 & \mathbf{\cdot} & \mathbf{\cdot} & \mathbf{\cdot} \\ $L21 & 1 &  \mathbf{\cdot}& \mathbf{\cdot}   \\ $L31 & $L32 & \mathbf{\cdot} & \mathbf{\cdot} \\ $L41 & $L42 &  \mathbf{\cdot} & \mathbf{\cdot}  \end{array}\right]";
$str21 = nicestring([$n21,1],["R_2","R_3"])."&\Rightarrow R_3";
$str22 = nicestring([$n22,1],["R_2","R_4"])."&\Rightarrow R_4";
$E2 = Matrix([1,0,0,0],[0,1,0,0],[0,$n21,1,0],[0,$n22,0,1]);
$A2 = $E2*$A1;

$n31 = -($A2->element(4,3))/($A2->element(3,3));
} until ($n31 != 0);
$L43 = -$n31;
$L2 = "\left[\begin{array}{rrr} 1 & \mathbf{\cdot} & \mathbf{\cdot} & \mathbf{\cdot} \\ $L21 & 1 &  \mathbf{\cdot}& \mathbf{\cdot}   \\ $L31 & $L32 & 1 & \mathbf{\cdot} \\ $L41 & $L42 & $L43 & \mathbf{\cdot}  \end{array}\right]";
$str31 = nicestring([$n31,1],["R_3","R_4"])."&\Rightarrow R_4";
$E3 = Matrix([1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,$n31,1]);
$A3 = $E3*$A2;
$L3 = "\left[\begin{array}{rrr} 1 & \mathbf{\cdot} & \mathbf{\cdot} & \mathbf{\cdot} \\ $L21 & 1 &  \mathbf{\cdot}& \mathbf{\cdot}   \\ $L31 & $L32 & 1 & \mathbf{\cdot} \\ $L41 & $L42 & $L43 & 1 \end{array}\right]";

$multians = MultiAnswer($L, $U)->with(
  singleResult => 0,
  checker => sub {
      my ( $correct, $student, $self ) = @_;
      my ( $Lstu, $Ustu ) = @{$student};
      my ( $Lcorrect, $Ucorrect ) = @{$correct};    
      $lower = 1;
      $upper = 1;
      #Check to see if the student L matrix is lower triangular
      unless (($Lstu->element(1,2)==0)&&($Lstu->element(1,3)==0)&&
              ($Lstu->element(1,4)==0)&&($Lstu->element(2,3)==0)&&
              ($Lstu->element(2,4)==0)&&($Lstu->element(3,4)==0)){
          $self->setMessage(1,'Your L matrix is not lower triangular');
          $self->setMessage(2,'The U matrix cannot be checked for accuracy '.
                              'since L does not have the correct format.');
          return[0,0];
          };
      #Check to see if the student L has 1's on the diagonal
      unless (($Lstu->element(1,1)==1)&&($Lstu->element(2,2)==1)&&
             ($Lstu->element(3,3)==1)&&($Lstu->element(4,4)==1)){
           $self->setMessage(1,'Your L matrix should have ones on the diagonal');
          $self->setMessage(2,'The U matrix cannot be checked for accuracy '.
                              'since L does not have the correct format.');
          return[0,0];
          };
      #Check to see if the student U matrix is upper triangular
      unless(($Ustu->element(2,1)==0)&&($Ustu->element(3,1)==0)&&
             ($Ustu->element(3,2)==0)&&($Ustu->element(4,1)==0)&&
             ($Ustu->element(4,2)==0)&&($Ustu->element(4,3)==0)){
          $self->setMessage(1,'The L matrix cannot be checked for accuracy '.
                              'since U is not in echelon form.');
          $self->setMessage(2,'Your U matrix is not in echelon form.');
          return[0,0];
          };
      #Check to see if they have the right product
      unless($Lstu*$Ustu == $Lcorrect*$Ucorrect){
          $self->setMessage(1,'Your matrix has the right format, but you have '.
                              'the wrong product.');
          $self->setMessage(2,'Your matrix is in echelon form, but you have '.
                              'the wrong product.');
           $lower = 0;
           $upper = 0;
          }
      return [$lower,$upper];
  }
);


##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
\{ textbook_ref_exact("Holt Linear Algebra", "3.4","18") \}
$BR
For this problem enter matrices using bracket notation. So the matrix 
$BR \($sample\)
$BR
would be entered as [[2,3,-1],[-2,-5,6]].
$BR
$BR
Find an LU factorization for 
$BR
\($A\)
$BR
\(L = \)\{$multians->ans_rule(90)\}
$BR
 \(U = \)\{$multians->ans_rule(90)\}
END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#
ANS( $multians->cmp() );

Context()->texStrings;
BEGIN_SOLUTION
${BBOLD}SOLUTION:${EBOLD} 
\[
\begin{array}{ccccc}
$A & \overset{\begin{align*} $str11 \\ $str12 \end{align*}}{\sim} & $A1 & \Rightarrow & L = $L1 \\
$A1 & \overset{\begin{align*} $str21 \\ $str22 \end{align*}}{\sim} & $A2 & \Rightarrow & L = $L2 \\
$A2 & \overset{\begin{align*} $str31 \end{align*}}{\sim} & $A3 & \Rightarrow & L = $L3
\end{array}
\]
Thus \(L = $L\) and \(U = $U\).
END_SOLUTION
Context()->normalStrings;

ENDDOCUMENT();        