# DESCRIPTION
# Compute the first three Gauss-Seidel iterations and find the actual solution.
# ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Systems of linear equations)
## DBsection(Systems with 2 variables)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## Level(3)
## MO(1)
## TitleText1('Linear Algebra')
## AuthorText1('Holt')
## EditionText1('1e')
## Section1('1.3')
## Problem1('14')
## KEYWORDS('linear equations', 'system', 'systems', 'numerical', 'applications')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PGstandard.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Matrix");
sub dispSyst {
  my $A = shift;
  my $b = shift;
  my @d = @_;
  my $dS = "\begin{array}{";
  for (my $i = 0; $i < $d[0]; $i++) {
    $dS = $dS."rc";
  }
  $dS = $dS."r}";
  for (my $i = 0; $i < $d[0]; $i++) {
    my $jnonzero = 0;
    for (my $j = 0; $j < $d[1]; $j++) {
      $a[$i][$j] = $A->element($i+1,$j+1);
      if ($j == 0) {
        if ($a[$i][$j] == 1) {
          $dS = $dS." x_1 ";   $jnonzero = 1;
        } elsif ($a[$i][$j] == -1) {
          $dS = $dS."-x_1 ";  $jnonzero = 1;
        } elsif ($a[$i][$j] != 0) {
          $dS = $dS."$a[$i][$j] x_1";  $jnonzero = 1;
        }
        if ($d[1] == 1) {
          if ($j == $d[1] - 1 && $i != $d[0] - 1) {
            $dS = $dS." & = & ".$b->element($i+1,1)." \\";
          } elsif ($j == $d[1] - 1 && $i == $d[0] - 1) {
            $dS = $dS." & = & ".$b->element($i+1,1);
          }
        }
      } else {
        if ($a[$i][$j] == 0) {
          $dS = $dS." & & ";
        } else {
          my $pm = ($a[$i][$j] > 0) ? "+" : "-";
          if ($jnonzero == 0 && $a[$i][$j] > 0) { $pm = "" };
          my $tmp = ($a[$i][$j] < 0) ? -$a[$i][$j] : $a[$i][$j];
          my $subsc = $j+1;
          if ($tmp == 1) {
            $dS = $dS." & $pm & x_{$subsc}";
          } else {
            $dS = $dS." & $pm & $tmp x_{$subsc}";
          }
          $jnonzero = 1;
        }
        if ($j == $d[1] - 1 && $i != $d[0] - 1) {
          $dS = $dS." & = & ".$b->element($i+1,1)." \\";
        } elsif ($j == $d[1] - 1 && $i == $d[0] - 1) {
          $dS = $dS." & = & ".$b->element($i+1,1);
        }
      }
    }
  }
  $dS = $dS."\end{array}";
  return $dS;
}

sub gs_iter {
  my $A = shift(); # matrices Ax = b
  my $b = shift(); 
  my $niter = shift();
  my @x = @_;  # initial guess
  my @dA = $A->dimensions;
  my @db = $b->dimensions;
  return if ($dA[0] != $dA[1] && $db[0] != $dA[0] && $db[1] != 1);
  return if scalar(@x) != $dA[0];

  my $n = scalar(@x);
  for (my $k = 1; $k <= $niter; $k++) { 
    for (my $i = 1; $i <= $n; $i++) {
       my $s = 0;
       for (my $j = 1; $j <= $n; $j++) {
         $s = $s + $A->element($i,$j)*$x[$j-1] if ($j != $i);
       }
       $x[$i-1] = ($b->element($i,1) - $s)/$A->element($i,$i);
    }
  }
  return @x;
}

do {
  do {
    do {
      $A = Matrix([random(2,5)*random(-1,1,2),non_zero_random(-2,2)],[random(3,5)*random(-1,1,2), random(4,5)*random(-1,1,2)]);
  } until ($A->det != 0 && abs($A->det) < 20 && gcd($A->element(1,1), $A->element(1,2)) == 1 && gcd($A->element(2,1), $A->element(2,2)) == 1);
    $b = Matrix([non_zero_random(-5,5)],[random(10,15)*random(-1,1,2)]);
    $x = ($A->inverse)*$b;
    $x1s = $x->element(1,1); $x2s = $x->element(2,1);
  } until (2*$x1s == floor(2*$x1s) && 2*$x2s == floor(2*$x2s));

  @x1 = gs_iter($A,$b,1,(0,0));
  @x2 = gs_iter($A,$b,2,(0,0));
  @x3 = gs_iter($A,$b,3,(0,0));
} until (abs($x1s - $x3[0]) < 0.5 && abs($x2s - $x3[1]) < 0.5);

$dS = dispSyst($A,$b,(2,2));


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Compute the first three Gauss-Seidel iterations of the system $PAR \[ $dS \] $PAR using 0 as the initial value for each variable. Then find the exact solution and compare.
$PAR
Gauss-Seidel Iteration:
\{ 
BeginTable(border=>1, tex_border=>"1pt", spacing=>0, padding=>4).
AlignedRow(["\(n\)","\(x_1\)","\(x_2\)"], separation=>0).
AlignedRow(["\(0\)","\(0\)","\(0\)"], separation=>0).
AlignedRow(["\(1\)",ans_rule(5),ans_rule(5)], separation=>0).
AlignedRow(["\(2\)",ans_rule(5),ans_rule(5)], separation=>0).
AlignedRow(["\(3\)",ans_rule(5),ans_rule(5)], separation=>0).
EndTable()
\}
$PAR $BR
Actual solution: \((x_1,x_2) =\) \{ans_rule(15)\}
$PAR 
Help: To enter a solution \((a,b)\), type your answer as a point ${BBOLD}(a,b)${EBOLD}.
END_TEXT
Context()->normalStrings;


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($x1[0])->cmp); ANS(Compute($x1[1])->cmp); 
ANS(Compute($x2[0])->cmp); ANS(Compute($x2[1])->cmp); 
ANS(Compute($x3[0])->cmp); ANS(Compute($x3[1])->cmp);
Context("Point");
ANS(Point($x1s,$x2s)->cmp());



###########################################################################
# solution
###########################################################################
BEGIN_SOLUTION
${BBOLD}SOLUTION:${EBOLD} $PAR
Gauss-Seidel Iteration:
\[
\begin{array}{c|c|c}
n & x_1 & x_2 \\\hline
0 & 0 & 0\\
1 & $x1[0] & $x1[1] \\
2 & $x2[0] & $x2[1] \\
3 & $x3[0] & $x3[1]
\end{array}
\]
$PAR
Actual solution: \((x_1,x_2) = ($x1s,$x2s)\)
END_SOLUTION
Context()->normalStrings;

COMMENT('Created in 2013.
$BR
Desc: Compute the first three Gauss-Seidel iterations and find the actual solution.');
ENDDOCUMENT();