# DESCRIPTION
# Find echelon form and then solve the system.
# ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Systems of linear equations)
## DBsection(Augmented matrices)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## Level(3)
## MO(1)
## TitleText1('Linear Algebra')
## AuthorText1('Holt')
## EditionText1('1e')
## Section1('1.2')
## Problem1('23')
## KEYWORDS('linear equations', 'system', 'systems', 'matrices')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(  
  "MathObjects.pl",
  "PGstandard.pl",
  "parserPopUp.pl", 
  "parserMultiAnswer.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Matrix");
sub dispMat {
  my $A = shift;
  my @d = $A->dimensions;
  my @a = ();
  my $dA = "\left[\begin{array}{";
  for (my $i = 0; $i < $d[1]; $i++) {
    $dA = $dA."r";
  }
  $dA = $dA."}";
  for (my $i = 0; $i < $d[0]; $i++) {
    for (my $j = 0; $j < $d[1]; $j++) {
      $a[$i][$j] = $A->element($i+1,$j+1);
      if ($j != $d[1] - 1) {
        $dA = $dA." $a[$i][$j] & ";
      } elsif ($j == $d[1] - 1 && $i != $d[0] -1) {
        $dA = $dA." $a[$i][$j] \\";
      } else {
        $dA = $dA." $a[$i][$j]";
      }
    }
  }
  $dA = $dA."\end{array}\right]";
  return ($dA, @a);
}

sub dispSyst {
  my $A = shift;
  my $b = shift;
  my @d = @_;
  my $dS = "\begin{array}{";
  for (my $i = 0; $i < $d[0]; $i++) {
    $dS = $dS."rc";
  }
  $dS = $dS."r}";
  for (my $i = 0; $i < $d[0]; $i++) {
    my $jnonzero = 0;
    for (my $j = 0; $j < $d[1]; $j++) {
      $a[$i][$j] = $A->element($i+1,$j+1);
      if ($j == 0) {
        if ($a[$i][$j] == 1) {
          $dS = $dS." x_1 ";   $jnonzero = 1;
        } elsif ($a[$i][$j] == -1) {
          $dS = $dS."-x_1 ";  $jnonzero = 1;
        } elsif ($a[$i][$j] != 0) {
          $dS = $dS."$a[$i][$j] x_1";  $jnonzero = 1;
        }
        if ($d[1] == 1) {
          if ($j == $d[1] - 1 && $i != $d[0] - 1) {
            $dS = $dS." & = & ".$b->element($i+1,1)." \\";
          } elsif ($j == $d[1] - 1 && $i == $d[0] - 1) {
            $dS = $dS." & = & ".$b->element($i+1,1);
          }
        }
      } else {
        if ($a[$i][$j] == 0) {
          $dS = $dS." & & ";
        } else {
          my $pm = ($a[$i][$j] > 0) ? "+" : "-";
          if ($jnonzero == 0 && $a[$i][$j] > 0) { $pm = "" };
          my $tmp = ($a[$i][$j] < 0) ? -$a[$i][$j] : $a[$i][$j];
          my $subsc = $j+1;
          if ($tmp == 1) {
            $dS = $dS." & $pm & x_{$subsc}";
          } else {
            $dS = $dS." & $pm & $tmp x_{$subsc}";
          }
          $jnonzero = 1;
        }
        if ($j == $d[1] - 1 && $i != $d[0] - 1) {
          $dS = $dS." & = & ".$b->element($i+1,1)." \\";
        } elsif ($j == $d[1] - 1 && $i == $d[0] - 1) {
          $dS = $dS." & = & ".$b->element($i+1,1);
        }
      }
    }
  }
  $dS = $dS."\end{array}";
  return $dS;
}

do {
  $ech = Matrix([non_zero_random(-1,1,2),non_zero_random(-5,5), 0, non_zero_random(-5,5)], [0, 0, non_zero_random(-1,1), non_zero_random(-5,5)], [0,0,0,0]);
  $E1 = Matrix([[1,0,0],[0,1,0],[0,non_zero_random(-1,1,2),1]]);
  $B1 = ($E1->inverse)*$ech;
  $E2 = Matrix([[1,0,0],[random(2,4)*random(-1,1,2),1,0],[random(2,4)*random(-1,1,2),0,1]]);
  $B2 = ($E2->inverse)*$B1;
  $E3 = Matrix([[0,1,0],[1,0,0],[0,0,1]]);
  $B = ($E3->inverse)*$B2;
  ($dB, @b) = dispMat($B);
  
  ($dEch, @e) = dispMat($ech);
  $x[1] = 0;
  $s[1] = 1;
  $x[2] = $e[1][3]/$e[1][2];
  $s[2] = 0;
  $x[0] = ($e[0][3] - $e[0][1]*$x[1])/$e[0][0];
  $s[0] = -$e[0][1]/$e[0][0];
} until ($b[0][0] == floor($b[0][0]) && $b[0][1] == floor($b[0][1]) && $b[0][2] == floor($b[0][2]) && $b[0][3] == floor($b[0][3]) && $b[1][0] == floor($b[1][0]) && $b[1][1] == floor($b[1][1]) && $b[1][2] == floor($b[1][2]) && $b[1][3] == floor($b[1][3]) && $b[2][0] == floor($b[2][0]) && $b[2][1] == floor($b[2][1]) && $b[2][2] == floor($b[2][2]) && $b[2][3] == floor($b[2][3]) && floor($x[1]) == $x[1] && floor($x[0]) == $x[0] && floor($x[2]) == $x[2] && abs($b[0][0]) != abs($b[0][1]) && abs($b[1][0]) != abs($b[1][1]) && abs($x[0]) < 20 && abs($x[1]) < 20 && abs($x[2]) < 20 && abs($s[0]) < 20 && abs($s[1]) < 20 && abs($s[2]) < 20 && floor($s[1]) == $s[1] && floor($s[0]) == $s[0] && abs($b[0][1]) != abs($b[2][1]));

$dS = dispSyst(Matrix([$b[0][0], $b[0][1], $b[0][2]], [$b[1][0], $b[1][1], $b[1][2]], [$b[2][0], $b[2][1], $b[2][2]]), Matrix([$b[0][3]],[$b[1][3]], [$b[2][3]]), (3,3));
$pop = PopUp(["select", "yes", "no"], "yes");
$soln = MultiAnswer($x[0],$s[0],$x[1],$s[1],$x[2],$s[2])->with(
  singleResult=>0,
  allowBlankAnswers => 1,
  checker => sub {
    my ($cor, $stud, $self) = @_;
    my ($c1,$c2,$c3,$c4,$c5,$c6) = @{$cor};
    my ($s1,$s2,$s3,$s4,$s5,$s6) = @{$stud};
    my @sf = (Formula("$s1 + $s2 x")->reduce, Formula("$s3 + $s4 x")->reduce, Formula("$s5 + $s6 x")->reduce);
    my @cf = (Formula("$c1 + $c2 x")->reduce, Formula("$c3 + $c4 x")->reduce, Formula("$c5 + $c6 x")->reduce);
    my @a = ($cf[0] == $sf[0], $cf[1] == $sf[1], $cf[2] == $sf[2], $cf[3] == $sf[3], $cf[4] == $sf[4], $cf[5] == $sf[5]);
    my @sum = (0,0);
    for ($i = 0; $i < 2; $i++) {
      for ($j = 0; $j < 3; $j++) {
        $sum[$i] = $b[$i][$j]*$sf[$j] + $sum[$i];
      }
      return [$a[0],$a[1],$a[2],$a[3],$a[4],$a[5]] if $sum[$i] != $b[$i][3];
    }
    return [1,1,1,1,1,1];
  }
);


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Convert the system
$PAR \[ $dS \] $PAR
to an augmented matrix. Then reduce the system to echelon form and determine if the system is consistent. If the system in consistent, then find all solutions.
$PAR
Augmented matrix: \{ans_rule(35)\}
$PAR
Echelon form: \{ans_rule(35)\}
$PAR
Is the system consistent? \{$pop->menu()\}
$PAR
Solution: \((x_1,x_2,x_3) = \bigg(\) \{$soln->ans_rule(4)\} \(+\) \{$soln->ans_rule(4)\} \(s_1\), \{$soln->ans_rule(4)\} \(+\) \{$soln->ans_rule(4)\} \(s_1\), \{$soln->ans_rule(4)\} \(+\) \{$soln->ans_rule(4)\} \(s_1\bigg)\)
$PAR ${BBOLD}Help:${EBOLD} To enter a matrix use $BBOLD [[ ],[ ]] $EBOLD. For example, to enter the \(2\times 3\) matrix
$PAR\[
\left[\begin{array}{ccc}
1 & 2 & 3 \\ 6 & 5 & 4
\end{array}\right]
\]$PAR you would type [[1,2,3],[6,5,4]], so each inside set of [ ] represents a row. If there is no free variable in the solution, then type \(0\) in each of the answer blanks directly before each \(s_1\). For example, if the answer is \((x_1,x_2,x_3) = (5,-2,1)\), then you would enter \((5 + 0s_1, -2 + 0s_1, 1+ 0s_1)\).  If the system is inconsistent, you do not have to type anything in the ${LQ}Solution${RQ} answer blanks.
END_TEXT
Context()->normalStrings;


###########################################################################
# check the answer  
###########################################################################
ANS($B->cmp());

ANS($ech->cmp(
  checker => sub {
    ($correct,$student,$ans) = @_;
    my @d = $student->dimensions;
    return 0 unless $d[0] == 3 && $d[1] == 4;
    return 0 if ($student->element(1,1) == 0 || $student->element(2,3) == 0 || $student->element(2,1) != 0 || $student->element(2,2) != 0);
    for (my $i = 1; $i <= $d[1]; $i++) {
      return 0 if $student->element(3,$i) != 0;
    }
    my @dd = ();
    for (my $i = 0; $i < $d[0]; $i++) {
      for (my $j = 0; $j < $d[1]; $j++) {
        $dd[$i][$j] = $student->element($i+1,$j+1);
      }
    }
    my $x3 = "$dd[1][3]/$dd[1][2]";
    my $x2 = "x";
    my $x1 = "($dd[0][3] - $dd[0][1] $x2 - $dd[0][2] $x3)/$dd[0][0]";
    my ($x1f, $x2f, $x3f) = (Formula($x1)->reduce, Formula($x2)->reduce, Formula($x3)->reduce);
    my ($a1f, $a2f, $a3f) = (Formula("$x[0] + $s[0] x"), Formula("$x[1] + $s[1] x"), Formula("x"));
    return 0 unless $x1f == Formula("$x[0] + $s[0]x") && Formula($x2) == Formula("$x[1] + $s[1] x");
    return 1;
  }
));

ANS($pop->cmp());
ANS($soln->cmp());


###########################################################################
# solution
###########################################################################
Context()->texStrings;
($dB1, @b1) = dispMat($B1);
($dB2, @b2) = dispMat($B2);
$p1 = $E2->element(2,1);
$p2 = $E2->element(3,1);
$p3 = nicestring([$E1->element(3,2)],["R_2"]);
$eq1 = nicestring([$e[0][0], $e[0][1]],["x_1", "s_1"]);
$da1 = nicestring([$x[0],$s[0]],["","s_1"]);
BEGIN_SOLUTION
${BBOLD}SOLUTION:${EBOLD} $PAR
\(\begin{array}{ccc} $dB & \overset{R_1 \Leftrightarrow R_2}{\sim} & $dB2 \\\
& \overset{\begin{align*}$p1 R_1 + R_2 &\Rightarrow R_2 \\ $p2 R_1 + R_3 &\Rightarrow R_3\end{align*}}{\sim} & $dB1 \\ & \overset{$p3 + R_3 \Rightarrow R_3}{\sim} & $dEch \end{array}\) $PAR
Free variable, \(x_2 = s_1\). Row 2 \(\Rightarrow x_3 = $x[2]\). Row 3 \(\Rightarrow $eq1 = $e[0][3] \Rightarrow x_3 = $da1\).
END_SOLUTION
Context()->normalStrings;

COMMENT('Created in 2013.
$BR
Desc: Find echelon form and then solve the system.');
ENDDOCUMENT();