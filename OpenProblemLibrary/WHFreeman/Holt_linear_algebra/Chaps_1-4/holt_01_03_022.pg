# DESCRIPTION
# Compute the four three Jacobi iterations of the given system, and then rewrite the system as diagonally dominant, and then compute the first four Jacobi iterations of the rewritten system.
# ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Systems of linear equations)
## DBsection(Systems with 2 variables)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## Level(3)
## MO(1)
## TitleText1('Linear Algebra')
## AuthorText1('Holt')
## EditionText1('1e')
## Section1('1.3')
## Problem1('22')
## KEYWORDS('linear equations', 'system', 'systems', 'numerical', 'applications')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PGstandard.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Matrix");
sub dispSyst {
  my $A = shift;
  my $b = shift;
  my @d = @_;
  my $dS = "\begin{array}{";
  for (my $i = 0; $i < $d[0]; $i++) {
    $dS = $dS."rc";
  }
  $dS = $dS."r}";
  for (my $i = 0; $i < $d[0]; $i++) {
    my $jnonzero = 0;
    for (my $j = 0; $j < $d[1]; $j++) {
      $a[$i][$j] = $A->element($i+1,$j+1);
      if ($j == 0) {
        if ($a[$i][$j] == 1) {
          $dS = $dS." x_1 ";   $jnonzero = 1;
        } elsif ($a[$i][$j] == -1) {
          $dS = $dS."-x_1 ";  $jnonzero = 1;
        } elsif ($a[$i][$j] != 0) {
          $dS = $dS."$a[$i][$j] x_1";  $jnonzero = 1;
        }
        if ($d[1] == 1) {
          if ($j == $d[1] - 1 && $i != $d[0] - 1) {
            $dS = $dS." & = & ".$b->element($i+1,1)." \\";
          } elsif ($j == $d[1] - 1 && $i == $d[0] - 1) {
            $dS = $dS." & = & ".$b->element($i+1,1);
          }
        }
      } else {
        if ($a[$i][$j] == 0) {
          $dS = $dS." & & ";
        } else {
          my $pm = ($a[$i][$j] > 0) ? "+" : "-";
          if ($jnonzero == 0 && $a[$i][$j] > 0) { $pm = "" };
          my $tmp = ($a[$i][$j] < 0) ? -$a[$i][$j] : $a[$i][$j];
          my $subsc = $j+1;
          if ($tmp == 1) {
            $dS = $dS." & $pm & x_{$subsc}";
          } else {
            $dS = $dS." & $pm & $tmp x_{$subsc}";
          }
          $jnonzero = 1;
        }
        if ($j == $d[1] - 1 && $i != $d[0] - 1) {
          $dS = $dS." & = & ".$b->element($i+1,1)." \\";
        } elsif ($j == $d[1] - 1 && $i == $d[0] - 1) {
          $dS = $dS." & = & ".$b->element($i+1,1);
        }
      }
    }
  }
  $dS = $dS."\end{array}";
  return $dS;
}

sub jac_iter {
  my $A = shift(); # matrices Ax = b
  my $b = shift(); 
  my $niter = shift();
  my @x = @_;  # initial guess
  my @dA = $A->dimensions;
  my @db = $b->dimensions;
  return if ($dA[0] != $dA[1] && $db[0] != $dA[0] && $db[1] != 1);
  return if scalar(@x) != $dA[0];

  $n = scalar(@x);
  my @xs = (1..$n);
  for (my $k = 1; $k <= $niter; $k++) { 
    for (my $i = 1; $i <= $n; $i++) {
       $xs[$i-1] = 0;
       for (my $j = 1; $j <= $n; $j++) {
         $xs[$i-1] = $xs[$i-1] + $A->element($i,$j)*$x[$j-1] if ($j != $i);
       }
       $xs[$i-1] = ($b->element($i,1) - $xs[$i-1])/$A->element($i,$i);
    }
    @x = @xs;
  }
  return @xs;
}

do {
  do {
    $a11 = non_zero_random(-5,5);
    $a12 = non_zero_random(-5,5);
  } until (abs($a11) < abs($a12));
  do {
    $a21 = non_zero_random(-5,5);
    $a22 = non_zero_random(-5,5);
  } until (abs($a22) < abs($a21));
  $A = Matrix([$a11,$a12],[$a21,$a22]);
} until ($A->det != 0);
@x = (non_zero_random(-5,5), non_zero_random(-9,9));
@b = ($a11*$x[0] + $a12*$x[1], $a21*$x[0] + $a22*$x[1]);
$bm = Matrix([$b[0]], [$b[1]]);

@x11 = jac_iter($A,$bm,1,(0,0));
@x21 = jac_iter($A,$bm,2,(0,0));
@x31 = jac_iter($A,$bm,3,(0,0));
@x41 = jac_iter($A,$bm,4,(0,0));

$An = Matrix([$a21,$a22],[$a11,$a12]);
$bn = Matrix([$b[1]], [$b[0]]);
@x12 = jac_iter($An,$bn,1,(0,0));
@x22 = jac_iter($An,$bn,2,(0,0));
@x32 = jac_iter($An,$bn,3,(0,0));
@x42 = jac_iter($An,$bn,4,(0,0));

$dS = dispSyst($A,$bm,(2,2));
$dSn = dispSyst($An,$bn,(2,2));

Context()->variables->add(x1 => ["Real", TeX=>"x_1"], x2 => ["Real", TeX=>"x_2"]);


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Compute the first four Jacobi iterations of the system $PAR \[ $dS \] $PAR using 0 as the initial value for each variable. Then rewrite the system so that it is diagonally dominant, set the value of each variable to 0, and again compute four Jacobi iterations.
$PAR
Jacobi Iterations before rewriting:
\{ 
BeginTable(border=>1, tex_border=>"1pt", spacing=>0, padding=>4).
AlignedRow(["\(n\)","\(x_1\)","\(x_2\)"], separation=>0).
AlignedRow(["\(0\)","\(0\)","\(0\)"], separation=>0).
AlignedRow(["\(1\)",ans_rule(5),ans_rule(5)], separation=>0).
AlignedRow(["\(2\)",ans_rule(5),ans_rule(5)], separation=>0).
AlignedRow(["\(3\)",ans_rule(5),ans_rule(5)], separation=>0).
AlignedRow(["\(4\)",ans_rule(5),ans_rule(5)], separation=>0).
EndTable()
\}
$PAR $BR
Rewrite the system to be diagonally dominant: $BR
\{ans_rule(15)\} = \{ans_rule(5)\} $BR
\{ans_rule(15)\} = \{ans_rule(5)\}
$PAR $BR
Jacobi iterations after rewriting:
$PAR 
\{ 
BeginTable(border=>1, tex_border=>"1pt", spacing=>0, padding=>4).
AlignedRow(["\(n\)","\(x_1\)","\(x_2\)"], separation=>0).
AlignedRow(["\(0\)","\(0\)","\(0\)"], separation=>0).
AlignedRow(["\(1\)",ans_rule(5),ans_rule(5)], separation=>0).
AlignedRow(["\(2\)",ans_rule(5),ans_rule(5)], separation=>0).
AlignedRow(["\(3\)",ans_rule(5),ans_rule(5)], separation=>0).
AlignedRow(["\(4\)",ans_rule(5),ans_rule(5)], separation=>0).
EndTable()
\}
END_TEXT
Context()->normalStrings;


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($x11[0])->cmp); ANS(Compute($x11[1])->cmp); 
ANS(Compute($x21[0])->cmp); ANS(Compute($x21[1])->cmp); 
ANS(Compute($x31[0])->cmp); ANS(Compute($x31[1])->cmp);
ANS(Compute($x41[0])->cmp); ANS(Compute($x41[1])->cmp);

$LHS1 = nicestring([$a11,$a12], ["x1","x2"]);
$LHS2 = nicestring([$a21,$a22], ["x1","x2"]);
ANS(Formula($LHS2)->cmp());
ANS(Formula($b2)->cmp());
ANS(Formula($LHS1)->cmp());
ANS(Formula($b1)->cmp());

ANS(Compute($x12[0])->cmp); ANS(Compute($x12[1])->cmp); 
ANS(Compute($x22[0])->cmp); ANS(Compute($x22[1])->cmp); 
ANS(Compute($x32[0])->cmp); ANS(Compute($x32[1])->cmp);
ANS(Compute($x42[0])->cmp); ANS(Compute($x42[1])->cmp);


###########################################################################
# solution
###########################################################################
Context()->texStrings;
BEGIN_SOLUTION
${BBOLD}SOLUTION:${EBOLD} $PAR
Jacobi Iterations before rewriting:
\[
\begin{array}{c|c|c}
n & x_1 & x_2 \\\hline
0 & 0 & 0\\
1 & $x11[0] & $x11[1] \\
2 & $x21[0] & $x21[1] \\
3 & $x31[0] & $x31[1] \\
4 & $x41[0] & $x41[1]
\end{array}
\]
$PAR
System rewritten to be diagonally dominant: \( $dSn\)
$PAR
Jacobi iterations after rewriting:
\[
\begin{array}{c|c|c}
n & x_1 & x_2 \\\hline
0 & 0 & 0\\
1 & $x12[0] & $x12[1] \\
2 & $x22[0] & $x22[1] \\
3 & $x32[0] & $x32[1] \\
4 & $x42[0] & $x42[1]
\end{array}
\]
END_SOLUTION
Context()->normalStrings;

COMMENT('Created in 2013.
$BR
Desc: Compute the four three Jacobi iterations of the given system, and then rewrite the system as diagonally dominant, and then compute the first four Jacobi iterations of the rewritten system.');
ENDDOCUMENT();