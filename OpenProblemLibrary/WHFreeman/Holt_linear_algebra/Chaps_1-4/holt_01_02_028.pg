# DESCRIPTION
# Find echelon form and then solve the system.
# ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Systems of linear equations)
## DBsection(Augmented matrices)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## Level(3)
## MO(1)
## TitleText1('Linear Algebra')
## AuthorText1('Holt')
## EditionText1('1e')
## Section1('1.2')
## Problem1('28')
## KEYWORDS('linear equations', 'system', 'systems', 'matrices')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(  
  "MathObjects.pl",
  "PGstandard.pl",
  "parserPopUp.pl", 
  "parserMultiAnswer.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Matrix");
sub dispMat {
  my $A = shift;
  my @d = $A->dimensions;
  my @a = ();
  my $dA = "\left[\begin{array}{";
  for (my $i = 0; $i < $d[1]; $i++) {
    $dA = $dA."r";
  }
  $dA = $dA."}";
  for (my $i = 0; $i < $d[0]; $i++) {
    for (my $j = 0; $j < $d[1]; $j++) {
      $a[$i][$j] = $A->element($i+1,$j+1);
      if ($j != $d[1] - 1) {
        $dA = $dA." $a[$i][$j] & ";
      } elsif ($j == $d[1] - 1 && $i != $d[0] -1) {
        $dA = $dA." $a[$i][$j] \\";
      } else {
        $dA = $dA." $a[$i][$j]";
      }
    }
  }
  $dA = $dA."\end{array}\right]";
  return ($dA, @a);
}

sub dispSyst {
  my $A = shift;
  my $b = shift;
  my @d = @_;
  my $dS = "\begin{array}{";
  for (my $i = 0; $i < $d[0]; $i++) {
    $dS = $dS."rc";
  }
  $dS = $dS."r}";
  for (my $i = 0; $i < $d[0]; $i++) {
    my $jnonzero = 0;
    for (my $j = 0; $j < $d[1]; $j++) {
      $a[$i][$j] = $A->element($i+1,$j+1);
      if ($j == 0) {
        if ($a[$i][$j] == 1) {
          $dS = $dS." x_1 ";   $jnonzero = 1;
        } elsif ($a[$i][$j] == -1) {
          $dS = $dS."-x_1 ";  $jnonzero = 1;
        } elsif ($a[$i][$j] != 0) {
          $dS = $dS."$a[$i][$j] x_1";  $jnonzero = 1;
        }
        if ($d[1] == 1) {
          if ($j == $d[1] - 1 && $i != $d[0] - 1) {
            $dS = $dS." & = & ".$b->element($i+1,1)." \\";
          } elsif ($j == $d[1] - 1 && $i == $d[0] - 1) {
            $dS = $dS." & = & ".$b->element($i+1,1);
          }
        }
      } else {
        if ($a[$i][$j] == 0) {
          $dS = $dS." & & ";
        } else {
          my $pm = ($a[$i][$j] > 0) ? "+" : "-";
          if ($jnonzero == 0 && $a[$i][$j] > 0) { $pm = "" };
          my $tmp = ($a[$i][$j] < 0) ? -$a[$i][$j] : $a[$i][$j];
          my $subsc = $j+1;
          if ($tmp == 1) {
            $dS = $dS." & $pm & x_{$subsc}";
          } else {
            $dS = $dS." & $pm & $tmp x_{$subsc}";
          }
          $jnonzero = 1;
        }
        if ($j == $d[1] - 1 && $i != $d[0] - 1) {
          $dS = $dS." & = & ".$b->element($i+1,1)." \\";
        } elsif ($j == $d[1] - 1 && $i == $d[0] - 1) {
          $dS = $dS." & = & ".$b->element($i+1,1);
        }
      }
    }
  }
  $dS = $dS."\end{array}";
  return $dS;
}


do {
  $t1 = 1;
  $ech = Matrix([1,0,0,non_zero_random(-5,5)],[0,1,0,non_zero_random(-5,5)],[0,0,1,non_zero_random(-5,5)])->wwMatrix;
  $ch = random(1,3);
  $ech->assign($ch,4,0);
  $ech = Matrix($ech);
  $E1 = Matrix([1,0,0],[0,-1,0],[0,0,random(-1,1,2)/random(2,4)]);
  $E2 = Matrix([1,0,random(-1,1,2)/random(2,4)],[0,1,random(-1,1,2)],[0,0,1]);
  $E3 = Matrix([1,0,0],[0,1,0],[0,random(2,5)*random(-1,1,2),1]);
  $E4 = Matrix([1,0,0],[0,0,1],[0,1,0]);
  $E5 = Matrix([1,0,0],[random(2,4)*random(-1,1,2),1,0],[random(2,4)*random(-1,1,2),0,1]);
  $E6 = Matrix([0,1,0],[1,0,0],[0,0,1]);
  $B1 = ($E1->inverse)*$ech;
  $B2 = ($E2->inverse)*$B1;
  $B3 = ($E3->inverse)*$B2;
  $B4 = ($E4->inverse)*$B3;
  $B5 = ($E5->inverse)*$B4;
  $B = ($E6->inverse)*$B5;
  ($dB, @b) = dispMat($B);

  for ($i = 0; $i < 3; $i++) {
    for ($j = 0; $j < 4; $j++) {
      $t1 = 0 if $b[$i][$j] != floor($b[$i][$j]);
    }
  }
  
  ($dEch, @e) = dispMat($ech);
} until ($t1 == 1);
@x = ($e[0][3], $e[1][3], $e[2][3]);

$dS = dispSyst(Matrix([$b[0][0], $b[0][1], $b[0][2]], [$b[1][0], $b[1][1], $b[1][2]], [$b[2][0], $b[2][1], $b[2][2]]), Matrix([$b[0][3]],[$b[1][3]], [$b[2][3]]), (3,3));
$pop = PopUp(["select", "yes", "no"], "yes");
$soln = MultiAnswer($x[0],0,$x[1],0,$x[2],0)->with(
  singleResult=>0,
  allowBlankAnswers => 1,
  checker => sub {
    my ($cor, $stud, $self) = @_;
    my ($c1,$c2,$c3,$c4,$c5,$c6) = @{$cor};
    my ($s1,$s2,$s3,$s4,$s5,$s6) = @{$stud};
    my ($a1,$a2,$a3,$a4,$a5,$a6) = ($c1 == $s1, $c2 == $s2, $c3 == $s3, $c4 == $s4, $c5 == $s5, $c6 == $s6);
    return [$a1,$a2,$a3,$a4,$a5,$a6];
  }
);


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Convert the system
$PAR \[ $dS \] $PAR
to an augmented matrix. Then transform the system to reduced echelon form and determine if the system is consistent. If the system is consistent, then find all solutions.
$PAR
Augmented matrix: \{ans_rule(35)\}
$PAR
Reduced echelon form: \{ans_rule(35)\}
$PAR
Is the system consistent? \{$pop->menu()\}
$PAR
Solution: \((x_1,x_2,x_3) = \bigg(\) \{$soln->ans_rule(4)\} \(+\) \{$soln->ans_rule(4)\} \(s_1\), \{$soln->ans_rule(4)\} \(+\) \{$soln->ans_rule(4)\} \(s_1\), \{$soln->ans_rule(4)\} \(+\) \{$soln->ans_rule(4)\} \(s_1\bigg)\)
$PAR ${BBOLD}Help:${EBOLD} To enter a matrix use $BBOLD [[ ],[ ]] $EBOLD. For example, to enter the \(2\times 3\) matrix
$PAR\[
\left[\begin{array}{ccc}
1 & 2 & 3 \\ 6 & 5 & 4
\end{array}\right]
\]$PAR you would type [[1,2,3],[6,5,4]], so each inside set of [ ] represents a row. If there is no free variable in the solution, then type \(0\) in each of the answer blanks directly before each \(s_1\). For example, if the answer is \((x_1,x_2,x_3) = (5,-2,1)\), then you would enter \((5 + 0s_1, -2 + 0s_1, 1+ 0s_1)\).  If the system is inconsistent, you do not have to type anything in the ${LQ}Solution${RQ} answer blanks.
END_TEXT
Context()->normalStrings;


###########################################################################
# check the answer  
###########################################################################
ANS($B->cmp());
ANS($ech->cmp());
ANS($pop->cmp());
ANS($soln->cmp());


###########################################################################
# solution
###########################################################################
Context()->texStrings;
($dB1, @b1) = dispMat($B1);
($dB2, @b2) = dispMat($B2);
($dB3, @b3) = dispMat($B3);
($dB4, @b4) = dispMat($B4);
($dB5, @b5) = dispMat($B5);
$p1 = $E5->element(2,1); $p2 = $E5->element(3,1);
$p3 = $E3->element(3,2);
$p4 = nicestring([$E2->element(2,3)],["R_3"]); 
$p5 = ($E2->element(1,3) > 0) ? "1/".1/$E2->element(1,3) : "-1/".abs(1/$E2->element(1,3));
$p6 = ($E1->element(3,3) > 0) ? "1/".1/$E1->element(3,3) : "-1/".abs(1/$E1->element(3,3));
BEGIN_SOLUTION
${BBOLD}SOLUTION:${EBOLD} $PAR
\(\begin{array}{ccc} 
$dB & \overset{R_1 \Leftrightarrow R_2}{\sim} & $dB5\\
        & \overset{\begin{align*} $p1 R_1 + R_2 &\Rightarrow R_2 \\ $p2 R_1 + R_3 &\Rightarrow R_3\end{align*}}{\sim} & $dB4\\
        & \overset{R_2 \Leftrightarrow R_3}{\sim} & $dB3\\
        & \overset{$p3 R_2 + R_3 \Rightarrow R_3}{\sim} & $dB2\\
        & \overset{\begin{align*} $p4 + R_2 &\Rightarrow R_2 \\ ($p5) R_3 + R_1 &\Rightarrow R_1\end{align*}}{\sim} & $dB1\\
        & \overset{\begin{align*} -R_2 &\Rightarrow R_2 \\ ($p6) R_3 &\Rightarrow R_3 \end{align*}}{\sim} & $dEch
\end{array}\) $PAR
Thus \(x_1 = $x[0]\), \(x_2 = $x[1]\), and \(x_3 = $x[2]\).
END_SOLUTION
Context()->normalStrings;

COMMENT('Created in 2013.
$BR
Desc: Find echelon form and then solve the system.');
ENDDOCUMENT();