# DESCRIPTION
# Find echelon form and then solve the system.
# ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Systems of linear equations)
## DBsection(Augmented matrices)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## Level(3)
## MO(1)
## TitleText1('Linear Algebra')
## AuthorText1('Holt')
## EditionText1('1e')
## Section1('1.2')
## Problem1('19')
## KEYWORDS('linear equations', 'system', 'systems', 'matrices')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(  
  "MathObjects.pl",
  "PGstandard.pl",
  "parserPopUp.pl", 
  "parserMultiAnswer.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Matrix");
sub dispMat {
  my $A = shift;
  my @d = $A->dimensions;
  my @a = ();
  my $dA = "\left[\begin{array}{";
  for (my $i = 0; $i < $d[1]; $i++) {
    $dA = $dA."r";
  }
  $dA = $dA."}";
  for (my $i = 0; $i < $d[0]; $i++) {
    for (my $j = 0; $j < $d[1]; $j++) {
      $a[$i][$j] = $A->element($i+1,$j+1);
      if ($j != $d[1] - 1) {
        $dA = $dA." $a[$i][$j] & ";
      } elsif ($j == $d[1] - 1 && $i != $d[0] -1) {
        $dA = $dA." $a[$i][$j] \\";
      } else {
        $dA = $dA." $a[$i][$j]";
      }
    }
  }
  $dA = $dA."\end{array}\right]";
  return ($dA, @a);
}

sub dispSyst {
  my $A = shift;
  my $b = shift;
  my @d = @_;
  my $dS = "\begin{array}{";
  for (my $i = 0; $i < $d[0]; $i++) {
    $dS = $dS."rc";
  }
  $dS = $dS."r}";
  for (my $i = 0; $i < $d[0]; $i++) {
    my $jnonzero = 0;
    for (my $j = 0; $j < $d[1]; $j++) {
      $a[$i][$j] = $A->element($i+1,$j+1);
      if ($j == 0) {
        if ($a[$i][$j] == 1) {
          $dS = $dS." x_1 ";   $jnonzero = 1;
        } elsif ($a[$i][$j] == -1) {
          $dS = $dS."-x_1 ";  $jnonzero = 1;
        } elsif ($a[$i][$j] != 0) {
          $dS = $dS."$a[$i][$j] x_1";  $jnonzero = 1;
        }
        if ($d[1] == 1) {
          if ($j == $d[1] - 1 && $i != $d[0] - 1) {
            $dS = $dS." & = & ".$b->element($i+1,1)." \\";
          } elsif ($j == $d[1] - 1 && $i == $d[0] - 1) {
            $dS = $dS." & = & ".$b->element($i+1,1);
          }
        }
      } else {
        if ($a[$i][$j] == 0) {
          $dS = $dS." & & ";
        } else {
          my $pm = ($a[$i][$j] > 0) ? "+" : "-";
          if ($jnonzero == 0 && $a[$i][$j] > 0) { $pm = "" };
          my $tmp = ($a[$i][$j] < 0) ? -$a[$i][$j] : $a[$i][$j];
          my $subsc = $j+1;
          if ($tmp == 1) {
            $dS = $dS." & $pm & x_{$subsc}";
          } else {
            $dS = $dS." & $pm & $tmp x_{$subsc}";
          }
          $jnonzero = 1;
        }
        if ($j == $d[1] - 1 && $i != $d[0] - 1) {
          $dS = $dS." & = & ".$b->element($i+1,1)." \\";
        } elsif ($j == $d[1] - 1 && $i == $d[0] - 1) {
          $dS = $dS." & = & ".$b->element($i+1,1);
        }
      }
    }
  }
  $dS = $dS."\end{array}";
  return $dS;
}

do {
  $ech = Matrix([random(2,5), non_zero_random(-5,5), non_zero_random(-5,5)],  [0, non_zero_random(-4,4), non_zero_random(-6,6)]);
  $m = random(2,5); $n = 1;
  $E1 = Matrix([1,0],[$m/$n,1]);
  $B = $E1*$ech;
  ($dB, @b) = dispMat($B);
  $A = Matrix([$b[0][0], $b[0][1]], [$b[1][0], $b[1][1]]);
  
  ($dEch, @e) = dispMat($ech);
  $x[1] = $e[1][2]/$e[1][1];
  $x[0] = ($e[0][2] - $e[0][1]*$x[1])/$e[0][0];
} until ($b[0][0] == floor($b[0][0]) && $b[0][1] == floor($b[0][1]) && $b[0][2] == floor($b[0][2]) && $b[1][0] == floor($b[1][0]) && $b[1][1] == floor($b[1][1]) && $b[1][2] == floor($b[1][2]) && $A->det != 0 && floor($x[1]) == $x[1] && floor($x[0]) == $x[0] && abs($b[0][0]) != abs($b[0][1]) && abs($b[1][0]) != abs($b[1][1]));

$dS = dispSyst(Matrix([$b[0][0], $b[0][1]], [$b[1][0], $b[1][1]]), Matrix([$b[0][2]],[$b[1][2]]), (2,2));
$pop = PopUp(["select", "yes", "no"], "yes");
$soln = MultiAnswer($x[0],0,$x[1],0)->with(
  singleResult=>0,
  allowBlankAnswers => 1,
  checker => sub {
    my ($cor, $stud, $self) = @_;
    my ($c1,$c2,$c3,$c4) = @{$cor};
    my ($s1,$s2,$s3,$s4) = @{$stud};
    my ($a1,$a2,$a3,$a4) = ($c1 == $s1, $c2 == $s2, $c3 == $s3, $c4 == $s4);
    return [$a1,$a2,$a3,$a4];
  }
);


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Convert the system
$PAR \[ $dS \] $PAR
to an augmented matrix. Then reduce the system to echelon form and determine if the system is consistent. If the system in consistent, then find all solutions.
$PAR
Augmented matrix: \{ans_rule(35)\}
$PAR
Echelon form: \{ans_rule(35)\}
$PAR
Is the system consistent? \{$pop->menu()\}
$PAR
Solution: \((x_1,x_2) = \bigg(\) \{$soln->ans_rule(4)\} \(+\) \{$soln->ans_rule(4)\} \(s_1\), \{$soln->ans_rule(4)\} \(+\) \{$soln->ans_rule(4)\} \(s_1\bigg)\)
$PAR ${BBOLD}Help:${EBOLD} To enter a matrix use $BBOLD [[ ],[ ]] $EBOLD. For example, to enter the \(2\times 3\) matrix
$PAR\[
\left[\begin{array}{ccc}
1 & 2 & 3 \\ 6 & 5 & 4
\end{array}\right]
\]$PAR you would type [[1,2,3],[6,5,4]], so each inside set of [ ] represents a row. If there is no free variable in the solution, then type \(0\) in each of the answer blanks directly before each \(s_1\). For example, if the answer is \((x_1,x_2) = (5,-2)\), then you would enter \((5 + 0s_1, -2 + 0s_1)\).  If the system is inconsistent, you do not have to type anything in the ${LQ}Solution${RQ} answer blanks.
END_TEXT
Context()->normalStrings;


###########################################################################
# check the answer  
###########################################################################
ANS($B->cmp());

ANS($ech->cmp(
  checker => sub {
    ($correct,$student,$ans) = @_;
    my @d = $student->dimensions;
    return 0 unless $d[0] == 2 && $d[1] == 3;
    return 0 unless $student->element(2,1) == 0;
    return 0 unless ($student->element(2,2) != 0 && $student->element(1,1) != 0);
    my $x2 = $student->element(2,3)/$student->element(2,2);
    my $x1 = ($student->element(1,3) - $x2*$student->element(1,2))/$student->element(1,1);
    return 0 unless ($x1 == $x[0] && $x2 == $x[1]);
    return 1;
  }
));

ANS($pop->cmp());
ANS($soln->cmp());


###########################################################################
# solution
###########################################################################
Context()->texStrings;
BEGIN_SOLUTION
${BBOLD}SOLUTION:${EBOLD} $PAR
\($dB \overset{-$m R_1 + R_2 \Rightarrow R_2}{\sim} $dEch\) $PAR
Row 2 \(\Rightarrow x_2 = $x[1]\). Row 1 \(\Rightarrow $e[0][0] x_1 + $e[0][1]($x[1]) = $e[0][2]\Rightarrow x_1 = $x[0]\).
END_SOLUTION
Context()->normalStrings;

COMMENT('Created in 2013.
$BR
Desc: Find echelon form and then solve the system.');
ENDDOCUMENT();