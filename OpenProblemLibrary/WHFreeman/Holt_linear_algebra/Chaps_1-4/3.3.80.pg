##DESCRIPTION
##
##ENDDESCRIPTION


## DBsubject(Linear algebra)
## DBchapter(Matrices)
## DBsection(Inverses)
## Date(6/3/2013)
## Author(Darwyn Cook)
## Level(3)
## MO(1)
## TitleText1('Linear Algebra with Applications')
## AuthorText1('Holt')
## EditionText1('1')
## Section1('3.3')
## Problem1('80')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "freemanMacros.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
## First we create an integer matrix that has an integer inverse, using a paper from Jstor

$a = Compute(non_zero_random(-5,5));
$b = Compute(non_zero_random(-5,5));
$c = Compute(non_zero_random(-5,5));
$d = Compute(non_zero_random(-5,5));
$e = Compute(non_zero_random(-5,5));
$f = Compute(non_zero_random(-5,5));
$g = Compute(non_zero_random(-5,5));

Context("Matrix");

Context()->strings->add("pizzaz"=>{},"jazzed"=>{},"zizzle"=>{},"abated"=>{},"biding"=>{},"decals"=>{},"halves"=>{},"pashas"=>{},"rabbit"=>{});
$A = Matrix([[1+$b*$e+$a*$g,$a,$b],[$d+($c+$b*$d)*$e + (1 + $a*$d)*$g, 
  1 + $a*$d, $c + $b*$d], [$d*$f + $e*(1 + $c*$f + $b*$d*$f) + ($f + 
$a*$d*$f)*$g, $f + $a*$d*$f, 1 + $c*$f + $b*$d*$f]]);

$AI = $A->inverse;

# Six letter words, you can add as many as you like
@words = ("pizzaz","jazzed","zizzle","abated","biding","decals","halves","pashas","rabbit");

#bet there is an easier way to do this, create a code for each word in the list ...
%alphanumeric = ('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26);
@key1 = ();
@key2 = ();
foreach $word (@words){
     my @letters = split(undef,$word); #parses each word into a list of letters 
     push(@key1,Matrix([[$alphanumeric{$letters[0]}],[$alphanumeric{$letters[1]}],[$alphanumeric{$letters[2]}]]));       
     push(@key2,Matrix([[$alphanumeric{$letters[3]}],[$alphanumeric{$letters[4]}],[$alphanumeric{$letters[5]}]]));  
}

#Now lets pick a word to encode

$randomword = random(0,$#words);

$cypher1 = $A*$key1[$randomword];
$cypher2 = $A*$key2[$randomword];
@letters = split(undef,$words[$randomword]);

for ($i = 0; $i < 3; $i++) {
  $c[$i][0] = $cypher1->element($i+1,1);
  $c[$i][1] = $cypher2->element($i+1,1);
  $x[$i][0] = $key1[$randomword]->element($i+1,1);
  $x[$i][1] = $key2[$randomword]->element($i+1,1);
}
$dc = "\left[\begin{array}{rr} $c[0][0] & $c[0][1] \\ $c[1][0] & $c[1][1] \\ $c[2][0] & $c[2][1] \end{array}\right]";
$dx = "\left[\begin{array}{rr} $x[0][0] & $x[0][1] \\ $x[1][0] & $x[1][1] \\ $x[2][0] & $x[2][1] \end{array}\right]";


##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
\{ textbook_ref_exact("Holt Linear Algebra", "3.3","80") \}
$BR
For the encoding matrix 
$BR
\(A=$A\) 
$BR
decode the message \(\left[$cypher1,$cypher2\right]\),
$BR
which gives a six character word:
$BR \{ans_rule\}
END_TEXT
Context()->normalStrings;


##############################################################
#
#  Answers
#
#
ANS(String($words[$randomword])->cmp(showTypeWarnings=>0));
$dm1 = 
Context()->texStrings;
BEGIN_SOLUTION
${BBOLD}SOLUTION:${EBOLD} 
First notice that
\[
A^{-1} $dc = $A^{-1} $dc = $dx.
\]
Therefore, the decoded message is
\[
\left\lbrace $key1[$randomword], $key2[$randomword] \right\rbrace \rightarrow \left\lbrace \left[\begin{array}{r} \mbox{$letters[0]} \\ \mbox{$letters[1]} \\ \mbox{$letters[2]} \end{array}\right], \left[\begin{array}{r} \mbox{$letters[3]} \\ \mbox{$letters[4]} \\ \mbox{$letters[5]} \end{array}\right] \right\rbrace
\]
so the word is $words[$randomword].
END_SOLUTION
Context()->normalStrings;
ENDDOCUMENT();        