## DESCRIPTION
## Eigenvalues and eigenvectors of 3x3 matrix (distinct, real)
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Eigenvalues and eigenvectors)
## DBsection(Computing eigenvalues and eigenvectors)
## Date(11/06/2015)
## Institution(METU-NCC)
## Author(Benjamin Walter)
## MLT(find3x3eigen)
## MLTleader(1)
## Level(4)
## Static(1)
## MO(1)


##################################
#  Initialization

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "PGmatrixmacros.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "PGcourse.pl"
);


TEXT(beginproblem());

#####################################
#  Setup

Context("Numeric");

# 1) choose eigenvalues a,bc for matrix of form
#    [ 0 -ac  ]     [ 0   ac  ]
#    [ b a+bc ]  or [ -b a+bc ]
#
# 2) phase shift to get
#    [ p   -ac   ]
#    [ b  a+bc+p ]
#
#  eigenvalues (a+p) and (bc+p)
#  eigenvectors [c -1] and [a -b]
#
# 3) place elements on corners of 3x3 matrix
#
#    [ p     n    -ac  ]
#    [  0    L     0   ]
#    [ b     0  a+bc+p ]
#
#  eigenvectors change to 
#    [ c  0  -1 ]     and 
#    [ a  0  -b ]
#  other eigenvector will be 
#  [ ... ugly ... ]   with eigenval L
#

my $a, $c, $b, $neg, $min, $max, $phase, $n, $lambda1, $lambda2;
my $v11, $v21, $v31, $v12, $v22, $v32, $v13, $v23, $v33;

$a = non_zero_random(-5,5,1);
$c = random(1,3,1);
do { $b = non_zero_random(-5,5,1); } until (($b*$c != $a) and (abs($b*$c) < 10));

$neg = non_zero_random(-1,1,1);

$min = max(-9,-9-$a,-9-$b*$c);  $max = min(9,9-$a,9-$b*$c);
do { $phase = non_zero_random($min,$max,1); } until ((abs($a+$b*$c+$phase) < 12) and ($a != -$phase) and ($b*$c != -$phase));

$n = non_zero_random(-4,4,1);

$lambda1 =  Real("$a+$phase");
$lambda2 = Real("$b*$c+$phase");
do { $lambda3 = non_zero_random(-5,5,1); } until ($lambda3 != $lambda1 && $lambda3 != $lambda2);

$v11 = Real("$c");
$v21 = Real("0");
$v31 = Real("-$neg");

$v12 = Real("$a");
$v22 = Real("0");
$v32 = Real("-$neg*$b");

$A11 = $phase;   $A12 = $n;        $A13 =  -$neg*$a*$c;
$A21 = 0;        $A22 = $lambda3;  $A23 = 0;
$A31 = $neg*$b;  $A32 = 0;         $A33 =  $a+$b*$c+$phase;

$v13 = Real("$A12*($A33-$A22)");
$v23 = Real("$A13*$A31-($A11-$A22)*($A33-$A22)");
$v33 = Real("-$A12*$A31");



$multians1 = MultiAnswer($lambda1,$v11,$v21,$v31, $lambda2,$v12,$v22,$v32, $lambda3,$v13,$v23,$v33)->with(
    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  
    "<table border='0' cellspacing='0'>
    <tr>
      <td> %s, </td>
      <td><table border='0' cellspacing='5'><tr><td> %s </td></tr><tr><td> %s </td></tr><tr><td> %s </td></tr></table></td>
      <td>&nbsp;&nbsp;&nbsp;&nbsp; %s,</td>
      <td><table border='0' cellspacing='5'><tr><td> %s </td></tr><tr><td> %s </td></tr><tr><td> %s </td></tr></table></td>
      <td>&nbsp;&nbsp;&nbsp;&nbsp; %s,</td>
      <td><table border='0' cellspacing='5'><tr><td> %s </td></tr><tr><td> %s </td></tr><tr><td> %s </td></tr></table></td>
     </tr>
    </table>",
    tex_format =>  
    "%s, \left\lbrack \begin{array}{r} %s \\ %s \\ %s\end{array}\right\rbrack; \quad  
     %s, \left\lbrack \begin{array}{r} %s \\ %s \\ %s\end{array}\right\rbrack; \quad
     %s, \left\lbrack \begin{array}{r} %s \\ %s \\ %s\end{array}\right\rbrack",

    checker => sub {
        my ($correct, $student, $answerHash ) = @_;
        my @c = @{$correct};
	my @s = @{$student};

        my $flag1 = 0;
        my $flag2 = 0;
        my $flag3 = 0;
        my $flag  = 0;

        Value::Error("You should have three different eigenvalues") if
        $c[0]->typeMatch($s[0]) &&
        $c[4]->typeMatch($s[4]) &&
        $c[8]->typeMatch($s[8]) &&
        (($s[0] == $s[4]) || ($s[4] == $s[8]) || ($s[0] == $s[8]));
        
        if ( $c[0]->typeMatch($s[0]) && 
             $c[1]->typeMatch($s[1]) && 
             $c[2]->typeMatch($s[2]) && 
             $c[3]->typeMatch($s[3]) && 
             ($s[1] != 0 || $s[2] != 0 || $s[3] != 0) ) 
        {
          if ( ( $A11*$s[1] + $A12*$s[2] + $A13*$s[3] == $s[0]*$s[1]) &&
               ( $A21*$s[1] + $A22*$s[2] + $A23*$s[3] == $s[0]*$s[2]) &&
               ( $A31*$s[1] + $A32*$s[2] + $A33*$s[3] == $s[0]*$s[3]) 
          ){
                $flag1=1;
          }
        }
        if ( $c[4]->typeMatch($s[4]) && 
             $c[5]->typeMatch($s[5]) && 
             $c[6]->typeMatch($s[6]) && 
             $c[7]->typeMatch($s[7]) && 
             ($s[5] != 0 || $s[6] != 0 || $s[7] != 0) ) 
        {
          if ( ( $A11*$s[5] + $A12*$s[6] + $A13*$s[7] == $s[4]*$s[5]) &&
               ( $A21*$s[5] + $A22*$s[6] + $A23*$s[7] == $s[4]*$s[6]) &&
               ( $A31*$s[5] + $A32*$s[6] + $A33*$s[7] == $s[4]*$s[7]) 
           ){
                $flag2=1;
          }
        }
        if ( $c[8]->typeMatch($s[8]) && 
             $c[9]->typeMatch($s[9]) && 
             $c[10]->typeMatch($s[10]) && 
             $c[11]->typeMatch($s[11]) && 
             ($s[9] != 0 || $s[10] != 0 || $s[11] != 0) ) 
        {
          if ( ( $A11*$s[9] + $A12*$s[10] + $A13*$s[11] == $s[8]*$s[9]) &&
               ( $A21*$s[9] + $A22*$s[10] + $A23*$s[11] == $s[8]*$s[10]) &&
               ( $A31*$s[9] + $A32*$s[10] + $A33*$s[11] == $s[8]*$s[11]) 
           ){
                $flag3=1;
          }
        }

        if($flag1==1 && $flag2 ==1 && $flag3 ==1){
           $flag=1;
        }else{
           if ($flag1 == 1 || $flag2 ==1 || $flag3 ==1) {
             my $errorMsg = "\((\lambda_1, \boldsymbol{\vec{v}_1})\) is ";
             if ($flag1 == 1) {
              $errorMsg = $errorMsg . "correct; \((\lambda_2, \boldsymbol{\vec{v}_2})\) is ";
             } else { 
              $errorMsg = $errorMsg . "incorrect; \((\lambda_2, \boldsymbol{\vec{v}_2})\) is ";
             } if ($flag2 == 1) { 
              $errorMsg = $errorMsg . "correct; \((\lambda_3, \boldsymbol{\vec{v}_3})\) is ";
             } else { 
              $errorMsg = $errorMsg . "incorrect; \((\lambda_3, \boldsymbol{\vec{v}_3})\) is ";
             } if ($flag3 == 1) {
              $errorMsg = $errorMsg . "correct.";
             } else { 
              $errorMsg = $errorMsg . "incorrect.";
             }
             Value::Error($errorMsg);
           }else{
             Value::Error("None of your eigenpairs are correct");
           }
         }
         return $flag; 
       
    }
);



#####################################
#  Main text

Context()->texStrings;
BEGIN_TEXT
Find the eigenvalues and eigenvectors of the matrix
\( 
\displaystyle
\mathrm{A} = 
\left\lbrack
\begin{array}{rrr}
 $A11 & $A12 & $A13  \\
 $A21 & $A22 & $A23  \\
 $A31 & $A32 & $A33 
\end{array}
\right\rbrack
\)
$BR
\{ mbox( [ 
'\( \lambda_1 = \) ',
$multians1->ans_rule(5),
', \( \boldsymbol{\vec{v}_1} =  \) ', 
display_matrix([[$multians1->ans_rule(5)],[$multians1->ans_rule(5)],[$multians1->ans_rule(5)]])
] ) \}
$BR
$SPACE $SPACE and 
$BR
\{ mbox( [
'\( \lambda_2 = \) ',
$multians1->ans_rule(5),
', \( \boldsymbol{\vec{v}_2} =  \) ', 
display_matrix([[$multians1->ans_rule(5)],[$multians1->ans_rule(5)],[$multians1->ans_rule(5)]]),
] ) \}
$BR
$SPACE $SPACE and 
$BR
\{ mbox( [
'\( \lambda_3 = \) ',
$multians1->ans_rule(5),
', \( \boldsymbol{\vec{v}_3} =  \) ', 
display_matrix([[$multians1->ans_rule(5)],[$multians1->ans_rule(5)],[$multians1->ans_rule(5)]]),
] ) \}
END_TEXT
Context()->normalStrings;

#####################################
#  Answer evaluation

$showPartialCorrectAnswers = 1;

ANS( $multians1->cmp() );

COMMENT('MathObject version.  Randomized 3x3 matrix with 0 in WSE positions.  Distinct nonzero real integer eigenvalues. Two eigenvectors are [X 0 X].');

ENDDOCUMENT(); 
