## DBsubject('Statistics')
## DBchapter('Time Series')
## DBsection('Model selection') 
## level(4)

#########################################################
DOCUMENT();
## Initializations: (Required)
loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "PGcourse.pl",
  "PGgraphmacros.pl",
  "parserRadioButtons.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "unionTables.pl",
  "parserPopUp.pl",
  "RserveClient.pl"
);

#########################################################
## Setup: this is where we use Perl and PG objects (Required)

Context("Numeric");


# warn("Student name: $studentName, login: $studentLogin, id: $studentID");
my $hash = crypt($studentLogin, 'a1');
# warn("crypt: $hash");
@nums = (0..9,'a'..'z','A'..'Z');
my %nums = map { $nums[$_] => $_ } 0..$#nums;
my $seed = 0;
$seed = $seed * 62 + $nums{$_} foreach split(//, substr($hash, -5, 5));
# warn("seed: " . $seed);

rserve_start();

rserve_eval("set.seed($seed)");
## do not need to download data
@data = rserve_eval('
library(tseries)
sd1 <- runif(1, min=0.5, max = 1.4)
sd2 <- runif(1, min=0.8, max = 1.7)
ts1.sim <- arima.sim(list(order = c(0,0,1), ma = 0.8), n = 200, sd = sd1)
ts2.sim <- rnorm(n = 200, sd = sd1)
ts3.sim <- arima.sim(n = 200, list(order = c(2,0,0), ar = c(0.9,-0.2)), sd = sd2)
ts4.sim <- arima.sim(n = 200, list(order = c(1,0,1), ar =0.6, ma=-0.3), sd = sd2)
');

# Answers to part d
# For the plot in the answer
$file = rserve_start_plot('png');
rserve_eval("
  par(mfrow=c(2,1))
  acf(ts1.sim, main='Acf for Series 1')
  pacf(ts1.sim, main='Pacf for Series 1')
  ");
$filepath1 = rserve_finish_plot($file);

$file = rserve_start_plot('png');
rserve_eval("
   par(mfrow=c(2,1))
  acf(ts2.sim, main='Acf for Series 2')
  pacf(ts2.sim, main='Pacf for Series 2')
  ");
$filepath2 = rserve_finish_plot($file);

$file = rserve_start_plot('png');
rserve_eval("
   par(mfrow=c(2,1))
  acf(ts3.sim, main='Acf for Series 3')
  pacf(ts3.sim, main='Pacf for Series 3')
  ");
$filepath3 = rserve_finish_plot($file);

$file = rserve_start_plot('png');
rserve_eval("
   par(mfrow=c(2,1))
  acf(ts4.sim, main='Acf for Series 4')
  pacf(ts4.sim, main='Pacf for Series 4')
  ");
$filepath4 = rserve_finish_plot($file);

rserve_finish();

# Part d
$img_file[0] =$filepath1;
$img_file[1] =$filepath2;
$img_file[2] =$filepath3;
$img_file[3] =$filepath4;


for $i (0..3) {
  $fig[$i]=image($img_file[$i], width => 400, height=>400);
}


#@perm = shuffle(4);
#@fig = @fig[@perm];
#@inv = invert(@perm);

@letter = ("A", "B", "C", "D");

#$popup = PopUp(["?????","A","B","C", "D"], $letter[$inv[$k]]);
$k1 = 2;
$popup1 = PopUp(["?????","A","B","C", "D"], $letter[$k1]);
$k2 = 1;
$popup2 = PopUp(["?????","A","B","C", "D"], $letter[$k2]);
$k3 = 0;
$popup3 = PopUp(["?????","A","B","C", "D"], $letter[$k3]);
$k4 = 3;
$popup4 = PopUp(["?????","A","B","C", "D"], $letter[$k4]);
#########################################################
## Main Text: where all text goes (Required)
Context()->texStrings;

BEGIN_TEXT

Below are the autocorrelation function (acf) plots of three time series each with 200 observations, along with their partial autocorrelation function (pacf). In each case, identify which series is most likely to be a realisation from the named process.

$BR
$BR
$BBOLD Part (a)  AR(2) $EBOLD
$BR
\{ $popup1->menu() \}
$BR
$BR
$BBOLD Part (b)  White noise $EBOLD
$BR
\{ $popup2->menu() \}
$BR$BR
$BBOLD Part (c) MA(1)  $EBOLD
$BR
\{ $popup3->menu() \}
$BR$BR
$BBOLD Part (d) ARMA(2, 2) $EBOLD
$BR
\{ $popup4->menu() \}
$BR
$BCENTER
\{
BeginTable().
  AlignedRow([$fig[0]]).
  TableSpace(5,0).
  AlignedRow(["A"]).
  TableSpace(25,6).
  
  AlignedRow([$fig[1]]).
  TableSpace(5,0).
  AlignedRow(["B"]).
  TableSpace(25,6).

  AlignedRow([$fig[2]]).
  TableSpace(5,0).
  AlignedRow(["C"]).
  TableSpace(25,6).

  AlignedRow([$fig[3]]).
  TableSpace(5,0).
  AlignedRow(["D"]).
  TableSpace(25,6).
EndTable();
\}
$BR
(Click on a graph to enlarge it.)
$ECENTER

END_TEXT

#########################################################
## Answers evaluation (Required)
ANS( $popup1->cmp() );
ANS( $popup2->cmp() );
ANS( $popup3->cmp() );
ANS( $popup4->cmp() );


#########################################################
## Solution (Optional but recommended)
Context()->texStrings;

BEGIN_SOLUTION
Series 1 is an MA(1), series 2 is white noise, series 3 is an AR(2), and series 4 is an ARMA(2, 2).
END_SOLUTION

ENDDOCUMENT();
