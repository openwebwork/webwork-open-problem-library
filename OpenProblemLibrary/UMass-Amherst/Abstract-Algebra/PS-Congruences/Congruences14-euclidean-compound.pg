## DBsubject('Number Theory')
## DBchapter('Divisibility')
## DBsection('GCDs and LCMs')
## KEYWORDS('GCD, Euclidean algorithm')
## Level(2)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Daniel Nichols and Siman Wong')
## Institution('University of Massachusetts Amherst')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"parserPopUp.pl",
"answerHints.pl",
"compoundProblem.pl"
);


TEXT(beginproblem());
$showPartialCorrectAnswers = 0;


$parts = 5;       # total number of parts
$isProfessor = 1; # is studentLogin a professor?

$cp = new compoundProblem(
  parts => $parts,             # stop at this part for now
  totalAnswers => 12,           # total answers in all parts combined
  parserValues => 1,           # make Parser objects from student answers
  allowReset => $isProfessor,  # professors get Reset buttons for testing
  nextStyle => 'Button',       # use button, not checkbox

);
$part = $cp->part( $parts );     # set the part to this one.  If the
                               # student hasn't finished the earlier
                               # ones, they start at the last one they
                               # did finish and can work up to this one.

							   
# we want two integers a,b such that the Euclidean algorithm will
# take exactly 2 steps to find the gcd
							   
$r2 = Compute( random( 1, 5, 1 ) );
$r1 = Compute( $r2 * random( 2, 5, 1 ) );
$q2 = Compute( $r2 * random( 2, 5, 1 ) );
$q1 = Compute( random( 1, 6, 1 ) );

$b = Compute( $r1 * $q2 + $r2 );
$a = Compute( $b * $q1 + $r1 );


# pop-up menu for part 1
$part1pulldown = PopUp(
	[ "yes", "no" ],
	"no",
);

# pop-up menu for part 2
$part2pulldown = PopUp(
	[ "yes", "no" ],
	"yes",
);


# problem text, displayed for all parts
TEXT(EV3(<<'EOT'));

$BITALIC

In this problem we work out step-by-step the Extended Euclidean Algorithm. Specifically, we will find two integers \( x, y \) so that $BR $BR

\[ $a x + $b y = \gcd( $a, $b ). \] $BR

To do this we first apply the Euclidean Algorithm to compute \( \gcd( $a, $b ) \), and then unwind the calculation to find \( x \) and \( y \).  $EITALIC $BR $HR $BR

EOT





if ($part == 1) {


TEXT(EV3(<<'EOT'));

	$BBOLD PART 1 OF 5 $EBOLD $BR $BR

	To begin, we apply the division algorithm to find integers \( q_1 \) and \( r_1 \) with \( q_1 > 0 \) and \( 0 \leq r_1 < $b \) such that $BR $BR

	\[ $a = $b q_1 + r_1. \] $BR

	\( q_1 = \) \{ NAMED_ANS_RULE( "q1", 5 ) \} $BR
	\( r_1 = \) \{ NAMED_ANS_RULE( "r1", 5 ) \} $BR $BR

	Does \( r_1 \) divide \( $b \) ? \{ $part1pulldown->menu( ) \} $BR $BR $BR


	NOTE:  This problem has multiple parts; after you have successfully completed 		   each part, you need to click the "move to next part" box in order to move on to the next part. $BR

EOT
	
	NAMED_ANS(
		q1 => $q1->cmp,
		r1 => $r1->cmp
	);
	
	ANS( $part1pulldown->cmp );

}



if ($part == 2) {

TEXT(EV3(<<'EOT'));

	$BBOLD PART 2 OF 5 $EBOLD $BR $BR

	Good! You have found that $BR $BR

	\[ $a = $b \times $q1 + $r1. \] $BR

	And since \( $r1 \) does not divide \( $b \), we need to apply the division algorithm again to find integers \( q_2 \) and \( r_2 \) with \( q_2 > 0 \) and \( 0 \leq r_2 < $r1 \), such that $BR $BR

	\[ $b = $r1 q_2 + r_2. \] $BR

	\( q_2 = \) \{ NAMED_ANS_RULE( "q2", 5 ) \} $BR
	\( r_2 = \) \{ NAMED_ANS_RULE( "r2", 5 ) \} $BR $BR

	Does \( r_2 \) divide \( $b \) ? \{ $part2pulldown->menu( ) \} $BR $BR

EOT
	
	NAMED_ANS(
		q2 => $q2->cmp,
		r2 => $r2->cmp
	);
	
	ANS( $part2pulldown->cmp );

}  



if ($part == 3) {

TEXT(EV3(<<'EOT'));

	$BBOLD PART 3 OF 5 $EBOLD $BR $BR

	Good!  You have found that $BR $BR

	\[ $a = $b \times $q1 + $r1 \] $BR

	\[ $b = $r1 \times $q1 + $r2 \] $BR

	Furthermore, \( $r2 \) divides \( $b \), so the Euclidean Algorithm stops at this stage, and \( \gcd( $a, $b ) = \) \{ NAMED_ANS_RULE( 'gcd', 5 ) \}. $BR

EOT
	
	NAMED_ANS(
		gcd => $r2->cmp
	);

}  



if ($part == 4) {

TEXT(EV3(<<'EOT'));

	$BBOLD PART 4 OF 5 $EBOLD $BR $BR

	Using the Euclidean algorithm, we have now found that $BR $BR

	\[ $a = $b \times $q1 + $r1 \] $BR

	\[ $b = $r1 \times $q2 + $r2 \]

	and $BR $BR

	\[ \gcd( $a, $b ) = $r2. \] $BR

	To find integers \( x, y \) so that \( $a x + $b y = \gcd( $a, $b ) = $r2 \), we now unwind the equations above. We begin with the last one: $BR $BR

	\[ $b = $r1 \times $q2 + $r2 \] $BR

	Since we are interested in the gcd, we rewrite this as $BR $BR

	\( $r2 = $b + $r1 \times \) \{ NAMED_ANS_RULE( "-q2" ) \} $BR

EOT
 	
	NAMED_ANS(
		'-q2' => Compute( -1 * $q2 )->cmp( )->withPostFilter( AnswerHints(
			Compute( $q2 ) => [ "Your answer is almost correct...", replaceMessage=>1 ],
		))
	);

}



if ($part == 5) {

TEXT(EV3(<<'EOT'));

	$BBOLD PART 5 OF 5 $EBOLD $BR $BR

	By unwinding the second equation from the Euclidean algorithm

		\[ $a = $b \times $q1 + $r1 \] $BR

		\[ $b = $r1 \times $q2 + $r2 \]

	we find that $BR $BR

	\[ \gcd( $a, $b ) = $r2 = $b + $r1 \times ( - $q2 ) . \quad (*) \] $BR

	Note that \( $r1 \) appears in the first equation. So let's solve for \( $r1 \) and substitute that into \( (*) \). $BR $BR

	From the first equation, $BR $BR
	
	\( $r1 = $a \times \) \{ NAMED_ANS_RULE( 'r1eq1', 5 ) \} \( + $b \times \) \{ NAMED_ANS_RULE( 'r1eq2', 5 ) \} . $BR $BR

	Substitute this into \( (*) \) and we find that $BR $BR
	
	\( \gcd( $a, $b ) = $r2 = $a \times \) \{ NAMED_ANS_RULE( 'x', 5 ) \} \( + $b \times \) \{ NAMED_ANS_RULE( 'y', 5 ) \} . $BR $BR

	This completes the Extended Euclidean Algorithm in this case. In general it could take several steps to find the gcd, in which case you would need to unwind them in reversed order to find \( x \) and \( y \).
	
EOT
 	
	NAMED_ANS(
		r1eq1 => Compute( 1 )->cmp,
		r1eq2 => Compute( -1 * $q1 )->cmp,
		x => Compute( -1 * $q2 )->cmp,
		y => Compute( $q1 * $q2 + 1 )->cmp
	);

}  



COMMENT( "" );


ENDDOCUMENT(); 