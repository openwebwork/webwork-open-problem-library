## DBsubject('Abstract Algebra')
## DBchapter('Groups')
## DBsection('Group axioms')
## KEYWORDS('group tables, order of elements')
## Level(3)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Siman Wong and Dan Nichols')
## Institution('University of Massachusetts Amherst')



DOCUMENT();        

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"unionTables.pl"
);

$bHTML = $eHTML = '';


Context( )->strings->add( e=>{} );
Context( )->strings->add( "x1"=>{} );
Context( )->strings->add( "x2"=>{} );
Context( )->strings->add( "x3"=>{} );
Context( )->strings->add( "x4"=>{} );
Context( )->strings->add( "x5"=>{} );
Context( )->strings->add( "x6"=>{} );
Context( )->strings->add( "x7"=>{} );
Context( )->strings->add( N=>{} );


TEXT(beginproblem());
$showPartialCorrectAnswers = 0;


# groups are represented internally using integers 0, 1, ..., n where 0 is the identity and n is the order of the group. This simplifies programming.

# externally, the student sees the group elements as e, x1, x2, ..., xn

# NON-IDENTITY elements of the group
@elements = ( 1 .. 7 );

# list of possible groups, defined by multiplication tables. There are five groups of order 8



$chooseGroup[ 0 ] = [	[  0,  1,  2,  3,  4,  5,  6,  7 ],
						[  1,  2,  3,  0,  5,  6,  7,  4 ],
						[  2,  3,  0,  1,  6,  7,  4,  5 ],
						[  3,  0,  1,  2,  7,  4,  5,  6 ],
						[  4,  7,  6,  5,  0,  3,  2,  1 ],
						[  5,  4,  7,  6,  1,  0,  3,  2 ],
						[  6,  5,  4,  7,  2,  1,  0,  3 ],
						[  7,  6,  5,  4,  3,  2,  1,  0 ]
					];
						
$chooseGroup[ 1 ] = [	[  0,  1,  2,  3,  4,  5,  6,  7 ],
						[  1,  2,  3,  0,  5,  6,  7,  4 ],
						[  2,  3,  0,  1,  6,  7,  4,  5 ],
						[  3,  0,  1,  2,  7,  4,  5,  6 ],
						[  4,  7,  6,  5,  2,  1,  0,  3 ],
						[  5,  4,  7,  6,  3,  2,  1,  0 ],
						[  6,  5,  4,  7,  0,  3,  2,  1 ],
						[  7,  6,  5,  4,  1,  0,  3,  2 ]
					];
					
$chooseGroup[ 2 ] = [	[  0,  1,  2,  3,  4,  5,  6,  7 ],
						[  1,  2,  3,  0,  5,  6,  7,  4 ],
						[  2,  3,  0,  1,  6,  7,  4,  5 ],
						[  3,  0,  1,  2,  7,  4,  5,  6 ],
						[  4,  5,  6,  7,  0,  1,  2,  3 ],
						[  5,  6,  7,  4,  1,  2,  3,  0 ],
						[  6,  7,  4,  5,  2,  3,  0,  1 ],
						[  7,  4,  5,  6,  3,  0,  1,  2 ]
					];
					
$chooseGroup[ 3 ] = [	[  0,  1,  2,  3,  4,  5,  6,  7 ],
						[  1,  2,  3,  4,  5,  6,  7,  0 ],
						[  2,  3,  4,  5,  6,  7,  0,  1 ],
						[  3,  4,  5,  6,  7,  0,  1,  2 ],
						[  4,  5,  6,  7,  0,  1,  2,  3 ],
						[  5,  6,  7,  0,  1,  2,  3,  4 ],
						[  6,  7,  0,  1,  2,  3,  4,  5 ],
						[  7,  0,  1,  2,  3,  4,  5,  6 ]
					];
						
$chooseGroup[ 4 ] = [	[  0,  1,  2,  3,  4,  5,  6,  7 ],
						[  1,  0,  3,  2,  5,  4,  7,  6 ],
						[  2,  3,  0,  1,  6,  7,  4,  5 ],
						[  3,  2,  1,  0,  7,  6,  5,  4 ],
						[  4,  5,  6,  7,  0,  1,  2,  3 ],
						[  5,  4,  7,  6,  1,  0,  3,  2 ],
						[  6,  7,  4,  5,  2,  3,  0,  1 ],
						[  7,  6,  5,  4,  3,  2,  1,  0 ]
					];
					
					
# pick a random group from the available choices
$g = $chooseGroup[ random( 0, @chooseGroup - 1, 1 ) ];

# now g is the multiplication table for our group, so $$g[ x ][ y ] = xy


# pick distinct random non-identity elements a,b
@chooseAB = @elements;
$a = splice( @chooseAB, random( 0, @chooseAB - 1, 1 ), 1 );
$b = splice( @chooseAB, random( 0, @chooseAB - 1, 1 ), 1 );


# compute correct answers

# a^2
$ans[ 0 ] = $$g[ $a ][ $a ] ? Compute( "x$$g[ $a ][ $a ]" ) : Compute( "e" );

# b^3
$ans[ 1 ] = $$g[ $b ][ $$g[ $b ][ $b ] ] ? Compute( "x$$g[ $b ][ $$g[ $b ][ $b ] ]" ) : Compute( "e" );

# ab
$ans[ 2 ] = $$g[ $a ][ $b ] ? Compute( "x$$g[ $a ][ $b ]" ) : Compute( "e" );

# ba
$ans[ 3 ] = $$g[ $b ][ $a ] ? Compute( "x$$g[ $b ][ $a ]" ) : Compute( "e" );

# a^-1
$ans[ 4 ] = Compute( map{ "x$_" } grep{ $$g[ $a ][ $_ ] == 0 } @elements );

# { x | x^3 = e }
$ans[ 5 ] = List( "e", map{ "x$_" } grep{ $$g[ $_ ][ $$g[ $_ ][ $_ ] ] == 0 } @elements );

# { x | x^2 = a }
@x2a = grep{ $$g[ $_ ][ $_ ] == $a } @elements;
@ans[ 6 ] = @x2a ? List( map{ "x$_" } @x2a ) : List( 'N' );

# { x | x^3 = b }
@x3b = grep{ $$g[ $_ ][ $$g[ $_ ][ $_ ] ] == $b } @elements;
$ans[ 7 ] = @x3b ? List( map{ "x$_" } @x3b ) : List( 'N' );


# make multiplication table
$table = 	BeginTable( border=>1, tex_border=>"1pt", spacing=>0, padding=>4 ) .
			AlignedRow( [ "", map{ $_ ? "\( x$_ \)" : "\( e \)" } @{ $$g[ 0 ] } ], separation=>0 ) .
			AlignedRow( [ "\( e \)", map{ $_ ? "\( x$_ \)" : "\( e \)" } @{ $$g[ 0 ] } ], separation=>0 );

$table .= AlignedRow( [ "\( x$_ \)", map{ $_ ? "\( x$_ \)" : "\( e \)" } @{ $$g[ $_ ] } ], separation=>0 ) foreach ( @elements );
	
$table .= EndTable( );



TEXT(EV3(<<'EOT'));

The following is the group table of a group whose elements are \( $LB e, x1, x2, \ldots, x7 $RB \), where \( e \) is the identity: $BR $BR

$table $BR

(a) Express each of the following elements in terms of one element from \( $LB e, x1, x2, \ldots, x7 $RB \).    $BR $BR

\{
	BeginTable( border=>1, tex_border=>"1pt", spacing=>0, padding=>4 ) .
	AlignedRow( [ "\( ( x$a )^2 \)", ans_rule( 10 ) ], separation=>0 ) .
	AlignedRow( [ "\( ( x$b )^3 \)", ans_rule( 10 ) ], separation=>0 ) .
	AlignedRow( [ "\( ( x$a )( x$b ) \)", ans_rule( 10 ) ], separation=>0 ) .
	AlignedRow( [ "\( ( x$b )( x$a ) \)", ans_rule( 10 ) ], separation=>0 ) .
	AlignedRow( [ "\( ( x$a )^{-1} \)", ans_rule( 10 ) ], separation=>0 ) .
	EndTable( )
\}
$BR

(b) Find all elements \( x \) such that \( x^3 = e \). Enter N if no such element exists. $BR
\{ ans_rule( 15 ) \} $BR $BR

(c) Find all elements \( x \) such that \( x^2 = x$a \). Enter N if no such element exists. $BR
\{ ans_rule( 15 ) \} $BR $BR

(d) Find all elements \( x \) such that \( x^3 = x$b \). Enter N if no such element exists. $BR
\{ ans_rule( 15 ) \} $BR

EOT


ANS( $ans[ 0 ]->cmp );
ANS( $ans[ 1 ]->cmp );
ANS( $ans[ 2 ]->cmp );
ANS( $ans[ 3 ]->cmp );
ANS( $ans[ 4 ]->cmp );
ANS( $ans[ 5 ]->cmp );
ANS( $ans[ 6 ]->cmp );
ANS( $ans[ 7 ]->cmp );



ENDDOCUMENT();       
