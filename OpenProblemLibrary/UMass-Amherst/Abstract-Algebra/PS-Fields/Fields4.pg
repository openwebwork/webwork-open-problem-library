## DBsubject('Abstract Algebra')
## DBchapter('Fields and polynomials')
## DBsection('Polynomials')
## KEYWORDS('polynomials')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Daniel Nichols and Siman Wong')
## Institution('University of Massachusetts Amherst')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"algebraMacros.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

# small prime modulus
@chooseModulus = ( 3, 5, 7, 11 );
$modulus = $chooseModulus[ random( 0, @chooseModulus - 1, 1 ) ];

# choose constants a,b,c for the problem from Z/modulus. Make sure b != c
$a = random( 0, $modulus - 1, 1 );
@chooseBC = ( 1 .. $modulus - 1 );
$b = splice( @chooseBC, random( 0, @chooseBC - 1, 1 ), 1 );
$c = splice( @chooseBC, random( 0, @chooseBC - 1, 1 ), 1 );

# find inverses of b and c, these are used to construct a correct answer
for( my $i = 1; !( $bInv && $cInv ) && $i < $modulus; $i++ )
{
	if( !$bInv && $b * $i % $modulus == 1 )
	{
		$bInv = $i;
	}
	if( !$cInv && $c * $i % $modulus == 1 )
	{
		$cInv = $i;
	}
}

# coefficients of 'correct' polynomial
$c2 = ( $bInv * $cInv * $a - $b - $c ) % $modulus;
$c1 = ( $b * $c - $cInv * $a - $bInv * $a + 1 ) % $modulus;

$ans[ 0 ] = Compute( "x^3 + $c2 x^2 + $c1 x + $a" )->reduce;

TEXT(EV3(<<'EOT'));

Find a polynomial \( f(x) \) of degree 3 over \( \{ cyclic( $modulus ) \} \) such that $BR $BR

\[ f( 0 ) = $a, \quad f( $b ) = $b, \quad f( $c ) = $c \] $BR

\( f(x) = \) \{ ans_rule( 20 ) \} $BR

EOT

# custom answer checker. Evaluate the student's polynomial at the given points **IN Z/modulus**, but first make sure it's a degree 3 polynomial
ANS( $ans[ 0 ]->cmp( checker=>sub
{
	my( $correct, $student, $ansHash ) = @_;
	
	# fail if the student entered a polynomial of degree != 3
	return 0 if !Value::isFormula( $student ) || $student->D( 'x' )->D( 'x' )->isConstant || !$student->D( 'x' )->D( 'x' )->D( 'x' )->isConstant;
	
	# make sure the student's polynomial satisfies the conditions
	if(		$student->eval( x => 0 ) % $modulus != $correct->eval( x => 0 )
		||	$student->eval( x => $b ) % $modulus != $b
		|| 	$student->eval( x => $c ) % $modulus != $c )
	{
		return 0;
	}
	
	return 1;
} ) );




COMMENT( "" );


ENDDOCUMENT(); 