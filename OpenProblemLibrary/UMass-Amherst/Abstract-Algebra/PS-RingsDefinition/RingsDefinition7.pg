## DBsubject('Abstract Algebra')
## DBchapter('Rings')
## DBsection('Units and zero divisors')
## KEYWORDS('inverse, zero-divisors')
## Level(2)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Daniel Nichols and Siman Wong')
## Institution('University of Massachusetts Amherst')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"unionTables.pl",
"algebraMacros.pl"
);

Context()->strings->add( Y => {} );
Context()->strings->add( N => {} );

TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

# here are the 3 lists of primes we'll use to make a composite modulus
@choosePrimes = ( [ 2, 3 ], [ 2, 3, 5 ], [ 3, 5, 7 ] );

# randomly pick one prime from each of the lists, store them in a list
@primes = map { $$_[ random( 0, -1 + @$_, 1 ) ] } @choosePrimes;

# modulus is product of the primes we picked
$modulus = 1;
$modulus *= $_ foreach @primes;

# sort ring into units and zero-divisors and create math objects for the answers
# skip 0, 1, -1 because they're too easy

@units, @zeroDivisors = ();
foreach ( 2 .. $modulus - 2 )
{
	my $g = xgcd( $_, $modulus );

	if( $$g[ 0 ] == 1 )
		{ push @units, [ $_, Compute( "N" ), Compute( $$g[ 1 ] % $modulus ) ]; }
	else
		{ push @zeroDivisors, [ $_, Compute( "Y" ), Compute( 0 ) ]; }
}

# pick 4 random elements of the ring - 2 units and 2 zero-divisors
@elements = ();
push @elements, splice( @units, random( 0, @units - 1, 1 ), 1 ) while @elements < 2;
push @elements, splice( @zeroDivisors, random( 0, @zeroDivisors - 1, 1 ), 1 ) while @elements < 4;

fyshuffle( ~~@elements );


TEXT(EV3(<<'EOT'));

For each of the following elements of the ring \( \{ cyclic( $modulus ) \} \), determine if it
satisfies the following properties.  If it is a unit, enter its inverse
in the last column; if it is not, enter 0. $BR $BR

\{
BeginTable( border=>1, tex_border=>"1pt", spacing=>0, padding=>4 ) .
AlignedRow( [ "zero-divisor? (Y/N)", "inverse" ], indent=>1, align=>CENTER, separation=>0 ) .
AlignedRow( [ "\( $elements[ 0 ][ 0 ] \)", ans_rule( 10 ), ans_rule( 10 ) ], align=>CENTER, separation=>0 ) .
AlignedRow( [ "\( $elements[ 1 ][ 0 ] \)", ans_rule( 10 ), ans_rule( 10 ) ], align=>CENTER, separation=>0 ) .
AlignedRow( [ "\( $elements[ 2 ][ 0 ] \)", ans_rule( 10 ), ans_rule( 10 ) ], align=>CENTER, separation=>0 ) .
AlignedRow( [ "\( $elements[ 3 ][ 0 ] \)", ans_rule( 10 ), ans_rule( 10 ) ], align=>CENTER, separation=>0 ) .
EndTable( )
\}

EOT

ANS( $elements[0][1]->cmp );
ANS( $elements[0][2]->cmp( checker => ~~&modChecker ) );

ANS( $elements[1][1]->cmp );
ANS( $elements[1][2]->cmp( checker => ~~&modChecker ) );

ANS( $elements[2][1]->cmp );
ANS( $elements[2][2]->cmp( checker => ~~&modChecker ) );

ANS( $elements[3][1]->cmp );
ANS( $elements[3][2]->cmp( checker => ~~&modChecker ) );



COMMENT( "" );


ENDDOCUMENT(); 