## DBsubject('Abstract Algebra')
## DBchapter('Rings')
## DBsection('Units and zero divisors')
## KEYWORDS('nilpotent elements, idempotent elements')
## Level(2)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Daniel Nichols and Siman Wong')
## Institution('University of Massachusetts Amherst')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"algebraMacros.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

# here are the 3 lists of primes we'll use to make a composite modulus
#@choosePrimes = ( [ 2, 3 ], [ 2, 3, 5 ], [ 3, 5, 7 ] );
@choosePrimes = ( [ 2 ], [ 2, 3 ], [ 3, 5 ] );

# randomly pick one prime from each of the lists, store them in a list
@primes = map { $$_[ random( 0, -1 + @$_, 1 ) ] } @choosePrimes;

# modulus is product of the primes we picked
$modulus = 1;
$modulus *= $_ foreach @primes;

# sort ring into nilpotent and idempotent elements
# n is nilpotent if p|n for each distinct prime factor p of the modulus
# n is idempotent if n * n \equiv n
@nilpotents = grep { my $n = $_; !scalar grep { ( $n % $_ ) } @primes } ( 0 .. $modulus - 2 );
@idempotents = grep { ($_ * $_ ) % $modulus == $_ } ( 0 .. $modulus - 2 );

$ans[0] = List( @nilpotents );
$ans[1] = List( @idempotents );

TEXT(EV3(<<'EOT'));

Denote by \( \{ cyclic( $modulus ) \} \) the ring whose elements are the integers modulo \( $modulus \). $BR $BR

(a) Determine all nilpotent elements of \( \{ cyclic( $modulus ) \} \). Enter them as a comma-separated list. $BR
\{ ans_rule(40) \} $BR $BR

(b) Determine all idempotent elements of \( \{ cyclic( $modulus ) \} \). Enter them as a comma-separated list. $BR
\{ ans_rule(40) \} $BR $BR

EOT


ANS( $ans[ 0 ]->cmp( checker => ~~&modChecker ) );
ANS( $ans[ 1 ]->cmp( checker => ~~&modChecker ) );



COMMENT( "" );


ENDDOCUMENT(); 