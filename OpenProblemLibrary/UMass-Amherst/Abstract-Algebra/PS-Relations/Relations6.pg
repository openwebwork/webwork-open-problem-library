## DBsubject('Set theory')
## DBchapter('Relations')
## DBsection('General relations')
## KEYWORDS('equivalence relations')
## Level(2)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Siman Wong and Patrick O'Brien')
## Institution('University of Massachusetts Amherst')







DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl"
);

Context( )->strings->add( Y => { caseSensitive => 1 } );
Context( )->strings->add( N => { caseSensitive => 1 } );
Context( )->variables->add( y => "Real");

TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

# choose random integer
$n = random( 2, 10, 1 );

# choose whether to define the equivalence relation using + or -
$plusMinus = random( 0, 1, 1 ) ? "-" : "+";


$ans[ 0 ] = $plusMinus eq "-" || $n == 2 ? Compute( "Y" ) : Compute( 1 );
$ans[ 1 ] = Compute( "x $plusMinus y" );
$ans[ 2 ] = Compute( "y $plusMinus x" );
$ans[ 3 ] = List( "Y" );
$ans[ 4 ] = $plusMinus eq "-" || $n == 2 ? List( "Y" ) : List( 1, $n - 1, 1 );
$ans[ 5 ] = $plusMinus eq "-" || $n == 2 ? Compute( "Y" ) : Compute( "N" );


TEXT(EV3(<<'EOT'));

In this problem we work out step-by-step the procedure for checking an equivalence relation.  

Denote by \( \mathbb{Z} \) the set of all integers.  Declare that two integers \( x, y \) are related if \( x $plusMinus y \) is an integer multiple of \( $n \).  In symbols: $BR $BR

\[ x \sim y  \Longleftrightarrow $n \textrm{ divides } x $plusMinus y .\] $BR

We want to check if this is an equivalence relation.  That means we need to check if \( \sim \) is $BR
(1) Reflexive $BR
(2) Symmetric $BR
(3) Transitive $BR $BR

We begin with (1). This means checking to make sure that for all integers \( x \), we have \( x \sim x \). Recall the definition of \( \sim \) for this problem and we see that this is equivalent to saying that for all integers \( x \), we have that \( ( x $plusMinus x ) \) is an integer multiple of \( $n \). $BR $BR

Is this true? If so, enter Y; if not, enter an integer for which this is false. \{ ans_rule( 10 ) \} $BR $BR

Next, we check (2). This means checking to make sure that for all integers \( x, y \), we have \( x \sim y \Leftrightarrow y \sim x \). Unwind the definition of \( \sim \) as we have done for (1) and we see that $BR $BR
\( x \sim y \Longleftrightarrow \) \{ ans_rule( 10 ) \} \( = $n m \) for some integer \( m \) $BR $BR
\( y \sim x \Longleftrightarrow \) \{ ans_rule( 10 ) \} \( = $n m \) for some integer \( m \)$BR $BR

Based on that, is (2) true? If so, enter Y; if not, enter a pair of integers for which this is false. $BR
\{ ans_rule( 10 ) \} $BR $BR

Finally, we check (3). This means checking to make sure that for all integers \( x, y, z \), if \( x \sim y \) and \( y \sim z \) then \( x \sim z \). $BR $BR

Is this true? If so, enter Y; if not, give a triple of integers for which this fails. \{ ans_rule( 10 ) \} $BR $BR

Finally, based on this calculation, is \( \sim \) an equivalence relation on the set
of integers? Enter Y or N. \{ ans_rule( 10 ) \}

EOT

# custom checker: if plus, we need to test whether the student's answer fails n | ( x + x )
ANS( $ans[ 0 ]->cmp(
	checker => sub{
		my( $correct, $student, $ansHash ) = @_;  # get correct and student MathObjects
		
		if( $plusMinus eq "-" || $n == 2 ) {
			return $student eq "Y" ? 1 : 0;
		}
		
		return ( ( $student + $student ) % $n != 0 ? 1 : 0 );
	}
) );

ANS( $ans[ 1 ]->cmp );
ANS( $ans[ 2 ]->cmp );

# custom checker: the answer is always Y, but we need to do it this way, or the student will see
# "error: your answer is a list, not a number" if they try to enter a pair of integers
ANS( $ans[ 3 ]->cmp(
	list_checker => sub{
		my( $correct, $student, $ansHash, $value ) = @_;  # get correct and student MathObjects
		
		$errors = "You must enter 2 integers or 'Y'" if @$student != 2 || ( @$student == 1 && $$student[ 0 ]->value ne "Y" );
		
		return ( 0, $errors ) if @$student != 1 || $$student[ 0 ]->value ne "Y";
		return 1;
	}
) );

# custom checker: hide error messages as in $ans[ 3 ], also check the student's triple of integers
# to make sure n | ( x + y ), n | ( y + z ), n !| ( x + z ).
ANS( $ans[ 4 ]->cmp(
	list_checker => sub{
		my( $correct, $student, $ansHash, $value ) = @_;  # get correct and student MathObjects
		
		my $errors = "You must enter 3 integers or 'Y'" unless @$student == 3 || ( @$student == 1 && $$student[ 0 ]->value eq "Y" );
		
		if( $plusMinus eq "-" || $n == 2 ) {
			return ( 0, $errors ) unless @$student == 1 && $$student[ 0 ]->value eq "Y";
			return 1;
		}

		return ( 0, $errors ) if @$student != 3;
		
		my( $x, $y, $z ) = @$student;
		return ( ( ( $x + $y ) % $n == 0 && ( $y + $z ) % $n == 0 && ( $x + $z ) % $n != 0 ) ? 3 : 0 );
	}
) );

ANS( $ans[ 5 ]->cmp );


COMMENT( "" );


ENDDOCUMENT(); 
