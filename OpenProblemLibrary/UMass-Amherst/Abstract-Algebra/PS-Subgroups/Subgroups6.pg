## DBsubject('Abstract Algebra')
## DBchapter('Groups')
## DBsection('Subgroups')
## KEYWORDS('group tables, order of elements')
## Level(3)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Siman Wong and Patrick O'Brien')
## Institution('University of Massachusetts Amherst')




DOCUMENT();        

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"unionTables.pl"
);

$bHTML = $eHTML = '';



TEXT(beginproblem());
$showPartialCorrectAnswers = 0;


# groups are represented internally using integers 0, 1, ..., n where 0 is the identity and n is the order of the group. This simplifies programming.

# externally, the student sees the group elements as e, x1, x2, ..., xn

# NON-IDENTITY elements of the group
@elements = ( 1 .. 11 );


# list of possible groups, defined by multiplication tables. There are five groups of order 12


$chooseGroup[ 0 ] = [ 	[  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11 ],
						[  1,  0,  3,  2,  6,  7,  4,  5, 11, 10,  9,  8 ],
						[  2,  3,  0,  1,  7,  6,  5,  4,  9,  8, 11, 10 ],
						[  3,  2,  1,  0,  5,  4,  7,  6, 10, 11,  8,  9 ],
						[  4,  7,  5,  6, 11,  8, 10,  9,  2,  1,  3,  0 ],
						[  5,  6,  4,  7,  9, 10,  8, 11,  1,  2,  0,  3 ],
						[  6,  5,  7,  4,  8, 11,  9, 10,  3,  0,  2,  1 ],
						[  7,  4,  6,  5, 10,  9, 11,  8,  0,  3,  1,  2 ],
						[  8, 10, 11,  9,  1,  3,  2,  0,  7,  5,  4,  6 ],
						[  9, 11, 10,  8,  3,  1,  0,  2,  4,  6,  7,  5 ],
						[ 10,  8,  9, 11,  2,  0,  1,  3,  6,  4,  5,  7 ],
						[ 11,  9,  8, 10,  0,  2,  3,  1,  5,  7,  6,  4 ]
					];
						
$chooseGroup[ 1 ] = [	[  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11 ],
						[  1,  2,  3,  4,  5,  0,  7,  8,  9, 10, 11,  6 ],
						[  2,  3,  4,  5,  0,  1,  8,  9, 10, 11,  6,  7 ],
						[  3,  4,  5,  0,  1,  2,  9, 10, 11,  6,  7,  8 ],
						[  4,  5,  0,  1,  2,  3, 10, 11,  6,  7,  8,  9 ],
						[  5,  0,  1,  2,  3,  4, 11,  6,  7,  8,  9, 10 ],
						[  6,  7,  8,  9, 10, 11,  0,  1,  2,  3,  4,  5 ],
						[  7,  8,  9, 10, 11,  6,  1,  2,  3,  4,  5,  0 ],
						[  8,  9, 10, 11,  6,  7,  2,  3,  4,  5,  0,  1 ],
						[  9, 10, 11,  6,  7,  8,  3,  4,  5,  0,  1,  2 ],
						[ 10, 11,  6,  7,  8,  9,  4,  5,  0,  1,  2,  3 ],
						[ 11,  6,  7,  8,  9, 10,  5,  0,  1,  2,  3,  4 ]
					];
					
$chooseGroup[ 2 ] = [	[  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11 ],
						[  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  0 ],
						[  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  0,  1 ],
						[  3,  4,  5,  6,  7,  8,  9, 10, 11,  0,  1,  2 ],
						[  4,  5,  6,  7,  8,  9, 10, 11,  0,  1,  2,  3 ],
						[  5,  6,  7,  8,  9, 10, 11,  0,  1,  2,  3,  4 ],
						[  6,  7,  8,  9, 10, 11,  0,  1,  2,  3,  4,  5 ],
						[  7,  8,  9, 10, 11,  0,  1,  2,  3,  4,  5,  6 ],
						[  8,  9, 10, 11,  0,  1,  2,  3,  4,  5,  6,  7 ],
						[  9, 10, 11,  0,  1,  2,  3,  4,  5,  6,  7,  8 ],
						[ 10, 11,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9 ],
						[ 11,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10 ],
					];
					
$chooseGroup[ 3 ] = [	[  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11 ],
						[  1,  2,  3,  4,  5,  0,  7,  8,  9, 10, 11,  6 ],
						[  2,  3,  4,  5,  0,  1,  8,  9, 10, 11,  6,  7 ],
						[  3,  4,  5,  0,  1,  2,  9, 10, 11,  6,  7,  8 ],
						[  4,  5,  0,  1,  2,  3, 10, 11,  6,  7,  8,  9 ],
						[  5,  0,  1,  2,  3,  4, 11,  6,  7,  8,  9, 10 ],
						[  6, 11, 10,  9,  8,  7,  3,  2,  1,  0,  5,  4 ],
						[  7,  6, 11, 10,  9,  8,  4,  3,  2,  1,  0,  5 ],
						[  8,  7,  6, 11, 10,  9,  5,  4,  3,  2,  1,  0 ],
						[  9,  8,  7,  6, 11, 10,  0,  5,  4,  3,  2,  1 ],
						[ 10,  9,  8,  7,  6, 11,  1,  0,  5,  4,  3,  2 ],
						[ 11, 10,  9,  8,  7,  6,  2,  1,  0,  5,  4,  3 ]
					];
						
$chooseGroup[ 4 ] = [	[  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11 ],
						[  1,  2,  3,  4,  5,  0,  7,  8,  9, 10, 11,  6 ],
						[  2,  3,  4,  5,  0,  1,  8,  9, 10, 11,  6,  7 ],
						[  3,  4,  5,  0,  1,  2,  9, 10, 11,  6,  7,  8 ],
						[  4,  5,  0,  1,  2,  3, 10, 11,  6,  7,  8,  9 ],
						[  5,  0,  1,  2,  3,  4, 11,  6,  7,  8,  9, 10 ],
						[  6, 11, 10,  9,  8,  7,  0,  5,  4,  3,  2,  1 ],
						[  7,  6, 11, 10,  9,  8,  1,  0,  5,  4,  3,  2 ],
						[  8,  7,  6, 11, 10,  9,  2,  1,  0,  5,  4,  3 ],
						[  9,  8,  7,  6, 11, 10,  3,  2,  1,  0,  5,  4 ],
						[ 10,  9,  8,  7,  6, 11,  4,  3,  2,  1,  0,  5 ],
						[ 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0 ]
					];
					
					
# pick a random group from the available choices
$g = $chooseGroup[ random( 0, @chooseGroup - 1, 1 ) ];

# now g is the multiplication table for our group, so $$g[ x ][ y ] = xy


# pick distinct random non-identity elements a,b
@chooseAB = @elements;
$a = splice( @chooseAB, random( 0, @chooseAB - 1, 1 ), 1 );
$b = splice( @chooseAB, random( 0, @chooseAB - 1, 1 ), 1 );


# correct answer: Find order of various elements
$orderA = $orderB = $orderAB = $orderA2B = $orderAInvB = 1;

# for each element x, check x^n (temporary variable t) for each value of n starting with 1 until we find n such that x^n = 0. We could speed this up by only checking n that divide |G|, but it's not really worth the trouble

# a
$t = $a;
while( $t )
{
	$orderA++;
	$t = $$g[ $t ][ $a ];
}
$ans[ 0 ] = Compute( $orderA );

# b
$t = $b;
while( $t )
{
	$orderB++;
	$t = $$g[ $t ][ $b ];
}
$ans[ 1 ] = Compute( $orderB );

# ab
$t = $ab = $$g[ $a ][ $b ];
while( $t )
{
	$orderAB++;
	$t = $$g[ $t ][ $ab ];
}
$ans[ 2 ] = Compute( $orderAB );

# a^2 b
$t = $a2b = $$g[ $$g[ $a ][ $a ] ][ $b ];
while( $t )
{
	$orderA2B++;
	$t = $$g[ $t ][ $a2b ];
}
$ans[ 3 ] = Compute( $orderA2B );

# a^-1 b
$aInv = grep{ $$g[ $a ][ $_ ] == 0 } @elements;
$t = $aInvB = $$g[ $aInv ][ $b ];
while( $t )
{
	$orderAInvB++;
	$t = $$g[ $t ][ $aInvB ];
}
$ans[ 4 ] = Compute( $orderAInvB );



# make multiplication table
$table = 	BeginTable( border=>1, tex_border=>"1pt", spacing=>0, padding=>4 ) .
			AlignedRow( [ "", map{ $_ ? "\( x_{$_} \)" : "\( e \)" } @{ $$g[ 0 ] } ], separation=>0 ) .
			AlignedRow( [ "\( e \)", map{ $_ ? "\( x_{$_} \)" : "\( e \)" } @{ $$g[ 0 ] } ], separation=>0 );

$table .= AlignedRow( [ "\( x_{$_} \)", map{ $_ ? "\( x_{$_} \)" : "\( e \)" } @{ $$g[ $_ ] } ], separation=>0 ) foreach ( @elements );
	
$table .= EndTable( );



TEXT(EV3(<<'EOT'));
$BEGIN_ONE_COLUMN

Consider the group whose group table is given as follows ( \( e \) is the identity element ): $BR $BR

$table $BR

Determine the order of the following elements and complete the table: $BR $BR

\{
	BeginTable( border=>1, tex_border=>"1pt", spacing=>0, padding=>4 ) .
	AlignedRow( [ "\( x \)", "order( \( x \) )" ], separation=>0 ) .
	AlignedRow( [ "\( x_{$a} \)", ans_rule( 5 ) ], separation=>0 ) .
	AlignedRow( [ "\( x_{$b} \)", ans_rule( 5 ) ], separation=>0 ) .
	AlignedRow( [ "\( x_{$a} x_{$b} \)", ans_rule( 5 ) ], separation=>0 ) .
	AlignedRow( [ "\( ( x_{$a} )^{2}( x_{$b} ) \)", ans_rule( 5 ) ], separation=>0 ) .
	AlignedRow( [ "\( ( x_{$a} )^{-1}( x_{$b} ) \)", ans_rule( 5 ) ], separation=>0 ) .
	EndTable( )
\}
$BR

$END_ONE_COLUMN
EOT


ANS( $ans[ 0 ]->cmp );
ANS( $ans[ 1 ]->cmp );
ANS( $ans[ 2 ]->cmp );
ANS( $ans[ 3 ]->cmp );
ANS( $ans[ 4 ]->cmp );



ENDDOCUMENT();       
