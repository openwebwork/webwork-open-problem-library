## DBsubject(Abstract algebra)
## DBchapter('Groups')
## DBsection('Subgroups')
## KEYWORDS('order of elements')
## Level(3)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Siman Wong')
## Institution('University of Massachusetts Amherst')

DOCUMENT();        

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"algebraMacros.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 0;



#  In this problem we generate 6 random elements in Z_n  (n composite)
#  and ask students to determine the order of these as elements of the
#  additive group Z_n and as elements of U(n) -- if that makes sense.




  # generate a random compositum number
  #
@set = (4,5,6,8,9,10,11,12,15,18);
$n1 = $set[ random(0, $#set-1, 1) ];
$n2 = $set[ random(0, $#set-1, 1) ];
$m  = $n1 * $n2;
while ($m < 33 ) {
  $n1 = $set[ random(0, $#set-1, 1) ];
  $n2 = $set[ random(0, $#set-1, 1) ];
  $m  = $n1 * $n2;
}

  # take every non-zero integer mod n and determine if it is a unit or not,
  # and put the results in two ordered list

$countunit = 0;
$countnon = 0;
@unit = ();
@non  = ();
for($i=1; $i<$m; $i++) {
  if( gcd($i, $m)==1 ) {
    @unit[$countunit] = $i;
    $countunit++;
  }
  else {
    @non[$countnon] = $i;
    $countnon++;
  }
}

  # the list of random elements to be used in this problem
  #
@element = ();


  # number of units to be generated
  #
$r = random(2,4,1);


  # keep track of which units have already been picked
  #
@used  = ();
for($i=0; $i<$countunit; $i++) {
  @used[$i] = 0;
}

  # pick the first unit
  #
$k = random(0, $countunit, 1); 
@element[ 0 ] = $unit[ $k ] ;
@used[ $k ]   = 1;
  #
  # pick the remaining units
  #
for( $i=1; $i<$r; $i++) {
  $k = random(0, $countunit, 1); 
  while ( $used[$k] > 0 ) {
    $k = random(0, $countunit, 1); 
  }
  @element[$i] = $unit[ $k ];
  @used[$k] = 1;
}


  # keep track of which non-units have already been picked
  #
@used  = ();
for($i=0; $i<$countnon; $i++) {
  @used[$i] = 0;
}

  # pick the first nonunit
  #
$k = random(0, $nonunit, 1); 
@element[ $r ] = $non[ $k ] ;
@used[ $k ]   = 1;
  #
  # pick the remaining non-units
  #
for( $j=$r+1; $j< 6; $j++) {
  $k = random(0, $countnon, 1); 
  while ( $used[$k] > 0 ) {
    $k = random(0, $countnon, 1); 
  }
  @element[$j] = $non[ $k ];
  @used[$k] = 1;
}



#
# now we sort this list
#
@element = PGsort( sub {$_[0] < $_[1]} , @element );


#
# we now determine the order of these six elements
#
@add = ();
@mul = ();
for($k=0; $k<6; $k++) {
  #
  # first we determine the order of element[k] as an additive element
  #
  $i=1;
  while ( ($i*$element[$k]) % $m>0 ) {
    $i++;
  }
  @add[$k] = $i;

  #
  # now we determine the order of element[k] as an multiplicative element,
  # provided that it makes sense
  #
  if ( gcd($element[$k], $m) > 1 ) {
    @mul[$k] = 0;
  }
  else {
    $j=1;
    while ( ($element[$k]**$j)% $m>1 ) {
      $j++;
    }
    @mul[$k] = $j;
  }
}






BEGIN_TEXT



Determine the order of the following elements in \( \{ cyclic( $m ) \} \) and \(U($m)\). Note: if \(x\) is not an element of \(U($m)\) then enter \(0\) for
ord(\(x\)).

$BR $BR

\{ begintable(3) \}
\{ row( "\(x\)", "ord(\(x\)) in \( " . cyclic( $m ) . " \)", "ord(\(x\)) in \(U($m)\)" )
\}
\{ row( $element[0] , ans_rule(10), ans_rule(10) ) \}
\{ row( $element[1] , ans_rule(10), ans_rule(10) ) \}
\{ row( $element[2] , ans_rule(10), ans_rule(10) ) \}
\{ row( $element[3] , ans_rule(10), ans_rule(10) ) \}
\{ row( $element[4] , ans_rule(10), ans_rule(10) ) \}
\{ row( $element[5] , ans_rule(10), ans_rule(10) ) \}
\{ endtable() \}



END_TEXT


ANS(num_cmp( $add[0] ));
ANS(num_cmp( $mul[0] ));

ANS(num_cmp( $add[1] ));
ANS(num_cmp( $mul[1] ));

ANS(num_cmp( $add[2] ));
ANS(num_cmp( $mul[2] ));

ANS(num_cmp( $add[3] ));
ANS(num_cmp( $mul[3] ));

ANS(num_cmp( $add[4] ));
ANS(num_cmp( $mul[4] ));

ANS(num_cmp( $add[5] ));
ANS(num_cmp( $mul[5] ));



ENDDOCUMENT();       
