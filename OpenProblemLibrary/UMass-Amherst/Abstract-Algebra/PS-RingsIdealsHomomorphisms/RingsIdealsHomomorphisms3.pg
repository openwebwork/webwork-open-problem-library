## DBsubject('Abstract Algebra')
## DBchapter('Rings')
## DBsection('Ideals and Homomorphisms')
## KEYWORDS('ideals, generators')
## Level(3)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Daniel Nichols and Siman Wong')
## Institution('University of Massachusetts Amherst')


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"algebraMacros.pl"
);


TEXT(beginproblem());
$showPartialCorrectAnswers = 0;


@chooseG = ( 8, 10, 12, 15, 16, 18, 20 );

@chooseNumbers = ( 4, 5, 6, 7 );
fyshuffle( ~~@chooseNumbers );

# create g = gcd( modulus, c )
$g = splice( @chooseG, random( 0, @chooseG - 1, 1 ), 1 );

# multiply g by two coprime numbers to get modulus and c with gcd = g

$mOverG = pop( @chooseNumbers ); # modulus/g
$modulus = $g * pop( @chooseNumbers );

$c = $g * pop( @chooseNumbers ) % $modulus;



$ans[ 0 ] = List( 0, $g, map { $_ * $g } grep{ gcd( $_, $mOverG ) != 1 } ( 2 .. $mOverG - 1 ) );
$ans[ 1 ] = List( grep { $g % $_ == 0 } ( 1 .. $g ) );
	

TEXT(EV3(<<'EOT'));

It is a fact that every ideal of \( \{ cyclic( $modulus ) \} \) is of the form \( ( b ) \) for some element \( b \) of \( \{ cyclic( $modulus ) \} \). $BR $BR

(a) Determine all ideals of \( \{ cyclic( $modulus ) \} \) contained in the ideal \( ( $c ) \). Enter a generator for each of these ideals. That is, if you think the ideals \( ( a ) \) and \( ( b ) \) are contained in \( ( $c ) \), enter \( a, b \).$BR
\{ ans_rule( 20 ) \} $BR $BR

(b) Determine all ideals of \( \{ cyclic( $modulus ) \} \) containing the ideal \( ( $c ) \). As in part (a), enter a generator for each ideal. $BR
\{ ans_rule( 20 ) \} $BR

EOT

# special answer checker -- accept any generator for a given ideal
# (p) is the same as (k) for any k such that gcd( k, modulus ) = p
# (a) = (b) for any a = b ( mod modulus )
ANS( $ans[ 0 ]->cmp(
	checker => sub {
		my( $correct, $student, $ansHash ) = @_;
		return ( gcd( $student, $modulus ) == gcd( $correct, $modulus ) ? 1 : 0 );
	}
) );

# special answer checker -- accept any generator for a given ideal
# (p) is the same as (k) for any k such that gcd( k, modulus ) = p
# (a) = (b) for any a = b ( mod modulus )
ANS( $ans[ 1 ]->cmp(
	checker => sub {
		my( $correct, $student, $ansHash ) = @_;
		return ( gcd( $student, $modulus ) == gcd( $correct, $modulus ) ? 1 : 0 );
	}
) );


COMMENT( "" );


ENDDOCUMENT(); 