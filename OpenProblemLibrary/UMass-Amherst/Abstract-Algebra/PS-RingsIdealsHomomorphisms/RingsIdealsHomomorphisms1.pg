## DBsubject(Abstract algebra)
## DBchapter(Rings)
## DBsection(Ideals and homomorphisms)
## Institution(University of Massachusetts Amherst)
## Author(Daniel Nichols and Siman Wong)
## Level(4)
## MO(1)
## KEYWORDS('ideals')






DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

# REVISED VERSION
# The original verion rejected many correct 
# answers.  This version is meant to correct that but it 
# is more difficult than the original.  

# r,s,t are primes.  p=rs, q=rt so (p)+(q)=(gcd(p,q))=(r), 
# (p)(q)=(pq)=(r^2st), (p)/cap(q)=(lcm(p,q))=(rst) are 
# distinct in the integer ring Z.  The modulus n = xr^2st
# is a multiple of pq so the three ideals are distinct
# in the quotient ring Zmod(n).  Keep r,s,t,x small so 
# n won't be too huge, and make a=py, b=qz where y and z
# are units to create more randomness  
# In the following the largest possible n is 
# n = (3)(7^2)(3)(5) = 2205

Context("Numeric");

# randize the choice of 3 small primes  

@primes = (2,3,5,7);  
@a = (0..2);
for my $i (@a){
  my $j = random($i,3,1);
  ($primes[$i],$primes[$j]) = ($primes[$j],$primes[$i]);
} 
($r,$s,$t) = @primes[0,1,2];

# assign p, q, n

$p = $r*$s;
$q = $r*$t;

$x = (1,2,3)[random(0,2,1)];

$n = $x*$p*$q;

$y = (11,13,17)[random(0,2,1)];  # unit in Zmod(n)
$z = (11,13,17)[random(0,2,1)];  # unit in Zmod(n)

$a = $p*$y % $n;
$b = $q*$z % $n;

BEGIN_TEXT

In the ring \(  \displaystyle \mathbb{Z}_{$n}  \), express each of the following ideals in the form \( ( m ) \),
where \(0\leq m \lt $n \) is the smallest integer that is equivalent, mod $n, to a generator of the ideal.
$PAR
a.  \( ($a) \) = \( ( \) \{ ans_rule( 10 ) \} \( ) \) 

$PAR
b.  \( ($b) \) = \( ( \) \{ ans_rule( 10 ) \} \( ) \) 

$PAR
c.  \( ( $a ) + ( $b ) \) = \( ( \) \{ ans_rule( 10 ) \} \( ) \) 

$PAR
d.  \( ( $a )( $b ) \) = \( ( \) \{ ans_rule( 10 ) \} \( ) \) 

$PAR
e. \( ( $a ) \cap ( $b ) \) = \( ( \) \{ ans_rule( 10 ) \} \( ) \) 

END_TEXT

# custom error message

$myChecker = sub {
 my ($correct,$student,$ansHash) = @_;
 my $max = $n-1;  
 my $stu = $student -> value;
 if ($stu > $max or $stu < 0){
      Value->Error("Your value should be between 0 and $n - 1");
 }
 return ($student == $correct? 1 : 0);        
};

ANS(Compute($p)->cmp(checker => $myChecker));
ANS(Compute($q)->cmp(checker => $myChecker));
ANS( Compute($r)->cmp(checker => $myChecker) );  
ANS( Compute($p*$q % $n)->cmp(checker => $myChecker) );
ANS( Compute($r*$s*$t)->cmp(checker => $myChecker) );  

COMMENT( "" );

ENDDOCUMENT(); 
