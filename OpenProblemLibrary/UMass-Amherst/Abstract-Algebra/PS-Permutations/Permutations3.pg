## DBsubject(Abstract algebra)
## DBchapter('Groups')
## DBsection('Permutation Groups')
## KEYWORDS('parity of permutations')
## Level(2)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Daniel Nichols and Siman Wong')
## Institution('University of Massachusetts Amherst')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"PGmatrixmacros.pl",
"answerHints.pl",
"algebraMacros.pl"
);



TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

# the set on which our permutations will be defined
@x = ( 0 .. random( 5, 8, 1 ) );

# List to display the set in the problem text. Permutations are stored internally on a set { 0, 1, ..., n - 1 }, but we increase all numbers by 1 when we display things, so it appears as { 1, 2, ..., n } to the student
$xList = List( map { $_ + 1 } @x );

# make our permutations by starting with ordered arrays and scrambling
# while statement makes sure the permutations are not equal and neither is the identity
@f = @g = @x;
while( join( ' ', @f ) eq join( ' ', @g ) || join( ' ', @f ) eq join( ' ', @x ) || join( ' ', @g ) eq join( ' ', @x ) )
{
	 fyshuffle( ~~@f );
	 fyshuffle( ~~@g );
}

# these are used to display permutations (2-row format) in the problem text
$fMatrix = [ [ map{ $_ + 1 } @x ], [ map{ $_ + 1 } @f ] ];
$gMatrix = [ [ map{ $_ + 1 } @x ], [ map{ $_ + 1 } @g ] ];


# call disjoint Cycles on f,g to get cycle decomposition
$fCycles = disjointCycles( ~~@f );
$gCycles = disjointCycles( ~~@g );

# sort permutations into even and odd. this can all be determined based on parity of f,g
$fEven = isEven( $fCycles );
$gEven = isEven( $gCycles );
		
if( $fEven )
{
	push @evenPermutations, '\( f \)', '\( f^{-1} \)';
}
else
{
	push @oddPermutations, '\( f \)', '\( f^{-1} \)';
}

if( $gEven )
{
	push @evenPermutations, '\( g \)', '\( g^{-1} \)', '\( fgf^{-1} \)';
}
else
{
	push @oddPermutations, '\( g \)', '\( g^{-1} \)', '\( fgf^{-1} \)';
}
				
if( $fEven && $gEven || !$fEven & !$gEven )
{
	push @evenPermutations, '\( fg \)';
}
else
{
	push @oddPermutations, '\( fg \)';
}

# at least one of the options is always right, but let's just keep this here anyway...
push @evenPermutations, "None of the above" if !@evenPermutations;


$evenCheckbox = new_checkbox_multiple_choice( );
$evenCheckbox -> qa ( "Which of the following are even permutations?", @evenPermutations  );
$evenCheckbox -> extra( @oddPermutations );
$evenCheckbox -> makeLast( "None of the above" );



TEXT(EV3(<<'EOT'));

Let \( f \) and \( g \) be permutations on the set \( $LB $xList $RB \), defined as follows $BR $BR


\[ f = \{ display_matrix_mm( $fMatrix, left => '(', right => ')' )  \} \] $BR

\[ g = \{ display_matrix_mm( $gMatrix, left => '(', right => ')' )  \} \] $BR


\{ $evenCheckbox->print_q( ) \}
$BR
\{ $evenCheckbox->print_a( ) \} $BR

EOT


ANS( checkbox_cmp( $evenCheckbox->correct_ans() ) );


COMMENT( "" );


ENDDOCUMENT(); 