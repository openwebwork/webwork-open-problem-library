## DBsubject('Abstract Algebra')
## DBchapter('Groups')
## DBsection('Permutation Groups')
## KEYWORDS('transpositions')
## Level(2)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Daniel Nichols and Siman Wong')
## Institution('University of Massachusetts Amherst')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"PGmatrixmacros.pl",
"answerHints.pl",
"algebraMacros.pl"
);


TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

# the set on which our permutations will be defined
@x = ( 0 .. random( 6, 8, 1 ) );

# List to display the set in the problem text. Permutations are stored internally on a set { 0, 1, ..., n - 1 }, but we increase all numbers by 1 when we display things, so it appears as { 1, 2, ..., n } to the student
$xList = List( map { $_ + 1 } @x );

# make our permutation:
#	f is a product of two cycles
# To make each cycle, start with @x, shuffle it, then cut off the last few elements
# We make sure length( f2 ) > length( f1 ), that way we can't have f1f2 = Id
@fCycle1 = @fCycle2 = @x;
fyshuffle( ~~@fCycle1 );
fyshuffle( ~~@fCycle2 );

@fCycle1 = @fCycle1[ 0 .. random( 1, 3, 1 ) ];
@fCycle2 = @fCycle2[ 0 .. random( @fCycle1, @fCycle2 - 2, 1 ) ];

# convert f into one-line notation so we can use disjointCycles subroutine
@f = @x; #start with base set
@f[ @fCycle2[ -1 .. @fCycle2 - 2 ] ] = @f[ @fCycle2 ]; #apply f2
@f[ @fCycle1[ -1 .. @fCycle1 - 2 ] ] = @f[ @fCycle1 ]; #apply f1

# decompose into disjoint Cycles
$fCycles = disjointCycles( ~~@f );

# if f has order <= 4 (too easy), do the whole thing over again
while( cycleOrder( $fCycles ) <= 4 )
{
	@fCycle1 = @fCycle2 = @x;
	fyshuffle( ~~@fCycle1 );
	fyshuffle( ~~@fCycle2 );

	@fCycle1 = @fCycle1[ 0 .. random( 1, 3, 1 ) ];
	@fCycle2 = @fCycle2[ 0 .. random( @fCycle1, @fCycle2 - 2, 1 ) ];

	# convert f into one-line notation so we can use disjointCycles subroutine
	@f = @x; #start with base set
	@f[ @fCycle2[ -1 .. @fCycle2 - 2 ] ] = @f[ @fCycle2 ]; #apply f2
	@f[ @fCycle1[ -1 .. @fCycle1 - 2 ] ] = @f[ @fCycle1 ]; #apply f1

	# decompose into disjoint Cycles, determine order
	$fCycles = disjointCycles( ~~@f );
}

# decompose f into transpositions
$fTranspositions = cyclesToTranspositions( $fCycles );

# f^-1 is the same list of transpositions, but in the opposite order
$fInvTranspositions = List( map { ( $fTranspositions->value )[ -$_ ] } ( 1 .. $fTranspositions->value ) );


# used to display the permutations in problem text
$fCycle1string = "( " . join( '\,', map{ $_ + 1 } @fCycle1 ) . " )";
$fCycle2string = "( " . join( '\,', map{ $_ + 1 } @fCycle2 ) . " )";

TEXT(EV3(<<'EOT'));

Let \( f \) be a permutation on the set \( $LB $xList $RB \), defined as follows $BR $BR

\[ f = $fCycle1string $fCycle2string \] $BR

(a) Write \( f \) as a product of transpositions (not necessarily disjoint), separated by commas (e.g. \( ( 1, 2 ), ( 2, 3 ), \ldots \) ). $BR $BR

\( f = \) \{ ans_rule( 50 ) \} $BR $BR

(b) Write \( f^{-1} \) as a product of transpositions in the same way. $BR $BR

\( f^{-1} = \) \{ ans_rule( 50 ) \} $BR

EOT


ANS( $fTranspositions->cmp(
	list_checker => ~~&checkListOfTranspositions
) );

ANS( $fInvTranspositions->cmp(
	list_checker => ~~&checkListOfTranspositions
) );


COMMENT( "" );


ENDDOCUMENT(); 