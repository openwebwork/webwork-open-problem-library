## DBsubject(Abstract algebra)
## DBchapter('Groups')
## DBsection('Permutation Groups')
## KEYWORDS('parity of permutations')
## Level(2)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Daniel Nichols and Siman Wong')
## Institution('University of Massachusetts Amherst')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"PGmatrixmacros.pl",
"answerHints.pl",
"algebraMacros.pl"
);


TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

# the set on which our permutations will be defined
@x = ( 0 .. random( 6, 8, 1 ) );

# List to display the set in the problem text. Permutations are stored internally on a set { 0, 1, ..., n - 1 }, but we increase all numbers by 1 when we display things, so it appears as { 1, 2, ..., n } to the student
$xList = List( map { $_ + 1 } @x );

# make our two permutations:
#	f is a product of two cycles
#	g is a single cycle
# To make each cycle, start with @x, shuffle it, then cut off the last few elements
# We make sure length( f2 ) > length( f1 ), that way we can't have f1f2 = Id. Need to make sure fg != Id...
@fCycle1 = @fCycle2 = @gCycle = @x;
fyshuffle( ~~@fCycle1 );
fyshuffle( ~~@fCycle2 );
fyshuffle( ~~@gCycle );

@fCycle1 = @fCycle1[ 0 .. random( 1, 3, 1 ) ];
@fCycle2 = @fCycle2[ 0 .. random( @fCycle1, @fCycle2 - 2, 1 ) ];
@gCycle = @gCycle[ 0 .. random( 2, @gCycle - 1 ) ];

# used to display the permutations in problem text
$fCycle1string = "( " . join( '\,', map{ $_ + 1 } @fCycle1 ) . " )";
$fCycle2string = "( " . join( '\,', map{ $_ + 1 } @fCycle2 ) . " )";
$gCycleString = "( " . join( '\,', map{ $_ + 1 } @gCycle ) . " )";


# sort permutations into even and odd. this can all be determined based on parity of f,g

$fEven = !( ( @fCycle1 + @fCycle2 ) % 2 );
$gEven = @gCycle % 2;
		
if( $fEven )
{
	push @evenPermutations, '\( f \)', '\( f^{-1} \)';
}
else
{
	push @oddPermutations, '\( f \)', '\( f^{-1} \)';
}

if( $gEven )
{
	push @evenPermutations, '\( g \)', '\( g^{-1} \)', '\( fgf^{-1} \)';
}
else
{
	push @oddPermutations, '\( g \)', '\( g^{-1} \)', '\( fgf^{-1} \)';
}
				
if( $fEven && $gEven || !$fEven & !$gEven )
{
	push @evenPermutations, '\( fg \)';
}
else
{
	push @oddPermutations, '\( fg \)';
}

# at least one of the options is always right, but let's just keep this here anyway...
push @evenPermutations, "None of the above" if !@evenPermutations;


$evenCheckbox = new_checkbox_multiple_choice( );
$evenCheckbox -> qa ( "Which of the following are even permutations?", @evenPermutations  );
$evenCheckbox -> extra( @oddPermutations );
$evenCheckbox -> makeLast( "None of the above" );



TEXT(EV3(<<'EOT'));

Let \( f \) and \( g \) be permutations on the set \( $LB $xList $RB \), defined as follows $BR $BR

\[ f = $fCycle1string $fCycle2string \] $BR
\[ g = $gCycleString \] $BR

\{ $evenCheckbox->print_q( ) \}
$BR
\{ $evenCheckbox->print_a( ) \} $BR

EOT


ANS( checkbox_cmp( $evenCheckbox->correct_ans() ) );


COMMENT( "" );


ENDDOCUMENT(); 