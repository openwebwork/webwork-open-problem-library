## DBsubject('Abstract Algebra')
## DBchapter('Groups')
## DBsection('Permutation Groups')
## KEYWORDS('disjoint cyclce decompositions')
## Level(2)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Daniel Nichols and Siman Wong')
## Institution('University of Massachusetts Amherst')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"PGmatrixmacros.pl",
"answerHints.pl",
"algebraMacros.pl"
);



TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

# the set on which our permutations will be defined
@x = ( 0 .. random( 6, 8, 1 ) );

# List to display the set in the problem text. Permutations are stored internally on a set { 0, 1, ..., n - 1 }, but we increase all numbers by 1 when we display things, so it appears as { 1, 2, ..., n } to the student
$xList = List( map { $_ + 1 } @x );

# make our two permutations:
#	f is a product of two cycles
#	g is a single cycle
# To make each cycle, start with @x, shuffle it, then cut off the last few elements
# We make sure length( f2 ) > length( f1 ), that way we can't have f1f2 = Id. Need to make sure fg != Id...
@fCycle1 = @fCycle2 = @gCycle = @x;
fyshuffle( ~~@fCycle1 );
fyshuffle( ~~@fCycle2 );
fyshuffle( ~~@gCycle );

@fCycle1 = @fCycle1[ 0 .. random( 1, 3, 1 ) ];
@fCycle2 = @fCycle2[ 0 .. random( @fCycle1, @fCycle2 - 2, 1 ) ];

# make sure g has opposite parity of f
$gLengthStart = ( @fCycle1 + @fCycle2 ) % 2 ? 2 : 3;
$gLength = $gLengthStart + 2 * random( 0, int( @gCycle - 1 - $gLengthStart ) / 2, 1 );
@gCycle = @gCycle[ 0 .. $gLength ];

# used to display the permutations in problem text
$fCycle1string = "( " . join( '\,', map{ $_ + 1 } @fCycle1 ) . " )";
$fCycle2string = "( " . join( '\,', map{ $_ + 1 } @fCycle2 ) . " )";
$gCycleString = "( " . join( '\,', map{ $_ + 1 } @gCycle ) . " )";

# Now we need to compute f^-1, fg, and fgf^-1. We compute these first in one-line notation by applying the cycles. Then we use the disjointCycles subroutine to decompose them into disjoint cycles and store them as mathObjects.


# f^-1

# first compute the inverses of the cycles f1 and f2 that make up f
@fCycle1inv = map{ $fCycle1[ -$_ ] } ( 1 .. @fCycle1 );
@fCycle2inv = map{ $fCycle2[ -$_ ] } ( 1 .. @fCycle2 );

@fInv = @x; #start with the base set
@fInv[ @fCycle1inv[ -1 .. @fCycle1inv - 2 ] ] = @fInv[ @fCycle1inv ]; #apply f1^-1
@fInv[ @fCycle2inv[ -1 .. @fCycle2inv - 2 ] ] = @fInv[ @fCycle2inv ]; #apply f2^-1

$fInvCycles = disjointCycles( ~~@fInv );


# fg

@fg = @x; #start with base set
@fg[ @gCycle[ -1 .. @gCycle - 2 ] ] = @fg[ @gCycle ]; #apply g
@fg[ @fCycle2[ -1 .. @fCycle2 - 2 ] ] = @fg[ @fCycle2 ]; #apply f2
@fg[ @fCycle1[ -1 .. @fCycle1 - 2 ] ] = @fg[ @fCycle1 ]; #apply f1

$fgCycles = disjointCycles( ~~@fg );


# fgf^-1

@fgf = @x; #start with base set
@fgf[ @fCycle1inv[ -1 .. @fCycle1inv - 2 ] ] = @fgf[ @fCycle1inv ]; #apply f1^-1
@fgf[ @fCycle2inv[ -1 .. @fCycle2inv - 2 ] ] = @fgf[ @fCycle2inv ]; #apply f2^-1
@fgf[ @gCycle[ -1 .. @gCycle - 2 ] ] = @fgf[ @gCycle ]; # apply g
@fgf[ @fCycle2[ -1 .. @fCycle2 - 2 ] ] = @fgf[ @fCycle2 ]; # apply f^2
@fgf[ @fCycle1[ -1 .. @fCycle1 - 2 ] ] = @fgf[ @fCycle1 ]; # apply f^1

$fgfCycles = disjointCycles( ~~@fgf );


TEXT(EV3(<<'EOT'));

Let \( f \) and \( g \) be permutations on the set \( $LB $xList $RB \), defined as follows $BR $BR

\[ f = $fCycle1string $fCycle2string \] $BR
\[ g = $gCycleString \] $BR

Write each of the following permutations as a product of disjoint cycles, separated by commas (e.g. \( ( 1, 2 ), ( 3, 4, 5 ), \ldots \) ). $BR
Do not include 1-cycles (e.g. \( (2) \) ) in your answer. $BR $BR

(a) \( fg = \) \{ ans_rule( 20 ) \} $BR $BR

(b) \( f^{-1} = \) \{ ans_rule( 20 ) \} $BR $BR

(c) \( fgf^{-1} = \) \{ ans_rule( 20 ) \} $BR


EOT

ANS( $fgCycles->cmp(
	checker => ~~&checkCycles
) );

ANS( $fInvCycles->cmp(
	checker => ~~&checkCycles
) );

ANS( $fgfCycles->cmp(
	checker => ~~&checkCycles
) );


COMMENT( "" );


ENDDOCUMENT(); 