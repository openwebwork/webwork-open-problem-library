## DBsubject('Abstract Algebra')
## DBchapter('Groups')
## DBsection('Permutation Groups')
## KEYWORDS('disjoint cyclce decompositions, composition of permutations')
## Level(2)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Daniel Nichols and Siman Wong')
## Institution('University of Massachusetts Amherst')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"PGmatrixmacros.pl",
"answerHints.pl",
"algebraMacros.pl"
);


TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

# the set on which our permutations will be defined
@x = ( 0 .. random( 5, 8, 1 ) );

# List to display the set in the problem text. Permutations are stored internally on a set { 0, 1, ..., n - 1 }, but we increase all numbers by 1 when we display things, so it appears as { 1, 2, ..., n } to the student
$xList = List( map { $_ + 1 } @x );

# make our permutations by starting with ordered arrays and scrambling
# while statement makes sure the permutations are not equal and neither is the identity
@f = @g = @x;
while( join( ' ', @f ) eq join( ' ', @g ) || join( ' ', @f ) eq join( ' ', @x ) || join( ' ', @g ) eq join( ' ', @x ) )
{
	 fyshuffle( ~~@f );
	 fyshuffle( ~~@g );
}

# these are used to display permutations (2-row format) in the problem text
$fMatrix = [ [ map{ $_ + 1 } @x ], [ map{ $_ + 1 } @f ] ];
$gMatrix = [ [ map{ $_ + 1 } @x ], [ map{ $_ + 1 } @g ] ];

# compute the other permutations we need: f^-1, g^-1, fg, fgf^-1, f^-1gf
$fInv[ $f[ $_ ] ] = $_ foreach ( 0 .. @x - 1 );
$fg[ $_ ] = $f[ $g[ $_ ] ] foreach ( 0 .. @x - 1 );
$fgf[ $_ ] = $f[ $g[ $fInv[ $_ ] ] ] foreach ( 0 .. @x - 1 );
$fgfBad[ $_ ] = $fInv[ $g[ $f[ $_ ] ] ] foreach ( 0 .. @x - 1 );

# call disjoint Cycles on each permutation, store cycle decomposition
$fInvCycles = disjointCycles( ~~@fInv );
$fgCycles = disjointCycles( ~~@fg );
$fgfCycles = disjointCycles( ~~@fgf );
$fgfCyclesBad = disjointCycles( ~~@fgfBad );


TEXT(EV3(<<'EOT'));

Let \( f \) and \( g \) be permutations on the set \( $LB $xList $RB \), defined as follows $BR $BR

\[ f = \{ display_matrix_mm( $fMatrix, left => '(', right => ')' )  \} \] $BR
\[ g = \{ display_matrix_mm( $gMatrix, left => '(', right => ')' )  \} \] $BR

Write each of the following permutations as a product of disjoint cycles, separated by commas (e.g. \( ( 1, 2 ), ( 3, 4, 5 ), \ldots \) ). $BR
Do not include 1-cycles (e.g. \( (2) \) ) in your answer. $BR $BR

(a) \( fg = \) \{ ans_rule( 20 ) \} $BR $BR

(b) \( f^{-1} = \) \{ ans_rule( 20 ) \} $BR $BR

(c) \( fgf^{-1} = \) \{ ans_rule( 20 ) \} $BR


EOT

ANS( $fgCycles->cmp(
	checker => ~~&checkCycles
) );

ANS( $fInvCycles->cmp(
	checker => ~~&checkCycles
) );

ANS( $fgfCycles->cmp(
	checker => ~~&checkCycles
)->withPostFilter( AnswerHints(
	# if the student composed f^{-1}gf instead of fgf^{-1}, output a special message
	$fgfCyclesBad => [ "Perhaps you composed the permutations in the wrong order...", replaceMessage => 1 ]
) ) );


COMMENT( "" );


ENDDOCUMENT(); 