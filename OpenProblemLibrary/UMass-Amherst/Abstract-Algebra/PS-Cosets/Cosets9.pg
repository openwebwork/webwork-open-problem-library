## DBsubject('Abstract Algebra')
## DBchapter('Groups')
## DBsection('Cosets, Lagrange theorem and Normality')
## KEYWORDS('cosets')
## Level(2)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Siman Wong and Patrick O'Brien')
## Institution('University of Massachusetts Amherst')


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGstandard.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
#"parserRadioButtons.pl",
"algebraMacros.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

$n1 = random(6,16,1);
while($n1 == 7 || $n1 == 11 || $n1 == 13){
    $n1 = random(6,16,1);
}
$B1 = random(1,$n1,1);
$g1 = gcd($B1,$n1);
while($g1 <= 1){
    $B1 = random( 1, $n1 - 1, 1 );
    $g1 = gcd($B1,$n1);
}
$a1 = random(1,$n1-2,1);

$r1 = $n1/$g1;

@seq1 = ();

@seq1[0] = $a1;

for($i=1;$i<$r1;$i++){
    @seq1[$i] = ($a1 + $i*$g1) % $n1;
}

$ans1 = join(", ",@seq1);
$ans1 = Compute("$ans1");

############################################################

$r = random(0,33,1);

if($r == 0){ @seq2 = (36, 29, 29, 13, 17, 25, 5, 1);}
elsif($r == 1){ @seq2 = (37, 27, 27, 26, 36, 10, 11, 1);}
elsif($r == 2){ @seq2 = (38, 31, 31, 11, 37, 7, 27, 1);}
elsif($r == 3){ @seq2 = (39, 4,  4, 16, 25, 22, 10, 1);}
elsif($r == 4){ @seq2 = (42, 19, 19, 25, 13, 37, 31, 1);}
elsif($r == 5){ @seq2 = (43, 37, 37, 36, 42, 6, 7, 1);}
elsif($r == 6){ @seq2 = (45, 11, 11, 31, 26, 16, 41, 1);}
elsif($r == 7){ @seq2 = (49, 29, 29, 8, 36, 15, 43, 22, 1);}
elsif($r == 8){ @seq2 = (52, 3,  3, 9, 27, 29, 35, 1);}
elsif($r == 9){ @seq2 = (54, 35, 35, 37, 53, 19, 17, 1);}
elsif($r == 10){ @seq2 = (56, 51, 51, 25, 43, 9, 11, 1);}
elsif($r == 11){ @seq2 = (57, 26, 26, 49, 20, 7, 11, 1);}
elsif($r == 12){ @seq2 = (58, 45, 45, 53, 7, 25, 23, 49, 1);}
elsif($r == 13){ @seq2 = (63, 11, 11, 58, 8, 25, 23, 1);}
elsif($r == 14){ @seq2 = (65, 36, 36, 61, 51, 16, 56, 1);}
elsif($r == 15){ @seq2 = (67, 30, 30, 29, 66, 37, 38, 1);}
elsif($r == 16){ @seq2 = (70, 31, 31, 51, 41, 11, 61, 1);}
elsif($r == 17){ @seq2 = (71, 48, 48, 32, 45, 30, 20, 37, 1);}
elsif($r == 18){ @seq2 = (72, 41, 41, 25, 17, 49, 65, 1);}
elsif($r == 19){ @seq2 = (73, 9,  9, 8, 72, 64, 65, 1);}
elsif($r == 20){ @seq2 = (74, 27, 27, 63, 73, 47, 11, 1);}
elsif($r == 21){ @seq2 = (76, 31, 31, 49, 75, 45, 27, 1);}
elsif($r == 22){ @seq2 = (77, 54, 54, 67, 76, 23, 10, 1);}
elsif($r == 23){ @seq2 = (78, 17, 17, 55, 77, 61, 23, 1);}
elsif($r == 24){ @seq2 = (84, 53, 53, 37, 29, 25, 65, 1);}
elsif($r == 25){ @seq2 = (86, 59, 59, 41, 11, 47, 21, 35, 1);}
elsif($r == 26){ @seq2 = (87, 49, 49, 52, 25, 7, 82, 16, 1);}
elsif($r == 27){ @seq2 = (90, 29, 29, 31, 89, 61, 59, 1);}
elsif($r == 28){ @seq2 = (91, 55, 55, 22, 27, 29, 48, 1);}
elsif($r == 29){ @seq2 = (93, 37, 37, 67, 61, 25, 88, 1);}
elsif($r == 30){ @seq2 = (95, 49, 49, 26, 39, 11, 64, 1);}
elsif($r == 31){ @seq2 = (97, 62, 62, 61, 96, 35, 36, 1);}
elsif($r == 32){ @seq2 = (98, 71, 71, 43, 15, 85, 57, 29, 1);}
elsif($r == 33){ @seq2 = (99, 43, 43, 67, 10, 34, 76, 1);}

$n2 = $seq2[0];
$B2 = $seq2[1];
$a2 = random(2,$n-2,1);
$g2 = gcd($a2,$n2);
while($g2 != 1){
    $a2 = random(2,$n-2,1);
    $g2 = gcd($a2,$n2);
}

@set = ();
$count2 = 0;

for($i=2;$i<scalar(@seq2);$i++){
    $k = $seq2[$i];
    $ak = $a2*$k;
    @set[$count2] = $ak % $n2;
    $count2++;
}

$ans2 = join(", ",@set);
$ans2 = Compute("$ans2");


BEGIN_TEXT

(a) Determine all elements of the coset \($a1 + \langle $B1 \rangle\)  in the group \( \{ cyclic( $n1 ) \} \). $BR
Enter your answer as a comma separated list; make sure 
that each element you enter is \( \geq 0\) and \(< $n1\). $BR $BR

\{ans_rule(25)\} $BR $BR

(b) Determine all elements of the coset  \($a2 \langle $B2 \rangle\) in the group \(U($n2)\). $BR
Enter your answer as a comma separated list; make sure 
that each element you enter is \(>0\) and \(< $n2\). $BR $BR

\{ans_rule(25)\} $BR $BR



END_TEXT


ANS( $ans1->cmp( checker => sub {
		my ( $correct, $student, $ansHash ) = @_;  # get correct and student MathObjects
		return ( $student % $n1 == $correct % $n1 ? 1 : 0 );
	}
) );

ANS( $ans2->cmp( checker => sub {
		my ( $correct, $student, $ansHash ) = @_;  # get correct and student MathObjects
		return ( $student % $n2 == $correct % $n2 ? 1 : 0 );
	}
) );



ENDDOCUMENT();    