## DBsubject('Abstract Algebra')
## DBchapter('Groups')
## DBsection('Cosets, Lagrange theorem and Normality')
## KEYWORDS('cosets')
## Level(3)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Dan Nichols and Siman Wong')
## Institution('University of Massachusetts Amherst')


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGstandard.pl",
"MathObjects.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"parserRadioButtons.pl",
"PGmatrixmacros.pl",
"algebraMacros.pl"
);


TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

# in this problem we store permutations in S_n as lists representing one-line notation on the set ( 0 .. n - 1 ).

# set on which permutations are defined
@x = ( 0 .. 4 );

# choose two elements i,j; the subgroup H will be the stabilizer (S_5)_{i,j}
@chooseIJ = @x;
$i = splice( @chooseIJ, random( 0, @chooseIJ - 1, 1 ), 1 );
$j = splice( @chooseIJ, random( 0, @chooseIJ - 1, 1 ), 1 );
# @chooseIJ now represents the remaining elements on which S_3 acts

# create all 6 elements of H
@s3 = map{ [ @chooseIJ[ split( '', $_ ) ] ] }  ( 012, 021, 102, 120, 201, 210 );
@{ $subgroupH[ $_ ] }[ $i, $j, @chooseIJ ] = ( $i, $j, @{ $s3[ $_ ] } ) foreach ( 0 .. 5 );

# create all 8 elements of K
@subgroupK = map{ [ split( '', $_ ), 5 ] } ( 1234, 2341, 3412, 4123, 4321, 1432, 2143, 3214 );


# make our permutations by starting with ordered arrays and scrambling
# we use 4 pairs:
# f1, g1 - random permutations
# f2, g2 - f2 is random, g2 is f2 * trH where trH is a transposition in H
# f3, g3 - random permutations
# f4, g4 - f4 is random, g4 is f4 * pK where pK is a (non-identity) permutation in K

@f1 = @g1 = @f2 = @f3 = @g3 = @f4 = @x;

# these while loops make sure the permutations are not the identity and f1 != g1, f3 != g3

while( join( ' ', @f1 ) eq join( ' ', @g1 ) || join( ' ', @f1 ) eq join( ' ', @x ) || join( ' ', @g1 ) eq join( ' ', @x ) )
{
	 fyshuffle( ~~@f1 );
	 fyshuffle( ~~@g1 );
}

while( join( ' ', @f3 ) eq join( ' ', @g3 ) || join( ' ', @f3 ) eq join( ' ', @x ) || join( ' ', @g3 ) eq join( ' ', @x ) )
{
	 fyshuffle( ~~@f3 );
	 fyshuffle( ~~@g3 );
}

while( join( ' ', @f2 ) eq join( ' ', @x ) || join( ' ', @f4 ) eq join( ' ', @x ) )
{
	fyshuffle( ~~@f2 );
	fyshuffle( ~~@f4 );
}

# random transposition in H
$chooseTranspositionH = ( 1, 2, 5 )[ random( 0, 2, 1 ) ];
@trH = @{ $subgroupH[ $chooseTranspositionH ] };

# g2 = f2 * trH
@g2 = @trH[ @f2 ];


# random nontrivial element of K
@pK = @{ $subgroupK[ random( 1, @subgroupK - 1, 1 ) ] };

# g4 = f4 * pK
@g4 = @pK[ @f4 ];



# are f1 and g1 in the same coset?
$answer1 = 'No';
foreach my $h ( @subgroupH[ 1 .. @subgroupH - 1 ] )
{
	if( join( '', @h[ @f1 ] ) eq join( '', @g1 ) )
	{
		$answer1 = 'Yes';
		last;
	}
}

# are f3 and g3 in the same coset?
$answer3 = 'No';
foreach my $k ( @subgroupK[ 1 .. @subgroupK - 1 ] )
{
	if( join( '', @k[ @f3 ] ) eq join( '', @g3 ) )
	{
		$answer3 = 'Yes';
		last;
	}
}

$radio1 = RadioButtons( [ 'Yes', 'No' ], $answer1, first=>[ 'Yes' ], separator=>' ' );
$radio2 = RadioButtons( [ 'Yes', 'No' ], 'Yes', first=>[ 'Yes' ], separator=>' ' );
$radio3 = RadioButtons( [ 'Yes', 'No' ], $answer3, first=>[ 'Yes' ], separator=>' ' );
$radio4 = RadioButtons( [ 'Yes', 'No' ], 'Yes', first=>[ 'Yes' ], separator=>' ' );



# these are used to display permutations (2-row format) in the problem text. To display them to the student, we add 1 to everything so the letters are 1 .. n instead of 0 .. n - 1.
$f1Matrix = [ [ map{ $_ + 1 } @x ], [ map{ $_ + 1 } @f1 ] ];
$g1Matrix = [ [ map{ $_ + 1 } @x ], [ map{ $_ + 1 } @g1 ] ];
$f2Matrix = [ [ map{ $_ + 1 } @x ], [ map{ $_ + 1 } @f2 ] ];
$g2Matrix = [ [ map{ $_ + 1 } @x ], [ map{ $_ + 1 } @g2 ] ];
$f3Matrix = [ [ map{ $_ + 1 } @x ], [ map{ $_ + 1 } @f3 ] ];
$g3Matrix = [ [ map{ $_ + 1 } @x ], [ map{ $_ + 1 } @g3 ] ];
$f4Matrix = [ [ map{ $_ + 1 } @x ], [ map{ $_ + 1 } @f4 ] ];
$g4Matrix = [ [ map{ $_ + 1 } @x ], [ map{ $_ + 1 } @g4 ] ];



TEXT(EV3(<<'EOT'));

(a) Let \( H \) be the subgroup of \( S_5 \) consisting of those permutations that fix the letters \( $i \) and \( $j \). For each of the following pairs of elements of \( S_5 \), determine whether or not they belong to the same left \( H \)-coset. $BR $BR

\[ (i) \quad \quad f_1 = \{ display_matrix_mm( $f1Matrix, left => '(', right => ')' )  \}, \quad
g_1 = \{ display_matrix_mm( $g1Matrix, left => '(', right => ')' )  \} \] $BR

$BCENTER Do \( f_1 \) and \( g_1 \) belong to the same left \( H \)-coset?
\{ $radio1->buttons \} $ECENTER $BR $BR

\[ (ii) \quad \quad f_2 = \{ display_matrix_mm( $f2Matrix, left => '(', right => ')' )  \}, \quad
g_2 = \{ display_matrix_mm( $g2Matrix, left => '(', right => ')' )  \} \] $BR

$BCENTER Do \( f_2 \) and \( g_2 \) belong to the same left \( H \)-coset?
\{ $radio2->buttons \} $ECENTER $BR $BR


(b) Let \( K \) be the subgroup of \( S_5 \) generated by \( ( 1 2 3 4 ) \) and \( ( 1 2 )( 3 4 ) \). For each of the following pairs of elements of \( S_5 \), determine whether or not they belong to the same left \( K \)-coset. $BR $BR

\[ (i) \quad \quad f_3 = \{ display_matrix_mm( $f3Matrix, left => '(', right => ')' )  \}, \quad
g_3 = \{ display_matrix_mm( $g3Matrix, left => '(', right => ')' )  \} \] $BR

$BCENTER Do \( f_3 \) and \( g_3 \) belong to the same left \( K \)-coset?
\{ $radio3->buttons \} $ECENTER $BR $BR

\[ (ii) \quad \quad f_4 = \{ display_matrix_mm( $f4Matrix, left => '(', right => ')' )  \}, \quad
g_4 = \{ display_matrix_mm( $g4Matrix, left => '(', right => ')' )  \} \] $BR

$BCENTER Do \( f_4 \) and \( g_4 \) belong to the same left \( H \)-coset?
\{ $radio4->buttons \} $ECENTER $BR $BR


EOT


ANS( $radio1->cmp );
ANS( $radio2->cmp );
ANS( $radio3->cmp );
ANS( $radio4->cmp );



ENDDOCUMENT();    