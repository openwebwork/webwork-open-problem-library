## DBsubject(Abstract algebra)
## DBchapter('Groups')
## DBsection('Quotient groups')
## KEYWORDS('quotient groups, product of groups, order of elements')
## Level(4)
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Siman Wong')
## Institution('University of Massachusetts Amherst')


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

Context("Numeric");

#  In this problem we determine the order of elements in various 
#  quotients of products of groups
#
#  The two quotients are
#    Z_am x Z_an / <(au,aw)>      and    Z_mm x U(mn) / <(mu,mw)>
#  The elements are
#    (ax, ay)                     and    (mx, my)
#  The orders are 
#    ao                           and    mo
#  The tuples
#    (am, an, ax, ay, au, aw, ao)
#    (mm, mn, mx, my, mu, mw, mo)
#  are precomputed using    quot9data.gp

# users found errors in the ao and mo tables so I replaced them with functions addaddOrder and addmultOrder

# tables for parts 1,2

@aam = (15, 16, 10, 16, 18, 12, 16, 9, 20, 12, 20, 20, 9, 8, 8, 20, 21, 21, 15, 8);

@aan = (12, 18, 10, 22, 18, 18, 12, 21, 20, 18, 20, 8, 21, 16, 14, 18, 9, 15, 20, 18);

@aau = (9, 4, 6, 10, 10, 10, 14, 6, 10, 6, 10, 5, 3, 2, 4, 8, 3, 15, 9, 4);

@aaw = (5, 13, 7, 13, 5, 5, 5, 10, 3, 13, 7, 3, 19, 11, 11, 13, 5, 2, 17, 7);

@aax = (3, 6, 4, 8, 2, 2, 6, 3, 10, 9, 18, 10, 3, 2, 4, 4, 6, 18, 6, 4);

@aay = (7, 1, 3, 15, 1, 11, 7, 13, 7, 11, 11, 1, 5, 3, 1, 11, 4, 8, 9, 5);

#@aao = (1, 4, 1, 2, 1, 3, 2, 3, 1, 4, 5, 4, 3, 1, 1, 1, 1, 1, 5, 1);

$ra = random(0,@aam-1,1);

#$am = $aam[$ra];
#$an = $aan[$ra];
#$au = $aau[$ra];
#$aw = $aaw[$ra];
#$ax = $aax[$ra];
#$ay = $aay[$ra];

sub addaddOrder {
  my $ii = shift;
  # generate kernel

  my @kernel = ([$aau[$ii],$aaw[$ii]]);
  while ( $kernel[-1]->[0] != 0 or $kernel[-1]->[1] != 0 ){
    my ($a,$b) = @{$kernel[-1]};
    push @kernel, ([($a+$aau[$ii]) % $aam[$ii], ($b+$aaw[$ii]) % $aan[$ii]]);
  }

  # find order of ($ax,$ay) mod kernel 

  my $order=1;
  my $inKernelQ=0; 
  my $x=$aax[$ii];
  my $y=$aay[$ii];
  do {
    foreach (@kernel){
      if ( $x== $_->[0] && $y==$_->[1] ){
	$inKernelQ = 1;
	last;
      }
    }
    if (! $inKernelQ ){
      $x = ($x+$aax[$ii]) % $aam[$ii];
      $y = ($y+$aay[$ii]) % $aan[$ii];
      $order++;
    }
  } until ($inKernelQ);

  return $order;
};

$ans1 = addaddOrder($ra);

$rb = random(0,@aam-1,1);
if ($rb==$ra) {
 $rb = random(0,@aam-1,1);
}

#$bm = $aam[$rb];
#$bn = $aan[$rb];
#$bu = $aau[$rb];
#$bw = $aaw[$rb];
#$bx = $aax[$rb];
#$by = $aay[$rb];
#
#$ans2 = $aao[$rb];

$ans2 = addaddOrder($rb);

# tables for parts 3,4

@mmm = (15, 16, 20, 21, 10, 16, 14, 18, 12, 10, 18, 16, 9, 20, 15, 12, 22, 16, 22, 8);

@mmn = (12, 18, 15, 18, 10, 22, 14, 18, 18, 15, 10, 12, 21, 20, 21, 18, 8, 8, 14, 14);

@mmu = (9, 4, 15, 6, 6, 10, 8, 10, 10, 8, 14, 14, 6, 10, 9, 6, 6, 12, 4, 4);

@mmw = (5, 13, 7, 5, 7, 13, 11, 5, 5, 4, 3, 5, 10, 3, 11, 13, 5, 3, 11, 9);

@mmx = (3, 6, 16, 18, 4, 8, 12, 2, 2, 2, 8, 6, 3, 10, 6, 9, 11, 2, 4, 6);

@mmy = (7, 1, 1, 11, 3, 15, 9, 1, 11, 2, 7, 7, 13, 7, 10, 11, 3, 5, 3, 5);

#@mmo = (2, 2, 5, 1, 1, 1, 1, 3, 1, 2, 1, 2, 3, 1, 2, 2, 2, 4, 2, 2);

$rm = random(0,@mmm-1,1);

sub addmultOrder {
  my $ii = shift;
  # generate kernel

  my @kernel = ([$mmu[$ii],$mmw[$ii]]);
  while ( $kernel[-1]->[0] != 0 or $kernel[-1]->[1] != 1 ){
    my ($a,$b) = @{$kernel[-1]};
    push @kernel, ([($a+$mmu[$ii]) % $mmm[$ii], ($b*$mmw[$ii]) % $mmn[$ii]]);
  }

  # find order of ($ax,$ay) mod kernel 

  my $order=1;
  my $inKernelQ=0; 
  my $x=$mmx[$ii];
  my $y=$mmy[$ii];
  do {
    foreach (@kernel){
      if ( $x== $_->[0] && $y==$_->[1] ){
	$inKernelQ = 1;
	last;
      }
    }
    if (! $inKernelQ ){
      $x = ($x+$mmx[$ii]) % $mmm[$ii];
      $y = ($y*$mmy[$ii]) % $mmn[$ii];
      $order++;
    }
  } until ($inKernelQ);

  return $order;
};


#$mm = $mmm[$rm];
#$mn = $mmn[$rm];
#$mu = $mmu[$rm];
#$mw = $mmw[$rm];
#$mx = $mmx[$rm];
#$my = $mmy[$rm];

#$ans3 = $mmo[$rm];

$ans3 = addmultOrder($rm);

$rk = random(0,@mmm-1,1);
if ($rk==$rm) {
 $rk = random(0,@mmm-1,1);
}

#$km = $mmm[$rk];
#$kn = $mmn[$rk];
#$ku = $mmu[$rk];
#$kw = $mmw[$rk];
#$kx = $mmx[$rk];
#$ky = $mmy[$rk];

#$ans4 = $mmo[$rk];

$ans4 = addmultOrder($rk);




Context()->texStrings;
BEGIN_TEXT


Determine the order of the coset containing each of the following elements in the respective
quotient groups.  (\(U(n)\) is the multiplicative group of units in \(\mathbb{Z}_n\).) 

 $PAR

\{ begintable(3) \}
\{ row( "element", 
        "quotient group", 
        "order")
\}
\{ row( "\( ( $aax[$ra],  $aay[$ra] ) \)", 
        "\(" .  cyclic( $aam[$ra] ) . "\times" . cyclic($aan[$ra]) . "/ \langle ( $aau[$ra],  $aaw[$ra] ) \rangle\)", 
        ans_rule(21))
\}
\{ row( "\( ( $aax[$rb],  $aay[$rb] ) \)", 
        "\(" .  cyclic( $aam[$rb] ) . "\times" . cyclic($aan[$rb]) . "/ \langle ( $aau[$rb],  $aaw[$rb] ) \rangle\)", 
        ans_rule(21))
\}
\{ row( "\( ( $mmx[$rm],  $mmy[$rm] ) \)", 
        "\(" .  cyclic( $mmm[$rm] ) . "\times U($mmn[$rm])/\langle ( $mmu[$rm],  $mmw[$rm] ) \rangle\)", 
        ans_rule(21))
\}
\{ row( "\( ( $mmx[$rk],  $mmy[$rk] ) \)", 
        "\(" .  cyclic( $mmm[$rk] ) . "\times U($mmn[$rk])/\langle ( $mmu[$rk],  $mmw[$rk] ) \rangle\)", 
        ans_rule(21))
\}
\{ endtable() \} $BR




END_TEXT
Context()->normalStrings;

ANS(Compute($ans1)->cmp());
ANS(Compute($ans2)->cmp());
ANS(Compute($ans3)->cmp());
ANS(Compute($ans4)->cmp());;




ENDDOCUMENT();       
