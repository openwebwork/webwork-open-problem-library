##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('integral', 'application')

## DBsubject('Calculus')
## DBchapter('Applications of Integration')
## DBsection('Applications to Physics and Engineering')
## Date('8/24/2011')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('AUCI')
## EditionText1('1')
## AuthorText1('Cook, Petrillo, Frey')
## Section1('3.5')
## Problem1('')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "parserNumberWithUnits.pl",
   "parserFormulaWithUnits.pl",
   "parserFormulaUpToConstant.pl",
   "weightedGrader.pl",
   "Alfredmacros.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
);
jsmathmode();
# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Interval");
Context()->flags->set(ignoreEndpointTypes=>1);

$t1=Compute(random(2,4));
$t2=Compute(random(5,7));

$a = $t1**2 - random(1,3); #sqrt(a) will not be an integer
$b = $t2**2 + random(1,8); #sqrt(b) will not be an integer
$ab = $a*$b;

$tleft = Compute(sqrt($a));
$tright = Compute(sqrt($b));
$intervalout = Compute("($tleft,$tright)");

#upToConstant only works once per context
Context("Numeric");
Context()->variables->are(t=>"Real");
$adaptive = Context()->copy;

Context("Numeric");
Context()->variables->are(t=>"Real");
$masswater = NumberWithUnits("1","kg/L");

$k = Compute(random(2,8));

$w = Formula("$k*(t^3/3-(sqrt($a)+sqrt($b))/2*t^2+sqrt($ab)*t)");
$wprime = Formula("$k*(t-sqrt($a))(t-sqrt($b))");
$wprimeprime = $wprime->D('t');

$F = NumberWithUnits("$k*(sqrt($b)-sqrt($a))","kg/min");

$wright = $w->substitute(t=>"$tright");
$wleft = $w->substitute(t=>"$tleft");
$wzero = $w->substitute(t=>"0");
$FTC = Compute("$wright-$wleft");

$winitial = Compute(random(20,40)-ceil($FTC));#FTC is negative
$amount = Compute($winitial+$wright);
##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
A list of units WeBWorK recognizes \{helpLink('Units')\}. The mass of water is \($masswater\). 
$BR
$BR 
Water flows through a pipe connected to a tank at a rate of \($k\left(t^2-(\sqrt{$a}+\sqrt{$b})t+\sqrt{$ab}\right)\frac{L}{min}\), with positive flow indicating that water is going into the tank.
$BR
Find the interval over which water is flowing out of the tank \{$intervalout->ans_rule()\}(Help with \{helpLink('intervals')\}).
$BR
What is the maximum (in magnitude) force on the water pipe as water is flowing out of the tank? \{$F->ans_rule(25)\}(Remember that F = ma, and a force can be negative)
$BR
Your final answers for the next to integration problems require units.
$BR
The total amount of water that flows out of the tank is 
$BR
\(
\begin{aligned}
\displaystyle\int_{\hbox{\{$tleft->ans_rule(6)\}}}^{\hbox{\{$tright->ans_rule(6)\}}}\hbox{\{$wprime->ans_rule(35)\}} \hskip 2pt dt =&  \hbox{\{$w->ans_rule(45)\}}\Big\vert_{\hbox{\{$tleft->ans_rule(6)\}}}^{\hbox{\{$tright->ans_rule(6)\}}}\\
&\\
 =& \hbox{\{$FTC->ans_rule(45)\}}\\
\end{aligned}
\)
$BR
If the initial amount of water in the tank is \($winitial L\), find the amount of water in the tank after when the water has stopped flowing out of the tank:
$BR
\(
\begin{aligned}
w(\hbox{\{$tright->ans_rule(6)\}}) =& w(0)+\displaystyle\int_{\hbox{\{ans_rule(6)\}}}^{\hbox{\{$tright->ans_rule(6)\}}}\hbox{\{$wprime->ans_rule(35)\}} \hskip 2pt dt\\
&\\
 =&\hbox{\{$w->ans_rule(5)\}} + \hbox{\{$w->ans_rule(45)\}}\Big\vert_{\hbox{\{ans_rule(6)\}}}^{\hbox{\{$tright->ans_rule(6)\}}}\\
&\\
 =& \hbox{\{$amount->ans_rule(45)\}}\\
\end{aligned}
\)
END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#
WEIGHTED_ANS($intervalout->cmp(), 15);
WEIGHTED_ANS($F->cmp(), 15);

#water flow out
WEIGHTED_ANS($tleft->cmp(), 1);
WEIGHTED_ANS($tright->cmp(), 1);
WEIGHTED_ANS($wprime->cmp(), 4);
WEIGHTED_ANS($w->cmp(upToConstant=>1), 15);
WEIGHTED_ANS($tleft->cmp(), 1);
WEIGHTED_ANS($tright->cmp(), 1);
WEIGHTED_ANS(NumberWithUnits("$FTC","L")->cmp(), 15);

#amount after flow out
WEIGHTED_ANS($tright->cmp(), 3);
WEIGHTED_ANS(Compute("0")->cmp(), 1);
WEIGHTED_ANS($tright->cmp(), 1);
WEIGHTED_ANS($wprime->cmp(), 4);
WEIGHTED_ANS($winitial->cmp(), 3);
WEIGHTED_ANS(Formula($adaptive,"$w")->cmp(upToConstant=>1), 3);
WEIGHTED_ANS(Compute("0")->cmp(), 1);
WEIGHTED_ANS($tright->cmp(), 1);
WEIGHTED_ANS(NumberWithUnits("$amount","L")->cmp(), 15);

ENDDOCUMENT();        
