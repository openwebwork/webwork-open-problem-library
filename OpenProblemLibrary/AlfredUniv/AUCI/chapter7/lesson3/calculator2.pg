## DESCRIPTION
## Linear Models
## ENDDESCRIPTION

## KEYWORDS('Statistics', 'Linear regression', 'line')
## Tagged by LD

## DBsubject('Statistics')
## DBchapter('Correlation/Regression')
## DBsection('Linear regression')
## Date('10/29/2012')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('AUCI')
## EditionText1('1')
## AuthorText1('Petrillo')
## Section1('7.3')
## Problem1('4')

#
# First comes some stuff that appears at the beginning of every problem
#

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"PGnumericalmacros.pl",
"PGstatisticsmacros.pl",
"MathObjects.pl",
);

TEXT(beginproblem());

#
# Now we do the randomization of variables, and other computations
# as needed for this problem.  Sometimes we compute the answers here.
#
Context()->variables->are(t=>"Real");
# Make numpoints at least 5
$numpoints = 11;

for ($j=0;$j<$numpoints;$j++){
 $time[$j] = Compute("1970+4*$j");
};

# coefficients of the polynomial, we want the derivative to be zero somewhere
# between $time[0] and $time[$numpoints -1]:

$a0 = random(4,20,.01);
$k = random(0.1,0.3,.01);

$reg = Regression->new( 2, "regression", [ "const", "X1" ] );

for $j (0..($numpoints-1)) {
        $t = $time[$j]-$time[0];
	$exact = Compute("$a0*e^($k*$t)");
        $b = sprintf("%0.8f", random(.99*$exact, 1.01*$exact, 0.001));
        $y[$j] = Real("$b");
#	$y[$j] = Compute(random(.99*$exact, 1.01*$exact, 0.001))->with(
 #                                  tolType => 'absolute',tolerance =>.000001);
        $b = sprintf("%0.8f", ln($y[$j]) );
        $ln[$j] = Real("$b");
        $reg->include($ln[$j], [1, ($time[$j]-$time[0]) ]);	
}
for $j (0..($numpoints-2)) {
        $firstdifference[$j] = Compute("($ln[$j+1]-$ln[$j])/($time[$j+1]-$time[$j])")->with(tolType => 'absolute',tolerance =>.0001);	
}

@coeff= $reg->theta();
$linreg = Formula("$coeff[0][0]+$coeff[0][1]*t");
$expreg = Formula("e^($linreg)");
$expreg->{limits} = [0,5];
$dexpreg = $expreg->D('t');
$t0 = $time[floor($numpoints/2)];
$dt0 = $t0-$time[0];
$dexpregt0 = $dexpreg->substitute(t=>"$dt0");

#
# Now the problem text itself, with ans_rule's to indicate where the
# answers go.  You can stop entering text, do more computations, and then
# start up again if you want.
#
$cellwidth = 20;

BEGIN_TEXT
	Jen is trying to analyze the data below. After trying the technique of looking at the second derivative from the previous problem, which doesn't work, Jen tries the data to see if it is exponential. She computes the logarithm of the data, which should be linear. She then also estimates the first derivative of the logarithmic data using average rates of change. If the original data is exponential, then the first derivative of the logarithm should be constant. Repeat Jen's calculations below:
$BR
END_TEXT

BEGIN_TEXT
$BCENTER
\{begintable(4)\}
\{row( "t" , "\(y=Pe^{rt}\)","\(ln(y) = ln(P) + rt\)","\(\frac{\Delta ln(y)}{\Delta t}\)")\}
END_TEXT

for $j (0..($numpoints-2)){
BEGIN_TEXT
\{row($time[$j], $y[$j],ans_rule($cellwidth),ans_rule($cellwidth))\}
END_TEXT
};

BEGIN_TEXT
\{row($time[$numpoints-1], $y[$numpoints-1],ans_rule($cellwidth),"")\}
END_TEXT

BEGIN_TEXT
\{endtable\}
$ECENTER
END_TEXT

for $j (0..($numpoints-2)){
ANS($ln[$j]->cmp() );
ANS($firstdifference[$j]->cmp() );
}
ANS($ln[$numpoints-1]->cmp() );

BEGIN_TEXT
Jen decides that the logarithmic data is linear,so she then fits a linear regression to the natural log of the original data with time t = 0 at $time[0]:
$BR
\(\ln(y) \approx \) \{ans_rule\}
$BR
and therefore
$BR
\(y \approx \) \{ans_rule\}
$BR
$BR
According to this model, at time t=$t0 y is increasing at the rate \{ans_rule\}
END_TEXT

$lincheck = sub {
  my ($correct, $student, $ansHash) = @_;
  Value::isFormula($student);
  my $context = Context()->copy;
  my $s = Formula($context,"$student");
  my $ds = $s->D('t');
  my $d2s = $ds->D('t')->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  my $s0 = $s->eval(t=>'0')->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  my $s1 = $ds->eval(t=>'0')->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  my $c = Formula($context,"$correct");
  my $dc = $c->D('t');
  my $c0 = Compute($c->eval(t=>'0'))->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  my $c1 = Compute($dc->eval(t=>'0'))->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  if ($d2s != 0) {Value->Error('Your answer should be a linear function')};
  if ($s0 != $c0) {Value->Error('Your initial amount is off')};
  if ($s1 != $c1) {Value->Error('Your growth factor is off')};
  ### if you've made it this far, your answer should be correct.
  return 1;
};


$expcheck = sub {
  my ($correct, $student, $ansHash) = @_;
  Value::isFormula($student);
  my $context = Context()->copy;
  my $s = Formula($context,"ln($student)");
  my $ds = $s->D('t');
  my $d2s = $ds->D('t');
  my $s0 = $s->eval(t=>'0');
  my $s1 = $ds->eval(t=>'0');
  my $c = Formula($context,"ln($correct)");
  my $dc = $c->D('t');
  my $c0 = Compute($c->eval(t=>'0'))->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  my $c1 = Compute($dc->eval(t=>'0'))->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  if ($d2s != 0) {Value->Error('Your answer should be an exponential function')};
  if ($s0 != $c0) {Value->Error('Your initial amount is off')};
  if ($s1 != $c1) {Value->Error('Your growth factor is off')};
  ### if you've made it this far, your answer should be correct.
  return 1;
};


ANS($linreg->cmp(checker=>$lincheck) );
ANS($expreg->cmp(checker=>$expcheck) );
ANS($dexpregt0->cmp( tolerance => 0.01,
  tolType => "relative",) );

ENDDOCUMENT();        # This should be the last executable line in the problem.