## DESCRIPTION
## Linear Models
## ENDDESCRIPTION

## KEYWORDS('Statistics', 'Linear regression', 'line')
## Tagged by LD

## DBsubject('Statistics')
## DBchapter('Correlation/Regression')
## DBsection('Linear regression')
## Date('10/29/2012')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('AUCI')
## EditionText1('1')
## AuthorText1('Petrillo')
## Section1('7.3')
## Problem1('4')

#
# First comes some stuff that appears at the beginning of every problem
#

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"PGnumericalmacros.pl",
"PGstatisticsmacros.pl",
"MathObjects.pl",
"answerHints.pl",
);

TEXT(beginproblem());

#
# Now we do the randomization of variables, and other computations
# as needed for this problem.  Sometimes we compute the answers here.
#
Context()->variables->are(t=>"Real");
# Make numpoints at least 5
$numpoints = 11;

$tinitial = 1970;
$deltat = 4;
for ($j=0;$j<$numpoints;$j++){
 $time[$j] = Compute("$tinitial+$deltat*$j");
};

# coefficients of the polynomial, we want the derivative to be zero somewhere
# between $time[0] and $time[$numpoints -1]:


$cp = $time[floor($numpoints/2)]+non_zero_random(-$deltat+0.5,$deltat-0.5,0.01);
$a0 = random(140,160,.01);
$a1 = random(5,10,.01);
# 2*a2*$cp+a1 = 0
$a2 = -$a1/(2*($cp-$time[0]));

$reg = Regression->new( 2, "regression", [ "const", "X1" ] );

for $j (0..($numpoints-1)) {
        $t = $time[$j]-$time[0];
	$exact = Compute("$a0 + $a1*$t + $a2*($t)^2");
	$y[$j] = Compute(random(.99*$exact, 1.01*$exact, 0.001));	
}
for $j (0..($numpoints-2)) {
	$firstdifference[$j] = Compute("($y[$j+1]-$y[$j])/($time[$j+1]-$time[$j])")->with(
                                   tolType => 'absolute',tolerance =>.000001);
        $reg->include($firstdifference[$j], [1, ($time[$j]-$time[0]) ]);
}
for $j (0..($numpoints-3)) {
$seconddifference[$j] = Compute("($firstdifference[$j+1]-$firstdifference[$j])/($time[$j+1]-$time[$j])")->with(
                                   tolType => 'absolute',tolerance =>.000001,);
}

@coeff= $reg->theta();
$linreg = Formula("$coeff[0][0]+$coeff[0][1]*t");
$q0 = Compute("$y[0]");
$q1 = Compute("$coeff[0][0]");
$q2 = Compute("$coeff[0][1]/2");
$quadreg = Formula("$q0 + $q1*t+$q2*t^2");

$t0 = Compute("-$coeff[0][0]/$coeff[0][1]");
$max = $quadreg->eval(t=>"$t0");


#
# Now the problem text itself, with ans_rule's to indicate where the
# answers go.  You can stop entering text, do more computations, and then
# start up again if you want.
#
$cellwidth = 20;
BEGIN_TEXT
	Jen is trying to analyze the data below. She decides to use some calculus to see if she can fit a function to the data. She starts by estimating the derivative and second derivative from the given data using average rates of change of each:
END_TEXT
BEGIN_TEXT
$PAR
$BCENTER
\{begintable(4)\}
\{row( "t" , "y","\(\frac{\Delta y}{\Delta t}\)","\(\frac{\Delta^2 y}{\Delta t^2}\)")\}
END_TEXT

for $j (0..($numpoints-3)){
BEGIN_TEXT
\{row($time[$j], $y[$j],ans_rule($cellwidth),ans_rule($cellwidth))\}
END_TEXT
};
BEGIN_TEXT
\{row($time[$numpoints-2], $y[$numpoints-2],ans_rule($cellwidth),"")\}
\{row($time[$numpoints-1], $y[$numpoints-1],"","")\}
\{endtable()\}
$ECENTER
$BR
END_TEXT

#
# Tell WeBWork how to test if answers are right.  These should come in the
# same order as the answer blanks above.  You tell WeBWork both the type of
# "answer evaluator" to use, and the correct answer.
#
for $j (0..($numpoints-3)){
ANS($firstdifference[$j]->cmp() );
ANS($seconddifference[$j]->cmp() );
}
ANS($firstdifference[$numpoints-2]->cmp() );

BEGIN_TEXT
Jen decides that the second derivative is statistically close enough to being constant that the first derivative must be linear. She then fits a linear regression to the $BBOLD first $EBOLD derivative data \(\frac{\Delta y}{\Delta t}\), using $time[0] as time 0:
$BR
\(y^\prime \approx \) \{ans_rule\}
$BR
$BR
$BBOLD Note: $EBOLD When you enter data into your calculator it will show the data in the table rounded off. However, it stores the data in the full precision you enter, and calculates the regression from the full precision. It is important then that you enter the data with as many decimal places as you computed above, or WeBWorK may not like your answer regression equation.
$BR
$BR
Jen then integrated her linear regression to get a quadratic regression for y:
$BR
\(y \approx \) \{ans_rule(30)\}
$BR
$BR
According to her model, Jen's data is at a max at time t = \{ans_rule\} and the maximum value is \{ans_rule\}
END_TEXT

$lincheck = sub {
  my ($correct, $student, $ansHash) = @_;
  Value::isFormula($student);
  my $context = Context()->copy;
  my $s = Formula($context,"$student");
  my $ds = $s->D('t');
  my $d2s = $ds->D('t')->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  my $s0 = $s->eval(t=>'0')->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  my $s1 = $ds->eval(t=>'0')->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  my $c = Formula($context,"$correct");
  my $dc = $c->D('t');
  my $c0 = Compute($c->eval(t=>'0'))->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  my $c1 = Compute($dc->eval(t=>'0'))->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  if ($d2s != 0) {Value->Error('Your answer should be a linear function')};
  if ($s0 != $c0) {Value->Error('Your initial amount is off')};
  if ($s1 != $c1) {Value->Error('Your growth factor is off')};
  ### if you've made it this far, your answer should be correct.
  return 1;
};


$quadcheck = sub {
  my ($correct, $student, $ansHash) = @_;
  Value::isFormula($student);
  my $context = Context()->copy;
  my $s = Formula($context,"$student");
  my $ds = $s->D('t');
  my $d2s = $ds->D('t');
  my $d3s = $d2s->D('t');
  my $s0 = $s->eval(t=>'0');
  my $s1 = $ds->eval(t=>'0');
  my $s2 = $d2s->eval(t=>'0');
  my $c = Formula($context,"$correct");
  my $dc = $c->D('t');
  my $d2c = $dc->D('t');
  my $d3c = $d2c->D('t');
  my $c0 = Compute($c->eval(t=>'0'))->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  my $c1 = Compute($dc->eval(t=>'0'))->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  my $c2 = Compute($d2c->eval(t=>'0'))->with(
                                   tolType => 'absolute',tolerance =>.0001,);
  if ($d3s != 0) {Value->Error('Your answer should be a quadratic polynomial')};
  if ($s0 != $c0) {Value->Error('Your constant term is off')};
  if ($s1 != $c1) {Value->Error('Your linear term is off')};
  if ($s2 != $c2) {Value->Error('Your quadrative term is off')};
  ### if you've made it this far, your answer should be correct.
  return 1;
};

ANS($linreg->cmp(checker=>$lincheck) );
ANS($quadreg->cmp(checker=>$quadcheck));
ANS($t0->cmp()->withPostFilter(AnswerHints( 
  Compute("$t0+$tinitial") => "t is time since $tinitial",
)));
ANS($max->cmp(tolType => 'absolute',
  tolerance => .001,) );
ENDDOCUMENT();        # This should be the last executable line in the problem.
