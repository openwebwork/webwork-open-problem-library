##DESCRIPTION
#
# File Created: 6/6/2008
# Last Modified: 9/1/2011
# Problem Author:Darwyn Cook
# WeBWorK Entry: Victoria Sweetser
# Location: Alfred University
#
##ENDDESCRIPTION

##KEYWORDS('Derivative','Product','rule')
##

## DBsubject('Calculus')
## DBchapter('Differentiation')
## DBsection('The Product and Quotient Rules')
## Date('9/1/2011')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('Calculus: with Early Transcendentals')
## EditionText1('8')
## AuthorText1('Anton')
## Section1('3.4')
## Problem1('1')

DOCUMENT();

# Load whatever macros you need for the problem
loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "MathObjects.pl",
           "contextFraction.pl",
           "parserMultiAnswer.pl",
           "Alfredmacros.pl");
jsmathmode();

## Show partial correct answers
$showPartialCorrectAnswers = 1;

## Display the problem information
TEXT(beginproblem());

## Declare Variables
Context("Numeric");
Context()->reduction->set('(-x)+y'=>0,'(-x)-y'=>0);

$polynomial = 0;
$rational = 1;
$exponential = 2;
$logarithmic = 3;
$sinecosine = 4;
$trig = 5;
$inversetrig = 6;

#####
# Change this line to change which types of functions are allowed from the list # above.
$function1type = $inversetrig;

$function2type = Compute(random(0,$function1type));
##########################################################
##
## Build a table of functions
##
##

## coefficients for polynomial functions
$a0 = Compute(non_zero_random(-10,10));
$a1 = Compute(random(2,9));
$a2 = Compute(non_zero_random(-10,10));
$b0 = Compute(non_zero_random(-10,10));
$b1 = Compute(random(2,9));
$b2 = Compute(non_zero_random(-10,10));

if ($b2 == $a2){$b2++;};

# Some of the functions in the list we will be using have resticted domains, and so do their derivatives.

if($a1 > $b2){
$xmax = 1/$a1;
}
else{
$xmax = 1/$b1;
};
Context()->variables->set(x=>{limits=>[0,$xmax]});


## exponents for polynomial functions
$n1= Compute(random(0,3));
$n2 = Compute(random(4,6));
$n3 = Compute(random(7,9));

$f1 = Formula("sqrt(x^(2*$n1+1))");
$f1->{limits}=[0,10];

$f2 = Formula("1/sqrt(x^(2*$n2+1))");
$f2->{limits}=[0,10];

$f3 = Formula("ln($a1*x)");
$f3->{limits}=[0,10];

$f4 = Formula("ln($b1*x)");
$f4->{limits}=[0,10];

$f5 = Formula("asin($a1*x)");
$f5->{limits}=[-1.5/($a1),1.5/($a1)];

$f6 = Formula("acos($b1*x)");
$f6->{limits}=[0,3/(2*$b1)];

$f7 = Formula("atan($b1*x)");
$f7->{limits}=[-1.5/($b1),1.5/($b1)];

# You want at least two functions of each type, even if they are redundant
@Functions = ([Formula("$a0+$a1*x+$a2*x^2")->reduce,
Formula("$b0*x^($n1)+$b1*x^($n2)+$b2*x^($n3)")->reduce],
[$f1,$f2],
[Formula("e^($a0*x)")->reduce,Formula("($a1)^(x)")->reduce],
[$f3,$f4],
[Formula("cos($a1*x)")->reduce,Formula("sin($a1*x)")->reduce],
[Formula("tan($a1*x)")->reduce,Formula("cot($a1*x)")->reduce,Formula("sec($a1*x)")->reduce,Formula("csc($a1*x)")->reduce],
[$f5,$f6,$f7]); 



#Pick out the array of functions of functiontype
@functions1 = @{$Functions[$function1type]};
@functions2 = @{$Functions[$function2type]};

if ($function1type == $function2type){
$function1 = Compute(random(0,$#functions1));
@array = ();
for($i=0;$i<=$#functions1;$i++){
   if ($i != $function1){
      push(@array,$i);
   }
}
$function2 = Compute($array[random(0,$#array)]);
}
else{
$function1 = Compute(random(0,$#functions1));
$function2 = Compute(random(0,$#functions2));
}


$f = $functions1[$function1];
$g = $functions2[$function2];
$h = $f/$g;
$df = $f->D('x');
$dg = $g->D('x');
$dh = $h->D('x');


Context()->texStrings;
BEGIN_TEXT
\(h = $h\). Then \(h=\frac{f}{g}\) where
$BR 
\(f\) = \{ans_rule\}
$BR
and
$BR
\(g\) = \{ans_rule\}
$BR
Using the quotient rule
$BR
\(
\begin{aligned}
 \>h'(x)\> &= \frac{\hbox{\{ans_rule(30)\}}-\hbox{\{ans_rule(30)\}}}{\hbox{\{ans_rule(20)\}}}\\
&= \hbox{\{ans_rule(100)\}}\\
\end{aligned}
\)
$BR
END_TEXT
Context()->normalStrings;
ANS($f->cmp());
ANS($g->cmp());
ANS(Formula("$df*$g")->cmp);
ANS(Formula("$f*$dg")->cmp);
ANS(Formula("$g^2")->cmp);
ANS($dh->cmp());
ENDDOCUMENT();
