##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('heat', 'wave', 'polar', 'cylindrical', laplacian)

## DBsubject('Calculus')
## DBchapter('Partial Differential Equations')
## DBsection('Other Coordinate Systems')
## Date('10/22/2011')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('Differential Equations')
## EditionText1('6')
## AuthorText1('Zill, Cullen')
## Section1('13.2')
## Problem1('')

########################################################################

DOCUMENT();      

loadMacros(
   "PG.pl",
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   "PGspecialfunctionsmacros.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->variables->are(r=>"Real",a=>"Real",alphan=>"Real",n=>"Real",t=>"Real");
$r = Compute(random(2,6));
$iv = Compute(random(2,4));

@J0roots = (0.00,2.40482555769577,5.52007811028631,8.65372791291101,11.7915344390143,14.9309177084878,18.0710639679109,21.2116366298793,24.3524715307493,27.4934791320403,30.6346064684320);

@alpha = ();
for($i=0;$i<= $#J0roots;$i++){
   push(@alpha,$J0roots[$i]/$r)
};

$J1 = Formula("r");

$B1 = Formula("$iv/(($alpha[1])^3*$r*$J1(($alpha[1])*$r))");
$B2 = Formula("$iv/(($alpha[2])^3*$r*$J1(($alpha[2])*$r))");
$B3 = Formula("$iv/(($alpha[3])^3*$r*$J1(($alpha[3])*$r))");
$B4 = Formula("$iv/(($alpha[4])^3*$r*$J1(($alpha[4])*$r))");

$x = gsl_sf_bessel_Jn(4.1,3);
#bessj0(4.1);

#$x1 = Real($x);

############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
\($x\)
$BBOLD $J1 needs to be defined properly after the bessel module is installed.  $EBOLD
$BR
$BR

Type \(\alpha_n\) as alphan
$BR
$BR
A circular membrane with radius \($r\) has height u(r,t) at distance r from the center and time t. If the membrane is clamped on the edges, has initial displacement 0, and initial velocity  \($iv\). Then u satisfies the following boundary value problem:
$BR
\[
\begin{aligned}
&a^2\left(\frac{\partial^2u}{\partial r^2} +\frac{1}{r}\frac{\partial u}{\partial r} \right) = \frac{\partial^2 u}{\partial t^2}& \\
&u($r,t) = \hbox{\{ans_rule(1)\}} 
&\frac{\partial u}{\partial t}&\Big\vert_{t =\hbox{\{ans_rule(1)\}}} = \hbox{\{ans_rule(1)\}}
\end{aligned}
\]
$BR
Therefore \(u(r,t)=\sum\limits_{n=1}^\infty\left(A_n\cos(a\alpha_nt)+B_n\sin(a\alpha_nt) \right)J_0(\alpha_n r) \)
$BR
where
\{ begintable(2) \}
\{ row( "n", "\(\alpha_n\)" )\}
\{ row( "1", ans_rule() ) \}
\{ row( "2", ans_rule() ) \}
\{ row( "3", ans_rule() ) \}
\{ row( "4", ans_rule() ) \}
\{ endtable() \}
$BR
\(
\begin{aligned}
A_n &= \frac{2}{\hbox{\{ans_rule(1)\}}J_1^2(\alpha_n$r)}\int_{\hbox{\{ans_rule(1)\}}}^{\hbox{\{ans_rule(1)\}}}rJ_0(\alpha_n r){\hbox{\{ans_rule(1)\}}} dr = \hbox{\{ans_rule(1)\}}\\
&\\
B_n &= \frac{2}{\hbox{\{ans_rule(1)\}}a\alpha_nJ_1^2(\alpha_n$r)}\int_{\hbox{\{ans_rule(1)\}}}^{\hbox{\{ans_rule(1)\}}}rJ_0(\alpha_n r){\hbox{\{ans_rule(1)\}}} dr\\
&\\
&= \frac{\hbox{\{ans_rule(1)\}}}{\hbox{\{ans_rule(3)\}}J_1(\hbox{\{ans_rule(5)\}})}\\
\end{aligned}
\)
$BR
$BR
\(u(r,t) = \frac{1}{a}\left(\hbox{\{ans_rule(7)\}}
\sin(\hbox{\{ans_rule(7)\}})J_0(\hbox{\{ans_rule(7)\}}+\hbox{\{ans_rule(7)\}}\sin(\hbox{\{ans_rule(7)\}})J_0(\hbox{\{ans_rule(7)\}})+\hbox{\{ans_rule(7)\}}\sin(\hbox{\{ans_rule(7)\}})J_0(\hbox{\{ans_rule(7)\}})+\hbox{\{ans_rule(7)\}}\sin(\hbox{\{ans_rule(7)\}})J_0(\hbox{\{ans_rule(7)\}})
\right)+\ldots\)
END_TEXT
Context()->normalStrings;

#
##############################################################
#
#  Answers
#
#

# BVP
ANS(Compute("0")->cmp());
ANS(Compute("0")->cmp());
ANS(Compute("$iv")->cmp());
ANS(Compute("0")->cmp());

# alpha n's

ANS(Compute("$alpha[1]")->cmp());
ANS(Compute("$alpha[2]")->cmp());
ANS(Compute("$alpha[3]")->cmp());
ANS(Compute("$alpha[4]")->cmp());

#A_n
ANS(Compute("$r^2")->cmp() );
ANS(Compute("0")->cmp() );
ANS(Compute("$r")->cmp() );
ANS(Compute("0")->cmp() );

#B_n
ANS(Compute("$r^2")->cmp() );
ANS(Compute("0")->cmp() );
ANS(Compute("$r")->cmp() );
ANS(Compute("$iv")->cmp() );

ANS(Compute("2*$iv")->cmp() );
ANS(Compute("a*alphan^3*$r")->cmp() );
ANS(Compute("alphan*$r")->cmp() );

#u

ANS($B1->cmp() );
ANS(Compute("a*$alpha[1]*t")->cmp() );
ANS(Compute("$alpha[1]*r")->cmp() );

ANS($B2->cmp() );
ANS(Compute("a*$alpha[2]*t")->cmp() );
ANS(Compute("$alpha[2]*r")->cmp() );

ANS($B3->cmp() );
ANS(Compute("a*$alpha[3]*t")->cmp() );
ANS(Compute("$alpha[3]*r")->cmp() );

ANS($B4->cmp() );
ANS(Compute("a*$alpha[4]*t")->cmp() );
ANS(Compute("$alpha[4]*r")->cmp() );
ENDDOCUMENT();        
