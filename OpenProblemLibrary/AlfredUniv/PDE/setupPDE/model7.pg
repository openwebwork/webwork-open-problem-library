##DESCRIPTION
##  classify separable differential equations
##ENDDESCRIPTION


## DBsubject(Differential equations)
## DBchapter(Partial differential equations)
## DBsection(Wave equation)
## Date(7/21/2011)
## Institution(Alfred University)
## Author(Darwyn Cook)
## Level(3)
## TitleText1('Differential Equations: with Boundary Value Problems')
## AuthorText1('Zill')
## EditionText1('6')
## Section1('12.2')
## Problem1('')
## KEYWORDS('partial', 'differential', 'equation', 'separable' , 'heat equation','wave equation','laplace')

# Modified by Darwyn Cook on 10/30/15 to improve the notation for BC/IC


########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "parserFunction.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Point");
Context()->variables->add(L=>"Real",t=>"Real",);
$leftend = Point("(0,t)");
$rightend = Point("(L,t)");
$initial = Point("(x,0)");

Context("Numeric");
Context()->variables->add(a=>"Real",c=>"Real",h=>"Real",k=>"Real",L=>"Real",t=>"Real",u=>"Real",um=>"Real",ux=>"Real",uxx=>"Real",ut=>"Real",utt=>"Real",uy=>"Real",uyy=>"Real");
Context()->variables->set(um=>{TeX => '{u_m}'},ux=>{TeX => '{\frac{\partial u}{\partial x}}'},uxx=>{TeX => '{\frac{\partial^2 u}{\partial x^2}}'},ut=>{TeX => '{\frac{\partial u}{\partial t}}'},utt=>{TeX => '{\frac{\partial^2 u}{\partial t^2}}'},uy=>{TeX => '{\frac{\partial u}{\partial y}}'},uyy=>{TeX => '{\frac{\partial^2 u}{\partial y^2}}'});

$u = Formula("u");
$ux = Formula("ux");
$uxx = Formula("uxx");
$ut = Formula("ut");
$utt = Formula("utt");
$uy = Formula("uy");
$uyy = Formula("uyy");

$um = Compute(random(0,100));
$heatleft = Formula("k*uxx");
$heatwithtransfer = Formula("k*uxx-h*(u-$um)");
$heatright = Formula("ut");

$waveleft = Formula("a^2*uxx");
$waveright = Formula("utt");
$wavedamping = Formula("utt+c*ut");

$laplaceleft = Formula("uxx+uyy");
$homogeneous = Compute("0");

$initialdispl = Formula("sin(pi*x/L)");
$rightbc = Formula("sin(pi t)");

##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
Translate the following into a PDE with boundary conditions
$BR
The left end of a string is secured to the x-axis, but the right end moves in a transverse manner according to the function \($rightbc\). The string is released from rest from the initial displacement \($initialdispl\). For \(t > 0\) the transverse vibrations are damped with a force proportional to the instantaneous velocity(use c as the constant of proportionality).

$BR
$BR
$BBOLD PDE $EBOLD
$BR
$BCENTER \{$waveleft->ans_rule\} = \{$wavedamping->ans_rule\} $ECENTER
$BR
$BBOLD Boundary/Initial Conditions $EBOLD
$BR
Left end is secured: \{ans_rule(6)\} = \{ans_rule(1)\}
$BR
Right end moves in a transverse manner: \{ans_rule(6)\} = \{ans_rule(5)\}
$BR
Initially at rest: \{ans_rule(6)\}= \{ans_rule(1)\}
$BR
Initial displacement is \($initialdispl\): \{ans_rule(6)\}= \{ans_rule(10)\}
$BR
$BR
Use proper notation for 
\{ helpLink("entering PDE's")\}.
END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#

## PDE
ANS($waveleft->cmp);
ANS($wavedamping->cmp);

## BC/IC
Context("Numeric");
Context()->variables->add(t=>"Real",L=>"Real");
parserFunction("u(x,t)" => "(-1.5 * cos(3*t) - 5*pi/3 + arctan(t))(0.5 * cos(3*x) + pi/3 + arctan(2x))");
parserFunction("ut(x,t)" => "(1.5 * cos(3*t) + 5*pi/3 + arctan(t))(1.5 * cos(3*x) + 5*pi/3 + arctan(x))");

$boundaryu = Formula("u(x,t)");
$leftu = $boundaryu->substitute(x=>"0",t=>"t");
$rightu = $boundaryu->substitute(x=>"L",t=>"t");

$boundaryut = Formula("ut(x,t)");
$leftux = $boundaryut->substitute(x=>"0",t=>"t");
$rightux = $boundaryut->substitute(x=>"L",t=>"t");

$initial = $boundaryu->substitute(x=>"x",t=>"0");
$initialut = $boundaryut->substitute(x=>"x",t=>"0");

ANS($leftu->cmp);
ANS($homogeneous->cmp);

ANS($rightu->cmp);
ANS($rightbc->cmp);

ANS($initialut->cmp);
ANS($homogeneous->cmp);

ANS($initial->cmp);
ANS($initialdispl->cmp);
ENDDOCUMENT();        
