##DESCRIPTION
#
# File Created: 7/19/2011
# Last Modified: 7/19/2011
# Problem Author: Darwyn Cook
# WeBWorK Entry: 
# Location: Alfred University
#
##ENDDESCRIPTION

##KEYWORDS()
##

## DBsubject('Calculus')
## DBchapter('Differential Equations')
## DBsection('Fourier Transforms')
## Date('7/19/2011')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();
# Load the macro file to create graphs.
loadMacros("PGstandard.pl",
           "PGgraphmacros.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",     
           "MathObjects.pl",
           "PGunion.pl",
           "imageChoice.pl",
           "problemRandomize.pl");
 
## Show partial correct answers
$showPartialCorrectAnswers = 0;
## Display the problem information
TEXT(beginproblem());
$refreshCachedImages=1;
$pr=ProblemRandomize(when=>"Always",onlyAfterDue=>0,style=>"Button"); # always can reseed

Context("Numeric");
Context()->strings->add("Fourier cosine extension"=>{},"Fourier sine extension"=>{},"Fourier expansion"=>{});

($xmin,$xmax) = (0,2);
($ymin,$ymax) = (-4,4);
## Keep  the ranges above in mind when adding functions to the list
@function = (Formula("x^2"),Formula("3x-2"), Formula("sqrt(8*x)"), Formula("cos(2*pi*x/$xmax)"),Formula("cos(2*pi*x/$xmax)/(x+1)"),Formula("sqrt(8*x)"));
$length = @function - 1;
$n = random(0,$length);

$f = $function[$n];
$double = 2*$xmax;
$f[0] = $f->substitute(x=>"$double-x"); # even extension
$s[0] = String("Fourier cosine extension");
$f[1] = -($f->substitute(x=>"$double-x")); # odd extension
$s[1] = String("Fourier sine extension");
$f[2] = $f->substitute(x=>"x-$xmax"); # fourier sine and cosine extension
$s[2] = String("Fourier expansion");

##  Graph size
##  xmin, xmax, ymin, ymax set the ranges on the axes, $size sets the actual 
## size of the image to be displayed. 
$double = 2*$xmax;

$F = "$f for x in <$xmin,$xmax> using color:red and weight:2";
$F[0] = "$f[0] for x in <$xmax,$double> using color:red and weight:2";
$F[1] = "$f[1] for x in <$xmax,$double> using color:red and weight:2";
$F[2] = "$f[2] for x in <$xmax,$double> using color:red and weight:2";

## create the graph.

$gr = init_graph($xmin,2*$ymin,$double,2*$ymax,axes=>[0,0],size=>[500,500],ticks=>[$double,2*$ymax]);
add_functions( $gr,$F );  
$fig=image(insertGraph($gr),width=>200,height=>200,tex_size=>450);

for $i (0..2) {
 $gr[$i] = init_graph($xmin,2*$ymin,$double,2*$ymax,axes=>[0,0],ticks=> [$double,2*$ymax],size=>[500,500]); 
  add_functions( $gr[$i],$F[$i] ); 
  add_functions($gr[$i],$F);
  $fig[$i]=image(insertGraph($gr[$i]),width=>200,height=>200,tex_size=>450);
}
@QA = ();
foreach my $i (0..$length) { push( @QA, $s[$i],  $gr[$i] ); }

$ml = new_image_match_list(
  link => 1,                #  do not link to separate image
  size => [200,200],        #  image size in pixels
  tex_size => 450,          #  tex size in precent times 10
  columns => 3,             #  number of columns
  separation => 20,         #  separation between image columns 
);

$ml->rf_print_q(~~&pop_up_list_print_q); # use pop-up-lists
$ml->ra_pop_up_list([ No_answer=>"?", A=>"A", B=>"B", C=>"C"] );

$ml->qa(@QA);               #  set the questions and answers
$ml->choose(3);             #  select 4 of them

##############################################
#  Text of the problem.
#  Note that texsize option specifies the scaling of the image in hardcopy.

BEGIN_TEXT
The graph of the function f is shown on \([0,$xmax]\)
$BR
\{$fig\}
$BR
$BR
Match the graphs with the corresponding extension of f to \([0,$double]\)$BR
\{$ml->print_q()\} 
$BR
\{$ml->print_a()\}
END_TEXT
Context()->normalStrings;

install_problem_grader(~~&std_problem_grader);
$showPartialCorrectAnswers = 0;

ANS(str_cmp($ml->ra_correct_ans));


ENDDOCUMENT();
