##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('sturm', 'louiville', 'differential', 'equation')

## DBsubject('Calculus')
## DBchapter('Differential Equations')
## DBsection('Sturm-Louiville Problems')
## Date('7/19/2011')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('Differential Equations')
## EditionText1('7')
## AuthorText1('Zill')
## Section1('11.4')
## Problem1('')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   "weightedGrader.pl",
   "PGgraphmacros.pl",
   "unionTables.pl",
   "parserPopUp.pl",
   "PGchoicemacros.pl",
);
install_weighted_grader();
$refreshCachedImages=1;
# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->functions->undefine("sin","cos","tan","sinh","cosh","tanh");
Context()->variables->add(A=>"Real",B=>"Real",lambda=>"Real");
Context()->variables->set(lambda => {TeX => '{\lambda}'});
Context()->functions->undefine("acos","acosh");
Context()->{error}{msg}{"Function 'acosh' is not allowed in this context"} 
= "WeBWorK thinks you meant the inverse cosh function, you need to put the multiplication symbol between the a and the cosh";
Context()->{error}{msg}{"Function 'acos' is not allowed in this context"} 
= "WeBWorK thinks you meant the inverse cos function, you need to put the multiplication symbol between the a and the cos";
$simplify = Context()->copy;

Context("Numeric");
Context()->variables->add(A=>"Real",B=>"Real",lambda=>"Real");
Context()->variables->set(lambda => {TeX => '{\lambda}'});
Context()->strings->add(red=>{},blue=>{},green=>{},black=>{}); 
Context()->functions->undefine("acos","acosh");
Context()->{error}{msg}{"Function 'acosh' is not allowed in this context"} 
= "WeBWorK thinks you meant the inverse cosh function, you need to put the multiplication symbol between the a and the cosh";
Context()->{error}{msg}{"Function 'acos' is not allowed in this context"} 
= "WeBWorK thinks you meant the inverse cos function, you need to put the multiplication symbol between the a and the cos";

$f = Formula("lambda*x")->reduce;

$L = Compute(random(2,9));

$equalzero = Formula("A+B*x");
$zeroprime = $equalzero->D('x');
$lesszero = Formula("A*cosh(sqrt(lambda)x)+B*sinh(sqrt(lambda)x)");
$lessprime = $lesszero->D('x');
$greaterzero = Formula("A*cos(sqrt(lambda)x)+B*sin(sqrt(lambda)x)");
$greaterprime = $greaterzero->D('x');

#############################################################################
##
## Graphs
##
##

@func = (Formula("coth($L*sqrt(x))"),Formula("cot($L*sqrt(x))"),Formula("coth(x)"),Formula("x"));
#
#  Graph size
#
($xm,$xM) = (-1,5);
$ym = -5;
$yM=-$ym;
@size = (250,250);

##############################################

#
#  The plot defaults
#
@Goptions = (
  $xm,$ym,$xM,$yM,                            # dimensions of graph
  axes => [0,0], grid => [3,3],   # number of grid lines
  size => [$size[0],$size[1]]                               # pixel dimension
);

$plotdomain  = "x in <$xm,$xM>";
$plotoptions = "using color:red and weight=2";

#
#  Set up the question and answer list
#
@QA = ();
for my $i (0 .. $#func){
  $gr[$i] = init_graph(@Goptions);
  my ($plot) = plot_functions($gr[$i],"$func[$i] for $plotdomain $plotoptions");
  $plot->steps(150);
  add_functions($gr[$i], "sqrt(x) for x in <0,$xM> using color:blue and weight=2");
  $fig[$i]=image(insertGraph($gr[$i]),
  width=>$size[0],height=>$size[1],tex_size=>200);
} 
$count = $#func+1;
@perm = shuffle($count);
@fig = @fig[@perm];
@inv = invert(@perm);

@letter = ("A","B","C","D");
@correct = ( $letter[$inv[0]]);

$mc = new_checkbox_multiple_choice();
$mc -> qa (
"", 
"$correct[0]",
);
$mc -> makeLast("A","B","C","D");

#############################################################################
####
####
#### Eigenvalues
####
####
@eigenvalues =(List(0,0,0,0),
List(0,0,0,0),
List(0.289914395598769,3.31895007961760,10.8186186747682,23.1821081013016),
List(0.157995339962490,1.61185218248922,4.99366922706934,10.5063011508240),
List(0.0999494901357594,0.967843577173318,2.90192105979624,6.01705953830808),
List(0.0690467818111709,0.650786764770726,1.90970056224427,3.91466213259093),
List(0.0505914673333746,0.469594456261945,1.35813843323195,2.75929277167759),
List(0.0386748769374690,0.355665327157603,1.01837815867693,2.05468235361620),
List(0.0305295074047841,0.279095900011021,0.793498141714816,1.59230187467826),
List(0.0247141205540882,0.225038958222363,0.636548525037141,1.27192953213693));


@trigeigen=([0,0,0,0],
[0,0,0,0],
[0.289914395598769,3.31895007961760,10.8186186747682,23.1821081013016],
[0.157995339962490,1.61185218248922,4.99366922706934,10.5063011508240],
[0.0999494901357594,0.967843577173318,2.90192105979624,6.01705953830808],
[0.0690467818111709,0.650786764770726,1.90970056224427,3.91466213259093],
[0.0505914673333746,0.469594456261945,1.35813843323195,2.75929277167759],
[0.0386748769374690,0.355665327157603,1.01837815867693,2.05468235361620],
[0.0305295074047841,0.279095900011021,0.793498141714816,1.59230187467826],
[0.0247141205540882,0.225038958222363,0.636548525037141,1.27192953213693]);

$eigenfunction = Formula("cos(sqrt(lambda)*x)");

$eigen1 = $eigenfunction->substitute(lambda=>"$trigeigen[$L][0]");
$eigen2 = $eigenfunction->substitute(lambda=>"$trigeigen[$L][1]");
$eigen3 = $eigenfunction->substitute(lambda=>"$trigeigen[$L][2]");
$eigen4 = $eigenfunction->substitute(lambda=>"$trigeigen[$L][3]");
$eigenfunctions = List($eigen1,$eigen2,$eigen3);


@Goptions = (
  -1,$ym,$L,$yM,                            # dimensions of graph
  axes => [0,0], grid => [3,3],   # number of grid lines
  size => [$size[0],$size[1]]                               # pixel dimension
);

$plotdomain  = "x in <0,$L>";
@color = ("black","red","green","blue");
@perm = shuffle(4);
@color = @color[@perm];

$greigen = init_graph(@Goptions);
my ($plot) = plot_functions($greigen,"$eigen1 for $plotdomain using color:$color[0] and weight=2");
add_functions($greigen, "$eigen2 for $plotdomain using color:$color[1] and weight=2");
add_functions($greigen, "$eigen3 for $plotdomain using color:$color[2] and weight=2");
add_functions($greigen, "$eigen4 for $plotdomain using color:$color[3] and weight=2");
$plot->steps(150);
$figeigen=image(insertGraph($greigen),width=>$size[0],height=>$size[1],tex_size=>450);

$order = List(String("$color[0]"),String("$color[1]"),String("$color[2]"),String("$color[3]"));

##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
Find the eigenfunctions and eigenvalues of the differential equation
\[\frac{d^2y}{dx^2} + \lambda y = 0\]
\[
\begin{align}
&y^\prime(0) = 0\\
&y($L)+y^\prime($L) = 0\\
\end{align}
\]
For the general solution of the differential equation in the following cases use A and B for your constants and list the function in alphabetical order, for example \(y = A\cos (x) + B\sin(x)\). For the variable \(\lambda\) type the word lambda, otherwise treat it as you would any other variable.
$BR
$BBOLD Case 1: $EBOLD \(\lambda = 0\)
$BR
The general solution is \{$equalzero->ans_rule\}. The initial conditions lead to two equations in two unknowns in A and B:
$BCENTER
$BR
\{ans_rule\} = \(0\)
$BR
\{ans_rule\} = \(0\)
$ECENTER
$BR
Solving this system for A and B we get
$BCENTER
$BR
A = \{ans_rule\} 
$BR
B = \{ans_rule\}
$ECENTER
$BR
$BBOLD Case 2: $EBOLD \(\lambda < 0\)
$BR
The general solution is \{$lesszero->ans_rule(70)\}. The initial conditions lead to two equations in two unknowns in A and B:
$BCENTER
$BR
\{ans_rule(90)\} = \(0\)
$BR
\{ans_rule(90)\} = \(0\)
$ECENTER
$BR
Using the first equation to simplify the second, and taking out the common factor of A, you get
$BR 
$BCENTER
A\(\Bigg(\)\{ans_rule(60)\}\(\Bigg)= 0\)
$ECENTER
$BR
Therefore 
$BCENTER
\{ans_rule\} \(= \sqrt{\lambda}\)
$ECENTER
$BR
Choose the graph of \(\sqrt{\lambda}\) and \(\coth\left($L\sqrt{\lambda}\right)\)
$BR
\{$mc->print_a()\}
$BR
$BCENTER
\{
BeginTable().
  AlignedRow([$fig[0],$fig[1],$fig[2],$fig[3]]).
  TableSpace(5,0).
  AlignedRow(["A","B","C","D"]).
EndTable();
\}
$ECENTER
$BR

$BR
From the graph there are  \{ans_rule(5)\} nonzero eigenvalues for \(\lambda\),
Sturm-Loiuville guarantees infinitely many eigenvalues, so we go on.
$BR
$BR
$BR
$BBOLD Case 3: $EBOLD \(\lambda > 0\)
$BR
$BR
The general solution is \{$greaterzero->ans_rule(70)\}. The initial conditions lead to two equations in two unknowns in A and B:
$BCENTER
$BR
\{ans_rule(90)\} = \(0\)
$BR
\{ans_rule(90)\} = \(0\)
$ECENTER
$BR
Using the first equation to simplify the second, and taking out the common factor of A, you get
$BR 
$BCENTER
A\(\Bigg(\)\{ans_rule(60)\}\(\Bigg)= 0\)
$ECENTER
$BR
Therefore 
$BCENTER
\{ans_rule\} \(= \sqrt{\lambda}\)
$ECENTER
$BR
The first four eigenvalues in increasing order from this equation are: \{ans_rule(100)\}
$BR
$BR
$BBOLD Solution $EBOLD 
$BR
$BR
List the first three eigenfunctions in order of increasing eigenvalues 
$BR
\{ans_rule(140)\}
$BR
Here are graphs of the first four eigenfunctions on \(\lbrack 0,$L \rbrack\).
$BR
\{$figeigen\}
$BR
List the functions in increasing order by their color - green, red, blue, black: \{ans_rule(35)\}
END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#

## Case 1 equal zero - 20% of problem
WEIGHTED_ANS($equalzero->cmp, 4);
WEIGHTED_ANS(Compute("B")->cmp, 4);
WEIGHTED_ANS(Compute("A+B*($L+1)")->cmp, 4);
WEIGHTED_ANS(Compute("0")->cmp, 4);
WEIGHTED_ANS(Compute("0")->cmp, 4);

## Case 2 less than zero - 40% of problem
WEIGHTED_ANS($lesszero->cmp, 8);
WEIGHTED_ANS(Formula($simplify,"B*sqrt(lambda)")->cmp, 8);
WEIGHTED_ANS(Formula("(A+B*sqrt(lambda))*cosh(sqrt(lambda)*$L)+(B+A*sqrt(lambda))*sinh(sqrt(lambda)*$L)")->cmp, 8);
WEIGHTED_ANS(Formula("cosh(sqrt(lambda)*$L)+sqrt(lambda)*sinh(sqrt(lambda)*$L)")->cmp, 7);
WEIGHTED_ANS(Formula("-coth(sqrt(lambda)*$L)")->cmp, 7);
WEIGHTED_ANS( checkbox_cmp( $mc->correct_ans() ), 1);
WEIGHTED_ANS(Compute("0")->cmp, 1);

## Case 3 less than zero - 40% of problem
WEIGHTED_ANS($greaterzero->cmp, 6);
WEIGHTED_ANS(Formula($simplify,"B*sqrt(lambda)")->cmp, 6);
WEIGHTED_ANS(Formula("(A+B*sqrt(lambda))*cos(sqrt(lambda)*$L)+(B-A*sqrt(lambda))*sin(sqrt(lambda)*$L)")->cmp, 6);
WEIGHTED_ANS(Formula("cos(sqrt(lambda)*$L)-sqrt(lambda)*sin(sqrt(lambda)*$L)")->cmp, 6);
WEIGHTED_ANS(Formula("cot(sqrt(lambda)*$L)")->cmp, 6);
WEIGHTED_ANS($eigenvalues[$L]->cmp(ordered=>1), 10);

## Solution - 30 %
WEIGHTED_ANS($eigenfunctions->cmp(ordered=>1), 28);
WEIGHTED_ANS($order->cmp(ordered=>1), 2);
ENDDOCUMENT();        
