##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('sturm', 'louiville', 'differential', 'equation')

## DBsubject('Calculus')
## DBchapter('Differential Equations')
## DBsection('Sturm-Louiville Problems')
## Date('7/19/2011')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('Differential Equations')
## EditionText1('7')
## AuthorText1('Zill')
## Section1('11.4')
## Problem1('')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   "weightedGrader.pl",
   "PGgraphmacros.pl",
   "unionTables.pl",
   "parserPopUp.pl",
   "PGchoicemacros.pl",
);
install_weighted_grader();
$refreshCachedImages=1;
# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->functions->undefine("sin","cos","tan","sinh","cosh","tanh");
Context()->variables->add(A=>"Real",B=>"Real",lambda=>"Real");
Context()->variables->set(lambda => {TeX => '{\lambda}'});
Context()->functions->undefine("acos","acosh");
Context()->{error}{msg}{"Function 'acosh' is not allowed in this context"} 
= "WeBWorK thinks you meant the inverse cosh function, you need to put the multiplication symbol between the a and the cosh";
Context()->{error}{msg}{"Function 'acos' is not allowed in this context"} 
= "WeBWorK thinks you meant the inverse cos function, you need to put the multiplication symbol between the a and the cos";
$simplify = Context()->copy;

Context("Numeric");
Context()->variables->add(A=>"Real",B=>"Real",lambda=>"Real");
Context()->variables->set(lambda => {TeX => '{\lambda}'});
Context()->strings->add(red=>{},blue=>{},green=>{},black=>{}); 
Context()->functions->undefine("acos","acosh");
Context()->{error}{msg}{"Function 'acosh' is not allowed in this context"} 
= "WeBWorK thinks you meant the inverse cosh function, you need to put the multiplication symbol between the a and the cosh";
Context()->{error}{msg}{"Function 'acos' is not allowed in this context"} 
= "WeBWorK thinks you meant the inverse cos function, you need to put the multiplication symbol between the a and the cos";
$f = Formula("lambda*x")->reduce;

$L = Compute(random(2,9));

$equalzero = Formula("A+B*x");
$zeroprime = $equalzero->D('x');
$lesszero = Formula("A*cosh(sqrt(lambda)x)+B*sinh(sqrt(lambda)x)");
$lessprime = $lesszero->D('x');
$greaterzero = Formula("A*cos(sqrt(lambda)x)+B*sin(sqrt(lambda)x)");
$greaterprime = $greaterzero->D('x');



#############################################################################
##
## Graphs
##
##

@func = (Formula("tanh($L*sqrt(x))"),Formula("tan($L*sqrt(x))"),Formula("tanh(x)"),Formula("x"));
#
#  Graph size
#
($xm,$xM) = (-1,5);
$ym = -5;
$yM=-$ym;
@size = (250,250);

##############################################

#
#  The plot defaults
#
@Goptions = (
  $xm,$ym,$xM,$yM,                            # dimensions of graph
  axes => [0,0], grid => [3,3],   # number of grid lines
  size => [$size[0],$size[1]]                               # pixel dimension
);

$plotdomain  = "x in <$xm,$xM>";
$plotoptions = "using color:red and weight=2";

#
#  Set up the question and answer list
#

@QA = ();
for my $i (0 .. $#func){
  $gr[$i] = init_graph(@Goptions);
  my ($plot) = plot_functions($gr[$i],"$func[$i] for $plotdomain $plotoptions");
  $plot->steps(150);
  add_functions($gr[$i], "sqrt(x) for x in <0,$xM> using color:blue and weight=2");
  $fig[$i]=image(insertGraph($gr[$i]),
  width=>$size[0],height=>$size[1],tex_size=>200);
} 
$count = $#func+1;
@perm = shuffle($count);
@fig = @fig[@perm];
@inv = invert(@perm);

@letter = ("A","B","C","D");
@correct = ( $letter[$inv[0]]);

$mc = new_checkbox_multiple_choice();
$mc -> qa (
"", 
"$correct[0]",
);
$mc -> makeLast("A","B","C","D");

#############################################################################
####
####
#### Eigenvalues
####
####
@hyperboliceigenvalues = (List(0,0),List(0,0),List(0,0.916813956124163),List(0,0.989829051317377),List(0,0.998651800747099),List(0,0.999818251689328),List(0,0.999975419827775),List(0,0.999996673813211),List(0,0.999999549857781),List(0,0.999999939080049)); 

@eigenvalues=(List(0,0,0,0),
List(0,0,0,0),
List(4.56844086709318,14.4268778575471,29.2284761563392,48.9665603474590),
List(1.84792283383970,6.20374034923172,12.7753132514272,21.5449764643769),
List(0.958654124569885,3.38185389810220,7.07008346549878,11.9995153739525),
List(0.574631427076379,2.10264402059024,4.45472558982821,7.60580486030922),
List(0.378917576391116,1.42255070224396,3.04817722371657,5.23269009258850),
List(0.267246979342335,1.02120531953445,2.20874526022677,3.81014979632796),
List(0.198059880228920,0.766099505450722,1.66956667373815,2.89239049134085),
List(0.152430966817663,0.594623616531808,1.30373007114682,2.26699864377921));

@hypereigen = (0,0,0.916813956124163,0.989829051317377,0.998651800747099,0.999818251689328,0.999975419827775,0.999996673813211,0.999999549857781,0.999999939080049); 

@trigeigen=([0,0,0,0],
[0,0,0,0],
[4.56844086709318,14.4268778575471,29.2284761563392,48.9665603474590],
[1.84792283383970,6.20374034923172,12.7753132514272,21.5449764643769],
[0.958654124569885,3.38185389810220,7.07008346549878,11.9995153739525],
[0.574631427076379,2.10264402059024,4.45472558982821,7.60580486030922],
[0.378917576391116,1.42255070224396,3.04817722371657,5.23269009258850],
[0.267246979342335,1.02120531953445,2.20874526022677,3.81014979632796],
[0.198059880228920,0.766099505450722,1.66956667373815,2.89239049134085],
[0.152430966817663,0.594623616531808,1.30373007114682,2.26699864377921]);

$hypereigenfunction = Formula("-sqrt(lambda)*cosh(sqrt(lambda)*x)+sinh(sqrt(lambda)*x)");
$trigeigenfunction = Formula("-sqrt(lambda)*cos(sqrt(lambda)*x)+sin(sqrt(lambda)*x)");

$eigen1 = $hypereigenfunction->substitute(lambda=>"$hypereigen[$L]");
$eigen2 = $trigeigenfunction->substitute(lambda=>"$trigeigen[$L][0]");
$eigen3 = $trigeigenfunction->substitute(lambda=>"$trigeigen[$L][1]");
$eigen4 = $trigeigenfunction->substitute(lambda=>"$trigeigen[$L][2]");
$eigenfunctions = List($eigen1,$eigen2,$eigen3);


@Goptions = (
  -1,$ym,$L,$yM,                            # dimensions of graph
  axes => [0,0], grid => [3,3],   # number of grid lines
  size => [$size[0],$size[1]]                               # pixel dimension
);

$plotdomain  = "x in <0,$L>";
@color = ("black","red","green","blue");
@perm = shuffle(4);
@color = @color[@perm];

$greigen = init_graph(@Goptions);
my ($plot) = plot_functions($greigen,"$eigen1 for $plotdomain using color:$color[0] and weight=2");
add_functions($greigen, "$eigen2 for $plotdomain using color:$color[1] and weight=2");
add_functions($greigen, "$eigen3 for $plotdomain using color:$color[2] and weight=2");
add_functions($greigen, "$eigen4 for $plotdomain using color:$color[3] and weight=2");
$plot->steps(150);
$figeigen=image(insertGraph($greigen),width=>$size[0],height=>$size[1],tex_size=>450);

$order = List(String("$color[0]"),String("$color[1]"),String("$color[2]"),String("$color[3]"));

##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
Find the eigenfunctions and eigenvalues of the differential equation
\[\frac{d^2y}{dx^2} + \lambda y = 0\]
\[
\begin{align}
&y(0)+y^\prime(0) = 0\\
&y ($L) = 0\\
\end{align}
\]
For the general solution of the differential equation in the following cases use a and b for your constants and list the function in alphabetical order, for example \(y = A\cos (x) + B\sin(x)\). For the variable \(\lambda\) type the word lambda, otherwise treat it as you would any other variable.
$BR
$BBOLD Case 1: $EBOLD \(\lambda = 0\)
$BR
The general solution is \{$equalzero->ans_rule\}. The initial conditions lead to two equations in two unknowns in a and b:
$BCENTER
$BR
\{ans_rule\} = \(0\)
$BR
\{ans_rule\} = \(0\)
$ECENTER
$BR
Solving this system for A and B we get
$BCENTER
$BR
A = \{ans_rule\} 
$BR
B = \{ans_rule\}
$ECENTER
$BR
$BBOLD Case 2: $EBOLD \(\lambda < 0\)
$BR
The general solution is \{$lesszero->ans_rule(50)\}. The initial conditions lead to two equations in two unknowns in A and B:
$BCENTER
$BR
\{ans_rule(90)\} = \(0\)
$BR
\{ans_rule(90)\} = \(0\)
$ECENTER
$BR
Solve the second equation for A: A = \{ans_rule\}
$BR
Plug this into the first equation, taking out the common factor of B, and you get
$BR 
$BCENTER
B\(\Bigg(\)\{ans_rule(70)\}\(\Bigg)= 0\)
$ECENTER
$BR
If \(B \neq  0\) then 
$BCENTER
\{ans_rule\} \(= \sqrt{\lambda}\)
$ECENTER
$BR
Choose the graph of \(\sqrt{\lambda}\) and \(\tanh\left($L\sqrt{\lambda}\right)\)
$BR
\{$mc->print_a()\}
$BR
$BCENTER
\{
BeginTable().
  AlignedRow([$fig[0],$fig[1],$fig[2],$fig[3]]).
  TableSpace(5,0).
  AlignedRow(["A","B","C","D"]).
EndTable();
\}
$ECENTER
$BR

$BR
From the graph there are  \{ans_rule(5)\} nonzero eigenvalues for \(\lambda\):\{ans_rule(40)\} (Your answer should be accurate to 9 places)
$BR
$BR
Sturm-Loiuville guarantees infinitely many eigenvalues, so we go on:
$BR
$BBOLD Case 3: $EBOLD \(\lambda > 0\)
$BR
$BR
The general solution is \{$greaterzero->ans_rule(50)\}. The initial conditions lead to two equations in two unknowns in a and b:
$BCENTER
$BR
\{ans_rule(50)\} = \(0\)
$BR
\{ans_rule(50)\} = \(0\)
$ECENTER
$BR
Solve the second equation for A: A = \{ans_rule\}
$BR
Plug this into the first equation, taking out the common factor of B, and you get
$BR 
$BCENTER
B\(\Bigg(\)\{ans_rule(70)\}\(\Bigg)= 0\)
$ECENTER
$BR
Therefore 
$BCENTER
\{ans_rule\} \(= \sqrt{\lambda}\)
$ECENTER
$BR
The first four nonzero eigenvalues from this equation are: \{ans_rule(100)\}
$BR
$BR
$BR
$BBOLD Solution $EBOLD 
$BR
$BR
List the first three nonzero eigenfunctions in order of increasing eigenvalues 
$BR
\{ans_rule(140)\}
$BR
Here are graphs of the first four nonzero eigenfunctions on \(\lbrack 0,$L \rbrack\).
$BR
\{$figeigen\}
$BR
List the functions in increasing order by their color, green, red, blue: \{ans_rule\}
END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#

## Case 1 equal zero - 10% of problem
WEIGHTED_ANS($equalzero->cmp, 2);
WEIGHTED_ANS(Compute("A+B")->cmp, 2);
WEIGHTED_ANS(Compute("A+B*$L")->cmp, 2);
WEIGHTED_ANS(Compute("0")->cmp, 2);
WEIGHTED_ANS(Compute("0")->cmp, 2);

## Case 2 less than zero - 30% of problem
WEIGHTED_ANS($lesszero->cmp, 3);
WEIGHTED_ANS(Formula($simplify,"A+sqrt(lambda)*B")->cmp, 4);
WEIGHTED_ANS(Formula("A*cosh(sqrt(lambda)*$L)+B*sinh(sqrt(lambda)*$L)")->cmp, 4);
WEIGHTED_ANS(Formula($simplify,"-B*sqrt(lambda)")->cmp, 1);
WEIGHTED_ANS(Formula("-sqrt(lambda)*cosh(sqrt(lambda)*$L)+sinh(sqrt(lambda)*$L)")->cmp, 4);
WEIGHTED_ANS(Formula("tanh(sqrt(lambda)*$L)")->cmp, 4);
WEIGHTED_ANS( checkbox_cmp( $mc->correct_ans() ), 2);
WEIGHTED_ANS(Compute("1")->cmp, 2);
WEIGHTED_ANS(Compute("$hypereigen[$L]")->cmp(ordered=>1,tolType=>'absolute',
               tolerance=>.000000001),4);

## Case 3 less than zero - 30% of problem
WEIGHTED_ANS($greaterzero->cmp, 5);
WEIGHTED_ANS(Formula($simplify,"A+B*sqrt(lambda)")->cmp, 5);
WEIGHTED_ANS(Formula("A*cos(sqrt(lambda)*$L)+B*sin(sqrt(lambda)*$L)")->cmp, 5);
WEIGHTED_ANS(Formula($simplify,"-B*sqrt(lambda)")->cmp, 2);
WEIGHTED_ANS(Formula("-sqrt(lambda)*cos(sqrt(lambda)*$L)+sin(sqrt(lambda)*$L)")->cmp, 3);
WEIGHTED_ANS(Formula("tan(sqrt(lambda)*$L)")->cmp, 5);
WEIGHTED_ANS($eigenvalues[$L]->cmp(ordered=>1,tolType=>'absolute',
               tolerance=>.0001), 5);

## Solution - 30 %
WEIGHTED_ANS($eigenfunctions->cmp(ordered=>1), 28);
WEIGHTED_ANS($order->cmp(ordered=>1), 2);
ENDDOCUMENT();        
