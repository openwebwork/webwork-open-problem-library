##DESCRIPTION
#
# File Created: 5/13/2008
# Last Modified: 5/13/2008
# Problem Author: Darwyn Cook
# WeBWorK Entry: 
# Location: Alfred University
#
##ENDDESCRIPTION

##KEYWORDS()
##

## DBsubject('WeBWorK')
## DBchapter('WeBWorK Tutorial')
## DBsection('Alfred Samples')
## Date('5/13/2008')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('Calculus: with Early Transcendentals')
## EditionText1('8')
## AuthorText1('Anton')
## Section1('')
## Problem1('')

DOCUMENT();
# Load the macro file to create graphs.
loadMacros("PGgraphmacros.pl");
# Load whatever macros you need for the problem
loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGauxiliaryFunctions.pl",
           "PGgraphmacros.pl",
           "MathObjects.pl");
 
## Show partial correct answers
$showPartialCorrectAnswers = 1;
## Display the problem information
TEXT(beginproblem());

sub max {
my $max = shift @_;
for ( @_ ) {
    if ($_ > $max) {$max = $_};
    }
$max;
};
sub min {
my $min = shift @_;
for ( @_ ) {
    if ($_ < $min) {$min = $_};
    }
$min;
};

## Function definition
$a0 = non_zero_random(-3,-.9,.1);
$a1 = non_zero_random(-1,1);
$a2 = non_zero_random(1.1,3,.1);

$f = Formula("(x-$a0)*(x-$a1)*(x-$a2)")->reduce;

## Derivative of f
$fx = $f->D('x')->reduce;

## Critical Points of f, used to figure out how large a graph we should draw
$cp1 = Real("($a0+$a1+$a2-sqrt(($a0)^2+($a1)^2+($a2)^2-($a0)*($a1)-($a0)*($a2)-($a1)*($a2)) )/3");
$cp2 = Real("($a0+$a1+$a2+sqrt(($a0)^2+($a1)^2+($a2)^2-($a0)*($a1)-($a0)*($a2)-($a1)*($a2)) )/3");
$y1 = $f->eval(x=>$cp1);
$y2 = $f->eval(x=>$cp2);

# The point to estimate the derivative at
$x0 = random(-1,1,.2);
if ($x0 == $cp1 || $x0 == $cp2){
    $x0 = ($cp1+$cp2)/2;
}
$m = $fx->eval(x=>$x0);


##  Graph size
##  xmin, xmax, ymin, ymax set the ranges on the axes, $size sets the actual 
## size of the image to be displayed. 

($xmin,$xmax) = (-3,3);
$y3 = $f->eval(x=>$xmin);
$y4 = $f->eval(x=>$xmax);
@y = (int($y1)+1,int($y2)+1,int($y3)+1,int($y4)+1,int($y1)-1,int($y2)-1,int($y3)-1,int($y4)-1);
($ymin,$ymax) = (&min(@y),&max(@y));
$size = [800,800];
$tex_size = 900;

## create the graph.
## If we use more than 40 gridlines the graph looks wonky. So first we count 
## many horizontal grid lines we can have, making sure that we have a multiple 
## of the distance between the maximum and minimum value of the function.

$number_horizontal_gridlines = $ymax-$ymin;
while ($number_horizontal_gridlines < 40){
       $number_horizontal_gridlines = $number_horizontal_gridlines + $ymax-$ymin;
}
$number_horizontal_gridlines = $number_horizontal_gridlines - ($ymax - $ymin);

$gr = init_graph($xmin,$ymin,$xmax,$ymax,axes=>[0,0],size=>$size,grid=>[24,$number_horizontal_gridlines]);
add_functions($gr, 
  "$f for x in <$xmin,$xmax> using color:blue and weight:2");

#Let's be a bit loose in our tolerances for this estimate
Context()->flags->set(tolType => 'absolute',tolerance => .5);


##############################################
#  Text of the problem.
#  Note that texsize option specifies the scaling of the image in hardcopy.

Context()->texStrings;
BEGIN_TEXT
\{ image( insertGraph($gr),width=>600, height=>600,tex_size=>$texsize ) \}
$BR
$BR
The displacement of an object is graphed, estimate the velocity \(\frac{{\rm ds}}{{\rm dt}}\) at t = $x0: \{ans_rule(20)\}
$BR
END_TEXT
Context()->normalStrings;
ANS($m->cmp);
ENDDOCUMENT();
