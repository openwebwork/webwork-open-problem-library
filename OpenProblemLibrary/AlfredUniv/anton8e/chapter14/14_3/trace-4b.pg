## DESCRIPTION
##   Relate Trace Graphs to Equations for a Function
## ENDDESCRIPTION

## KEYWORDS('partial derivatives','Multivariate', 'Multivariable','numerical calculation)
## Tagged by nhamblet

## DBsubject('Calculus')
## DBchapter('Partial Derivatives')
## DBsection('Functions of Several Variables')
## Date('')
## Author('')
## Institution('Alfred University')
## TitleText1('Calculus: with early transcendentals')
## EditionText1('8')
## AuthorText1('Anton')
## Section1('14.3')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "PGunion.pl",
  "MathObjects.pl",
  "PGcourse.pl",
  "PGgraphmacros.pl",
  "PG.pl",
  "PGbasicmacros.pl",
  "PGchoicemacros.pl",
  "PGanswermacros.pl",
);

TEXT(beginproblem());
BEGIN_PROBLEM();

##############################################
#  Setup

Context("Numeric")->variables->are(
  x=>'Real', y=>'Real'
);

#
#  The function to plot
#
$a = random(1,5);
$b = non_zero_random(-3,3);
$c = random(1,6);
$f = Formula("sqrt(x**2+$a) - $b sin(pi*y/$c)");

#
# ($x,$y) is the point where we will ask for the partial derivatives.
#
$x = random(0.5,1.5,.1);
$y = random(0.5,1.5,.1);
$partialx = $f->D('x');
$partialy = $f->D('y');
#$fx=partialx->perlFunction('f',['x','y'])->(substitute(x=>$x,y=>$y);
#$fy=partialy->substitute(x=>$x,y=>$y);
$fx=1;$fy=1;
#
#  Traces to show, user selected: $x1, $y1
#
if (defined $inputs_ref->{'x1'} ) {
     $x1 = $inputs_ref->{'x1'};
}
elsif (defined $in{'x1'} ) {
	$x1 = $in{'x1'};
}
else {
	 $x1 = 0
}
if (defined $inputs_ref->{'y1'} ) {
     $y1 = $inputs_ref->{'y1'};
}
elsif (defined $in{'y1'} ) {
	$y1 = $in{'y1'};
}
else {
	 $y1 = 0
}
#
# Define the student input space for x1,y1.
#
$len = 1;
$INPUTSPACEX = M3( qq! \\rule{${len}in}{.01in}!,
               qq!\begin{rawhtml}<INPUT TYPE = "TEXT" NAME="x1"
                  VALUE="$x1">\end{rawhtml}!,
              qq!<INPUT TYPE = "TEXT" NAME="x1" VALUE="$x1">!
              );
$INPUTSPACEY = M3( qq! \\rule{${len}in}{.01in}!,
               qq!\begin{rawhtml}<INPUT TYPE = "TEXT" NAME="y1"
                  VALUE="$y1">\end{rawhtml}!,
              qq!<INPUT TYPE = "TEXT" NAME="y1" VALUE="$y1">!
              );

#
#  Ranges for the graphs
#


#
#  Graph size
#
($xm,$xM) = (-3,3);
($ym,$yM) = (-3,3);
($zm,$zM) = (-5,5);
$size = [200,250];
$tex_size = 350;

##############################################

#
#  The plot defaults
#
@Goptions = (
  $ym,$zm,$yM,$zM,                            # dimensions of graph
  axes => [0,0], grid => [$yM-$ym,$zM-$zm],   # number of grid lines
  size => $size                               # pixel dimension
);
@imageoptions = (size=>$size, tex_size=>$tex_size, border=>0);

$plotoptions = "using color:red and weight=2";

#
#  Make the traces
#
$f->perlFunction('f',['x','y']);
$Gx = init_graph(@Goptions);
$formx = $f->substitute(x=>$x1,y=>'x');
plot_functions($Gx,
  "$formx for x in <$ym,$yM> $plotoptions",
);
$Xtrace = Image($Gx,@imageoptions);

$Gy = init_graph(@Goptions);
$formy = $f->substitute(y=>$y1);
plot_functions($Gy,
  "$formy for x in <$xm,$xM> $plotoptions",
);
$Ytrace = Image($Gy,@imageoptions);

Context()->texStrings;
#
#  Make the table of images
#
$Images = 
  BeginTable(spacing=>3).
    AlignedRow([$Xtrace,$Ytrace]).
    AlignedRow(["Trace for \(x=$x1\)",    "Trace for \(y=$y1\)"]).
  EndTable();
Context()->normalStrings;

##############################################
#  Main text

Context()->texStrings;
BEGIN_TEXT
Please ignore me, Dr. Cook is making a new problem for next year's class!
$BR$BR
The graphs below are traces for a function \(f\) at \(x = \) $INPUTSPACEX and 
\(y = \) $INPUTSPACEY.
$PAR
$Images
$PAR

You can change the values at which the traces are taken, change the values and hit submit answer. Use the traces to estimate
$BR
\(f_x ($x,$y)\approx \)\{&ans_rule(30)\}
$BR
\(f_x ($x,$y)\approx \)\{&ans_rule(30)\}
END_TEXT
Context()->normalStrings;

##################################################
#  Answers

ANS(num_cmp($fx));
ANS(num_cmp($fy));

$showPartialCorrectAnswers = 1;

##################################################

END_PROBLEM();
ENDDOCUMENT();        # This should be the last executable line in the problem.
