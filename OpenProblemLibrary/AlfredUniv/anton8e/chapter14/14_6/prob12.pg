## DESCRIPTION
## Calculus
## ENDDESCRIPTION

## KEYWORDS ('derivative','definition')
## Tagged by cmd6a 4/20/06

## DBsubject('Calculus')
## DBchapter('Partial Derivatives')
## DBsection('Partial Derivatives')
## Date('')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('Calculus: Early Transcendentals')
## EditionText1('8')
## AuthorText1('Anton')
## Section1('14.3')
## Problem1('')

&DOCUMENT();
#pilfered from the Rochester problem library, setDerivatives1/ns2_8_31.pg
loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGnumericalmacros.pl",
           "PGauxiliaryFunctions.pl",
           "MathObjects.pl"
); 
Context("Vector")->variables->are(x=>'Real',y=>'Real');

# define function to be evaluated by the cubic spline approximation, which only #has one variable.
$a= random(1,3,0.1);
$b= random(-4,4,0.1);
$c = random(-4,4,0.1);
$x0=random(-2,2,0.1);
$y0=random(-2,2,0.1);
$f = Formula(" $a (x)^2+$b x +$c ");
$f->perlFunction('f');

# Find the directional derivative of f, using the two variable definition
$g = Formula(" $a (x*y)^2+$b (x*y) +$c ");
$dx = $g->D('x');
$dy = $g->D('y');
$gradf = Formula("< $dx,$dy >")->reduce();

$u1 = non_zero_random(-4,4,1);
$u2 = non_zero_random(-4,4,1);
$P = Point($x0,$y0);
$u = Vector($u1,$u2);
$gradfP = $gradf->eval(x=>$x0,y=>$y0);
$m = $u->norm();
$fdiru = Compute("$u.$gradfP/$m");

#  Calculate the cubic spline approximation to ax^2+bx+c
$llimit = -5; $rlimit = 5;
my $num_of_intervals = 500;  # number of interpolation points
my $delta =  ($rlimit-$llimit)/($num_of_intervals); 
my (@x_values, @y_values);
foreach my $i (0..$num_of_intervals) {
	my $x = $llimit + $delta*$i;
	my $y = &f($x);
	push(@x_values, $x); push(@y_values,$y);
}

($t_ref, $a_ref, $b_ref, $c_ref, $d_ref) = create_cubic_spline (~~@x_values, ~~@y_values);

$f_approx = cubic_spline(~~@x_values, ~~@y_values);

#calculate a javaScript runtime cubic spline representation of this function.

HEADER_TEXT(javaScript_cubic_spline(~~@x_values,~~@y_values, name => 'func', llimit => -3, rlimit => 3)  );


#TEXT(beginproblem());

# A warning that we are using javaScript
TEXT(M3("",
"\begin{rawhtml}
<NOSCRIPT> This problem requires that Java Script be enabled </NOSCRIPT> \end{rawhtml}
",
"<NOSCRIPT> This problem requires that Java Script be enabled </NOSCRIPT>"
));

Context()->texStrings;
BEGIN_TEXT
$PAR
The oracle function \( f(x,y) \) is presented below.  For each point \( (x,y)\) you enter the oracle will
tell you the value \( f(x,y) \).
Estimate the directional derivative of the function in the direction \(\mathbf{u} = $u\) at \(  ($x0,$y0) \) using the Newton quotient definition.
$PAR
\( f_{\mathbf{u}} ($x0,$y0) \approx\) \{ans_rule(20) \}  
$PAR

END_TEXT
Context()->normalStrings;




$javaScript2 = begintable(4) .
               MODES(HTML =>q{<TR>
					<TH>x</TH><TH>y</TH><TH></TH><TH>f(x)</TH>
					<TR>},
					TeX => "x & y &\(\rightarrow\) & f(x)\\"
				) .
				row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Inputx"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
                                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Inputy"  Value = "$y0" Size="16">}, TeX => '\fbox{Enter \(y\)}' ),
				    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->"  
                        OnClick="this.form.Output.value=func(this.form.Inputx.value*this.form.Inputy.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output"   Size="30">}, TeX => 'result: \(f(x)\)')
				) .
				row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input2x"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
                                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input2y"  Value = "$y0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
				    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->"  
                        OnClick="this.form.Output2.value=func(this.form.Input2x.value*this.form.Input2y.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output2"   Size="30">}, TeX => 'result: \(f(x)\)')
				) .
				row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input3x"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
                                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input3y"  Value = "$y0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
				    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->"  
                        OnClick="this.form.Output3.value=func(this.form.Input3x.value*this.form.Input3y.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output3"   Size="30">}, TeX => 'result: \(f(x)\)')
				) . endtable();



TEXT($javaScript2);      
      
BEGIN_TEXT
$PAR

END_TEXT
# The answer
$h = .000001;

my ($ans_eval) = num_cmp( $fdiru, reltol => 1, format => '%0.14g');


# we'll modify the answer messages a bit to give some encouragement.
my $answer_evaluator = sub {
						my $x = shift;
						my $ans_hash = $ans_eval->evaluate($x);
						return $ans_hash unless $x;
						# otherwise fix the error message
						$correct_answer = $ans_hash->{correct_ans};
						my $error = $correct_answer - $ans_hash ->{student_ans};
						#warn "correct answer $correct_answer and student answer", $ans_hash ->{student_ans}, "error $error";
						my $relerror = 100* abs($error/$correct_answer) unless abs($correct_answer) <.000000001 ;
						$relerror = .000000001 unless defined($relerror);
						if ($relerror < 1 ) {
							$ans_hash->{ans_message} = "Good.  Your answer is off by only about $error";
						} elsif ($relerror < 10 ) {
							 $ans_hash->{ans_message} = 'Your answer is within 10%. ';
						} elsif($relerror < 50) {
							$ans_hash->{ans_message} = 'Your answer is within 50%.  ';
					    } else {
					    	$ans_hash->{ans_message} = 'Your answer is off by more than 50%.';
						}	 
						$ans_hash;
						};

ANS($answer_evaluator );  #We are allowing 1 percent error for the answer.

			
&ENDDOCUMENT;

