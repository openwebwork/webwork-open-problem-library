DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;
# A custom checker that compares a student formula to the correct
# formula for identical structure.  Both must be two numberes
# separated by an operator.
#
$LimitedOperation = sub {
  my($correct,$student,$ans) = @_;
  my $f = $ans->{student_formula}{tree};
  return 0 if $ans->{message} || $ans->{isPreview} || !defined($f);
   #
   # Check that the form is correct:
   #
   Value->Error("Your answer should be two numbers with either a +, -, *, or / between them")
       unless $f->class eq 'BOP' && isNumber($f->{lop}) && isNumber($f->{rop});
   #
   # Get the student's operands:
   #
   my($a,$b)=($f->{lop}->eval, $f->{rop}->eval);
   #
   # Get the correct answer's formula and operands:
   #
   my $F = Parser::Formula($ans->{correct_ans})->{tree};
   my ($A,$B) =($F->{lop}->eval, $F->{rop}->eval);
   #
   #  Check that the operators are the same:
   #
   my $op = {'+'=>'addition', '-'=>'subtraction', '*'=>'multiplication', '/'=>'division'}->{$F->{bop}};
   Value->Error("Your answer should involve %s",$op) unless $f->{bop} eq $F->{bop};
   #
   # Check that the answers are equal and that the operands are the same:
   #
   return $correct == $student &&
      (($A == $a && $B == $b) || ($A == $b && $B == $a));
};
#
# Check if a node is a Number or a negative Number
#  (with no operations involved)
#
sub isNumber {
  my $n = shift;
  return $n->class eq 'Number' ||
      ($n->class eq 'UOP' && $n->{uop} eq 'u-' && $n->{op}->class eq 'Number');
}

Context("Numeric");
@nums=('zero ','one ','two ','three ', 'four ', 'five ', 'six ','seven ', 'eight ', 'nine ');
@ops=('multiplied by ','divided by ', ' added to ', 'subtracted from ');

$a3=random(6,9,1);
$b3=random(2,5,1);
$c3=random(0,3,1);

if($c3==0){$ans3=Compute("$a3*$b3");}
elsif ($c3==2){$ans3=Compute("$a3+$b3");}
elsif ($c3==3){$ans3=Compute("$b3-$a3");}
else {$ans3=Compute("$a3/$b3");}

$a4=random(6,9,1);
$b4=random(2,5,1);
$c4=random(0,3,1);
if($c4==0) {$ans4=Compute("$a4*$b4");}
elsif ($c4==2){$ans4=Compute("$a4+$b4");}
elsif ($c4==3){$ans4=Compute("$b4-$a4");}
else {$ans4=Compute("$a4/$b4");}

BEGIN_TEXT
$PAR
Write a numerical expression for each verbal phrase.
$PAR
 $nums[$a3] $ops[$c3] $nums[$b3] \{ans_rule(10)\}
$PAR
 $nums[$a4] $ops[$c4] $nums[$b4] \{ans_rule(10)\}
$PAR

END_TEXT
ANS($ans3->cmp(checker=>$LimitedOperation));
ANS($ans4->cmp(checker=>$LimitedOperation));


COMMENT('MathObject version');
ENDDOCUMENT();

## DBsubject(Middle school)
## DBchapter(Interpret_Verbal_Description)
## MO(1)







