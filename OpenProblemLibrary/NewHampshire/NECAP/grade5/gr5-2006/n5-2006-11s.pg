DOCUMENT();
loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"PGgraphmacros.pl",
"PGauxiliaryFunctions.pl", #for lcm, gcd,etc
);	

# make sure we're in the context we want
Context("Numeric");
($WIDTH,$HEIGHT,$TEXSIZE)=(320,370,300);

# now initialize the graph
$graph = init_graph(-.1,-.1, 3.1,3.6,size=>[$WIDTH,$HEIGHT]);
$graph->moveTo(0,0);
$graph->lineTo(0 ,3.5 ,'black',2);
$graph->lineTo(2 ,3.5 ,'black',2);
$graph->lineTo(2 ,2.5 ,'black',2);
$graph->lineTo(1.5 ,2.5 ,'black',2);
$graph->lineTo(1.5 ,1.5 ,'black',2);
$graph->lineTo(1 ,1.5 ,'black',2);
$graph->lineTo(1 ,0 ,'black',2);
$graph->lineTo(0 ,0 ,'black',2);

$graph->moveTo(.5,0);
$graph->lineTo(.5 ,3.5 ,'black');

$graph->moveTo(1,3.5);
$graph->lineTo(1 ,1.5 ,'black');

$graph->moveTo(1.5,3.5);
$graph->lineTo(1.5 ,2.5 ,'black');
$graph->moveTo(0,3);
$graph->lineTo(2 ,3 ,'black');

$graph->moveTo(0,2.5);
$graph->lineTo(1.5 ,2.5 ,'black');
$graph->moveTo(0,2);
$graph->lineTo(1.5 ,2 ,'black');
$graph->moveTo(0,1.5);
$graph->lineTo(1 ,1.5 ,'black');
$graph->moveTo(0,1);
$graph->lineTo(1 ,1 ,'black');
$graph->moveTo(0,.5);
$graph->lineTo(1 ,.5 ,'black');

$graph->moveTo(2.5,.5);
$graph->lineTo(2.5 ,1 ,'black');
$graph->lineTo(3 ,1 ,'black');
$graph->lineTo(3 ,.5 ,'black');
$graph->lineTo(2.5 ,.5 ,'black');
        $label1=  new Label(2.75 , .7 , 'a box','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $graph -> lb($label1);

#NOTE  Actual size of box is in the image below
TEXT(beginproblem());
BEGIN_TEXT
Using grid paper, Fletcher made this model of the shape of Vermont.
$BR

\{ image( insertGraph($graph), tex_size=>$TEXSIZE,
    height=>$HEIGHT, width=>$WIDTH
    ) \}

$PAR
He learned that \(\frac{3}{4}\) of Vermont is forest.  Fletcher should  shade $BR \{ans_rule(1 )\} boxes gray to represent the fraction of Vermont that is forest.

END_TEXT
ANS(Real(15)->cmp);
BEGIN_SOLUTION

$PAR Solution $PAR
There are 20 boxes in the map of Vermont.  \(\frac{3}{4}\times 20=15\) so he should shade $BR 15 boxes gray
END_SOLUTION

COMMENT('MathObject version');
ENDDOCUMENT();

$graph->moveTo(,);
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');
$graph->moveTo(,);
$graph->lineTo( , ,'black');
$graph->moveTo(,);
$graph->lineTo( , ,'black');
$graph->moveTo(,);
$graph->lineTo( , ,'black');

         $label1=  new Label( ,  , ' ','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $graph -> lb($label1);
         $label2=  new Label( ,  , ' ','black',('center','center'));
         $label2->font(GD::Font->Giant);
         $graph -> lb($label2);
         $label3=  new Label( ,  , ' ','black',('center','center'));
         $label3->font(GD::Font->Giant);
         $graph -> lb($label3);
         $label4=  new Label( ,  , ' ','black',('center','center'));
         $label4->font(GD::Font->Giant);
         $graph -> lb($label4);
         $label5=  new Label( ,  , ' ','black',('center','center'));
         $label5->font(GD::Font->Giant);
         $graph -> lb($label5);
         $label6=  new Label( ,  , ' ','black',('center','center'));
         $label6->font(GD::Font->Giant);
         $graph-> lb($label6);
         $label7=  new Label( ,  , ' ','black',('center','center'));
         $label7->font(GD::Font->Giant);
         $graph -> lb($label7);
         $label8=  new Label( ,  , ' ','black',('center','center'));
         $label8->font(GD::Font->Giant);
         $graph -> lb($label8);
         $label9=  new Label( ,  , ' ','black',('center','center'));
         $label9->font(GD::Font->Giant);
         $graph -> lb($label9);
         $label10=  new Label( ,  , ' ','black',('center','center'));
         $label10->font(GD::Font->Giant);
         $graph -> lb($label10);
         $label11=  new Label( ,  , ' ','black',('center','center'));
         $label11->font(GD::Font->Giant);
         $graph -> lb($label11);
         $label12=  new Label( ,  , ' ','black',('center','center'));
         $label12->font(GD::Font->Giant);
        $graph -> lb($label12);
         $label13=  new Label( ,  , ' ','black',('center','center'));
         $label13->font(GD::Font->Giant);
         $graph -> lb($label13);
         $label14=  new Label( ,  , ' ','black',('center','center'));
         $label14->font(GD::Font->Giant);
         $graph -> lb($label14);
         $label15=  new Label( ,  , ' ','black',('center','center'));
         $label15->font(GD::Font->Giant);
         $graph -> lb($label15);
         $label16=  new Label( ,  , ' ','black',('center','center'));
         $label16->font(GD::Font->Giant);
         $graph -> lb($label16);
         $label17=  new Label( ,  , ' ','black',('center','center'));
         $label17->font(GD::Font->Giant);
         $graph -> lb($label17);
         $label18=  new Label( ,  , ' ','black',('center','center'));
         $label18->font(GD::Font->Giant);
         $graph -> lb($label18);
         $label19=  new Label( ,  , ' ','black',('center','center'));
         $label19->font(GD::Font->Giant);
         $graph -> lb($label19);
         $label20=  new Label( ,  , ' ','black',('center','center '));
         $label20->font(GD::Font->Giant);
          $graph -> lb($label20);



#TWO HALVES OF A CIRCLE
$func = Compute("2+sqrt{1-(x-3)**2}");
$fund = Compute("2-sqrt{1-(x-3)**2}");
plot_functions( $graph, "$func for x in " .
"<2,4> using color:blue " .
"and weight:3");
plot_functions( $graph, "$fund for x in " .
"<$2,4> using color:blue " .
"and weight:1");

         $circle_object1 = closed_circle( ,,'black' );
         $graph -> stamps($circle_object1);
 the domain is
$xmin = -2;
$xmax = $root2 + 1;
# and the number of gridlines we graph
$xgrid = $xmax + 2;
$ygrid = $ymax - int($ymin) + 2;

$graph = init_graph($xmin, int($ymin)-1, $xmax,
$ymax+1, axes=>[0,0], grid=>[$xgrid,$ygrid],
size=>[150,150]);


#arrow
$poly2 = new GD::Polygon;
foreach $pt ([3.75,1.23], [3.7,1.20], [3.7,1.26])
   {$poly2->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$black = $graph->im->colorAllocate(0,0,00);
$graph->im->filledPolygon($poly2,$black);
$graph->im->setThickness(3);
$graph->im->openPolygon($poly2,$graph->{colors}{black});
$graph->im->setThickness(1);

IF YOU ARE PRACTICING FOR THE NECAP EXAMINATION, DO THIS WITHOUT$BR A CALCULATOR 
 THIS IS A NECAP PROBLEM FOR WHICH A  CALCULATOR $BR WOULD NOT BE ALLOWED.$PAR 


IN THIS PROBLEM ON THE NECAP EXAM YOU WERE EXPECTED $BR
 TO SHOW YOUR WORK.  SOMETHING SIMILAR TO THE SOLUTION $BR
 ABOVE WOULD BE APPROPRIATE.    

## DBsubject(NECAP)
## DBchapter(Grade 5)
## DBsection(2006)
## MO(1)

