DOCUMENT();
loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"PGgraphmacros.pl",
"PGauxiliaryFunctions.pl", #for lcm, gcd,etc
# "compoundProblem.pl",
#"contextCurrency.pl",
#"contextInequalities.pl",
#"unionTables.pl",
# "unionLists.pl",
#"unionMacros.pl",
#"contextLeadingZero.pl",
#"contextFraction.pl",
#"contextString.pl",
#"answerHints.pl",
#"problemPanic.pl",
#"PGauxiliaryFunctions.pl", #for lcm, gcd,etc
);	

Context("Numeric");

($WIDTH,$HEIGHT,$TEXSIZE)=(380,160,150);
# now initialize the graph
$graph = init_graph(-.1,-.1, 3.7,1.6, size=>[$WIDTH,$HEIGHT]);
$$blue = $graph->im->colorAllocate(20,150,255);
$red = $graph->im->colorAllocate(255,100,100);
$scale=100;
$poly = new GD::Polygon;
foreach $pt ([.1,1.5], [.6,1.5], [.6,1.2], [.1,1.2])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$graph->im->filledPolygon($poly,$red);

$poly = new GD::Polygon;
foreach $pt ( [.8,1.5], [2,1.5], [2,.5], [.8,.5])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$graph->im->filledPolygon($poly,$red);
$poly = new GD::Polygon;
foreach $pt ([2.3,.2], [2.7,.2], [2.7,1.5], [2.3,1.5])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$graph->im->filledPolygon($poly,$red);
$poly = new GD::Polygon;
foreach $pt ( [3.2,1.5], [2.8,1.1], [3.2,.7], [3.6,1.1])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$graph->im->filledPolygon($poly,$red);

($WID,$HEI)=(140,150);
# now initialize the graph
$grb = init_graph(0,0, 1.4,1.5, size=>[$WID,$HEI]);

         $label1=  new Label(.7 ,.2  , 'Shape W','blue',('center','center'));
         $label1->font(GD::Font->Giant);
         $grb -> lb($label1);

$poly = new GD::Polygon;
foreach $pt ([.2,1.0], [.4,1.2], [1.2,.5], [1,.3])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$red = $grb->im->colorAllocate(255,100,100);
$grb->im->filledPolygon($poly,$red);

$grc = init_graph(0,0, 1.4,1.5, size=>[$WID,$HEI]);

         $label1=  new Label(.7 ,.2  , 'Shape X','blue',('center','center'));
         $label1->font(GD::Font->Giant);
         $grc -> lb($label1);


$poly = new GD::Polygon;
foreach $pt ([.1,1.2], [1.1,1.2], [.6,.5])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$red = $grc->im->colorAllocate(255,100,100);
$grc->im->filledPolygon($poly,$red);


$grd = init_graph(0,0, 1.4,1.5, size=>[$WID,$HEI]);

         $label1=  new Label(.7 ,.2  , 'Shape Y','blue',('center','center'));
         $label1->font(GD::Font->Giant);
         $grd -> lb($label1);

$poly = new GD::Polygon;
foreach $pt ([.7,1.2], [.3,.8], [.7,.4], [1.1,.8])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$green = $grd->im->colorAllocate(55,255,100);   
$grd->im->filledPolygon($poly,$green);


$gre = init_graph(0,0, 1.4,1.5, size=>[$WID,$HEI]);

         $label1=  new Label(.9 ,.2  , 'Shape Z','blue',('center','center'));
         $label1->font(GD::Font->Giant);
         $gre -> lb($label1);


$poly = new GD::Polygon;
foreach $pt ([.5,1.2], [.9,1.2], [.9,.4], [.5,.4])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$green = $gre->im->colorAllocate(55,255,100);
$gre->im->filledPolygon($poly,$green);


TEXT(beginproblem());
$radio=new_multiple_choice();
$radio->qa("Which of the shapes below also belongs in this set? ", "Shape W ");
#FIRST PAREN IS QUESTION, SECOND PAREN IS CORRECT ANSWER
$radio->extra("Shape X ", "Shape Y ", "Shape Z  ");
BEGIN_TEXT
Look at this set of shapes.
$BR
\{ image( insertGraph($graph), tex_size=>$TEXSIZE,
    height=>$HEIGHT, width=>$WIDTH
    ) \}

$PAR 
\{$radio->print_q()\}
\{$radio->print_a()\}
$PAR

\{ image( insertGraph($grb), tex_size=>$TEXSIZE,
    height=>$HEI, width=>$WID
    ) \}
\{ image( insertGraph($grc), tex_size=>$TEXSIZE,
    height=>$HEI, width=>$WID
    ) \}
\{ image( insertGraph($grd), tex_size=>$TEXSIZE,
    height=>$HEI, width=>$WID
    ) \}
\{ image( insertGraph($gre), tex_size=>$TEXSIZE,
    height=>$HEI, width=>$WID
    ) \}

END_TEXT
ANS(radio_cmp($radio->correct_ans()));
BEGIN_SOLUTION
$PAR Solution $PAR
In the set all figures are rectangles and all are red.$BR
Of the four choices, only Shape W has both these properties.
END_SOLUTION

COMMENT('MathObject version');
ENDDOCUMENT();
## DBsubject('NECAP')
## DBchapter('Grade 3')
## DBsection('2008')
