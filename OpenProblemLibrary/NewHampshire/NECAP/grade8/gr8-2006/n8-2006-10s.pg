DOCUMENT();
loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"PGgraphmacros.pl",
"PGauxiliaryFunctions.pl", #for lcm, gcd,etc
);	

# make sure we're in the context we want
Context("Numeric");

sub arrow
{#scale factor, angle of shaft, x coord of shaftpoint, y coord of shaftpoint
 #length of unscaled arrowhead =1, point at shaftpoint at (0,0)
my $cs=shift;
my $ang=shift; #0 is horizontal shaft pointed leftward
my @x;
my @y;
my $pi=atan2(1,1)*4;

 $x[0]=shift;
 $y[0]=shift;
 $x[1]=$x[0]+$cs*cos($ang);
 $y[1]=$y[0]+$cs*sin($ang);
 $x[2]=$x[0]+$cs*cos($ang+$pi/2)/2;
 $y[2]=$y[0]+$cs*sin($ang+$pi/2)/2;
 $x[3]=$x[0]-$cs*cos($ang+$pi/2)/2;
 $y[3]=$y[0]-$cs*sin($ang+$pi/2)/2;
my $scale=100;
my $poly = new GD::Polygon;
foreach $pt ([$x[1],$y[1]], [$x[2],$y[2]], [$x[3],$y[3]])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$black = $graph->im->colorAllocate(0,0,00);
$graph->im->filledPolygon($poly,$black);
$graph->im->setThickness(3);
$graph->im->openPolygon($poly,$graph->{colors}{black});
$graph->im->setThickness(1);
}


sub tetrahedron
{#scale factor, lower left x, lower left y, angle of lower edge,dashed edges (1 or 0,
$pi=atan2(1,1)*4;
my $cs=shift; #scaling
my @x;
 my @y;
$x[0] =shift; # lower left coordinates,
$y[0]=shift;
my $ang=shift; # Angle of bottom side from horizontal (in radians, < pi/2).
my $dash=shift; 
$xhunit=$cs*cos($ang);#these are changes when moving analogue of horizontal
$yhunit=$cs*sin($ang);
$x[1]=$x[0]+$xhunit;
$y[1]=$y[0]+$yhunit;
$xvunit=$cs*cos($pi/2+$ang);#these are changes when moving analogue of vertical
$yvunit=$cs*sin($pi/2+$ang);
$x[2]=$x[0] + .5*$xhunit + .866*$xvunit;
$y[2]=$y[0] + .5*$yhunit + .866*$yvunit;
$x[3]=$x[0]+1.1*$xhunit +  .5*$xvunit;
$y[3]=$y[0]+ +1.1 *$yhunit +  .5*$yvunit;  
$graph->moveTo($x[1],$y[1]);
$graph->lineTo($x[0] ,$y[0] ,'black');
$graph->lineTo($x[2] ,$y[2] ,'black');
$graph->lineTo($x[1],$y[1],'black');
$graph->lineTo($x[3],$y[3],'black');
$graph->lineTo($x[2],$y[2],'black');
$graph->moveTo($x[3],$y[3]);
if($dash==1){$graph->lineTo($x[0] ,$y[0] ,'black',1,'dashed');}
#warn "ang=$ang, cs=$cs, xhunit=$xhunit,yhunit=$yhunit,xvunit=$xvunit,yvunit=$yvunit ";
#for(my $i=0;$i<4;$i++) {warn "for $i, ($x[$i],$y[$i]) ";}
}
sub cube
{#scale factor, lower left x, lower left y, angle of lower edge,dashed edges (1 or 0,
$pi=atan2(1,1)*4;
my $cs=shift; #scaling for cube
my @x;
 my @y;
$x[0] =shift; # lower left coordinates,
$y[0]=shift;
my $ang=shift; # Angle of bottom side from horizontal (in radians, < pi/2).
my $dash=shift; 
$xhunit=$cs*cos($ang);#these are changes when moving analogue of horizontal
$yhunit=$cs*sin($ang);
$x[1]=$x[0]+$xhunit;
$y[1]=$y[0]+$yhunit;
$xvunit=$cs*cos($pi/2+$ang);#these are changes when moving analogue of vertical
$yvunit=$cs*sin($pi/2+$ang);
$x[2]=$x[0]+$xvunit;
$y[2]=$y[0]+$yvunit;
$x[3]=$x[1]+$xvunit;
$y[3]=$y[1]+$yvunit;
$graph->moveTo($x[1],$y[1]);
$graph->lineTo($x[3] ,$y[3] ,'black');
$graph->lineTo($x[2] ,$y[2] ,'black');
$x[5]=$x[0]+.3*$xhunit+ .6*$xvunit; 
$y[5]=$y[0]+.3*$yhunit+ .6*$yvunit; 
$x[6]=$x[1]+.3*$xhunit+ .6*$xvunit;
$y[6]=$y[1]+.3*$yhunit+ .6*$yvunit;
$x[4]=$x[6]+.1*$xhunit+ .9*$xvunit;
$y[4]=$y[6]+.1*$yhunit+ .9*$yvunit;
$x[7]=$x[2]+.55*$xhunit+ .48*$xvunit;
$y[7]=$y[2]+.55*$yhunit+ .48*$yvunit;

$graph->moveTo($x[1],$y[1]);
$graph->lineTo($x[0] ,$y[0] ,'black');
$graph->lineTo($x[2] ,$y[2] ,'black');
$graph->moveTo($x[0],$y[0]);
if($dash==1){$graph->lineTo($x[5] ,$y[5] ,'black',1,'dashed');}
if($dash==1){$graph->lineTo($x[6] ,$y[6] ,'black',1,'dashed');}
$graph->moveTo($x[6],$y[6]);
$graph->lineTo($x[4] ,$y[4] ,'black');
$graph->lineTo($x[7] ,$y[7] ,'black');
$graph->moveTo($x[1],$y[1]);
$graph->lineTo($x[6] ,$y[6] ,'black');
$graph->moveTo($x[2],$y[2]);
$graph->lineTo($x[7] ,$y[7] ,'black');
$graph->moveTo($x[3],$y[3]);
$graph->lineTo($x[4] ,$y[4] ,'black');
$graph->moveTo($x[5],$y[5]);
if($dash==1){$graph->lineTo($x[7] ,$y[7] ,'black',1,'dashed');}
#for(my $i=0;$i<8;$i++) {warn "for $i, ($x[$i],$y[$i]) ";}
}
($WIDTH,$HEIGHT,$TEXSIZE)=(800,450,300);
# now initialize the graph
$pi=atan2(1,1)*4;
# now initialize the graph
$graph = init_graph(0,1.5, 8,6,size=>[$WIDTH,$HEIGHT]);
$graph->moveTo(.1,5);
$graph->lineTo(3.8 ,5 ,'black',3);
$graph->moveTo(7.9,5);
$graph->lineTo(4.2 ,5 ,'black',3);
$graph->moveTo(1.9,5);
$graph->lineTo(1.9 ,4.8 ,'black',3);
$graph->lineTo(6.1 ,4.8 ,'black',3);
$graph->lineTo(6.1 ,5 ,'black',3);
$graph->moveTo(4,4.77);
$graph->lineTo(4 ,4.5 ,'black');
arrow(.1,$pi/2,4 ,1.4 );   
$a=5.03;
$b=4.03;
$b1=$b-.11;
$c=3.43;
$c1=$c-.11;
$d=2.83;
$d1=$d-.11;
$e=2.23;
$e1=$e-.11;
$e2=$e-.4;
$e3=$e;
cube(.2,.2,$a,0,0);
cube(.2,.6,$a,0,0);
cube(.2,1,$a,0,0);
tetrahedron(.3,1.4,$a,0,0);
tetrahedron(.3,1.8,$a,0,0);
tetrahedron(.3,2.2,$a,0,0);
tetrahedron(.3,2.6,$a,0,0);
tetrahedron(.3,3,$a,0,0);
cube(.2,4.2,$a,0,0);
cube(.2,4.6,$a,0,0);
cube(.2,5,$a,0,0);
cube(.2,5.4,$a,0,0);
tetrahedron(.3,5.8,$a,0,0);
tetrahedron(.3,6.2,$a,0,0);
tetrahedron(.3,6.6,$a,0,0);
        $label1=  new Label(3.8 ,$b  , 'weigh the same as ','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $graph -> lb($label1);
         $label2=  new Label(3 , $c , 'weigh the same as ','black',('center','center'));
         $label2->font(GD::Font->Giant);
         $graph -> lb($label2);
         $label3=  new Label(5 , $d , 'weigh the same as ','black',('center','center'));
         $label3->font(GD::Font->Giant);
         $graph -> lb($label3);
         $label4=  new Label(5.3 ,$e  , 'weigh the same as ','black',('center','center'));
         $label4->font(GD::Font->Giant);
         $graph -> lb($label4);
         $label5=  new Label(.7 ,$b  , 'Statement 1: ','black',('center','center'));
         $label5->font(GD::Font->Giant);
         $graph -> lb($label5);
         $label6=  new Label(.7 ,$c  , 'Statement 2: ','black',('center','center'));
         $label6->font(GD::Font->Giant);
         $graph-> lb($label6);
         $label7=  new Label(.7, $d,  , 'Statement3: ','black',('center','center'));
         $label7->font(GD::Font->Giant);
         $graph -> lb($label7);
         $label8=  new Label(.7 ,$e  , 'Statement 4: ','black',('center','center'));
         $label8->font(GD::Font->Giant);
         $graph -> lb($label8);
cube(.2,4.8,$b1,0,0); 
cube(.2,5.2,$b1,0,0); 
tetrahedron(.3,1.3,$b1,0,0);
tetrahedron(.3,1.7,$b1,0,0);
tetrahedron(.3,2.1,$b1,0,0);
tetrahedron(.3,2.5,$b1,0,0);
cube(.2,4,$c1,0,0); 
cube(.2,4.4,$c1,0,0); 
cube(.2,4.8,$c1,0,0); 
cube(.2,5.6,$c1,0,0); 
cube(.2,6,$c1,0,0); 
cube(.2,6.4,$c1,0,0); 
cube(.2,5.2,$c1,0,0); 

tetrahedron(.3,1.3,$c1,0,0);
tetrahedron(.3,1.7,$c1,0,0);

cube(.2,5.8,$d1,0,0); 
 
tetrahedron(.3,1.25,$d1,0,0);
tetrahedron(.3,1.6,$d1,0,0);
tetrahedron(.3,1.95,$d1,0,0);
tetrahedron(.3,2.3,$d1,0,0);
tetrahedron(.3,2.65,$d1,0,0);
tetrahedron(.3,3,$d1,0,0);
tetrahedron(.3,3.35,$d1,0,0);
tetrahedron(.3,3.7,$d1,0,0);

cube(.2,6.15,$e2,0,0); 
cube(.2,6.5,$e2,0,0); 
cube(.2,6.85,$e2,0,0); 
cube(.2,6.15,$e3,0,0); 
cube(.2,7.2,$e2,0,0); 
cube(.2,6.5,$e3,0,0); 
cube(.2,7.2,$e3,0,0);
cube(.2,6.85,$e3,0,0);


tetrahedron(.3,1.25,$e1,0,0);
tetrahedron(.3,1.6,$e1,0,0);
tetrahedron(.3,1.95,$e1,0,0);
tetrahedron(.3,2.3,$e1,0,0);
tetrahedron(.3,2.65,$e1,0,0);
tetrahedron(.3,3,$e1,0,0);
tetrahedron(.3,3.35,$e1,0,0);
tetrahedron(.3,3.7,$e1,0,0);
tetrahedron(.3,4.05,$e1,0,0);

#NOTE  Actual size of box is in the image below
TEXT(beginproblem());
$radio=new_multiple_choice();
$radio->qa("Which statement is true? ", "Statement 1 ");
#FIRST PAREN IS QUESTION, SECOND PAREN IS CORRECT ANSWER
$radio->extra("Statement 2 ", "Statement 3 ", "Statement 4  ");
BEGIN_TEXT
The scale shown below is balanced
$BR
\{ image( insertGraph($graph), tex_size=>$TEXSIZE,
    height=>$HEIGHT, width=>$WIDTH
    ) \}
$PAR
\{$radio->print_q()\}
\{$radio->print_a()\}

END_TEXT
ANS(radio_cmp($radio->correct_ans()));
BEGIN_SOLUTION
$PAR Solution $PAR
If we remove three cubes and three tetrahedrons from each side of the scale, $BR
it now balances with 2 tetrahedrons on the left and one cube on the right.$BR
So one cube weighs the same as 2 tetrahedrons.$BR That makes the Statement 1 correct.$PAR
You should notice that taking the same weights off the two sides of a scale is$BR really the same procedure as subracting the same thing from both sides of an equation.
$PAR
By the way, if you ever study Greek you will find out that I really should say
tetrahedra$BR instead of tetrahedrons. Now you know it without even studying Greek.
END_SOLUTION

COMMENT('MathObject version');
ENDDOCUMENT();

$graph->moveTo(,);
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');

$graph->moveTo(,);
$graph->lineTo( , ,'black');

         $label1=  new Label( ,  , ' ','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $graph -> lb($label1);
         $label2=  new Label( ,  , ' ','black',('center','center'));
         $label2->font(GD::Font->Giant);
         $graph -> lb($label2);
         $label3=  new Label( ,  , ' ','black',('center','center'));
         $label3->font(GD::Font->Giant);
         $graph -> lb($label3);
         $label4=  new Label( ,  , ' ','black',('center','center'));
         $label4->font(GD::Font->Giant);
         $graph -> lb($label4);
         $label5=  new Label( ,  , ' ','black',('center','center'));
         $label5->font(GD::Font->Giant);
         $graph -> lb($label5);
         $label6=  new Label( ,  , ' ','black',('center','center'));
         $label6->font(GD::Font->Giant);
         $graph-> lb($label6);
         $label7=  new Label( ,  , ' ','black',('center','center'));
         $label7->font(GD::Font->Giant);
         $graph -> lb($label7);
         $label8=  new Label( ,  , ' ','black',('center','center'));
         $label8->font(GD::Font->Giant);
         $graph -> lb($label8);
         $label9=  new Label( ,  , ' ','black',('center','center'));
         $label9->font(GD::Font->Giant);
         $graph -> lb($label9);
         $label10=  new Label( ,  , ' ','black',('center','center'));
         $label10->font(GD::Font->Giant);
         $graph -> lb($label10);
         $label11=  new Label( ,  , ' ','black',('center','center'));
         $label11->font(GD::Font->Giant);
         $graph -> lb($label11);
         $label12=  new Label( ,  , ' ','black',('center','center'));
         $label12->font(GD::Font->Giant);
        $graph -> lb($label12);
         $label13=  new Label( ,  , ' ','black',('center','center'));
         $label13->font(GD::Font->Giant);
         $graph -> lb($label13);
         $label14=  new Label( ,  , ' ','black',('center','center'));
         $label14->font(GD::Font->Giant);
         $graph -> lb($label14);
         $label15=  new Label( ,  , ' ','black',('center','center'));
         $label15->font(GD::Font->Giant);
         $graph -> lb($label15);
         $label16=  new Label( ,  , ' ','black',('center','center'));
         $label16->font(GD::Font->Giant);
         $graph -> lb($label16);
         $label17=  new Label( ,  , ' ','black',('center','center'));
         $label17->font(GD::Font->Giant);
         $graph -> lb($label17);
         $label18=  new Label( ,  , ' ','black',('center','center'));
         $label18->font(GD::Font->Giant);
         $graph -> lb($label18);
         $label19=  new Label( ,  , ' ','black',('center','center'));
         $label19->font(GD::Font->Giant);
         $graph -> lb($label19);
         $label20=  new Label( ,  , ' ','black',('center','center'));
         $label20->font(GD::Font->Giant);
         $graph -> lb($label20);



#TWO HALVES OF A CIRCLE
$func = Compute("2+sqrt{1-(x-3)**2}");
$fund = Compute("2-sqrt{1-(x-3)**2}");
plot_functions( $graph, "$func for x in " .
"<2,4> using color:blue " .
"and weight:3");
plot_functions( $graph, "$fund for x in " .
"<$2,4> using color:blue " .
"and weight:1");

         $circle_object1 = closed_circle( , ,'black' );
         $graph -> stamps($circle_object1);
 the domain is
$xmin = -2;
$xmax = $root2 + 1;
# and the number of gridlines we graph
$xgrid = $xmax + 2;
$ygrid = $ymax - int($ymin) + 2;

$graph = init_graph($xmin, int($ymin)-1, $xmax,
$ymax+1, axes=>[0,0], grid=>[$xgrid,$ygrid],
size=>[150,150]);

$poly = new GD::Polygon;
foreach $pt ([3,5], [4,5], [5,4], [5,3], [4,2], [3,2], [2,3], [2,4])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$blue = $graph->im->colorAllocate(100,100,255);
$graph->im->filledPolygon($poly,$blue);
$graph->im->setThickness(3);
$graph->im->openPolygon($poly,$graph->{colors}{black});
$graph->im->setThickness(1);

#arrow
$poly2 = new GD::Polygon;
foreach $pt ([3.75,1.23], [3.7,1.20], [3.7,1.26])
   {$poly2->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$black = $graph->im->colorAllocate(0,0,00);
$graph->im->filledPolygon($poly2,$black);
$graph->im->setThickness(3);
$graph->im->openPolygon($poly2,$graph->{colors}{black});
$graph->im->setThickness(1);

IF YOU ARE PRACTICING FOR THE NECAP EXAMINATION, DO THIS WITHOUT$BR A CALCULATOR 
 THIS IS A NECAP PROBLEM FOR WHICH A  CALCULATOR $BR WOULD NOT BE ALLOWED.$PAR 
 

IN THIS PROBLEM ON THE NECAP EXAM YOU WERE EXPECTED $BR
 TO SHOW YOUR WORK.  SOMETHING SIMILAR TO THE SOLUTION $BR
 ABOVE WOULD BE APPROPRIATE.
 
 
## DBsubject(Middle school)
## DBchapter('Solve_Equation')
## DBsection('')