DOCUMENT();
loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"PGgraphmacros.pl",
"PGauxiliaryFunctions.pl", #for lcm, gcd,etc
);	

# make sure we're in the context we want
Context("Numeric");
sub arrow
{#scale factor, angle of shaft, x coord of shaftpoint, y coord of shaftpoint
 #length of unscaled arrowhead =1, point at shaftpoint at (0,0)
my $cs=shift;
my $ang=shift; #0 is horizontal shaft pointed leftward
my $pi=atan2(1,1)*4;
my @x;
my @y;
 $x[0]=shift;
 $y[0]=shift;
 $x[1]=$x[0]+$cs*cos($ang);
 $y[1]=$y[0]+$cs*sin($ang);
 $x[2]=$x[0]+$cs*cos($ang+$pi/2)/2;
 $y[2]=$y[0]+$cs*sin($ang+$pi/2)/2;
 $x[3]=$x[0]-$cs*cos($ang+$pi/2)/2;
 $y[3]=$y[0]-$cs*sin($ang+$pi/2)/2;
my $scale=100;
my $poly = new GD::Polygon;
foreach $pt ([$x[1],$y[1]], [$x[2],$y[2]], [$x[3],$y[3]])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$black = $graph->im->colorAllocate(0,0,00);
$graph->im->filledPolygon($poly,$black);
$graph->im->setThickness(3);
$graph->im->openPolygon($poly,$graph->{colors}{black});
$graph->im->setThickness(1);
}

sub cube
{#scale factor, lower left x, lower left y, angle of lower edge,dashed edges (1 or 0,
$pi=atan2(1,1)*4;
my $cs=shift; #scaling for cube
my @x;
 my @y;
$x[0] =shift; # lower left coordinates,
$y[0]=shift;
my $ang=shift; # Angle of bottom side from horizontal (in radians, < pi/2).
my $dash=shift; 
$xhunit=$cs*cos($ang);#these are changes when moving analogue of horizontal
$yhunit=$cs*sin($ang);
$x[1]=$x[0]+$xhunit;
$y[1]=$y[0]+$yhunit;
$xvunit=$cs*cos($pi/2+$ang);#these are changes when moving analogue of vertical
$yvunit=$cs*sin($pi/2+$ang);
$x[2]=$x[0]+$xvunit;
$y[2]=$y[0]+$yvunit;
$x[3]=$x[1]+$xvunit;
$y[3]=$y[1]+$yvunit;
$graph->moveTo($x[1],$y[1]);
$graph->lineTo($x[3] ,$y[3] ,'black');
$graph->lineTo($x[2] ,$y[2] ,'black');
$x[5]=$x[0]+.3*$xhunit+ .6*$xvunit; 
$y[5]=$y[0]+.3*$yhunit+ .6*$yvunit; 
$x[6]=$x[1]+.3*$xhunit+ .6*$xvunit;
$y[6]=$y[1]+.3*$yhunit+ .6*$yvunit;
$x[4]=$x[6]+.1*$xhunit+ .9*$xvunit;
$y[4]=$y[6]+.1*$yhunit+ .9*$yvunit;
$x[7]=$x[2]+.55*$xhunit+ .48*$xvunit;
$y[7]=$y[2]+.55*$yhunit+ .48*$yvunit;

$graph->moveTo($x[1],$y[1]);
$graph->lineTo($x[0] ,$y[0] ,'black');
$graph->lineTo($x[2] ,$y[2] ,'black');
$graph->moveTo($x[0],$y[0]);
if($dash==1){$graph->lineTo($x[5] ,$y[5] ,'black',1,'dashed');}
if($dash==1){$graph->lineTo($x[6] ,$y[6] ,'black',1,'dashed');}
$graph->moveTo($x[6],$y[6]);
$graph->lineTo($x[4] ,$y[4] ,'black');
$graph->lineTo($x[7] ,$y[7] ,'black');
$graph->moveTo($x[1],$y[1]);
$graph->lineTo($x[6] ,$y[6] ,'black');
$graph->moveTo($x[2],$y[2]);
$graph->lineTo($x[7] ,$y[7] ,'black');
$graph->moveTo($x[3],$y[3]);
$graph->lineTo($x[4] ,$y[4] ,'black');
$graph->moveTo($x[5],$y[5]);
if($dash==1){$graph->lineTo($x[7] ,$y[7] ,'black',1,'dashed');}
#for(my $i=0;$i<8;$i++) {warn "for $i, ($x[$i],$y[$i]) ";}
}
($WIDTH,$HEIGHT,$TEXSIZE)=(800,400,300);
$pi=atan2(1,1)*4;
# now initialize the graph
$graph = init_graph(0,1, 8,5,size=>[$WIDTH,$HEIGHT]);
$graph->moveTo(.1,3);
$graph->lineTo(3.8 ,3 ,'black',3);
$graph->moveTo(7.9,3);
$graph->lineTo(4.2 ,3 ,'black',3);
$graph->moveTo(1.9,3);
$graph->lineTo(1.9 ,2.8 ,'black',3);
$graph->lineTo(6.1 ,2.8 ,'black',3);
$graph->lineTo(6.1 ,3 ,'black',3);
$graph->moveTo(4,2.77);
$graph->lineTo(4 ,2.5 ,'black');
arrow(.1,$pi/2,4 ,2.4 );   
cube(1,4.5,3.04,0,0);      
cube(.8, 6,3.04,0,0);
         $label1=  new Label(5.1, 3.5 ,  , '24 pounds ','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $graph -> lb($label1);
          $label2=  new Label(6.46 ,3.5  , '18 pounds ','black',('center','center'));
         $label2->font(GD::Font->Giant);
         $graph -> lb($label2);
$graph->moveTo(.2,3.04);
$graph->lineTo(1.1 ,3.04 ,'black');
$graph->lineTo(1.1 ,3.94 ,'black');
$graph->lineTo(.2 ,3.94 ,'black');
$graph->lineTo(.2 ,3.04 ,'black');
$graph->moveTo(2.3,3.04);
$graph->lineTo(1.4 ,3.04 ,'black');
$graph->lineTo(1.4 ,3.94 ,'black');
$graph->lineTo(2.3 ,3.94 ,'black');
$graph->lineTo(2.3 ,3.04 ,'black');
$graph->moveTo(2.7,3.04);
$graph->lineTo(2.7 ,3.94 ,'black');
$graph->lineTo(3.6 ,3.94 ,'black');
$graph->lineTo(3.6 ,3.04 ,'black');
$graph->lineTo(2.7 ,3.04 ,'black');
 $label3=  new Label(3.2 , 3.5 , 'sand ','black',('center','center'));
         $label3->font(GD::Font->Giant);
         $graph -> lb($label3);
         $label4=  new Label(.7 ,3.5  , 'sand ','black',('center','center'));
         $label4->font(GD::Font->Giant);
         $graph -> lb($label4);
         $label5=  new Label(1.9 ,3.5  , 'sand ','black',('center','center'));
         $label5->font(GD::Font->Giant);
         $graph -> lb($label5);
 


#NOTE  Actual size of box is in the image below
TEXT(beginproblem());
BEGIN_TEXT
The scale shown below is balanced.
$BR

\{ image( insertGraph($graph), tex_size=>$TEXSIZE,
    height=>$HEIGHT, width=>$WIDTH
    ) \}

$PAR
Each bag of sand weighs the same.  Each bag of sand weighs \{ans_rule(2 )\} pounds;$PAR
IN THIS PROBLEM ON THE NECAP EXAM YOU WERE EXPECTED $BR
 TO SHOW YOUR WORK.  SOMETHING SIMILAR TO THE SOLUTION $BR
 ABOVE WOULD BE APPROPRIATE.    
END_TEXT
ANS(Real(14)->cmp);
BEGIN_SOLUTION
$PAR Solution $PAR
On the right sides the weight is \(24+18=42 \) pounds. $BR
Since the scale is balanced each of the 3 bags of sand must weigh
 \(\frac{42}{3}=14 \) pounds.
END_SOLUTION

COMMENT('MathObject version');
ENDDOCUMENT();

## DBsubject(NECAP)
## DBchapter(Grade 6)
## DBsection(2005)
## MO(1)


     