DOCUMENT();
loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"PGgraphmacros.pl",
"PGauxiliaryFunctions.pl", #for lcm, gcd,etc
);	

# make sure we're in the context we want
Context("Numeric");

($WIDTH,$HEIGHT,$TEXSIZE)=(400,130,150);
# now initialize the graph
$graph = init_graph(-.2,0, 3.8,1.3,size=>[$WIDTH,$HEIGHT]);
$graph->moveTo(1,.6);
$graph->arrowTo(-.19 ,.6 ,'black');

$graph->arrowTo(3.79 ,.6 ,'black');
$blue = $graph->im->colorAllocate(100,100,255);
$vlue = $graph->im->colorAllocate(255,100,255);
$green = $graph->im->colorAllocate(100,255,255);
$graph->im->arc(45,60,50,50,180,360,$blue);
$red = $graph->im->colorAllocate(255,100,100);
$graph->im->arc(95,60,50,50,180,360,$red);
$graph->moveTo(.5,.7);
$graph->arrowTo(.5 ,.6 ,'blue');
$graph->im->arc(145,60,50,50,180,360,$vlue);
$graph->moveTo(1,.7);
$graph->arrowTo(1 ,.6 ,'green');
$graph->im->arc(195,60,50,50,180,360,$red);
$graph->moveTo(1.5,.7);
$graph->arrowTo(1.5 ,.6 ,'red');
$graph->im->arc(245,60,50,50,180,360,$vlue);
$graph->moveTo(2,.7);
$graph->arrowTo(2 ,.6 ,'green');
$graph->im->arc(295,60,50,50,180,360,$green);
$graph->moveTo(2.5,.7);
$graph->arrowTo(2.5 ,.6 ,'black');
$graph->moveTo(3,.7);
$graph->arrowTo(3 ,.6 ,'blue');


$a=.1; $b=.05;
$graph->moveTo(0,.6+$a);
$graph->lineTo(0 ,.6-$a ,'black');
$graph->moveTo(.5,.6+$a,);
$graph->lineTo(.5 ,.6-$a ,'black');
$graph->moveTo(1, .6+$a);
$graph->lineTo(1 ,.6-$a ,'black');
$graph->moveTo(1.5,.6+$a,);
$graph->lineTo(1.5 ,.6-$a ,'black');
$graph->moveTo(2,.6+$a);
$graph->lineTo(2 ,.6-$a ,'black');
$graph->moveTo(2.5,.6+$a);
$graph->lineTo(2.5 ,.6-$a ,'black');
$graph->moveTo(3,.6+$a);
$graph->lineTo(3 ,.6-$a ,'black');
$graph->moveTo(3.5,.6+$a);
$graph->lineTo(3.5 ,.6-$a ,'black');
$graph->moveTo(.25,.6+$b);
$graph->lineTo(.25 ,.6-$b ,'black');
$graph->moveTo(.75,.6-$b);
$graph->lineTo(.75  ,.6+$b ,'black');
$graph->moveTo(1.25, .6-$b);
$graph->lineTo(1.25,.6+ $b  ,'black');
$graph->moveTo(1.75,.6+$b);
$graph->lineTo(1.75, .6-$b, 'black');
$graph->moveTo(2.25,.6-$b);
$graph->lineTo(2.25 ,.6+$b ,'black');
$graph->moveTo(2.75,.6+$b);
$graph->lineTo(2.75, .6-$b, 'black');
$graph->moveTo(3.25,.6-$b);
$graph->lineTo(3.25 ,.6+$b ,'black');

$x=.5;$y=.04;         
         $label1=  new Label($y ,$x  , '100 ','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $graph -> lb($label1);
         $label2=  new Label(.5+$y ,$x  , '110 ','black',('center','center'));
         $label2->font(GD::Font->Giant);
         $graph -> lb($label2);
         $label3=  new Label(1+$y , $x , '120 ','black',('center','center'));
         $label3->font(GD::Font->Giant);
         $graph -> lb($label3);
         $label4=  new Label(1.5+$y ,  $x , '130 ','black',('center','center'));
         $label4->font(GD::Font->Giant);
         $graph -> lb($label4);
         $label5=  new Label(2+$y ,  $x , '140 ','black',('center','center'));
         $label5->font(GD::Font->Giant);
         $graph -> lb($label5);
         $label6=  new Label(2.5+$y ,   $x, '150 ','black',('center','center'));
         $label6->font(GD::Font->Giant);
         $graph-> lb($label6);
         $label7=  new Label(3+$y ,  $x , '160 ','black',('center','center'));
         $label7->font(GD::Font->Giant);
         $graph -> lb($label7);
        
         $label8=  new Label(3.5+$y ,$x , '170 ','black',('center','center'));
         $label8->font(GD::Font->Giant);
         $graph -> lb($label8);
#NOTE  Actual size of box is in the image below
TEXT(beginproblem());
$radio=new_multiple_choice();
$radio->qa("What is the next number an arrow should point to on the number line? ", "170 ");

#FIRST PAREN IS QUESTION, SECOND PAREN IS CORRECT ANSWER
$radio->extra("165 ", "175" , "180  ");
BEGIN_TEXT
Malcolm drew arrows on this number line to make a number pattern.
$BR
\{ image( insertGraph($graph), tex_size=>$TEXSIZE,
    height=>$HEIGHT, width=>$WIDTH
    ) \}
$PAR
\{$radio->print_q()\}
\{$radio->print_a()\}

END_TEXT
ANS(radio_cmp($radio->correct_ans()));
BEGIN_SOLUTION
$PAR Solution $PAR
The arrows have followed the pattern of coming from the previous value to $BR
a value that is 10 higher.  The last value with an arrow is 160 so the next $BR
should be 170.
END_SOLUTION

COMMENT('MathObject version');
ENDDOCUMENT();
## DBsubject('NECAP')
## DBchapter('Grade 4')
## DBsection('2009')

$graph->moveTo(,);
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');

$graph->moveTo(,);
$graph->lineTo( , ,'black');
$graph->arrowTo( , ,'black',2);
         $label1=  new Label( ,  , ' ','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $graph -> lb($label1);
         $label2=  new Label( ,  , ' ','black',('center','center'));
         $label2->font(GD::Font->Giant);
         $graph -> lb($label2);
         $label3=  new Label( ,  , ' ','black',('center','center'));
         $label3->font(GD::Font->Giant);
         $graph -> lb($label3);
         $label4=  new Label( ,  , ' ','black',('center','center'));
         $label4->font(GD::Font->Giant);
         $graph -> lb($label4);
         $label5=  new Label( ,  , ' ','black',('center','center'));
         $label5->font(GD::Font->Giant);
         $graph -> lb($label5);
         $label6=  new Label( ,  , ' ','black',('center','center'));
         $label6->font(GD::Font->Giant);
         $graph-> lb($label6);
         $label7=  new Label( ,  , ' ','black',('center','center'));
         $label7->font(GD::Font->Giant);
         $graph -> lb($label7);
         $label8=  new Label( ,  , ' ','black',('center','center'));
         $label8->font(GD::Font->Giant);
         $graph -> lb($label8);
         $label9=  new Label( ,  , ' ','black',('center','center'));
         $label9->font(GD::Font->Giant);
         $graph -> lb($label9);
         $label10=  new Label( ,  , ' ','black',('center','center'));
         $label10->font(GD::Font->Giant);
         $graph -> lb($label10);
         $label11=  new Label( ,  , ' ','black',('center','center'));
         $label11->font(GD::Font->Giant);
         $graph -> lb($label11);
         $label12=  new Label( ,  , ' ','black',('center','center'));
         $label12->font(GD::Font->Giant);
        $graph -> lb($label12);
         $label13=  new Label( ,  , ' ','black',('center','center'));
         $label13->font(GD::Font->Giant);
         $graph -> lb($label13);
         $label14=  new Label( ,  , ' ','black',('center','center'));
         $label14->font(GD::Font->Giant);
         $graph -> lb($label14);
         $label15=  new Label( ,  , ' ','black',('center','center'));
         $label15->font(GD::Font->Giant);
         $graph -> lb($label15);
         $label16=  new Label( ,  , ' ','black',('center','center'));
         $label16->font(GD::Font->Giant);
         $graph -> lb($label16);
         $label17=  new Label( ,  , ' ','black',('center','center'));
         $label17->font(GD::Font->Giant);
         $graph -> lb($label17);
         $label18=  new Label( ,  , ' ','black',('center','center'));
         $label18->font(GD::Font->Giant);
         $graph -> lb($label18);
         $label19=  new Label( ,  , ' ','black',('center','center'));
         $label19->font(GD::Font->Giant);
         $graph -> lb($label19);
         $label20=  new Label( ,  , ' ','black',('center','center'));
         $label20->font(GD::Font->Giant);
         $graph -> lb($label20);

--More--(57%)

#TWO HALVES OF A CIRCLE
$func = Compute("2+sqrt{1-(x-3)**2}");
$fund = Compute("2-sqrt{1-(x-3)**2}");
plot_functions( $graph, "$func for x in " .
"<2,4> using color:blue " .
"and weight:3");
plot_functions( $graph, "$fund for x in " .
"<$2,4> using color:blue " .
"and weight:1");

         $circle_object1 = closed_circle( , ,'black' );
         $graph -> stamps($circle_object1);
 the domain is
$xmin = -2;
$xmax = $root2 + 1;
# and the number of gridlines we graph
$xgrid = $xmax + 2;
$ygrid = $ymax - int($ymin) + 2;

$graph = init_graph($xmin, int($ymin)-1, $xmax,
$ymax+1, axes=>[0,0], grid=>[$xgrid,$ygrid],
size=>[150,150]);
$scale=100;
$poly = new GD::Polygon;
foreach $pt ([3,5], [4,5], [5,4], [5,3], [4,2], [3,2], [2,3], [2,4])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$blue = $graph->im->colorAllocate(100,100,255);
$graph->im->filledPolygon($poly,$blue);
$graph->im->setThickness(3);
$graph->im->openPolygon($poly,$graph->{colors}{black});
$graph->im->setThickness(1);

#arrow
$poly2 = new GD::Polygon;
foreach $pt ([3.75,1.23], [3.7,1.20], [3.7,1.26])
   {$poly2->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$black = $graph->im->colorAllocate(0,0,00);
$graph->im->filledPolygon($poly2,$black);
$graph->im->setThickness(3);
$graph->im->openPolygon($poly2,$graph->{colors}{black});
$graph->im->setThickness(1);

IF YOU ARE PRACTICING FOR THE NECAP EXAMINATION, DO THIS WITHOUT$BR A CALCULATO
 THIS IS A NECAP PROBLEM FOR WHICH A  CALCULATOR $BR WOULD NOT BE ALLOWED.$PAR 
 

IN THIS PROBLEM ON THE NECAP EXAM YOU WERE EXPECTED $BR
 TO SHOW YOUR WORK.  SOMETHING SIMILAR TO THE SOLUTION $BR
 ABOVE WOULD BE APPROPRIATE.