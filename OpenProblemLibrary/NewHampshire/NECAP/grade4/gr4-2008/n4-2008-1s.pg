DOCUMENT();
loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"PGgraphmacros.pl",
"PGauxiliaryFunctions.pl", #for lcm, gcd,etc
# "compoundProblem.pl",
"contextCurrency.pl",
#"contextInequalities.pl",
#"unionTables.pl",
# "unionLists.pl",
#"unionMacros.pl",
#"contextLeadingZero.pl",
#"contextFraction.pl",
#"contextString.pl",
#"answerHints.pl",
#"problemPanic.pl",

#"PGauxiliaryFunctions.pl", #for lcm, gcd,etc

);	

# make sure we're in the context we want
Context("Currency");

($WIDTH,$HEIGHT,$TEXSIZE)=(200,200,150);
# now initialize the graph
$graph = init_graph(0,0, 2,2,size=>[$WIDTH,$HEIGHT]);
$scale=100;
$poly = new GD::Polygon;
foreach $pt ([0,0], [0,2], [.2,2],[.2,0])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$blue = $graph->im->colorAllocate(100,100,255);
$graph->im->filledPolygon($poly,$blue);
for($x=0;$x<11;$x++)
{$y=.2*$x;
$graph->moveTo($y,0);
$graph->lineTo($y ,2 ,'black');
$graph->moveTo(0,$y);
$graph->lineTo(2 ,$y ,'black');
}

($WID,$HEI,)=(400,300);
# now initialize the graph
$grb = init_graph(0,0, 4,3,size=>[$WID,$HEI]);
$poly = new GD::Polygon;
foreach $pt ([.2,.6], [.2,2.6], [2.2,2.6],[2.2,.6])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$blue = $grb->im->colorAllocate(100,100,255);
$grb->im->filledPolygon($poly,$blue);
for($x=0;$x<11;$x++)
{$y=.2*$x;
$grb->moveTo(.2+$y,.4);
$grb->lineTo(.2+$y ,2.4 ,'black');
$grb->moveTo(.2,.4+$y);
$grb->lineTo(2.2 ,.4+$y ,'black');
}
         $label1=  new Label(2.3 ,2.7  , 'Key','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $grb -> lb($label1);
         $label2=  new Label(3.1 ,1.5  , 'represents 1 dollar','black',('center','center'));
         $label2->font(GD::Font->Giant);
         $grb -> lb($label2);

#NOTE  Actual size of box is in the image below
TEXT(beginproblem());
$radio=new_multiple_choice();
$radio->qa("How much money does Megan have? ", "$DOLLAR 0.10 ");
#FIRST PAREN IS QUESTION, SECOND PAREN IS CORRECT ANSWER
$radio->extra("$DOLLAR 0.01 ", "$DOLLAR 1.00 ", "$DOLLAR 10.00  ");
BEGIN_TEXT
Megan colors this grid blue to show how much money she has.
$BR
\{ image( insertGraph($graph), tex_size=>$TEXSIZE,
    height=>$HEIGHT, width=>$WIDTH
    ) \}
$BR
\{ image( insertGraph($grb), tex_size=>$TEXSIZE,
    height=>$HEI, width=>$WID
    ) \}
$PAR
\{$radio->print_q()\}
\{$radio->print_a()\}

END_TEXT
ANS(radio_cmp($radio->correct_ans()));
BEGIN_SOLUTION
$PAR Solution $PAR
There are 100 small boxes in the key to represent one dollar.  Thus each small box$BR
represents 1 cent and Megan's chart shows 10 cents which is $DOLLAR 0.10.
END_SOLUTION

COMMENT('MathObject version');
ENDDOCUMENT();
## DBsubject('NECAP')
## DBchapter('Grade 4')
## DBsection('2008')

$graph->moveTo(,);
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');

$graph->moveTo(,);
$graph->arrowTo( , ,'black',2);

         $circle_object1 = closed_circle( , ,'black' );
         $graph -> stamps($circle_object1);
$scale=100;
$poly = new GD::Polygon;
foreach $pt ([3,5], [4,5], [5,4], [5,3], [4,2], [3,2], [2,3], [2,4])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$blue = $graph->im->colorAllocate(100,100,255);
$graph->im->filledPolygon($poly,$blue);

         $label1=  new Label( ,  , '','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $graph -> lb($label1);
         $label2=  new Label( ,  , '','black',('center','center'));
         $label2->font(GD::Font->Giant);
         $graph -> lb($label2);
         $label3=  new Label( ,  , '','black',('center','center'));
         $label3->font(GD::Font->Giant);
         $graph -> lb($label3);
         $label4=  new Label( ,  , '','black',('center','center'));
         $label4->font(GD::Font->Giant);
         $graph -> lb($label4);
         $label5=  new Label( ,  , '','black',('center','center'));
         $label5->font(GD::Font->Giant);
         $graph -> lb($label5);
         $label6=  new Label( ,  , '','black',('center','center'));
         $label6->font(GD::Font->Giant);
         $graph-> lb($label6);
         $label7=  new Label( ,  , '','black',('center','center'));
         $label7->font(GD::Font->Giant);
         $graph -> lb($label7);
         $label8=  new Label( ,  , '','black',('center','center'));
         $label8->font(GD::Font->Giant);
         $graph -> lb($label8);
         $label9=  new Label( ,  , '','black',('center','center'));
         $label9->font(GD::Font->Giant);
         $graph -> lb($label9);
         $label10=  new Label( ,  , '','black',('center','center'));
         $label10->font(GD::Font->Giant);
         $graph -> lb($label10);
         $label11=  new Label( ,  , '','black',('center','center'));
         $label11->font(GD::Font->Giant);
         $graph -> lb($label11);
         $label12=  new Label( ,  , '','black',('center','center'));
         $label12->font(GD::Font->Giant);
        $graph -> lb($label12);
         $label13=  new Label( ,  , '','black',('center','center'));
         $label13->font(GD::Font->Giant);
         $graph -> lb($label13);
         $label14=  new Label( ,  , '','black',('center','center'));
         $label14->font(GD::Font->Giant);
         $graph -> lb($label14);
         $label15=  new Label( ,  , '','black',('center','center'));
         $label15->font(GD::Font->Giant);
         $graph -> lb($label15);
         $label16=  new Label( ,  , '','black',('center','center'));
         $label16->font(GD::Font->Giant);
         $graph -> lb($label16);
         $label17=  new Label( ,  , '','black',('center','center'));
         $label17->font(GD::Font->Giant);
         $graph -> lb($label17);
         $label18=  new Label( ,  , '','black',('center','center'));
         $label18->font(GD::Font->Giant);
         $graph -> lb($label18);
         $label19=  new Label( ,  , '','black',('center','center'));
         $label19->font(GD::Font->Giant);
         $graph -> lb($label19);
         $label20=  new Label( ,  , '','black',('center','center'));
         $label20->font(GD::Font->Giant);
         $graph -> lb($label20);


$func = Compute("2+sqrt{1-(x-3)**2}");

plot_functions( $graph, "$func for x in " .
"<2,4> using color:blue " .
"and weight:3");

 the domain is
$xmin = -2;
$xmax = $root2 + 1;
# and the number of gridlines we graph
$xgrid = $xmax + 2;
$ygrid = $ymax - int($ymin) + 2;

$graph = init_graph($xmin, int($ymin)-1, $xmax,
$ymax+1, axes=>[0,0], grid=>[$xgrid,$ygrid],
size=>[150,150]);
$graph->im->setThickness(3);
$graph->im->openPolygon($poly,$graph->{colors}{black});
$graph->im->setThickness(1);


$poly2 = new GD::Polygon;
foreach $pt ([3.75,1.23], [3.7,1.20], [3.7,1.26])
   {$poly2->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$black = $graph->im->colorAllocate(0,0,00);
$graph->im->filledPolygon($poly2,$black);
$graph->im->setThickness(3);
$graph->im->openPolygon($poly2,$graph->{colors}{black});
$graph->im->setThickness(1);

IF YOU ARE PRACTICING FOR THE NECAP EXAMINATION, DO THIS WITHOUT$BR A CALCULATO
 THIS IS A NECAP PROBLEM FOR WHICH A  CALCULATOR $BR WOULD NOT BE ALLOWED.$PAR 
 

IN THIS PROBLEM ON THE NECAP EXAM YOU WERE EXPECTED $BR
 TO SHOW YOUR WORK.  SOMETHING SIMILAR TO THE SOLUTION $BR
 ABOVE WOULD BE APPROPRIATE.