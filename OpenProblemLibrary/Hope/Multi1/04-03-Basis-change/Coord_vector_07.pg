## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Euclidean spaces)
## DBsection(Coordinate vectors and change of basis)
## Date(July 2013)
## Institution(Hope College)
## Author(Paul Pearson)
## TitleText1('')
## AuthorText1('')
## EditionText1('')
## Section1('')
## Problem1('')

DOCUMENT();
loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"MatrixUnits.pl",
"MatrixReduce.pl",
"MatrixCheckers.pl",
"unionLists.pl",
"parserPopUp.pl",
"PGcourse.pl",
);
install_problem_grader(~~&std_problem_grader);
$showPartialCorrectAnswers = 1;
$refreshCachedImages = 1;
TEXT(beginproblem()); 

Context('Numeric');
Context()->noreduce('(-x)-y');
Context()->noreduce('(-x)-y','(-x)+y');

$U = GL4Z();

$Ared = Matrix([
[1,random(1,3,1),0,random(1,4,1)],
[0,0,1,random(1,4,1)],
[0,0,0,1],
[0,0,0,0],
]);

$A = $U * $Ared;

@a = $A->value;

$p1 = Formula("$a[0][0] + $a[1][0] x + $a[2][0] x^2 + $a[3][0] x^3")->reduce;
$p2 = Formula("$a[0][1] + $a[1][1] x + $a[2][1] x^2 + $a[3][1] x^3")->reduce;
$p3 = Formula("$a[0][2] + $a[1][2] x + $a[2][2] x^2 + $a[3][2] x^3")->reduce;
$p4 = Formula("$a[0][3] + $a[1][3] x + $a[2][3] x^2 + $a[3][3] x^3")->reduce;


$basis = List($p1,$p3,$p4);

$popup = PopUp(["choose","basis for P_3","not a basis for P_3"],"not a basis for P_3");

$dim = Compute("3");

Context()->texStrings;
BEGIN_TEXT
Let \( \mathcal{P}_3 \) be the vector space of all polynomials of degree \( 3 \) or less in the variable \( x \).  Let
\[
\begin{array}{lcl}
p_1(x) & = & $p1, \\
p_2(x) & = & $p2, \\
p_3(x) & = & $p3, \\
p_4(x) & = & $p4 \\
\end{array}
\]
and let \( \mathcal{C} = \lbrace p_1(x), p_2(x), p_3(x), p_4(x) \rbrace.\)

\{ BeginList('OL',type=>'a') \}
$ITEM
Use coordinate representations with respect to the basis \( \mathcal{B} = \lbrace 1, x, x^2, x^3 \rbrace \) to determine whether the set
\( \mathcal{C} \) forms a basis for \( \mathcal{P}_3 \).  \{ $popup->menu \}

$ITEMSEP
$ITEM Find a basis for \( \mathrm{span}(\mathcal{C}) \).
Enter a polynomial or a comma separated list of polynomials.
$BR
\( \big\lbrace \) \{ ans_rule(50) \} \( \big\rbrace \)

$ITEMSEP
$ITEM
The dimension of \( \mathrm{span}(\mathcal{C}) \) is \{ ans_rule(5) \}.

\{ EndList('OL') \}
END_TEXT
Context()->normalStrings;


sub mycheck3 {

	my ($correct, $student, $ansHash, $value) = @_;
	my @c = @{$correct};  
	my @s = @{$student};
	my $nc = scalar(@c);
	my $ns = scalar(@s);
	my $score = 0;
	my @errors = ();

	return ($score,@errors) if $nc != $ns;

		# Most of the answer checking is done on integers 
		# or on decimals like 0.24381729, so we will set the
		# tolerance accordingly in a local context.
		my $context = Context()->copy;
		$context->flags->set(
			tolerance => 0.001,
			tolType => "absolute",
		);

		# put the correct vectors into the columns of a matrix $C
        my $C = Matrix([
        [$c[0]->eval(x=>pi),$c[1]->eval(x=>pi),$c[2]->eval(x=>pi)],
        [$c[0]->D('x')->eval(x=>pi),$c[1]->D('x')->eval(x=>pi),$c[2]->D('x')->eval(x=>pi)],
        [$c[0]->D('x','x')->eval(x=>pi),$c[1]->D('x','x')->eval(x=>pi),$c[2]->D('x','x')->eval(x=>pi)],
        [$c[0]->D('x','x','x')->eval(x=>pi),$c[1]->D('x','x','x')->eval(x=>pi),$c[2]->D('x','x','x')->eval(x=>pi)],
        [$c[0]->D('x','x','x','x')->eval(x=>pi),$c[1]->D('x','x','x','x')->eval(x=>pi),$c[2]->D('x','x','x','x')->eval(x=>pi)],
        ]);
#warn $C;

		# put the student vectors into the columns of a matrix $S
        my $S = Matrix([
        [$s[0]->eval(x=>pi),$s[1]->eval(x=>pi),$s[2]->eval(x=>pi)],
        [$s[0]->D('x')->eval(x=>pi),$s[1]->D('x')->eval(x=>pi),$s[2]->D('x')->eval(x=>pi)],
        [$s[0]->D('x','x')->eval(x=>pi),$s[1]->D('x','x')->eval(x=>pi),$s[2]->D('x','x')->eval(x=>pi)],
        [$s[0]->D('x','x','x')->eval(x=>pi),$s[1]->D('x','x','x')->eval(x=>pi),$s[2]->D('x','x','x')->eval(x=>pi)],
        [$s[0]->D('x','x','x','x')->eval(x=>pi),$s[1]->D('x','x','x','x')->eval(x=>pi),$s[2]->D('x','x','x','x')->eval(x=>pi)],
        ]);
#warn $S;


		# Put $C and $S into the local context so that
		# all of the computations that follow will also be in
		# the local context.
		$C = Matrix($context,$C);
		$S = Matrix($context,$S);

		#  Theorem: A^T A is invertible if and only if A has linearly independent columns.

		#  Check that the professor's vectors are, in fact, linearly independent.
		$CTC = ($C->transpose) * $C;
		warn "Correct answer is a linearly dependent set." if ($CTC->det == 0);

		#  Check that the student's vectors are linearly independent
		if ( (($S->transpose) * $S)->det == 0) {
			Value->Error("Your vectors are linearly dependent");
			return 0;
		}

		# S = student, C = correct, X = change of basis matrix
		# Solve S = CX for X using (C^T C)^{-1} C^T S = X.
		$X = ($CTC->inverse) * (($C->transpose) * $S);
		if ( $S == $C * $X ) { $score = $nc; };
    
		return ($score,@errors);



}


ANS($popup->cmp);

ANS($basis->cmp(list_checker=>~~&mycheck3) );

ANS($dim->cmp);

COMMENT('MathObject version');
ENDDOCUMENT();
