## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Linear transformations)
## DBsection(Kernel and image)
## Date(July 2013)
## Institution(Hope College)
## Author(Paul Pearson)
## TitleText1('')
## AuthorText1('')
## EditionText1('')
## Section1('')
## Problem1('')

DOCUMENT();
loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"MatrixUnits.pl",
"MatrixReduce.pl",
"MatrixCheckers.pl",
"unionLists.pl",
"PGcourse.pl",
);
$showPartialCorrectAnswers = 1;
$refreshCachedImages = 1;
TEXT(beginproblem()); 

Context('Numeric');

$p2 = Formula("x^2");
$p1 = Formula("x");
$p0 = Formula("1");

$kernel = List($p0,$p1);

$image = List($p0,$p1,$p2);

Context()->texStrings;
BEGIN_TEXT
Let \( \mathcal{P}_n \) be the vector space of all polynomials of degree \( n \) or less in the variable \( x \).
Let \( D^2 : \mathcal{P}_4 \to \mathcal{P}_2 \) be the linear transformation that takes a polynomial to its second derivative.  
That is, \( D^2(p(x)) = p''(x) \) for any polynomial \( p(x) \) of degree \( 4 \) or less.
$BR
$BR
A basis for the kernel of \( D^2 \) is  
\( \big\lbrace \) 
\{ ans_rule(30) \} 
\( \big\rbrace \).
Enter a polynomial or a comma separated list of polynomials.
$BR
$BR
A basis for the image of \( D^2 \) is  
\( \big\lbrace \) 
\{ ans_rule(30) \} 
\( \big\rbrace \).
Enter a polynomial or a comma separated list of polynomials.
END_TEXT
Context()->normalStrings;

sub mycheck2 {

	my ($correct, $student, $ansHash, $value) = @_;
	my @c = @{$correct};  
	my @s = @{$student};
	my $nc = scalar(@c);
	my $ns = scalar(@s);
	my $score = 0;
	my @errors = ();

	return ($score,@errors) if $nc != $ns;

		# Most of the answer checking is done on integers 
		# or on decimals like 0.24381729, so we will set the
		# tolerance accordingly in a local context.
		my $context = Context()->copy;
		$context->flags->set(
			tolerance => 0.001,
			tolType => "absolute",
		);

		# put the correct vectors into the columns of a matrix $C
        my $C = Matrix([
        [$c[0]->eval(x=>pi),$c[1]->eval(x=>pi)],
        [$c[0]->D('x')->eval(x=>pi),$c[1]->D('x')->eval(x=>pi)],
        [$c[0]->D('x','x')->eval(x=>pi),$c[1]->D('x','x')->eval(x=>pi)],
        [$c[0]->D('x','x','x')->eval(x=>pi),$c[1]->D('x','x','x')->eval(x=>pi)],
        [$c[0]->D('x','x','x','x')->eval(x=>pi),$c[1]->D('x','x','x','x')->eval(x=>pi)],
        ]);
#warn $C;

		# put the student vectors into the columns of a matrix $S
        my $S = Matrix([
        [$s[0]->eval(x=>pi),$s[1]->eval(x=>pi)],
        [$s[0]->D('x')->eval(x=>pi),$s[1]->D('x')->eval(x=>pi)],
        [$s[0]->D('x','x')->eval(x=>pi),$s[1]->D('x','x')->eval(x=>pi)],
        [$s[0]->D('x','x','x')->eval(x=>pi),$s[1]->D('x','x','x')->eval(x=>pi)],
        [$s[0]->D('x','x','x','x')->eval(x=>pi),$s[1]->D('x','x','x','x')->eval(x=>pi)],
        ]);
#warn $S;


		# Put $C and $S into the local context so that
		# all of the computations that follow will also be in
		# the local context.
		$C = Matrix($context,$C);
		$S = Matrix($context,$S);

		#  Theorem: A^T A is invertible if and only if A has linearly independent columns.

		#  Check that the professor's vectors are, in fact, linearly independent.
		$CTC = ($C->transpose) * $C;
		warn "Correct answer is a linearly dependent set." if ($CTC->det == 0);

		#  Check that the student's vectors are linearly independent
		if ( (($S->transpose) * $S)->det == 0) {
			Value->Error("Your vectors are linearly dependent");
			return 0;
		}

		# S = student, C = correct, X = change of basis matrix
		# Solve S = CX for X using (C^T C)^{-1} C^T S = X.
		$X = ($CTC->inverse) * (($C->transpose) * $S);
		if ( $S == $C * $X ) { $score = $nc; };
    
		return ($score,@errors);



}



sub mycheck3 {

	my ($correct, $student, $ansHash, $value) = @_;
	my @c = @{$correct};  
	my @s = @{$student};
	my $nc = scalar(@c);
	my $ns = scalar(@s);
	my $score = 0;
	my @errors = ();

	return ($score,@errors) if $nc != $ns;

		# Most of the answer checking is done on integers 
		# or on decimals like 0.24381729, so we will set the
		# tolerance accordingly in a local context.
		my $context = Context()->copy;
		$context->flags->set(
			tolerance => 0.001,
			tolType => "absolute",
		);

		# put the correct vectors into the columns of a matrix $C
        my $C = Matrix([
        [$c[0]->eval(x=>pi),$c[1]->eval(x=>pi),$c[2]->eval(x=>pi)],
        [$c[0]->D('x')->eval(x=>pi),$c[1]->D('x')->eval(x=>pi),$c[2]->D('x')->eval(x=>pi)],
        [$c[0]->D('x','x')->eval(x=>pi),$c[1]->D('x','x')->eval(x=>pi),$c[2]->D('x','x')->eval(x=>pi)],
        [$c[0]->D('x','x','x')->eval(x=>pi),$c[1]->D('x','x','x')->eval(x=>pi),$c[2]->D('x','x','x')->eval(x=>pi)],
        [$c[0]->D('x','x','x','x')->eval(x=>pi),$c[1]->D('x','x','x','x')->eval(x=>pi),$c[2]->D('x','x','x','x')->eval(x=>pi)],
        ]);
#warn $C;

		# put the student vectors into the columns of a matrix $S
        my $S = Matrix([
        [$s[0]->eval(x=>pi),$s[1]->eval(x=>pi),$s[2]->eval(x=>pi)],
        [$s[0]->D('x')->eval(x=>pi),$s[1]->D('x')->eval(x=>pi),$s[2]->D('x')->eval(x=>pi)],
        [$s[0]->D('x','x')->eval(x=>pi),$s[1]->D('x','x')->eval(x=>pi),$s[2]->D('x','x')->eval(x=>pi)],
        [$s[0]->D('x','x','x')->eval(x=>pi),$s[1]->D('x','x','x')->eval(x=>pi),$s[2]->D('x','x','x')->eval(x=>pi)],
        [$s[0]->D('x','x','x','x')->eval(x=>pi),$s[1]->D('x','x','x','x')->eval(x=>pi),$s[2]->D('x','x','x','x')->eval(x=>pi)],
        ]);
#warn $S;


		# Put $C and $S into the local context so that
		# all of the computations that follow will also be in
		# the local context.
		$C = Matrix($context,$C);
		$S = Matrix($context,$S);

		#  Theorem: A^T A is invertible if and only if A has linearly independent columns.

		#  Check that the professor's vectors are, in fact, linearly independent.
		$CTC = ($C->transpose) * $C;
		warn "Correct answer is a linearly dependent set." if ($CTC->det == 0);

		#  Check that the student's vectors are linearly independent
		if ( (($S->transpose) * $S)->det == 0) {
			Value->Error("Your vectors are linearly dependent");
			return 0;
		}

		# S = student, C = correct, X = change of basis matrix
		# Solve S = CX for X using (C^T C)^{-1} C^T S = X.
		$X = ($CTC->inverse) * (($C->transpose) * $S);
		if ( $S == $C * $X ) { $score = $nc; };
    
		return ($score,@errors);



}





ANS($kernel->cmp(list_checker=>~~&mycheck2) );
ANS($image->cmp(list_checker=>~~&mycheck3) );

COMMENT('MathObject version');
ENDDOCUMENT();
