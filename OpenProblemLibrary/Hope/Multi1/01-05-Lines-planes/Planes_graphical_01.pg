## DESCRIPTION
## The geometry of vectors in R^n
## ENDDESCRIPTION


## DBsubject(Geometry)
## DBchapter(Vector geometry)
## DBsection(Lines with planes)
## Date(December 2015)
## Institution(Hope College)
## Author(Paul Pearson)
## Level(2)
## MO(1)
## KEYWORDS('vectors','vector operations')

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "contextLimitedVector.pl",
  "AnswerFormatHelp.pl",
  "parserMultiAnswer.pl",
  "parserOneOf.pl",
  "parserPopUp.pl",
  "PGML.pl",
  "scaffold.pl",
  "PGcourse.pl"
);
TEXT(beginproblem());
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;

#Context("LimitedVector-coordinate")->variables->are(x=>'Real',y=>'Real',z=>'Real');
#Context("Vector")->variables->are(x=>'Real',y=>'Real',z=>'Real');
#Context()->flags->set( ijk=>0 );

Context("Numeric");

do { ($a,$b,$c) = (random(2,5,1), random(-5,-2,1), random(2,5,1)); } until ($a != $c);

##############################
#  Part 1

@popup1 = ();

$popup1[0] = PopUp(["choose","point","line parallel to the x-axis","line parallel to the y-axis","line parallel to the z-axis","plane parallel to the xy-plane","plane parallel to the xz-plane","plane parallel to the yz-plane"], "plane parallel to the yz-plane");
$popup1[1] = PopUp(["choose","point","line parallel to the x-axis","line parallel to the y-axis","line parallel to the z-axis","plane parallel to the xy-plane","plane parallel to the xz-plane","plane parallel to the yz-plane"], "plane parallel to the xz-plane");
$popup1[2] = PopUp(["choose","point","line parallel to the x-axis","line parallel to the y-axis","line parallel to the z-axis","plane parallel to the xy-plane","plane parallel to the xz-plane","plane parallel to the yz-plane"], "plane parallel to the xy-plane");

$popup1[3] = PopUp(["choose","point","line parallel to the x-axis","line parallel to the y-axis","line parallel to the z-axis","plane parallel to the xy-plane","plane parallel to the xz-plane","plane parallel to the yz-plane"], "line parallel to the z-axis");
$popup1[4] = PopUp(["choose","point","line parallel to the x-axis","line parallel to the y-axis","line parallel to the z-axis","plane parallel to the xy-plane","plane parallel to the xz-plane","plane parallel to the yz-plane"], "line parallel to the y-axis");
$popup1[5] = PopUp(["choose","point","line parallel to the x-axis","line parallel to the y-axis","line parallel to the z-axis","plane parallel to the xy-plane","plane parallel to the xz-plane","plane parallel to the yz-plane"], "line parallel to the x-axis");

$popup1[6] = PopUp(["choose","point","line parallel to the x-axis","line parallel to the y-axis","line parallel to the z-axis","plane parallel to the xy-plane","plane parallel to the xz-plane","plane parallel to the yz-plane"], "point");

################################
#   Part 2

Context("Vector");

$three_point_cmp = List(Point($a,0,0),Point($a,1,0),Point($a,0,1))->cmp(
  list_checker => sub {
     my ($correct,$student,$ansHash,$value) = @_;
     my $n = scalar(@$student);  # number of student answers
     Value::Error("Your answer should have three points") if ($n != 3);
     my $score = 0;              # number of correct student answers
     my @errors = ();            # stores error messages
     my $i, $j;                  # loop counters
   
     #
     #  Loop though the student answers
     ##
     for ($i = 0; $i < $n; $i++) {
       my $ith = Value::List->NameForNumber($i+1);
       my $p = $student->[$i];   # i-th student answer
       #
       #  Check that the student's answer is a point
       #
       if ($p->type ne "Point") {
          push(@errors,"Your $ith entry is not a point");
          next;
       }
       Value::Error("At least one entry is not a point in R^3") if (scalar($p->value) != 3);
       #
       #  Check that the point hasn't been given before
       #
       for ($j = 0, $used = 0; $j < $i; $j++) {
         if ($student->[$j]->type eq "Point" && $student->[$j] == $p) {
           push(@errors,"Your points are not distinct") unless $ansHash->{isPreview};
           $used = 1; last;
         }
       }
       #
       #  If not already used, check that it satisfies the equation
       #    and increase the score if so.
       #
       if (!$used) {
         my ($x,$y,$z) = $p->value;
         if ($x == $a) {$score++} else {
           push(@errors,"Your $ith point is not correct") unless $ansHash->{isPreview}
         }
       }
     }
     #
     #  Check that there are the right number of answers
     #
     if (!$ansHash->{isPreview}) {
       push(@errors,"You need to provide more points") if $i < 3;
       push(@errors,"You have given too many points") if $score > 3 && $i != $score;
     }
     #  Check for collinearity
     my $v1 = Vector($student->[0] - $student->[1]);
     my $v2 = Vector($student->[0] - $student->[2]);
     if (Vector(0,0,0) == $v1->cross($v2)) { 
          push(@errors,"Your points are collinear"); 
          $score=0;
     }

     return ($score,@errors);


  }
);

$solution_for_y_cmp = Point(0,$b,0)->cmp(
  showCoordinateHints => 0,
  checker => sub {
     my ($cor,$s,$ansHash) = @_;
     Value::Error("Your answer should be a point") if ($s->type ne "Point");
     Value::Error("Your answer should be a point in R^3") if (scalar($s->value) != 3);
     my ($x,$y,$z) = $s->value;
     if ($y == $b) { return 1; } else { return 0; }
  }
);

$two_vector_cmp = List(Vector(1,0,0),Vector(0,0,1))->cmp(
  list_checker => sub {
     my ($cor,$s,$ansHash) = @_;
     my @errors = ();            # stores error messages
     my $score = 0;              # number of correct student answers
     Value::Error("Your list should have two vectors") if (scalar(@$s) != 2);
     my $v1 = $s->[0];
     my $v2 = $s->[1];
     Value::Error("At least one entry is not a vector") if ($v1->type ne "Vector" || $v2->type ne "Vector");
     my @V1 = $v1->value;
     my @V2 = $v2->value;
     Value::Error("At least one vector is not in R^3") if (scalar(@V1) != 3 || scalar(@V2) != 3);
     my $cross = $v1->cross($v2);
     #warn $cross;
     if ($cross->isParallel(Vector(0,1,0))) { $score = 2; }
     return ($score,@errors);
  }
);


$solution_for_z_cmp = Point(0,0,$c)->cmp(
  showCoordinateHints =>0,
  checker => sub {
     my ($cor,$s,$ansHash) = @_;
     Value::Error("Your answer should be a point") if ($s->type ne "Point");
     Value::Error("Your answer should be a point in R^3") if (scalar($s->value) != 3);
     my ($x,$y,$z) = $s->value;
     if ($z == $c) { return 1; } else { return 0; }
  }
);

$perp_to_plane = Vector(0,0,1)->cmp( parallel => 1);

#######################################
#  Part 3

sub two_point_checker { # this is a list checker!
     my ($cor,$s,$ansHash) = @_;
     my @errors = ();            # stores error messages
     my $score = 0;              # number of correct student answers
     Value::Error("Your list should have two points") if (scalar(@$s) != 2);
     my $p1 = $s->[0];
     my $p2 = $s->[1];
     Value::Error("At least one entry is not a point") if ($p1->type ne "Point" || $p2->type ne "Point");
     my @P1 = $p1->value;
     my @P2 = $p2->value;
     Value::Error("At least one entry is not a point in R^3") if (scalar(@P1) != 3 || scalar(@P2) != 3);
     Value::Error("Your entries are not distinct points") if ($p1 == $p2);

     if ( $P1[0] == $a && $P1[1] == $b) { $score++; } else { push(@errors,"Your first point is incorrect") unless $ansHash->{isPreview}; };
     if ( $P2[0] == $a && $P2[1] == $b) { $score++; } else { push(@errors,"Your second point is incorrect") unless $ansHash->{isPreview}; };
     return ($score,@errors);

} # end two_point_checker



sub solution_for_xz {
     my ($cor,$s,$ansHash) = @_;
     Value::Error("Your answer should be a point") if ($s->type ne "Point");
     Value::Error("Your answer should be a point in R^3") if (scalar($s->value) != 3);
     my ($x,$y,$z) = $s->value;
     if (($x == $a) && ($z == $c)) { return 1; } else { return 0; }
} # end solution_for_xz


#######################################

Scaffold::Begin(
    can_open => "when_previous_correct",
    is_open  => "first_incorrect",
    hardcopy_is_open => "always",
);

BEGIN_PGML
You should draw pictures to help you answer these questions. [$PAR]*
END_PGML

Section::Begin("Part 1: Types of intersections");
BEGIN_PGML
Consider the equations [`x = [$a]`], [`y = [$b]`], and [`z = [$c]`] in [`\mathbb{R}^3`].

a. The set of points satisfying the equation [`x = [$a]`] is a [_]{$popup1[0]}

b. The set of points satisfying the equation [`y = [$b]`] is a [_]{$popup1[1]}

c. The set of points satisfying the equation [`z = [$c]`] is a [_]{$popup1[2]}

d. The set of points satisfying both [`x = [$a]`] and [`y = [$b]`] is a [_]{$popup1[3]}

e. The set of points satisfying both [`x = [$a]`] and [`z = [$c]`] is a [_]{$popup1[4]}

f. The set of points satisfying both [`y = [$b]`] and [`z = [$c]`] is a [_]{$popup1[5]}

g. The set of points satisfying [`x = [$a]`], [`y = [$b]`], and [`z = [$c]`] is a [_]{$popup1[6]}
END_PGML
Section::End();

Section::Begin("Part 2: One plane");
BEGIN_PGML
a. A plane is uniquely determined by three distinct, non-collinear points on the plane.  Find three distinct, non-collinear points on the plane [`x = [$a]`].

    + Three distinct, non-collinear points on the plane [`x=[$a]`]: [________________________]{$three_point_cmp} [@ helpLink("points","help: points") @]*

b. A plane is uniquely determined by one point on the plane and two non-parallel vectors that are parallel to the plane.  Find one point on the plane [`y = [$b]`] and two non-parallel vectors that are parallel to the plane [`y = [$b]`].

    + One point on the plane [`y=[$b]`]: [________________________]{$solution_for_y_cmp} [@ helpLink("points","help: points") @]*

    + Two non-parallel vectors that are parallel to the plane [`y=[$b]`]: [________________________]{$two_vector_cmp} [@ helpLink("vectors","help: vectors") @]*

c. A plane is uniquely determined by one point on the plane and one vector perpendicular to the plane.  Find one point on the plane [`z = [$c]`] and one vector perpendicular to the plane [`z = [$c]`].

    + One point on the plane [`z=[$c]`]: [________________________]{$solution_for_z_cmp} [@ helpLink("points","help: points") @]*

    + One vector perpendicular to the plane [`z=[$c]`]: [________________________]{$perp_to_plane} [@ helpLink("vectors","help: vectors") @]*
END_PGML
Section::End();

Section::Begin("Part 3: Two planes");
BEGIN_PGML
The intersection of two planes is either a plane, a line, or the empty set.

a. A line is uniquely determined by two distinct points on the line.  Consider the line of intersection of the planes [`x=[$a]`] and [`y=[$b]`].  Find two distinct points on this line.

    + Two distinct points on the line of intersection of the planes [`x=[$a]`] and [`y=[$b]`]: [________________________]{List("($a,$b,0), ($a,$b,1)")->cmp(list_checker=>~~&two_point_checker)} [@ helpLink("points","help: points") @]*

b.  A line is uniquely determined by a point on the line and a vector parallel to the line.  Consider the line of intersection the planes [`x=[$a]`] and [`z=[$c]`].  Find one point on this line and one vector parallel to this line.

    + One point on the line of intersection of the planes [`x=[$a]`] and [`z=[$c]`]: [________________________]{Point("($a,0,$c)")->cmp(showCoordinateHints => 0, checker=>~~&solution_for_xz)} [@ helpLink("points","help: points") @]*

    + One vector parallel to the line of intersection of the planes [`x=[$a]`] and [`z=[$c]`]: [________________________]{Vector("<0,1,0>")->cmp(parallel => 1)} [@ helpLink("vectors","help: vectors") @]*
END_PGML
Section::End();


Section::Begin("Part 4: Three planes");
BEGIN_PGML
The intersection of three planes is either a plane, a line, a point, or the empty set.  Find the point of intersection the planes [`x=[$a]`], [`y=[$b]`], and [`z=[$c]`].

    + The point of intersection of the planes [`x=[$a]`], [`y=[$b]`], and [`z=[$c]`]: [________________________]{Point("($a,$b,$c)")} [@ helpLink("points","help: points") @]*
END_PGML
Section::End();


Scaffold::End();
ENDDOCUMENT();
