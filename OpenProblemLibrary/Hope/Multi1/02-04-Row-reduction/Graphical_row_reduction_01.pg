## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION


## DBsubject(Linear algebra)
## DBchapter(Eigenvalues and eigenvectors)
## DBsection(Computing eigenvalues and eigenvectors)
## Date(December 2015)
## Institution(Hope College)
## Author(Paul Pearson)
## Level(4)
## MO(1)
## KEYWORDS('eigenvectors','eigenvalues','eigenspaces')

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGgraphmacros.pl",
  "contextLimitedVector.pl",
  "AnswerFormatHelp.pl",
  "PGML.pl",
  "scaffold.pl",
  "unionTables.pl",
  "PGchoicemacros.pl",
  "parserPopUp.pl",
  "PGcourse.pl"
);
TEXT(beginproblem());
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;

Context("LimitedVector-coordinate")->variables->are(x=>'Real',y=>'Real');
foreach my $i (1..2) {
  Context()->strings->add( 'v'.$i =>{ TeX=> "\mathbf{v_{$i}}" });
}
Context()->flags->set(
    formatStudentAnswer=>'parsed',
    ijk=>0,
);

# construct a color gradient
#
sub makegradient # ($graph, $steps, $r0, $g0, $b0, $r1, $g1, $b1)
{
  my ($graph, $steps, $r0, $g0, $b0, $r1, $g1, $b1) = @_;
  my $dr = ($r1 - $r0) / $steps;
  my $dg = ($g1 - $g0) / $steps;
  my $db = ($b1 - $b0) / $steps;

  my $r = $r0;
  my $g = $g0;
  my $b = $b0;
  for my $i (0..$steps-1)
  {
    $graph->new_color("gradient$i",$r,$g,$b);
    $r += $dr;
    $g += $dg;
    $b += $db;
  }
  return $graph;
}

# Construct graph canvases

$pixels = 401;
@gr = ();

($xmin,$xmax) = (-9,9);
($ymin,$ymax) = (-9,9);

foreach my $i (0..1) {

  $gr[$i] = init_graph($xmin,$ymin,$xmax,$ymax, axes=>[0,0], size=>[$pixels,$pixels]);
  $gr[$i] -> lb('reset');

  #  manually draw the grid
  foreach my $x ($xmin..$xmax) {
    $gr[$i] -> moveTo($x,$ymin);
    $gr[$i] -> lineTo($x,$ymax,'gray',1);
  }
  foreach my $y ($ymin..$ymax) {
    $gr[$i] -> moveTo($xmin,$y);
    $gr[$i] -> lineTo($xmax,$y,'gray',1);
  }

  #  axes labels
  $gr[$i] -> lb(new Label ( $xmax-0.5,0,'x','black','left','bottom'));
  $gr[$i] -> lb(new Label ( 0.25,$ymax-0.5,'y','black','left','bottom'));

  foreach my $x (($xmin+1)..-1,1..($xmax-1)) {
    $gr[$i] -> lb(new Label ( $x,$ymin+0.75, $x,'black','center','top'));
  }
  foreach my $y (($ymin+1)..-1,1..($ymax-1)) {
    $gr[$i] -> lb(new Label ($xmin+0.75, $y, $y,'black','right','middle'));
  }

  #
  #  Add to $gr a 10 step color gradient
  #
  $gr[$i] = &makegradient($gr[$i], 8,
  0,0,225,    # RGB blue
  225,0,0     # RGB red
  );

} # end constructing graph canvases

################################
#  plot vectors in domain

@x1 = (random(1,2,1), random(3,8,1));
do { @y1 = (non_zero_random(-2,2,1), random(3,8,1)); } until ($x1[0] * $y1[1] != $x1[1] * $y1[0]); # until <x1[0],y1[0]> and <x1[1],y1[1]> are not parallel

$v1 = Vector($x1[0],$y1[0]); # eigenvector 1
$v2 = Vector($x1[1],$y1[1]); Vector($x1[1],$y1[1]); # eigenvector 2

#parallel vectors
$v1par = Vector(10*$x1[0],10*$y1[0]);
$v2par = Vector(10*$x1[1],10*$y1[1]);

sub label_pos {
  my $x = shift;
  my $y = shift;
  my $xlab = ($x > 0) ? 'left' : 'right';
  my $ylab = ($y > 0) ? 'bottom' : 'top';
  return "$xlab,$ylab";
}

foreach my $i (0..1) {
    $gr[0]->moveTo(0,0);
    $gr[0]->arrowTo($x1[$i], $y1[$i],'blue',3);
    my $j = $i + 1;
    $gr[0]->lb(new Label (1.1*$x1[$i],1.1*$y1[$i], ' v'.$j.' ', 'blue', label_pos($x1[$i],$y1[$i]) ));
}


###############################
#  plot vectors in codomain

$k1 = 2;
$k2 = -1;

$P = Matrix([
[$x1[0],$x1[1]],
[$y1[0],$y1[1]]
]);

$D = Matrix([
[$k1, 0],
[0, $k2]
]);

$A = $P * $D * ($P->inverse);

$a11 = $A->element(1,1); $a12 = $A->element(1,2);
$a21 = $A->element(2,1); $a22 = $A->element(2,2);

@x2 = ();
@y2 = ();
foreach my $i (0..1) {
  $x2[$i] = $a11 * $x1[$i] + $a12 * $y1[$i];
  $y2[$i] = $a21 * $x1[$i] + $a22 * $y1[$i];
}

foreach my $i (0..1) {
    $gr[1]->moveTo(0,0);
    $gr[1]->arrowTo($x2[$i], $y2[$i],'blue',3);
    my $j = $i + 1;
    $gr[1]->lb(new Label (1.1*$x2[$i],1.1*$y2[$i], ' T(v'.$j.') ', 'blue', label_pos($x2[$i],$y2[$i]) ));
}


@fig = ();
$fig[0] = image(insertGraph($gr[0]), width=>$pixels, height=>$pixels, tex_size=>450);
$fig[1] = image(insertGraph($gr[1]), width=>$pixels, height=>$pixels, tex_size=>450);

@popup = ();
$popup[0] = PopUp(['choose','yes','no','cannot be determined'],'yes');
$popup[1] = PopUp(['choose','0','1','2','3','4','5','infinitely many'],'infinitely many');
$popup[2] = PopUp(['choose','yes','no','cannot be determined'],'yes');
$popup[3] = PopUp(['choose',"scales v by $k1","reflects v through the origin","rotates v about the origin"],"scales v by $k1");

$popup[4] = PopUp(['choose','yes','no','cannot be determined'],'yes');
$popup[5] = PopUp(['choose','0','1','2','3','4','5','infinitely many'],'infinitely many');
$popup[6] = PopUp(['choose','yes','no','cannot be determined'],'yes');
$popup[7] = PopUp(['choose',"scales v by $k1","reflects v through the origin","rotates v about the origin"],"reflects v through the origin");

$popup[8] = PopUp(['choose','yes','no','cannot be determined'],'no');

## Answer checkers for vectors parallel to eigenvectors

sub eigvcheck { 
  my $eigv = shift;
  sub {
    my ( $correct, $student, $ansHash ) = @_;
    return 0 if $eigv == $student;
    return 0 if Vector("<0,0>") == $student;
    return $eigv->isParallel($student);
}};


###############################################

Scaffold::Begin(
    can_open => "when_previous_correct",
    is_open  => "first_incorrect",
    hardcopy_is_open => "when_previous_correct",
);

BEGIN_PGML
Suppose [` T: \mathbb{R}^2 \to \mathbb{R}^2 `] is the linear transformation defined in the figure below.
The figure shows where [`T`] maps [$num_vects] vectors [` \mathbf{v_1} `] and [`\mathbf{v_2}`] from the domain.
With this limited information about [`T`], what properties of [`T`] can be determined?

[@
BeginTable().
  AlignedRow([ $fig[0],"\\( \\Large \\mathop{\\to}^T \\)", $fig[1] ]).
  TableSpace(5,0).
  AlignedRow(["domain"," " ,"codomain"]).
EndTable().$PAR
@]***

END_PGML

Section::Begin("Part 1: Finding eigenvalues using geometry");
BEGIN_PGML
If [`\mathbf{v_1}`] and [`\mathbf{v_2}`] are eigenvectors for [`T`], find their corresponding eigenvalues.  If not, enter [|DNE|]. [@ AnswerFormatHelp("numbers") @]*

+ [`T(\mathbf{v_1}) = `] [____]{"$k1"} [`\mathbf{v_1}`]
+ [`T(\mathbf{v_2}) = `] [____]{"$k2"} [`\mathbf{v_2}`]
END_PGML
Section::End();

Section::Begin("Part 2: Properties eigenvectors");
BEGIN_PGML
Answer the following questions about the properties of the linear transformation [`T`].

a. If possible, find another eigenvector for [`T`] parallel to [`\mathbf{v_1}`] but not equal to [`\mathbf{v_1}`].  If it is not possible, enter [|DNE|]. [___________]{ $v1par -> cmp( checker => eigvcheck($v1) )}
b. Is every nonzero vector parallel to [`\mathbf{v_1}`] an eigenvector for [`T`] with eigenvalue [`[$k1]`]?  [_]{$popup[0]}
c. How many nonzero vectors parallel to [`\mathbf{v_1}`] are eigenvectors for [`T`] with eigenvalue [`[$k1]`]? [_]{$popup[1]}
d. Is every eigenvector for [`T`] with eigenvalue [`[$k1]`] a nonzero vector parallel to [`\mathbf{v_1}`] ? [_]{$popup[2]}
e. What does it mean geometrically for the eigenvector [`\mathbf{v_1}`] to have eigenvalue [`[$k1]`]?  It means that for any vector [`\mathbf{v}`] parallel to [`\mathbf{v_1}`], the linear transformation [`T`] [_]{$popup[3]}.
END_PGML
Section::End();

Section::Begin("Part 3: Properties of eigenvectors");
BEGIN_PGML
a. If possible, find another eigenvector for [`T`] parallel to [`\mathbf{v_2}`] but not equal to [`\mathbf{v_2}`].  If it is not possible, enter [|DNE|]. [___________]{ $v2par -> cmp( checker => eigvcheck($v2) )}
b. Is every nonzero vector parallel to [`\mathbf{v_2}`] an eigenvector for [`T`] with eigenvalue [`[$k2]`]?  [_]{$popup[4]}
c. How many nonzero vectors parallel to [`\mathbf{v_2}`] are eigenvectors with eigenvalue [`[$k2]`]? [_]{$popup[5]}
d. Is every eigenvector for [`T`] with eigenvalue [`[$k2]`] a nonzero vector parallel to [`\mathbf{v_2}`] ? [_]{$popup[6]}
e. What does it mean geometrically for the eigenvector [`\mathbf{v_2}`] to have eigenvalue [`[$k2]`]?  It means that for any vector [`\mathbf{v}`] parallel to [`\mathbf{v_2}`], the linear transformation [`T`] [_]{$popup[7]}.
END_PGML
Section::End();

Section::Begin("Part 4: Is every vector an eigenvector?");
BEGIN_PGML
Suppose [`\mathbf{v}`] is any vector that is neither parallel to [`\mathbf{v_1}`] nor parallel to [`\mathbf{v_2}`].  Is [`\mathbf{v}`] an eigenvector for [`T`]? [_]{$popup[8]}  Be sure you can explain why or why not.
END_PGML
Section::End();

Scaffold::End();

COMMENT('Distinct real eigenvalues.  Stretches by 2 in one direction, reflects thru origin in another direction.');

ENDDOCUMENT();
