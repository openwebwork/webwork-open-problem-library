##DESCRIPTION
##  Algebra problem: Horner's Method
##ENDDESCRIPTION


## DBsubject(Algebra)
## DBchapter(Polynomial equations and functions)
## DBsection(Polynomial functions)
## Date(7/11/2013)
## Institution(Mississippi College)
## Author(John Travis)
## Level(3)
## MO(1)
## KEYWORDS('algebra', 'horner', 'nested','factorization')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "problemRandomize.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

#  Allow for the user to try another version of the problem once they get it correct.
ProblemRandomize(when=>"Correct",onlyAfterDue=>0);


##############################################################
#
#  Setup
#
#
Context("Numeric");

#  The degree of the resulting polynomial.  Although this works technically for very large values, be aware
#   that some students may have difficulty with the width of their display if too large.  Perhaps $n in the single digits is best.
$n = 5;

#  This is the place where the student will evaluate the polynomial.  It can be negative of course but the 
#  presentation may have terms which look like +- 
$x0 = -1*random(2,8,1);

$c[$n] = non_zero_random(-4,4,1);
$t = $c[$n];

#  Create coefficients so that intermediate calculations cancel out a bunch and leave
#  the student with relatively small numbers to do arithmetic on.
for (my $k=$n;$k>0;$k--)
{
  $c[$k-1] =  non_zero_random(-12,12,1) - $x0*$t;
  $t = $c[$k-1] + $x0*$t;
}


#  So, the "original" polynomial is in the follow two character strings
#  These strings are created by recursively nesting terms of the form b = a + x*b
#
$text0 = "$c[$n] x^$n";
$text1 = "\( ($c[$n]) \)";
for (my $k=$n-1;$k>0;$k--)
{
    $text0 = "$c[$k] x^$k + ".$text0;
    $text1 = "\( ( $c[$k] + {\color{Blue} x}\)".$text1."\( ) \)";
}
$text0 = " $c[0] + ".$text0;
$text1 = "\( f({\color{Blue} x}) = $c[0] + {\color{Blue} x} \)".$text1;



#  Now create the answers and answer blanks and solution as you work your way out using Horner's
$ans[1] = Compute("$c[$n]");
for (my $r = $n-1; $r>=0;$r--)
{
  $row = $n - $r + 1;
  $text[$row] = "\( ( \)".ans_rule(2)."\() \)";
  $ans[$row] = Compute("$c[$r] + $x0*$ans[$row-1]");
  $soln[$row] = "\( ( $ans[$row-1]) ) \)";
  for (my $k=$r;$k>0;$k--)
  {
    $text[$row] = "\( ( $c[$k] + {\color{Blue} $x0}\)".$text[$row]."\( ) \)";
    $soln[$row] = "\( ( $c[$k] + {\color{Blue} $x0}\)".$soln[$row]."\( ) \)";
  }
  $text[$row] = "\( f({\color{Blue} $x0}) = $c[0] + {\color{Blue} $x0}\)".$text[$row];
  $soln[$row] = "\( f({\color{Blue} $x0}) = $c[0] + {\color{Blue} $x0}\)".$soln[$row];
}

#  Final display row and answer
$text[$n+2] = "\( f( {\color{Blue} $x0} ) = \)".ans_rule(2);
$ans[$n+2] = Compute("$c[0] + $x0*$ans[$n+1]");
$soln[$n+2] = "\( f({\color{Blue} $x0}) = $ans[$n+1]\)";


##############################################################


Context()->texStrings;
BEGIN_TEXT
$PAR  Suppose $PAR
$BCENTER \( f(x) = $text0 \) $ECENTER
$BR $PAR is factored using $BITALIC Horner's Method $EITALIC into the nested form
$PAR $BCENTER $text1 $ECENTER
$PAR $BR
Then
$PAR \{ join($PAR,@text) \}
$PAR
END_TEXT
Context()->normalStrings;

##############################################################
#

#  Shifted by one since we started at 1 for the answers.
for (my $k=1;$k<$n+2;$k++)
{
  ANS($ans[$k]->cmp());
}

$showHint=3;
BEGIN_HINT
$PAR
Work your way from inside out.  Start by plugging in the correct starting point and then do only the calculation for the innermost parenthesis to get the next answer.  Continue.  Note that at each step you are only doing one multiplication and one addition.
$PAR
END_HINT

$showHint=6;
BEGIN_HINT
$PAR
Start by pluggin the high order coefficient \($c[$n]\) in at the first step. 
$PAR
END_HINT

BEGIN_SOLUTION
$PAR
For Horner's method, do the arithmetic from the inside parenthesis outward.  Since at each step you are doing only one multiplication and one addition, there are no powers to deal with regardless of the polynomial's order.  
$PAR
This approach minimizes the number of calculations necessary to only \($n\) multiplies and additions as opposed to about \(\{$n**2\}/2\) multiplications if the polynomial were not factored this way.
$PAR
Progressively, one step at a time,
$PAR \{ join($PAR,@soln) \}
END_SOLUTION


ENDDOCUMENT();        
