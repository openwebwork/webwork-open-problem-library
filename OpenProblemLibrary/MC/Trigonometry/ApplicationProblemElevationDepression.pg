##DESCRIPTION
##  Online exam question for Right Triangle Trigonometry
##  Application problem dealing with angles of depression.
##ENDDESCRIPTION

## DBsubject('Trigonometry')
## DBchapter('Right Triangle Trigonometry')
## DBsection('Definition using Triangles')
## Date('September 2012')
## Author('John Travis')
## Institution('Mississippi College')
## TitleText1('Trigonometry')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "unionTables.pl",
);

TEXT(beginproblem());

$high = random(200,800,100);
$deg1 = random(40,50,2);
$deg2 = non_zero_random(-6,6,2)+$deg1;

$base1 = $high/tan($deg1*pi/180);
$base2 = $high/tan($deg2*pi/180);

$base = Compute("$base1+$base2");

Context("Numeric");
Context()->flags->set(
  tolerance => 0.001,
  tolType => "absolute",
);

##########################################################
##  Problem technique for allowing trig functions to utilize degree measure
Context("Numeric");


Context()->functions->remove("cos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub cos {Parser::Function->call('cos',@_)} 
#  Add the new functions to the Context
Context()->functions->add( cos => {class => 'NewFunc', TeX => '\cos'}, );


Context()->functions->remove("sin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub sin {Parser::Function->call('sin',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sin => {class => 'NewFunc', TeX => '\sin'}, );


Context()->functions->remove("tan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180)/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub tan {Parser::Function->call('tan',@_)}
#  Add the new functions to the Context
Context()->functions->add( tan => {class => 'NewFunc', TeX => '\tan'}, );



#  Remove the comment from below if you want calculator-computed answers. 
#  Context()->functions->disable("Trig");

BEGIN_TEXT
Two guy wires from the top of a $high-foot radio antenna are anchored to the ground by two large concrete posts.  The antenna is perpendicular to the ground and between the two posts.  If the angles of depression from the top of the antenna to each of the posts is  \($deg1^o\) and \($deg2^o\) respectively, then the distance between the two posts is \{ ans_rule(40) \} .

$PAR
(Compute your answers to at least three decimal places.)

END_TEXT

    ANS( $base->cmp() );

ENDDOCUMENT();        