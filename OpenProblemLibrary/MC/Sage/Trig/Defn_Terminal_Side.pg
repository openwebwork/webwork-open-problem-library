## BEGIN_DESCRIPTION
## Using the Sage single cell server, determine a range
## value by interpreting values from a contour plot.
## END_DESCRIPTION

## KEYWORDS('sage', 'sagelet', 'circle', 'trig','definition')

## DBsubject('Trigonometry')
## DBchapter('Trigonometric Functions of Real Numbers')
## DBsection('The Unit Circle')
## Date('January 2012')
## Author('John Travis')
## Institution('Mississippi College')
## TitleText1('Calculus')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"problemRandomize.pl",
"sage.pl",
);

TEXT(beginproblem());

ProblemRandomize(when=>"Correct",onlyAfterDue=>0);

$alpha = random(97,297,10);
$angle = $alpha*pi/180;
$s = sin($angle);
$c = cos($angle);
$t = tan($angle);
$showHint = 1;

####################################################
###  Sage Code below.
###
###  For the macro sage.pl, I would like for the div wrapper, etc to all be
###  hidden and the Sage code to just be shipped off inside [  ...  ]
###
###  Also, I'd like for the return values to be saved in some standard way'
### to a single list which WeBWorK can parse for values to use in checking.
#####################################################


$SageCode = <<SAGE_CODE;

var("t")

rad = $angle

N = 20
~~@interact(layout=dict(bottom=[['r']]))
def _( r=slider(6,N,1,6,label='\(r = \)')):
    Nx = N*cos(rad)
    Ny = N*sin(rad)
    x0 = (r*Nx/N)
    y0 = (r*Ny/N)
    R = range(1,N+1)
    G = Graphics()
    for k in R:
        G += circle((0,0),k,color="lightblue",alpha=0.5) 
        G += line([(k,-N),(k,N)],color="lightgreen",alpha=0.5)+line([(-k,-N),(-k,N)],color="lightgreen",alpha=0.5)
        G += line([(-N,k),(N,k)],color="lightgreen",alpha=0.5)+line([(-N,-k),(N,-k)],color="lightgreen",alpha=0.5)    
    G += line([(0,0),(Nx,Ny)])
    G += point((x0,y0),size=50,color="red") 

    if rad>0:
        G += parametric_plot(((t/6+1)*cos(t), (t/6+1)*sin(t)), (t, 0, rad), color="blue")  
    else:
        G += parametric_plot(((abs(t)/6+1)*cos(t), (abs(t)/6+1)*sin(t)), (t, rad, 0), color="blue")  

    show(G,aspect_ratio=True)

SAGE_CODE

Sage(
  SageCode=>$SageCode,
  ButtonText=>'Reload Interactive Graph',
  AnswerReturn => 0
);

###################################################

Context()->texStrings;
BEGIN_TEXT
$PAR
Using the interactive application above with the given value of \(\alpha\), estimate:
$BCENTER
\(\sin(\alpha) =\) \{ans_rule(15) \}
$BR
\(\cos(\alpha) =\) \{ ans_rule(15) \} 
$BR
\(\tan(\alpha) =\) \{ ans_rule(15) \} 
$ECENTER
END_TEXT
Context()->normalStrings;

#  need to add reasonable approximation error of about 0.1 or so.
ANS( Compute($s)->with(tolerance=>0.035)->cmp() );
ANS( Compute($c)->with(tolerance=>0.035)->cmp() );
ANS( Compute($t)->with(tolerance=>0.035)->cmp() );

Context()->texStrings;
BEGIN_HINT
$BR
Adjust the radius of the red dot so that you land very close to one of the grid lines.  Use that grid line as the appropriate x or y length and the corresponding radius as r.  You might need to use different r values to get a nice value for x or y.
$BR
To get tangent, you would really want a point with nice x AND y values.  It may just be easier to take 
\(\tan(\theta) = \sin(\theta) / \cos(\theta) \).

END_HINT

BEGIN_SOLUTION
$PAR
$BBOLD 
SOLUTION 
$EBOLD
$BR
Ultimately, the given angle happens to be \($alpha^o\).  So,
$BR
\( sin($alpha) = $s )\, 
\( cos($alpha) = $c )\ and 
\( tan($alpha) = $t )\
END_SOLUTION

ENDDOCUMENT();       
