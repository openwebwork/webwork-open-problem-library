## BEGIN_DESCRIPTION
## Using the Sage single cell server, determine the value of a vector
## in a vector field by using only a graph of the field
## END_DESCRIPTION

## KEYWORDS('sage', 'sagelet', 'vector', 'field')

## DBsubject('Calculus - multivariable')
## DBchapter('Calculus of Vector-Valued Functions')
## DBsection('Vector-Valued Functions')
## Date('January 2012')
## Author('John Travis')
## Institution('Mississippi College')
## TitleText1('Calculus')


DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGcourse.pl",
# "PGchoicemacros.pl",
"MathObjects.pl",
"problemRandomize.pl",
"sage.pl",
);

Context("Numeric");
Context()->variables->add(y=>'Real');

TEXT(beginproblem());

ProblemRandomize(when=>"Correct",onlyAfterDue=>0);

Context('Vector');

$x0 = non_zero_random(-3,3,0.5);
$y0 = non_zero_random(-3,3,0.5);

$b = random(1.1,1.4,0.03);
$c = random(3,9,1);
$M = Formula("$b*sin(x-$c)*cos(y+$c)");
$N = Formula("0.5*cos(x*y/(4*$c))");

#  to make all vectors appear longer or shorter based upon given M and N
$scale = 0.2;

#  $N = Formula("(x**2+$c*y**2)/($c*x**2+y**2+1)");  #  another option

$mx = $M->eval(x=>$x0,y=>$y0);
$my = $N->eval(x=>$x0,y=>$y0);

# $v_exact = Vector("<$mx,$my>");
# $v_exact = Vector("<$mx,$my>");

$ansList = List("($mx,$my)");

TEXT(MODES(TeX =>"",HTML=>EV3(<<'EOT')));

$BR
For the pictured vector field, determine
$BCENTER
\[ f($x0,$y0) = <\Delta{x},\Delta{y}> \] 
$ECENTER
$PAR
$BITALIC
When you have found a good estimate for \(f($x0,$y0)\), submit your answer.
$EITALIC
EOT

$SageCode = <<SAGE_CODE;
 
var('x,y,t,s')

#  These should be passed in from above and not explicitly re-entered.
M1=$M
N1=$N

num_vecs = 10      
~~@interact(layout=dict(top= [["x0","delx"],["y0","dely"]]))
def _(  x0 = input_box(0,width=5,label='\(x_0\)'),
    y0 = input_box(0,width=5,label='\(y_0\)'),
    delx = input_box(1,width=5,label='\(\Delta{x}\)'),
    dely = input_box(1,width=5,label='\(\Delta{y}\)')):

    xlow = x0-1
    xhigh = x0+1  
    xdiff = xhigh-xlow         
    ylow = y0-1
    yhigh = y0+1     
    ydiff = yhigh-ylow    

   
    G = arrow((x0,y0),(x0+$scale*delx,y0+$scale*dely),aspect_ratio=true)

#    G = plot_vector_field((M1,N1),(x,xlow,xhigh),(y,ylow,yhigh),plot_points=9,aspect_ratio=true)
#  Below the vector field is plotted explicitly so that vectors are the right length.
    for j in range(num_vecs):
        for k in range(1,num_vecs):
            x1 = xlow + xdiff*j/num_vecs
            y1 = ylow + ydiff*k/num_vecs 
            G += arrow((x1,y1),(x1+$scale*M1(x=x1,y=y1),y1+$scale*N1(x=x1,y=y1)),color='lightgray')
    show(G) 
    record_answer((delx,dely))

SAGE_CODE

Sage(
  SageCode=>$SageCode,
  ButtonText=>'Click Here to Evaluate/Reload',
);


Context()->normalStrings;

#  When using the Sage vector_field routine, the vector field is scaled automatically.
#  So any vector parallel to the actual vector is acceptable and that is reflected below.
#  With the vector field computed explicitly (as it now is above) the vectors are show with
#  the correct length.  If so, then the parallel vector checker should not be needed.

NAMED_ANS( sageAnswer => $ansList->cmp(
       tolerance => 0.09, 
       tolType => "absolute",
     )

   );

#sub parallel_vector_cmp {
#  my ($correct, $student, $ansHash) = @_;
#  return $correct->isParallel($student);
# }
#ANS( $v_exact->cmp( checker=>~~&parallel_vector_cmp, 
#               tolerance=>0.03,
#               tolType=>"relative",
#               showCoordinateHints => 0 ) );

Context()->texStrings;

BEGIN_HINT
$PAR
If the vector field at the point of interest tends to the left, make \(\Delta{x}\) negative.  If to the right, make \(\Delta{x}\) positive.  
$BR
Similarly, if the vector field at the point of interest tends to point up, make \(\Delta{y}\) positive.  If down, make \(\Delta{y}\) negative.
END_HINT

BEGIN_SOLUTION
$PAR
$BBOLD SOLUTION $EBOLD
$BR
For this problem, since vector fields are often displayed with scaled lengths, we accept any solution parallel to the actual vector formula vector.  So, we accept any vector parallel to the vector
\( <\Delta{x}, \Delta{y} > = <$mx, $my >\). 
END_SOLUTION
ENDDOCUMENT();        # This should be the last executable line in the problem.