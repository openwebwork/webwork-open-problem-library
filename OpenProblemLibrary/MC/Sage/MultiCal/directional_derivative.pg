## BEGIN_DESCRIPTION
## Using the Sage single cell server, determine information
## related to directional derivatives.
## END_DESCRIPTION

## KEYWORDS('sage', 'sagelet', 'directional derivative', 'multivariate')

## DBsubject('Calculus')
## DBchapter('Partial Derivatives')
## DBsection('Directional Derivatives')
## Date('January 2012')
## Author('John Travis')
## Institution('Mississippi College')
## TitleText1('Calculus')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"problemRandomize.pl",
);

TEXT(beginproblem());

Context("Numeric");
Context()->flags->set(
  tolerance=>0.05,
  tolType=>"absolute"
);

Context()->variables->add(y=>'Real');

ProblemRandomize(when=>"Correct",onlyAfterDue=>0);

$denom = 3;
$x = non_zero_random(-2,1,2);
$y = non_zero_random(-2,1,2);
$x0 = $x/$denom;
$y0 = $y/$denom;

$c = random(1.1,1.5,0.02);

$fin = "sin(x**2)*cos(y)+$c*y";
$funct = Compute($fin);

$fx = Compute($funct->D('x'));
$fy = Compute($funct->D('y'));

$a = $fx->eval(x=>$x0,y=>$y0);
$b = $fy->eval(x=>$x0,y=>$y0);

$angle_perp = arccos($a/sqrt($a**2+$b**2))+pi/2;

if ($angle_perp >pi) {
    $angle_perp = $angle_perp - pi;
} 

TEXT(MODES(TeX=>"", HTML=><<SAGE_CODE));

<div id="sagecell">
<script type="text/code">

var('x,y,t,z')
f(x,y)=$funct

pif = float(pi)

line_thickness=3
surface_color='blue'
plane_color='purple'
line_color='red'
tangent_color='green'
gradient_color='orange'

~~@interact(layout=dict(top=[["x0","y0"]], 
bottom=[["angle"],["show_surface"]]))
def myfun(x0 = input_box(0,width=5,label="\( x_0 \)"), y0=input_box(0,width=5,label="\( y_0 \)"),angle=slider(0,2*pif,label = "\( \\alpha \)"),show_surface=("Show surface", False)):
    location = [[x0,y0]]
    location3d = vector(location[0]+[0])
    location = location3d[0:2]
    direction3d = vector(RDF,[cos(angle),sin(angle),0])
    direction = direction3d[0:2]
    cos_angle = math.cos(angle)
    sin_angle = math.sin(angle)
    df = f.gradient()
    direction_vector=line3d([location3d,location3d+direction3d],arrow_head=True,rgbcolor=line_color,thickness=line_thickness)
    curve_point = (location+t*direction).list()
    curve = parametric_plot(curve_point+[f(*curve_point)],(t,-3,3),color=line_color,thickness=line_thickness)
    plane = parametric_plot((cos_angle*x+location[0],sin_angle*x+location[1],t),(x, -3,3),(t,-3,3),opacity=0.8, color=plane_color)
    pt = point3d(location3d.list(),color='green', size=10)

    tangent_line = parametric_plot((location[0]+t*cos_angle,location[1]+t*sin_angle,f(*location)+t*df(*location)*(direction)),(t, -3,3),thickness=line_thickness,color=tangent_color)
    picture3d = direction_vector+curve+plane+pt+tangent_line

    picture2d = contour_plot(f(x,y),(x,-3,3),(y,-3,3),contours=20,plot_points=100)
    picture2d += arrow(location.list(),(location+direction).list()) 
    picture2d += point(location.list(),rgbcolor='green',pointsize=40)
    if show_surface:
        picture3d += plot3d(f, (x,-3,3),(y,-3,3),opacity=0.7)
        
    dff = df(location[0],location[1])
    dff3d = vector(RDF,dff.list()+[0])
    picture3d += line3d([location3d,location3d+dff3d],arrow_head=True,rgbcolor=gradient_color,thickness=line_thickness)
    picture2d += arrow(location.list(),(location+dff).list(),rgbcolor=gradient_color,width=line_thickness)
    show(picture2d, aspect_ratio=1)
    if show_surface:
        show(picture3d,aspect=[1,1,1],axes=True)

</script>
</div>

SAGE_CODE

TEXT(MODES(TeX=>"", HTML=><<'SAGE_SCRIPT'));

<script src="http://aleph.sagemath.org/static/jquery.min.js"></script>
<script src="http://aleph.sagemath.org/embedded_sagecell.js"></script>

<script>
$(function () {
   sagecell.makeSagecell({inputLocation:  '#sagecell',
                          template:       sagecell.templates.minimal,
                          autoeval:        true, 
                          evalButtonText: 'Start/Restart'});
});
</script>


SAGE_SCRIPT

TEXT(MODES(TeX =>"",HTML=>EV3(<<'EOT')));

$PAR
 
A contour plot for \( z = f(x,y) \) is illustrated with normal vector in orange.  Using the interactive controls, determine the smallest positive angle for which the directional derivative is zero at the point 
\({($x/$denom,$y/$denom)}\).
$BR
$BCENTER
\( \alpha = \) \{ ans_rule(15) \}
$ECENTER

EOT

Context()->normalStrings;

#  Need to adjust the numerical tolerance for this one.

ANS( Compute($angle_perp)->cmp() );

#ANS(Compute($angle_perp)->cmp->withPostFilter(sub { 
#  my $ans = shift; 
#  if abs($ans-$angle_perp)<0.1->{ans_message} eq 
#  "You are close!"; return $ans; 
#}));

BEGIN_HINT
A directional derivative will have a value of zero provided the tangent line to the surface along that direction is horizontal.  Since the gradient always points in the direction of maximum increase and its negative always points in the direction of maximum decrease, the desired horizontal direction will be orthogonal to the normal vector.  This vector will also be tangent to the level curve at the point of interest. 
$PAR
Therefore, finding the complement to the angle of the gradient vector will do the trick.
END_HINT

BEGIN_SOLUTION
$PAR
$BBOLD SOLUTION:  $EBOLD
$BR
The smallest positive angle which makes the gradient vector orthogonal to the tangent vector is in the direction \( \alpha = $angle_perp \)
END_SOLUTION

ENDDOCUMENT();        # This should be the last executable line in the problem.
