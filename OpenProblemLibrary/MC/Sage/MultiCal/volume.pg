## BEGIN_DESCRIPTION
## Using the Sage single cell server, determine the volume of a region
## where the student must only determine the correct order and limits of integration
## END_DESCRIPTION


## DBsubject(Calculus - multivariable)
## DBchapter(Integration of multivariable functions)
## DBsection(Applications of triple integrals)
## Date(January 2012)
## Institution(Mississippi College)
## Author(John Travis)
## Level(4)
## MO(1)
## TitleText1('Calculus')
## AuthorText1('')
## EditionText1('')
## Section1('.')
## Problem1('')
## KEYWORDS('sage', 'sagelet', 'integration', 'multiple')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"problemRandomize.pl",
"sage.pl"
);

Context()->strings->add(none=>{});
Context()->variables->add(y=>"Real",z=>"Real");

TEXT(beginproblem());

ProblemRandomize(when=>"Correct",onlyAfterDue=>0);

#  Requirements:  a>0, b<0, c>1
$a = random(2,4,1);
$b = random(-4,-1,1);
$c = random(1,5,1);

@VARS = ('x','y','z');
@V = @VARS[ NchooseK(3, 3) ];

# Using the following boundaries
$invar = $V[0];
$inleft = Compute("-$V[2]");
$inright = Compute("$V[2]+$V[1]+$c");

$midvar = $V[1];
$midleft = Compute("$b");
$midright = Compute("$V[2]**2");

$outvar = $V[2];
$outleft = Compute("0");
$outright = Compute("$a");

$volume = (3*$a**4 + 15*$a**3 + 10*$a**2*$c - 30*$a*$b - 15*$b**2 - 30*$b*$c)*$a/30;

$showHint = 3;

$SageCode = <<SAGE_CODE;
 
# Sage Python Code
def dlist(vs):
    vs = vs.split()
    return [" ".join("d%s" % v for v in a) for a in Arrangements(vs, len(vs))]

var('x,y,z')

~~@interact(layout={
"top": [
["top0", "top1", "top2","spacer"],
["int0", "int1", "int2", "dV", ],
["bot0", "bot1", "bot2","auto_update"],
],
"bottom": [
["plot_axes", "plot_origin", "opacity"],
],
})

##  The nicely formatted interact was taken from a talk at SAGE EDU 5

def _(
      top0=input_box(label="", default=3, type=str, width=4),
      int0=text_control(r"""\( \color{red}{\int} \)"""),
      bot0=input_box(label="", default=1, type=str,  width=4),
      top1=input_box(label="", default=3,  type=str, width=8),
      int1=text_control(r"""\( \color{green}{\int} \)"""),
      bot1=input_box(label="", default=1, type=str,  width=8),
      top2=input_box(label="", default=3,  type=str, width=12),
      int2=text_control(r"""\( \color{blue}{\int} \)"""),
      bot2=input_box(label="", default=1, type=str,  width=12),
      spacer=text_control("  "),
      dV=selector(flatten(map(dlist, ["x y z", "r theta z", "rho theta phi"])), label="", default="dz dy dx"),
      opacity=slider(range(101), label="Opacity:", default=75),
      plot_axes=checkbox(label=" Axes:", default=True),
      plot_origin=checkbox(label=" Origin:", default=True),
      auto_update=False
      ): 
    f = 1+0*x
    opacity /= 100
    vs = [d[1:] for d in dV.split()]
    vs.reverse()
    V = map(SR, vs)
    v0, v1, v2 = (SR.var(v) for v in vs)
    # While ln = log, symbolically they are treated differently
    limits = [eval("[v%d, SR(str(bot%d).replace('ln', 'log')), SR(str(top%d).replace('ln', 'log'))]" % (i, i, i)) for i in range(3)]
    f = SR(str(f).replace('ln', 'log'))
    compute = true;
    if compute:        
        integrals = []
        differentials = []
        for v, a, b in limits:
            integrals.append(r"\int_{%s}^{%s} " % (latex(a), latex(b)))
            differentials.insert(0, r"\, d %s" % latex(v))
            try:
                assume(a < v)
                assume(v < b)
            except ValueError:
                pass   
        expression = [r"\("]
        integrand = f
        try:
            for i in [3, 2, 1]:
                expression.extend(integrals[:i])
                expression.append(latex(integrand))
                expression.extend(differentials[-i:])
                expression.append("=")
                v, a, b = limits[i - 1]
                try:
                    integrand = integral(integrand, v, a, b)
                except:
                    integrand = integral(integrand, v)
                    integrand = (integrand.subs({v: b}) - integrand.subs({v: a})).simplify_full()
            # Don't add these at once in case of exceptions from n().
            expression.extend([latex(integrand), r"\approx"])
            expression.append(latex(integrand.n()))
        except:
            expression.append(r"\dots ?")
        forget()
        expression.append(r"\)")
        html("<p><h3>The integral is as follows:</h3>")
        html(" ".join(expression))
        html("<br/></p>")
            
    if "x" in vs:
        def to_xyz(*V):
            return [V[vs.index(v)] for v in "xyz"]
    elif "r" in vs:
        def to_xyz(*V):
            r, theta, z = [V[vs.index(v)] for v in ["r", "theta", "z"]]
            return [r*cos(theta), r*sin(theta), z]
    else:
        def to_xyz(*V):
            rho, phi, theta = [V[vs.index(v)] for v in ["rho", "phi", "theta"]]
            return [rho*sin(phi)*cos(theta), rho*sin(phi)*sin(theta), rho*cos(phi)]
                                
    try:
        u = SR.var("u")
        v = SR.var("v")
        p = Graphics()
        
        V1 = (1-u) * limits[1][1] + u * limits[1][2]
        for i in [1,2]:        
            V2 = limits[2][i].subs({v0: v0, v1: V1})
            p += parametric_plot3d(to_xyz(v0, V1, V2), limits[0], (u, 0, 1), opacity=opacity, color="blue")
        for i in [1,2]:
            V1 = limits[1][i]
            V2 = (1-u) * limits[2][1].subs({v1: V1}) + u * limits[2][2].subs({v1: V1})
            p += parametric_plot3d(to_xyz(v0, V1, V2), limits[0], (u, 0, 1), opacity=opacity, color="green", boundary_style={"color": "green", "thickness": 5})
        for i in [1,2]:
            V0 = limits[0][i]
            V1 = (1-u) * limits[1][1].subs({v0: V0}) + u * limits[1][2].subs({v0: V0})
            V2 = (1-v) * limits[2][1].subs({v0: V0, v1: V1}) + v * limits[2][2].subs({v0: V0, v1: V1})
            p += parametric_plot3d(to_xyz(V0, V1, V2), (u, 0, 1), (v, 0, 1), opacity=opacity, color="red", boundary_style={"color": "red", "thickness": 10})
                            
        if plot_origin:
            p += point3d((0, 0, 0), size=25, color="yellow")
        if plot_axes:
            bb = p.bounding_box()
            for i, v in enumerate("XYZ"):
                start = min(bb[0][i], 0)
                end = max(bb[1][i], 0)
                length = end - start
                p += line([[0]*i+[start-0.08*length]+[0]*(2-i), [0]*i+[end+0.08*length]+[0]*(2-i)], thickness=3, color="brown")
                p += text3d(v, [0]*i+[end+0.1*length]+[0]*(2-i))        
        p.show(frame=False, aspect_ratio=1)
    except ValueError:
        html(r"""<span style="color:red">Cannot draw the plot, is the integral valid?..</span>""")

    record_answer((integrand))

SAGE_CODE

Sage(
  SageCode=>$SageCode,
  ButtonText=>'Restart the Interactive Cell',
  AnswerReturn => 1,
);


TEXT(MODES(TeX =>"",HTML=>EV3(<<'EOT')));

$PAR
Using the interactive tool above, determine the order of integration and endpoints that give the volume of the region bounded by:
$BR
$BCENTER
\( $midvar \) between \( $midleft \) and \( $midright \)
$BR
\(  $outvar \) between \( $outleft \) and \( $outright \)
$BR
\( $invar \) between \( $inright \) and \( $inleft \).
$ECENTER
$PAR
When you think you have things set up correctly, go ahead and click below to check your work.
EOT

Context()->normalStrings;

NAMED_ANS( sageAnswer => List($volume)->cmp ); 

BEGIN_HINT
$BR
For the given boundary equations, choose 
\[dV = d$invar d$midvar d$outvar \]
Plug in the given limits of integration correspondingly.
$PAR

END_HINT

BEGIN_SOLUTION
$PAR
$BBOLD SOLUTION $EBOLD
$BR
For the given boundary equations, choose 
\[dV = d$invar d$midvar d$outvar \]
and limits of integration
\[$inleft \le $invar \le $inright \]
\[$midleft \le $midvar \le $midright \]
\[$outleft \le $outvar \le $outright \]
yields
\[\int_{$outleft}^{$outright} \int_{$midleft}^{$midright} \int_{$inright}^{$inright} d$invar d$midvar d$outvar \]

END_SOLUTION

ENDDOCUMENT();        # This should be the last executable line in the problem.
