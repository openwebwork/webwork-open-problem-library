## BEGIN_DESCRIPTION
## Template for calling Sage from within a WebWork pg file
## END_DESCRIPTION

## KEYWORDS('sage', 'sagelet', 'derivative', 'critical values')

## DBsubject(' ')
## DBchapter(' ')
## DBsection(' ')
## Date('January 2012')
## Author('John Travis')
## Institution('Mississippi College')
## TitleText1(' ')
## EditionText1(' ')
## AuthorText1(' ')
## Section1(' ')
## Problem1(' ')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
);

TEXT(beginproblem());

# Regular WebWork setup

$a=random(5,8,1);
$b=random(7,13,2);

Context()->variables->are(x=>'Real',y=>'Real');

$fin = "((1/3)*x^3-$a*x)*($b*y-y^2)";
$funct  = Compute($fin);
$funct_diffx = $funct->D('x');
$funct_diffy = $funct->D('y');

Context()->flags->set(tolerance=>.06);

$pt1 = Point( (sqrt($a),$b/2) );
$pt2 = Point( (-sqrt($a),$b/2) );
$pt3 = Point( (0,0) );
$pt4 = Point( (sqrt(3*$a),0) );
$pt5 = Point( (-sqrt(3*$a),0) );
$pt6 = Point( (0,$b) );
$pt7 = Point( (sqrt(3*$a),$b) );
$pt8 = Point( (-sqrt(3*$a),$b) );

$solns =List( $pt1, $pt2, $pt3, $pt4, $pt5, $pt6, $pt7, $pt8 );

# Below is a placeholder for the future return value from the sagelet.  Making certain context is right.
$fpx = $funct_diffx - $funct_diffx;
$fpy = $funct_diffy - $funct_diffy;

TEXT(MODES(TeX=>"", HTML=><<SAGE_CODE));

<div id="sagecell1"><script type="text/x-sage">

# Example Sage Python

x = var("x",domain=QQ)
y = var("y",domain=QQ)

print "This cell helps take the derivative of z = f(x,y)"
html("Consider \( f(x,y) = %s \)"%str(latex($fin)) )
~~@interact
def _(f = input_box(x^2-y^2,label='\(f(x,y) = \)')):
    dfx = diff(f,x,1)
    dfy = diff(f,y,1)
    html("\[ f_x (x,y) = %s \]"%str(latex(dfx)) )
    html("\[ f_y (x,y) = %s \]"%str(latex(dfy)) )

</script></div>

<div id="sagecell2"><script type="text/x-sage">

var('x,y')
print "This cell helps with solving."
~~@interact
def _(fx = input_box(x-y,label='\(0 = f_x(x,y) =\)'),fy = input_box(x-y,label='\(0 = f_y(x,y) =\)')):
    fx_factored = fx.factor()
    fy_factored = fy.factor()
    html("\[ f_x (x,y) = %s \]"%str(latex(fx_factored)) )
    html("\[ f_y (x,y) = %s \]"%str(latex(fy_factored)) )
    soln_fx = solve([fx_factored],x,y)
    soln_fy = solve(fy_factored,x,y)
    html('\(f_x = 0\)')
    for soln in soln_fx:
        print soln
    html('\(f_y = 0\)')
    for soln in soln_fy:
        print soln
</script></div>

SAGE_CODE

TEXT(MODES(TeX=>"", HTML=><<'SAGE_SCRIPT'));

<script src="http://aleph.sagemath.org/static/jquery.min.js"></script>
<script src="http://aleph.sagemath.org/embedded_sagecell.js"></script>

<script type="text/javascript" >

$(function () {
   sagecell.makeSagecell({inputLocation:  '#sagecell1',
                          template:       sagecell.templates.minimal,
                          autoeval:        true, 
                          evalButtonText: 'Restart first cell'});
   sagecell.makeSagecell({inputLocation:  '#sagecell2',
                          template:       sagecell.templates.minimal,
                          autoeval:        true, 
                          evalButtonText: 'Start/Restart second cell'});

});

</script>


SAGE_SCRIPT


# Continue pg file as normal

BEGIN_TEXT
$PAR
Determine all critical values for \[ f(x,y) = $fin \]
The interactive cell above can be used to help with your calculations.
$PAR
All eight critical points in any order:
$BR
\{ ans_rule(60) \}

END_TEXT

Context()->normalStrings;

Context("Numeric");

$showHint = 4;
$showPartialCorrectAnswers = 1;

ANS( $solns->cmp() );

ENDDOCUMENT();       