## BEGIN_DESCRIPTION
## Using the Sage single cell server, determine extreme values when only
## given a contour map and 3d image of the surface.
## END_DESCRIPTION

## KEYWORDS('sage', 'sagelet', 'extrema', 'multivariate','extreme')

## DBsubject('Calculus - multivariable')
## DBchapter('Differentiation')
## DBsection('Optimization in Several Variables')
## Date('January 2012')
## Author('John Travis')
## Institution('Mississippi College')
## TitleText1('Calculus')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"AnswerFormatHelp.pl",
"contextLimitedPoint.pl",
"problemRandomize.pl",
"sage.pl",
);

TEXT(beginproblem());

Context()->variables->add(y=>'Real');

ProblemRandomize(when=>"Correct",onlyAfterDue=>0);

$denom = 3;
$x = non_zero_random(-2,1,2);
$y = non_zero_random(-2,1,2);
$x0 = $x/$denom;
$y0 = $y/$denom;

$c1 = random(0.3,0.5,0.02);
$c2 = random(0.3,0.5,0.02);

$fin = "0.5*(0.4-(x-0.1)*(y+0.1)*e^((-$c1*(x-0.1)**2-$c2*(y+0.1)**2)/2))";
$funct = Compute($fin);

Context("LimitedPoint");

# These are the exact solutions.  The first is a saddle.

$c11 = 1/10*($c1 + 10*sqrt($c1))/$c1;
$c12 = 1/10*($c1 - 10*sqrt($c1))/$c1;
$c21 =-1/10*($c2 + 10*sqrt($c2))/$c2;
$c22 =-1/10*($c2 - 10*sqrt($c2))/$c2;
$pt1 = Point( (1/10,-1/10) );
$pt2 = Point( ($c12, $c22) );
$pt3 = Point( ($c11, $c22) );
$pt4 = Point( ($c12, $c21) );
$pt5 = Point( ($c11, $c21) );

Context()->flags->set(tolerance=>.06);

$maxs =List( $pt2, $pt5 );
$mins = List( $pt3, $pt4 );
$saddles = List( $pt1 );


Context()->texStrings;

TEXT(MODES(TeX =>"",HTML=>EV3(<<'EOT')));

$PAR
A contour plot for \( z = f(x,y) \) is illustrated.  
$PAR
Using the graph, determine the location of all extreme and saddle points.  
$PAR
$BITALIC
Enter various values for \(x\) and \(y\) to move the red dot to test your estimates.  You can view your estimate on the 3D surface by checking the 3D box.
$EITALIC
$PAR
$BCENTER
Maxima:          \{ ans_rule(40) \}
$BR
Minima:           \{ ans_rule(40) \}
$BR
Saddle Points:  \{ ans_rule(40) \}
$ECENTER
EOT

Context()->texStrings;


$SageCode = <<SAGE_CODE;

var('x,y,t,z')

f(x,y)=$fin

r = 3.7   # for a nice plot range
r0 = 0.5    # for a zoomed in plot


~~@interact(layout={'top': [['x0','y0']], 'bottom': [['threeD','nojavagraph','zoomin']] })

def _(x0 =input_box(0,width=5,label="\( x = \)"), 
    y0=input_box(0,width=5,label="\( y = \)"),
    threeD=checkbox(false,label="Show 3D surface?"), 
    nojavagraph=checkbox(default=false,label='Problems with 3D Graph?'),
    zoomin=checkbox(false)):
    
    if nojavagraph:
        view_method = "tachyon"
    else:
        view_method = "jmol"

    if zoomin:
        xlow = x0-r0
        xhigh = x0+r0
        ylow = y0-r0
        yhigh = y0+r0
    else:
        xlow = -r
        xhigh = r
        ylow = -r
        yhigh = r
        
    picture2d = density_plot(f(x,y),(x,xlow,xhigh),(y,ylow,yhigh),plot_points=50,cmap='Blues') 
    picture2d += contour_plot(f(x,y),(x,xlow,xhigh),(y,ylow,yhigh),contours=100,plot_points=50,cmap='YlGnBu',fill=false) 

    picture2d += point((x0,y0),size=50,zorder=2,color="red") 

#  These are the exact critical points.  The student should determine these by looking at the pictures
#  They can be determined on the fly via:
#    fx = diff(f(x,y),x)
#    fy = diff(f(x,y),y)
#    solns = solve([fx,fy],x,y,solution_dict=True)
#  It would be nice if we could get this Sagelet to solve for these points and then
#  send them back out to the pg code.    
# These are the exact solutions.  The first is a saddle.
    pt1 = (1/10, -1/10);
    pt2 = (1/10*($c1 - 10*sqrt($c1))/$c1, -1/10*($c2 + 10*sqrt($c2))/$c2);
    pt3 = (1/10*($c1 + 10*sqrt($c1))/$c1, -1/10*($c2 + 10*sqrt($c2))/$c2);
    pt4 = (1/10*($c1 - 10*sqrt($c1))/$c1, -1/10*($c2 - 10*sqrt($c2))/$c2);
    pt5 = (1/10*($c1 + 10*sqrt($c1))/$c1, -1/10*($c2 - 10*sqrt($c2))/$c2);    

    if threeD:
        picture3d = plot3d(f, (x,-r,r),(y,-r,r),opacity=0.5)
        picture3d += point3d((x0,y0,f(x0,y0)),size=20,color="red")        
        picture3d.show(frame=False,viewer=view_method)
    else:
#  These are the exact solutions...can print them out for students if desired
#        picture2d += point(pt1,size=10,zorder=2,color="green") 
#        picture2d += point(pt2,size=10,zorder=2,color="green") 
#        picture2d += point(pt3,size=10,zorder=2,color="green") 
#        picture2d += point(pt4,size=10,zorder=2,color="green") 
#        picture2d += point(pt5,size=10,zorder=2,color="green") 
        picture2d.show(aspect_ratio=1)

SAGE_CODE

Sage(
  SageCode=>$SageCode,
  ButtonText=>'Restart the Interactive Cell',
  AnswerReturn => 0,
);


Context("Numeric");

$showHint = 4;
$showPartialCorrectAnswers = 1;

ANS( $maxs->cmp() );
ANS( $mins->cmp() );
ANS( $saddles->cmp() );


BEGIN_HINT
$PAR
To determine minimums, move the red dot very near the middle of one of the lightest regions.
$BR
To determine maximums, move the red dot to the darkest regions.
$BR
Saddle points occur where the contour plot rises on two opposing sides and decreases on the other two opposing sides.
$PAR
Numerically, consider using \(x = $c11\) somewhere and perhaps \(y = $c22\)
END_HINT

BEGIN_SOLUTION
$PAR
$BBOLD
SOLUTION:
$EBOLD
$PAR
Maxima are located at $maxs
$BR
Minima are located at $mins
$BR
A saddle is located at $saddles
END_SOLUTION

ENDDOCUMENT();        # This should be the last executable line in the problem.