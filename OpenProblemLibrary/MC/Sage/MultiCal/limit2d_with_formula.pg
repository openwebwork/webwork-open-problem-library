## BEGIN_DESCRIPTION
## Using the Sage single cell server, determine an estimate for the limit 
## of f(x,y) by looking at pieces of the surface with decreasing radial distance 
## If the piece does not converge to a point, there is no limit.  Otherwise, the
## student will estimate the z-value by adjusting viewing angle till the value can
## be read off from the z-axis.
## END_DESCRIPTION

## KEYWORDS('sage', 'sagelet', 'limits', 'multivariate')

## DBsubject('Calculus - multivariable')
## DBchapter('Differentiation')
## DBsection('Limits and Continuity in Several Variables')
## Date('January 2012')
## Author('John Travis')
## Institution('Mississippi College')
## TitleText1('Calculus')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"PGunion.pl",
"problemRandomize.pl",
);

TEXT(beginproblem());

Context("Numeric")->variables->add(y=>"Real",term=>"Real",t=>"Real",r=>"Real");

ProblemRandomize(when=>"Correct",onlyAfterDue=>0);

$pow = random(2,8,2);
$powp1 = $pow + 1;
$b = random(2,5,0.5);
$bpow = $b*$pow;
$c1 = random(2,8,2);
$c2 = random(3,9,2);
$c3 = $c2/$c1;
$d = $c2*pi;

#  Would be nice if these formulas were in some random order 
#  and perhaps (say) only four of the six used. 
#  The sagelet cannot handle transcendental functions passed using the Formula mathobject
#  Therefore, any formula using one of these will need two defn.

$f1 = Formula("$pow*(x**$powp1 - y**$powp1)/(x**$pow + y**$pow)");
$f2 = Formula("(x**$pow - $powp1*y**$pow)/(x**$pow + y**$pow)");
$f3 = Formula("$bpow*(x**$pow - y**$pow)/($c1*x**$pow + $c1*y**$pow)");
$f4 = Formula("$c1*sin(x*y)/(x + y)**2");
$f4a = "$c1*sin(x*y)/(x + y)**2";
$f5 = Formula("sin($b*(x**2+y**2+$c2*pi))/(x**2+y**2)");
$f5a = "sin($b*(x**2+y**2+$c2*pi))/(x**2+y**2)";
$f6 = Formula("(x**$pow + y**$pow + $c2)/(x**$pow + y**$pow + $c1)");

$p1 = Point((0,0));
$p2 = Point((0,0));
$p3 = Point((1,0));
$p4 = Point((0,0));
$p5 = Point((0,0));
$p6 = Point((0,0));

$ans1 = Compute(0);
$ans2 = Compute("NONE");
$ans3 = Compute("$bpow/$c1");
$ans4 = Compute("NONE");
$ans5 = Compute("-$b");
$ans6 = Compute("$c3");

$sol1 = Formula("r*$pow*(cos(t)**$powp1 - sin(t)**$powp1)/(cos(t)**$pow + sin(t)**$pow)");
$sol2 = Formula("(cos(t)**$pow - $powp1*sin(t)**$pow)/(cos(t)**$pow + sin(t)**$pow)");

####################################################

TEXT(MODES(TeX=>"", HTML=><<SAGE_CODE));
<div id="sagecell"><script type="text/code">

#  Starting point for radius values before collapsing in as R approaches 0.
#  Functions ought to be "reasonable" within a circular domain of radius R surrounding 
#  the desired (x_0,y_0).
var("x,y,z")
Rmin=1/10
Rmax=2

~~@interact(layout=dict(top=[["f"],["x0"],["y0"]], 
right=[["in_3d"],["curves"],["nojavagraph"]],
bottom=[["R"]]))
def _(f=selector([$f1,$f2,$f3,$f4a,$f5a,$f6],label=" f(x,y)= "),
    R=slider(Rmin,Rmax,1/10,Rmax,label='\(R\)'),
    x0=input_box(0,width=10,label='\(x_0=\)'),
    y0=input_box(0,width=10,label='\(y_0=\)'),
    curves=checkbox(default=false,label='Show curves'),
    in_3d=checkbox(default=false,label='3D'),
    nojavagraph=checkbox(default=false,label='Problems with 3D Graph?')):
    
    if nojavagraph:
        view_method = "tachyon"
    else:
        view_method = "jmol"

#  convert to polar coordinates
    g(r,t) = f(x=r*cos(t)+x0,y=r*sin(t)+y0)
#   Sage graphing transformation used to see the original surface.
    cylinder = (r*cos(t)+x0,r*sin(t)+y0,z)
    surface = plot3d(g,(t,0,2*pi),(r,1/100,Rmax),transformation=cylinder,opacity=0.7)
#   Regraph the surface for smaller and smaller radii controlled by the slider.
    collapsing_surface = plot3d(g,(t,0,2*pi),(r,1/100,R),transformation=cylinder,rgbcolor=(0,1,0))
    
    G = surface+collapsing_surface
    html("Enter the given limit point \({(x_0,y_0} )\)")
    html("Move the slider to see what happens as \( {R \\rightarrow 0} \)")
    html("The surface has a limit as \((x,y)\\rightarrow\) ("+str(x0)+","+str(y0)+") if the green region collapses to a point.")

#   If checked, add a couple of curves on the surface corresponding to limit as x->x0 for y=x^(3/5),
#   and as y->y0 for x=y^(3/5).  Should make this more robust but perhaps using 
#   these relatively obtuse curves could eliminate problems.
    
    if curves:
        curve_x = parametric_plot3d([x0-t,y0-t^(3/5),f(x=x0-t,y=y0-t^(3/5))],(t,Rmin,Rmax),color='red',thickness=10)
        curve_y = parametric_plot3d([x0+t^(3/5),y0+t,f(x=x0+t^(3/5),y=y0+t)],(t,Rmin,Rmax),color='red',thickness=10)
        R2 = Rmin/4
        G += arrow((x0-Rmin,y0-Rmin^(3/5),f(x=x0-Rmin,y=y0-Rmin^(3/5))),(x0-R2,y0-R2^(3/5),f(x=x0-R2,y=y0-R2^(3/5))),size=30 )
        G += arrow((x0+Rmin^(3/5),y0+Rmin,f(x=x0+Rmin^(3/5),y=y0+Rmin)),(x0+R2^(3/5),y0+R2,f(x=x0+R2^(3/5),y=y0+R2)),size=30 )  

        limit_x = limit(f(x=x0-t,y=y0-t^(3/5)),t=0)
        limit_y = limit(f(x=x0+t^(3/5),y=y0+t),t=0)
        text_x = text3d(limit_x,(x0,y0,limit_x))
        text_y = text3d(limit_y,(x0,y0,limit_y))
        G += curve_x+curve_y+text_x+text_y 
  
        html('The red curves represent a couple of trajectories on the surface.  If they do not meet, then')
        html('there is also no limit.  (If computer hangs up, likely the computer can not do these limits.)')
        html('\n<center><font color="red">\(\lim_{(x,?)\\rightarrow(x_0,y_0)} f(x,y) =%s\)</font>'%str(limit_x)+'  and <font color="red">\(\lim_{(?,y)\\rightarrow(x_0,y_0)} f(x,y) =%s\)</font></center>'%str(limit_y))
        
    if in_3d:
        show(G,stereo="redcyan",viewer=view_method)
    else:
        show(G,perspective_depth=true,viewer=view_method)
</script></div>

SAGE_CODE

TEXT(MODES(TeX=>"", HTML=><<'SAGE_SCRIPT'));

<script src="http://aleph.sagemath.org/static/jquery.min.js"></script>
<script src="http://aleph.sagemath.org/embedded_sagecell.js"></script>

<script>
$(function () {
   sagecell.makeSagecell({inputLocation:  '#sagecell',
                          template:       sagecell.templates.minimal,
                          autoeval:        true, 
                          evalButtonText: 'Start/Restart'});
});
</script>


SAGE_SCRIPT

TEXT(beginproblem());

TEXT(MODES(TeX =>"",HTML=>EV3(<<'EOT')));

$PAR
This problem allows the student to see the actual formula for the function. Another version that does not give explicit formulas is available and probably is a better way to make the student consider concepts only.
$PAR
Determining 
\[ \lim_{(x,y)\rightarrow(x_0,y_0)} f(x,y) \] 
by definition can often be very difficult.  The interactive worksheet above allows the user to visualize this problem using a polar coordinates approach.  Such an approach allows one to squeeze the domain values \((x,y)\) about the point of interest \((x_0,y_0)\).  If the range values on the surface are then subsequently squeezed to a point, the function has a limit of this common value.  If not, then no limit will exist.
$PAR
Determine an appropriate value for each limit or (if no limit exists) enter NONE.  (For these problems, presume any points not in the domain of the given function are not of interest.)
$PAR
\{ 
BeginTable(border=>0,padding=>0,spacing=>0) .
row( "\[ \lim_{(x,y)\rightarrow $p1} $f1 = \]", ans_rule(10) ).
row( "\[ \lim_{(x,y)\rightarrow $p2} $f2 = \]", ans_rule(10) ).
row( "\[ \lim_{(x,y)\rightarrow $p3} $f3 = \]", ans_rule(10) ).
row( "\[ \lim_{(x,y)\rightarrow $p4} $f4 = \]", ans_rule(10) ).
row( "\[ \lim_{(x,y)\rightarrow $p5} $f5 = \]", ans_rule(10) ).
row( "\[ \lim_{(x,y)\rightarrow $p6} $f6 = \]", ans_rule(10) ).
EndTable() 
\}
$PAR

$BR
EOT

## Need to allow lower case NONE answers.  
## Also, need to make these even more interesting and perhaps a different
## limit point in x and y.

ANS(Compute($ans1)->cmp());
ANS(Compute($ans2)->cmp());
ANS(Compute($ans3)->cmp());
ANS(Compute($ans4)->cmp());
ANS(Compute($ans5)->cmp());
ANS(Compute($ans6)->cmp());

BEGIN_HINT
$PAR
A limit will exist provided the surface about the limit point 
\( (x_0,y_0) \) reduces to a single point as the radius \{ R \} approaches 0. If the surface does not reduce to a single point, then the limit does not exist.
$PAR
Also, limits along particular paths in space may exist around \( (x_0,y_0) \) but all of these have to agree for the multivariate limit to exist.  One can't possibly check all of the possible paths but if limits do not agree for some two paths approaching \( (x_0,y_0) \) , then there is no limit.  To see a couple interesting paths, click on "Show curves".
END_HINT

BEGIN_SOLUTION
$PAR
$BBOLD Partial Solution $EBOLD
$BR
For \[$f1\], do the polar substitution:
$BR
\[ x = r*cos(t) \]
\[ y = r*sin(t) \]
$BR
and simplify to get
\[ $sol1 \]
$BR
So long as the term with trig functions is not unbounded as t approaches 0, then the \( r \rightarrow 0 \) forces the limit to be zero.
$PAR
For the second limit, notice polar substitution now gives:
\[ $sol2 \]
and there is no \(r\) left to make the term get small.  Since different values
of the angle \(t\) can make this expression change, then there is no single value 
to approach and therefore there is no limit. 
$PAR
The other problems are worked similarly.  Results:
$PAR
\( L_1 = $ans1 \)
$BR
\( L_2 = $ans2 \)
$BR
\( L_3 = $ans3 \)
$BR
\( L_4 = $ans4 \)
$BR
\( L_5 = $ans5 \)
$BR
\( L_6 = $ans6 \)


END_SOLUTION

ENDDOCUMENT();        # This should be the last executable line in the problem.
