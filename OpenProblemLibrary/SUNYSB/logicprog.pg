## DESCRIPTION
## Discrete Mathematics
## ENDDESCRIPTION

## Tagged by cmd6a 8/6/06

## DBsubject(Set theory and logic)
## DBchapter(Propositional logic)
## DBsection(Operations on propositions)
## Institution(SUNYSB)
## Level(2)
## KEYWORDS('discrete mathematics','logic','literal')

DOCUMENT();        # This should be the first executable line in the problem.
loadMacros('PG.pl',
        'PGbasicmacros.pl',
        'PGchoicemacros.pl',
        'PGanswermacros.pl',
        'PGgraphmacros.pl'
        );


TEXT(beginproblem()); # standard preamble to each problem.
# Since this is a true questions, we do not usually wish to tell students which
# parts of the matching question have been answered correctly and which are
# incorrect.  That is too easy.  To accomplish this we set the following flag to zero.
$showPartialCorrectAnswers = 0;

# Make a new select list
$lit = new_select_list();
# $lit now "contains" the select list object.  

# Insert some  questions and whether or not they are true.
$lit -> qa (
"p", "T",
"\( \neg p \)", "T",
"\(p \wedge q \)", "F",
"\( p \vee q  \)", "F",
);

# Choose two of the question and answer pairs at random (4).
$lit ->choose(3);  

# Now print the text using $ml->print_q 
BEGIN_TEXT
 $PAR
 Enter T or F depending on whether the formula is a literal or not. (You must enter T or F -- True (true) and False (false)
 will not work.)
 $BR
 \{ $lit-> print_q \}
 $PAR
END_TEXT

# Enter the correct answers to be checked against the answers to the students.
ANS(str_cmp( $lit->ra_correct_ans )   ) ;

# The ra_... means that the output of this function is an array reference -- a gadget that looks like
# [T, F, T] or whatever the list of T's and F's represents the correct answers. 
# Make a new select list
$clause = new_select_list();
# $clause now "contains" the select list object.  

# Insert some  questions and whether or not they are true.
$clause -> qa (
"p", "T",
"\( \neg p \)", "T",
"\( (p \vee q)  \)", "T",
"\( p \vee q \vee \neg r \)", "T",
"\( p \vee q \vee \neg r \vee \neg s\)", "T",
"\( p \vee \neg q \vee \neg r \vee \neg s\)", "T",
"\(p \wedge q \)", "F",
"\(p \rightarrow q \)", "F",
"\(\neg (p \vee q) \)", "F",
"\( (p \vee q) \wedge (\neg p \vee r)\)", "F",
"\( (p \wedge q) \vee (\neg p \wedge r)\)", "F",
"\( (p \vee q) \wedge p \)", "F"
);

# Choose two of the question and answer pairs at random (12).
$clause ->choose(4);  

# Now print the text using $ml->print_q 
BEGIN_TEXT
 $PAR
 Enter T or F depending on whether the formula is a clause or not. (You must enter T or F -- True (true) and False (false)
 will not work.)
 $BR
 \{ $clause-> print_q \}
 $PAR
END_TEXT

# Enter the correct answers to be checked against the answers to the students.
ANS(str_cmp( $clause->ra_correct_ans )   ) ;

# Make a new select list
$hclause = new_select_list();

# Insert some  questions and whether or not they are true.
$hclause -> qa (
"p", "T",
"\( \neg p \)", "T",
"\( (p \vee q)  \)", "F",
"\( \neg p \vee \neg q \vee \neg r \vee \neg s\)", "T",
"\( \neg p \vee \neg q \vee \neg r \vee s\)", "T",
"\( p \vee \neg q \vee \neg r \vee \neg s\)", "T",
"\( \neg p \vee \neg q \)", "T",
"\( p \vee \neg q \)", "T",
"\( p \vee q \vee \neg r \)", "F",
"\( p \vee q \vee \neg r \vee \neg s\)", "F",
"\(p \wedge q \)", "F",
"\(p \rightarrow q \)", "F",
"\(\neg (p \vee q) \)", "F",
"\( (p \vee q) \wedge (\neg p \vee r)\)", "F",
"\( (p \wedge q) \vee (\neg p \wedge r)\)", "F",
"\( (p \vee q) \wedge p \)", "F"
);

# Choose two of the question and answer pairs at random (16).
$hclause ->choose(4);  

# Now print the text using $ml->print_q 
BEGIN_TEXT
 $PAR
 Enter T or F depending on whether the formula is a Horn clause or not. (You must enter T or F -- True (true) and False (false)
 will not work.)
 $BR
 \{ $hclause-> print_q \}
 $PAR
END_TEXT

# Enter the correct answers to be checked against the answers to the students.
ANS(str_cmp( $hclause->ra_correct_ans )   ) ;

# 1

# Make a new multiple choice
$hnot = new_multiple_choice();

$ hnot -> qa ('How to represent \( \neg p \) in a logic program?', '\( \leftarrow p\) ');

# Extra answers
$hnot ->extra('\( \rightarrow p \)',
             '\( p \leftarrow \)',
             'impossible',
             '\(p \)'
);

BEGIN_TEXT
    $PAR
    \{ $hnot->print_q() \}
    $PAR
    \{ $hnot->print_a() \}
END_TEXT
ANS(radio_cmp($hnot->correct_ans));

# 2

# Make a new multiple choice
$hnot = new_multiple_choice();

$ hnot -> qa ('How to represent \( p \) in a logic program?', '\( p \leftarrow \)');

# Extra answers
$hnot ->extra('\( \rightarrow p \)',
             '\(\leftarrow p\)',
             'impossible',
             '\(p \)'
);

BEGIN_TEXT
    $PAR
    \{ $hnot->print_q() \}
    $PAR
    \{ $hnot->print_a() \}
END_TEXT
ANS(radio_cmp($hnot->correct_ans));

# 3

# Make a new multiple choice
$hnot = new_multiple_choice();

$ hnot -> qa ('How to represent \( \neg p \vee \neg q\) in a logic program?', '\( \leftarrow p, q\)');

# Extra answers
$hnot ->extra('\( \rightarrow p,q \)',
             '\(p, q \leftarrow\)',
             'impossible',
             '\(\leftarrow p \wedge q \)',
             '\(p \vee q \)'
);

BEGIN_TEXT
    $PAR
    \{ $hnot->print_q() \}
    $PAR
    \{ $hnot->print_a() \}
END_TEXT
ANS(radio_cmp($hnot->correct_ans));

# 4

# Make a new multiple choice
$hnot = new_multiple_choice();

$ hnot -> qa ('How to represent \( \neg p \vee \neg q \vee \neg r \vee s\) in a logic program?', '\( s \leftarrow p, q, r\)');

# Extra answers
$hnot ->extra('\( s \rightarrow p,q,r \)',
             '\(p, q, s  \leftarrow r \)',
             'impossible',
             '\(\neg ( p \wedge q \wedge r) \rightarrow s\)',
             '\(s \leftarrow p \wedge q \wedge r \)'
);

BEGIN_TEXT
    $PAR
    \{ $hnot->print_q() \}
    $PAR
    \{ $hnot->print_a() \}
END_TEXT
ANS(radio_cmp($hnot->correct_ans));

# 5

# Make a new multiple choice
$hnot = new_multiple_choice();

$ hnot -> qa ('How to represent \( \neg p \vee \neg q \vee r \vee s\) in a logic program?', 'impossible');

# Extra answers
$hnot ->extra('\( s \rightarrow p,q,r \)',
             '\(p, q, s  \leftarrow r \)',
             '\( s \leftarrow p, q, r\)',
             '\(\neg ( p \wedge q \wedge r) \rightarrow s\)',
             '\(s \leftarrow p \wedge q \wedge r \)'
);

BEGIN_TEXT
    $PAR
    \{ $hnot->print_q() \}
    $PAR
    \{ $hnot->print_a() \}
END_TEXT
ANS(radio_cmp($hnot->correct_ans));


ENDDOCUMENT();        # This should be the last executable line in the problem.





