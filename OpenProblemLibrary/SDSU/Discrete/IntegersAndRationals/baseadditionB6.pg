# DESCRIPTION
# Addition of two numbers in base b
# 
# WeBWorK problem written by Michael E. O'Sullivan
# and Thomas Schmidt
# ENDDESCRIPTION

## DBsubject(Numbers)
## DBchapter(Integers)
## DBsection(Other bases)
## Institution(SDSU)
## Author(Thomas Schmidt','Michael E. O'Sullivan)
## MLT(addotherbase)
## Level(2)
## Static(1)


############################
# Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl"
);

TEXT(beginproblem());

############################
# Setup

$showPartialCorrectAnswers = 0;

$n1 = "145521";
$n2 = "334102";
$base = 6;

$raw = addraw($n1,$n2);

$expr = "\($n1 _$base + $n2 _$base =\)";

$tmp = base10($n1,$base) + base10($n2,$base);
$answer = baseb($tmp,$base);


# takes parameters base10(number, frombase), only works for bases up to 10.
sub base10 {
	my $n = shift;
	my $b = shift;
	
	# break n into single digits
	my @digits = ();
	foreach my $i (0..length($n)-1) {
		$digits[$i] = substr($n,$i,1);
	}
	
	# convert to base 10
	my $result = 0;
	my $power = length($n)-1;
	foreach my $i (0..length($n)-1) {
		$result += ($digits[$i] * ($b ** $power));
		$power--;
	}
	return $result;
}

# takes parameters baseb(number, tobase), only works for bases up to 10
# uses Euclidian Algorithm
sub baseb {
	my $n = shift;
	my $d = shift;
	
	my $q = int($n/$d);
	my $r = ($n % $d);
	
	my @result = ();
	$result[0] = $r;
	do {
		$n = $q;
		$q = int($n/$d);
		$r = ($n % $d);
		push(@result,$r);
	} while ($q != 0);
	
	return reverse(join("",@result));
}

# takes parameters addraw(num1,num2)
# returns string of raw digit addition
sub addraw {
	my $a = shift;
	my $b = shift;
	
	my @adigits = ();
	my @bdigits = ();
	foreach my $i (0..length($a)-1) {
		$adigits[$i] = substr($a,$i,1);
	}
	foreach my $i (0..length($b)-1) {
		$bdigits[$i] = substr($b,$i,1);
	}
	my @tmp1 = reverse(@adigits);
	my @tmp2 = reverse(@bdigits);
	foreach my $i (0..scalar(@tmp2)-1) {
		$tmp1[$i] += $tmp2[$i];
	}
	for (my $i = 1; $i < scalar(@tmp1); $i += 2) {
		splice(@tmp1,$i,0,"\vert");
	}
	@ret = ();
	foreach my $i (0..scalar(@tmp1)) {
		push(@ret,pop(@tmp1));
	}
	return join(" ",@ret);
}

############################
# Main Text

Context()->texStrings;
BEGIN_TEXT
$BR
Evaluate the following expression without the use of base 10.
$BR
$expr \{ans_rule(15)\}
$BR
END_TEXT
Context()->normalStrings;

############################
# Answer Evaluation

ANS(str_cmp($answer));

############################
# Solution

Context()->texStrings;
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR Solution: $PAR
\($n1 _$base + $n2 _$base = $answer _$base\) $PAR
Just like addition in base 10, addition in base $base simply requires adding digits from right to left. If the sum of two numbers is greater than their base, then the excess gets added to the next column. $BR
If we just add the raw digits, we get $BR
\($raw\) $BR
and after "carrying" numbers where appropriate, we get $BR
\($answer _$base\)
END_SOLUTION
Context()->normalStrings;

ENDDOCUMENT();
