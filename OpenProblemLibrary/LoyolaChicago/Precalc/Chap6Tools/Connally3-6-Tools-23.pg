## DESCRIPTION
## Trigonometric Functions
## ENDDESCRIPTION


## DBsubject(Trigonometry)
## DBchapter(Triangle trigonometry)
## DBsection(Applications of special triangles & right triangles)
## Date(01/01/10)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## Level(5)
## MO(1)
## TitleText1('Functions Modeling Change')
## AuthorText1('Connally')
## EditionText1('3')
## Section1('6')
## Problem1('25')
## TitleText2('Functions Modeling Change')
## AuthorText2('Connally')
## EditionText2('4')
## Section2('7.4')
## Problem2('25')
## KEYWORDS('trig')

####################################
#  Initialization

DOCUMENT();

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGgraphmacros.pl",
"PGanswermacros.pl",
"PGcourse.pl",
"MathObjects.pl",
"AnswerFormatHelp.pl",
#"contextFraction.pl",
"alignedChoice.pl",
"unionTables.pl",
"parserNumberWithUnits.pl",
);

TEXT(beginproblem());


####################################
#  Setup

$refreshCachedImages=1;

Context("Numeric");



##############################################
#  Begin trig functions in degrees

Context()->functions->remove("cos");
package NewFunc;
# this next line makes the function a
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979323846264338327950288/180);
}
package main;
# Make it work on formulas as well as numbers
#sub cos {Parser::Function->call('cos',@_)} # if uncommented, this line will generate error messages
#  Add the new functions to the Context
Context()->functions->add( cos => {class => 'NewFunc', TeX => '\cos'}, );


Context()->functions->remove("sin");
package NewFunc;
# this next line makes the function a
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979323846264338327950288/180);
}
package main;
# Make it work on formulas as well as numbers
#sub sin {Parser::Function->call('sin',@_)} # if uncommented, this line will generate error messages
#  Add the new functions to the Context
Context()->functions->add( sin => {class => 'NewFunc', TeX => '\sin'}, );


Context()->functions->remove("tan");
package NewFunc;
# this next line makes the function a
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979323846264338327950288/180)/CORE::cos($x*3.14159265358979323846264338327950288/180);
}
package main;
# Make it work on formulas as well as numbers
sub tan {Parser::Function->call('tan',@_)}
#  Add the new functions to the Context
Context()->functions->add( tan => {class => 'NewFunc', TeX => '\tan'}, );


Context()->functions->remove("sec");
package NewFunc;
# this next line makes the function a
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979323846264338327950288/180);
}
package main;
# Make it work on formulas as well as numbers
sub sec {Parser::Function->call('sec',@_)}
#  Add the new functions to the Context
Context()->functions->add( sec => {class => 'NewFunc', TeX => '\sec'}, );


Context()->functions->remove("csc");
package NewFunc;
# this next line makes the function a
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979323846264338327950288/180);
}
package main;
# Make it work on formulas as well as numbers
sub csc {Parser::Function->call('csc',@_)}
#  Add the new functions to the Context
Context()->functions->add( csc => {class => 'NewFunc', TeX => '\csc'}, );


Context()->functions->remove("cot");
package NewFunc;
# this next line makes the function a
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979323846264338327950288/180)/CORE::sin($x*3.14159265358979323846264338327950288/180);
}
package main;
# Make it work on formulas as well as numbers
sub cot {Parser::Function->call('cot',@_)}
#  Add the new functions to the Context
Context()->functions->add( cot => {class => 'NewFunc', TeX => '\cot'}, );



#sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))}
#sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])}
#sub atan {CORE::atan2($_[1],1)}
#sub acot {CORE::atan2(1,$_[1])}
#sub asec {acos($_[0],1.0/$_[1])}
#sub acsc {asin($_[0],1.0/$_[1])}


Context()->functions->remove("acos");
package NewFunc;
# this next line makes the function a
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979323846264338327950288}
package main;
# Make it work on formulas as well as numbers
sub acos {Parser::Function->call('acos',@_)}
#  Add the new functions to the Context
Context()->functions->add( acos => {class => 'NewFunc', TeX => '\arccos'}, );


Context()->functions->remove("asin");
package NewFunc;
# this next line makes the function a
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979323846264338327950288}
package main;
# Make it work on formulas as well as numbers
sub asin {Parser::Function->call('asin',@_)}
#  Add the new functions to the Context
Context()->functions->add( asin => {class => 'NewFunc', TeX => '\arcsin'}, );


Context()->functions->remove("atan");
package NewFunc;
# this next line makes the function a
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979323846264338327950288}
package main;
# Make it work on formulas as well as numbers
sub atan {Parser::Function->call('atan',@_)}
#  Add the new functions to the Context
Context()->functions->add( atan => {class => 'NewFunc', TeX => '\arctan'}, );


Context()->functions->remove("asec");
package NewFunc;
# this next line makes the function a
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979323846264338327950288}
#sub asec {acos($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub asec {Parser::Function->call('asec',@_)}
#  Add the new functions to the Context
Context()->functions->add( asec => {class => 'NewFunc', TeX => '\arcsec'}, );


Context()->functions->remove("acsc");
package NewFunc;
# this next line makes the function a
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979323846264338327950288}
#sub acsc {asin($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub acsc {Parser::Function->call('acsc',@_)}
#  Add the new functions to the Context
Context()->functions->add( acsc => {class => 'NewFunc', TeX => '\arccsc'}, );


Context()->functions->remove("acot");
package NewFunc;
# this next line makes the function a
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979323846264338327950288}
package main;
# Make it work on formulas as well as numbers
sub acot {Parser::Function->call('acot',@_)}
#  Add the new functions to the Context
Context()->functions->add( acot => {class => 'NewFunc', TeX => '\arccot'}, );


#  End trig functions in degrees
###################################################



$y = random(100,300,50);

$ansz = NumberWithUnits("2*$y/sqrt(3)","ft");
$ansx = NumberWithUnits("$y/sqrt(3)","ft");



####################################
#  Main Text

Context()->texStrings;
BEGIN_TEXT
The top of a \( $y \) foot vertical tower is to be
anchored by cables that make an angle of \( 60^{\circ} \)
with the ground.  Please include units in your answers.
All trig functions will be evaluated in degrees.
$PAR
How long must each cable be? \{ ans_rule(20) \}
\{ AnswerFormatHelp("units") \}
$PAR
How far from the base of the tower should anchors be placed?
\{ ans_rule(20) \}
\{ AnswerFormatHelp("units") \}
END_TEXT
Context()->normalStrings;

###################################
#  Answer evaluation

$showPartialCorrectAnswers = 1;

ANS($ansz->cmp() );
ANS($ansx->cmp() );

$solgr = init_graph(-.5,-.15,1.5,1.15, size=>[300,75]);
plot_functions(
	$solgr,
	"64*(x-0.125)^2 for x in <0,.125> using color:blue and weight:2",
	"64*(x+0.165)^2 for x in <-0.165,-0.04> using color:blue and weight:2",
	"1 for x in <-0.04,0> using color:blue and weight:2"
);
$solgr->moveTo(-0.5,0);
$solgr->lineTo(1.5,0,'black',2);
$solgr->moveTo(1,0);
$solgr->lineTo(0,1,'black');
$solgr->lineTo(0,0,'black');

$solgr->lb( new Label(0.5,0.5,"h",'black','bottom','left') );
$solgr->lb( new Label(0.35,0.01,"x",'black','bottom','left') );
$solgr->lb( new Label(-0.01,0.5,"$y",'black','bottom','right') );

$twoy = 2*$y;

SOLUTION(EV3(<<'END_SOLUTION'));
$PAR
$BBOLD SOLUTION $EBOLD
$PAR

The figure below illustrates this situation.
$BR
$BCENTER
\{ image( insertGraph($solgr), width=>300, height=>75, tex_size=>250,
          extra_html_tags=>'alt="figure showing a tower with a ' .
	  'wire extending from the top out to the ground."' ) \}
$ECENTER
$BR
We have a right triangle with legs \(x\) and \($y\) and hypotenuse \(h\).
Thus,
\[\begin{aligned}
\sin60^{\circ} &= \frac{$y}{h}\\
h &= \frac{$y}{\sin60^{\circ}} = \frac{$y}{\sqrt3/2} = \frac{$twoy}{\sqrt3}
\,\mbox{feet}.
\end{aligned}
\]
To find the distance \(x\), we can relate the angle and its opposite and
adjacent legs by writing
\[\begin{aligned}
\tan60^{\circ} &= \frac{$y}{x}\\
x &= \frac{$y}{\tan60^{\circ}} = \frac{$y}{\sqrt{3}}\,\mbox{feet}.
\end{aligned}
\]
We could also write the equation \(x^2+$y^2=h^2\) and
substitute \(h=\frac{$twoy}{\sqrt3}\) ft to solve for \(x\).

END_SOLUTION


COMMENT("Redefines basic trig functions to be in degrees (instead of the default radians)");

COMMENT('MathObject version');
ENDDOCUMENT();
