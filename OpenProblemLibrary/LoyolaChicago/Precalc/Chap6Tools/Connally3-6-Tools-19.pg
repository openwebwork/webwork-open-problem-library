## DESCRIPTION
## Trigonometric Functions
## ENDDESCRIPTION


## DBsubject(Trigonometry)
## DBchapter(Triangle trigonometry)
## DBsection(Applications of special triangles & right triangles)
## Date(01/01/10)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## Level(3)
## MO(1)
## TitleText1('Functions Modeling Change')
## AuthorText1('Connally')
## EditionText1('3')
## Section1('6')
## Problem1('20')
## KEYWORDS('trig')

####################################
#  Initialization

DOCUMENT();  

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
#"PGgraphmacros.pl",
"PGanswermacros.pl",
"PGcourse.pl",
"MathObjects.pl",
"AnswerFormatHelp.pl",
#"contextFraction.pl",
#"alignedChoice.pl",
"unionTables.pl",
);

TEXT(beginproblem());


####################################
#  Setup

$refreshCachedImages=1;

Context("Numeric");


##############################################
#  Begin trig functions in degrees

Context()->functions->remove("cos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979323846264338327950288/180);
}
package main;
# Make it work on formulas as well as numbers
#sub cos {Parser::Function->call('cos',@_)} # if uncommented, this line will generate error messages
#  Add the new functions to the Context
Context()->functions->add( cos => {class => 'NewFunc', TeX => '\cos'}, );


Context()->functions->remove("sin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979323846264338327950288/180);
}
package main;
# Make it work on formulas as well as numbers
#sub sin {Parser::Function->call('sin',@_)} # if uncommented, this line will generate error messages
#  Add the new functions to the Context
Context()->functions->add( sin => {class => 'NewFunc', TeX => '\sin'}, );


Context()->functions->remove("tan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979323846264338327950288/180)/CORE::cos($x*3.14159265358979323846264338327950288/180);
}
package main;
# Make it work on formulas as well as numbers
sub tan {Parser::Function->call('tan',@_)}
#  Add the new functions to the Context
Context()->functions->add( tan => {class => 'NewFunc', TeX => '\tan'}, );


Context()->functions->remove("sec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979323846264338327950288/180);
}
package main;
# Make it work on formulas as well as numbers
sub sec {Parser::Function->call('sec',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sec => {class => 'NewFunc', TeX => '\sec'}, );


Context()->functions->remove("csc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979323846264338327950288/180);
}
package main;
# Make it work on formulas as well as numbers
sub csc {Parser::Function->call('csc',@_)} 
#  Add the new functions to the Context
Context()->functions->add( csc => {class => 'NewFunc', TeX => '\csc'}, );


Context()->functions->remove("cot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979323846264338327950288/180)/CORE::sin($x*3.14159265358979323846264338327950288/180);
}
package main;
# Make it work on formulas as well as numbers
sub cot {Parser::Function->call('cot',@_)}
#  Add the new functions to the Context
Context()->functions->add( cot => {class => 'NewFunc', TeX => '\cot'}, );



#sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))}
#sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])}
#sub atan {CORE::atan2($_[1],1)}
#sub acot {CORE::atan2(1,$_[1])}
#sub asec {acos($_[0],1.0/$_[1])}
#sub acsc {asin($_[0],1.0/$_[1])}


Context()->functions->remove("acos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979323846264338327950288}
package main;
# Make it work on formulas as well as numbers
sub acos {Parser::Function->call('acos',@_)}
#  Add the new functions to the Context
Context()->functions->add( acos => {class => 'NewFunc', TeX => '\arccos'}, );


Context()->functions->remove("asin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979323846264338327950288}
package main;
# Make it work on formulas as well as numbers
sub asin {Parser::Function->call('asin',@_)}
#  Add the new functions to the Context
Context()->functions->add( asin => {class => 'NewFunc', TeX => '\arcsin'}, );


Context()->functions->remove("atan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979323846264338327950288}
package main;
# Make it work on formulas as well as numbers
sub atan {Parser::Function->call('atan',@_)}
#  Add the new functions to the Context
Context()->functions->add( atan => {class => 'NewFunc', TeX => '\arctan'}, );


Context()->functions->remove("asec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979323846264338327950288}
#sub asec {acos($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub asec {Parser::Function->call('asec',@_)}
#  Add the new functions to the Context
Context()->functions->add( asec => {class => 'NewFunc', TeX => '\arcsec'}, );


Context()->functions->remove("acsc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979323846264338327950288}
#sub acsc {asin($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub acsc {Parser::Function->call('acsc',@_)}
#  Add the new functions to the Context
Context()->functions->add( acsc => {class => 'NewFunc', TeX => '\arccsc'}, );


Context()->functions->remove("acot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979323846264338327950288}
package main;
# Make it work on formulas as well as numbers
sub acot {Parser::Function->call('acot',@_)}
#  Add the new functions to the Context
Context()->functions->add( acot => {class => 'NewFunc', TeX => '\arccot'}, );


#  End trig functions in degrees
###################################################




$c = random(15,21,1);
$A = random(25,40,1);
while ($B==30) { $B = random(25,40,1); } 

#$ansb = Compute("$a tan($B pi/180)");
#$ansc = Compute("$a / cos($B pi/180)");

$ansa = Compute("$c * sin($A)");
$ansb = Compute("$c * cos($A)");

$ansB = Compute("90-$A"); 



####################################
#  Main Text

BEGIN_TEXT
Suppose that \( a \), \( b\) and \( c \) are 
the sides of a right triangle, where side \( a \) 
is across from angle \( A \), side \( b \) is across 
from angle \( B \), and side \( c \) is across from 
the right angle.  If \( c = $c \) and \( A = $A^{\circ} \), 
find the missing sides and 
angles in this right triangle.  
All angles should be in degrees (not radians), and  
all trig functions entered will be evaluated in degrees 
(not radians).    
$BR
$BR
(a) Side \( a \) = \{ ans_rule(20) \}
\{ AnswerFormatHelp("numbers") \}
$BR
$BR
(b) Side \( b \) = \{ ans_rule(20) \} 
\{ AnswerFormatHelp("numbers") \}
$BR
$BR
(c) Angle \( B \) = \{ ans_rule(20) \} degrees
\{ AnswerFormatHelp("angles") \}
END_TEXT

###################################
#  Answer evaluation

$showPartialCorrectAnswers = 1;

ANS($ansa->cmp() );
ANS($ansb->cmp() );
ANS($ansB->cmp() );

#ANS($al->correct_ans);

COMMENT("Redefines basic trig functions to be in degrees (instead of the default radians)");


COMMENT('MathObject version');
ENDDOCUMENT();
