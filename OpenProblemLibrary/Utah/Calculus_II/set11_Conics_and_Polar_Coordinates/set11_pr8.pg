##################################################################
##########Date:: 4-4-2###A.Treibergs#############

#DESCRIPTION
#  Approximation : Improved Euler's Method
#ENDDESCRIPTION
## DBsubject(Differential equations)
## DBchapter(Numerical methods)
## DBsection(Euler)
## Institution(Univeristy of Utah)
## Author(Utah ww group)
## Level(3)
## TitleText1('Calculus')
## AuthorText1('Dale Varberg, Edwin J. Purcell, and Steve E. Rigdon')
## EditionText1('9')
## Section1('.')
## Problem1('')
## KEYWORDS('calculus')
DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

$a0 = .1 * random(0,5,1);
$a1 = $a0 + 0.25;
$a2 = $a0 + 0.5;
$a3 = $a0 + 0.75;
$a4 = $a0 + 1;



$b0 = random(1,9,1);
$c0 = 0.5*random (1,5,1);
$c1 = 1/$c0**2;
$c2 = exp($a0*$c0)*($b0-$a0/$c0 +$c1);
$d0 = $a0-$c0*$b0;
$e0 = $b0 + $d0/4;
$f0 = $a1 -$c0*$e0;
$funct = "x/$c0-$c1 + $c2*exp(-$c0*x)";
$c3 = "$a4/$c0-$c1 + $c2*exp(-$c0*$a4)";

@ans =();

$b1 = $b0 + ($d0 + $f0)/8;
$d1 = $a1 - $c0*$b1;
$e1 = $b1 + $d1/4;
$f1 = $a2 - $c0*$e1;

$b2 = $b1 + ($d1 + $f1)/8;
$d2 = $a2 - $c0*$b2;
$e2 = $b2 + $d2/4;
$f2 = $a3 - $c0*$e2;


$b3 = $b2 + ($d2 + $f2)/8;
$d3 = $a3 - $c0*$b3;
$e3 = $b3 + $d3/4;
$f3 = $a4 - $c0*$e3;


$b4 = $b3 + ($d3 + $f3)/8;




$ans[0] = $a1;
$ans[1] = $b1;
$ans[2] = $d1;
$ans[3] = $e1;
$ans[4] = $f1;
$ans[5] = $a2;
$ans[6] = $b2;
$ans[7] = $d2;
$ans[8] = $e2;
$ans[9] = $f2;
$ans[10] = $a3;
$ans[11] = $b3;
$ans[12] = $d3;
$ans[13] = $e3;
$ans[14] = $f3;
$ans[15] = $a4;
$ans[16] = $b4;
$ans[17] = $c3;


BEGIN_TEXT

Suppose that we use the Improved Euler's method to approximate the 
solution to the differential equation
\[ \frac{dy}{dx}= x - $c0 y;\qquad y( $a0) = $b0.\]
Let \( f(x,y) =x-$c0 y.\)
$BR
We let \( x_0 = $a0\) and \( y_0 = $b0\) and pick a step size \( h=0.25.\)


The improved Euler method is the the following algorithm. From \( 
(x_n, y_n ),\)
our approximation to the solution of the differential equation at 
the \(n\)-th stage,
we find the next stage by computing the \(x\)-step \(x_{n+1}=x_n+h,\) and then
\(k_1,\) the slope at \( (x_n,y_n). \) The predicted
new value of the solution is \(z_{n+1} = y_n + h\cdot k_1.\)
Then we find the slope at the predicted new point
\( k_2 = f(x_{n+1}, z_{n+1}) \) and get the corrected point by averaging slopes
\[  y_{n+1} = y_n + \frac h2 (k_1 + k_2).\]


Complete the following table:
$BR

\{begintable(6) . 
row('\(n\)', '\(x_n\)', '\(y_n\)', '\(k_1\)', '\( z_{n+1} \)','\(k_2\)').
row('\(0\)','\($a0\)','\($b0\)','\($d0\)','\($e0\)','\($f0\)').
row('\(1\)',ans_rule(20),ans_rule(20),ans_rule(20),ans_rule(20),ans_rule(20)).
row('\(2\)',ans_rule(20),ans_rule(20),ans_rule(20),ans_rule(20),ans_rule(20)).
row('\(3\)',ans_rule(20),ans_rule(20),ans_rule(20),ans_rule(20),ans_rule(20)).
row('\(4\)',ans_rule(20),ans_rule(20)).
endtable();
\}



$BR
$BR

The exact solution can also be found for the linear equation. Write the answer as a function of \( x\).
$BR
\(y(x)=\) \{ans_rule(60)\}
$BR $BR
Thus the actual value of the function at the point \( x=$a4 \) is
$BR
\( y($a4) = \) \{ans_rule(20)\}.

END_TEXT


ANS(num_cmp($ans[0]));
ANS(num_cmp($ans[1]));
ANS(num_cmp($ans[2]));
ANS(num_cmp($ans[3]));
ANS(num_cmp($ans[4]));
ANS(num_cmp($ans[5]));
ANS(num_cmp($ans[6]));
ANS(num_cmp($ans[7]));
ANS(num_cmp($ans[8]));
ANS(num_cmp($ans[9]));
ANS(num_cmp($ans[10]));
ANS(num_cmp($ans[11]));
ANS(num_cmp($ans[12]));
ANS(num_cmp($ans[13]));
ANS(num_cmp($ans[14]));
ANS(num_cmp($ans[15]));
ANS(num_cmp($ans[16]));
ANS(fun_cmp($funct));
ANS(num_cmp($ans[17]));





ENDDOCUMENT();         # This should be the last executable line.
