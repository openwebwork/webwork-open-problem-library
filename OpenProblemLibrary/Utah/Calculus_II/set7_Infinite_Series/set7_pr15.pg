#DESCRIPTION
#  Series: Convergent or Divergent?
#ENDDESCRIPTION
## DBsubject(Calculus - single variable)
## DBchapter(Infinite sequences and series)
## DBsection(Comparison tests)
## Institution(Univeristy of Utah)
## Author(Utah ww group)
## Level(3)
## TitleText1('Calculus')
## AuthorText1('Dale Varberg, Edwin J. Purcell, and Steve E. Rigdon')
## EditionText1('9')
## Section1('.')
## Problem1('')
## KEYWORDS('calculus')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl"
);


################################################################
# We need a special problem grader on this problem, since we
# want the student to get full credit for all five answers correct,
# 50% credit for four correct, and 0% for three or fewer correct.
# To change this scheme, look through the following mess of code
# for the place where the variable $numright appears, and change
# that part.
# Also change the long line beginning "msg ==>", to show what will
# appear on the screen for the student.
#
# To look at the problem itself, look for the boxed comment below
# announcing the problem itself.
################################################################

sub custom_problem_grader {
        my $rh_evaluated_answers = shift;
        my $rh_problem_state = shift;
        my %form_options = @_;
        my %evaluated_answers = %{$rh_evaluated_answers};
        #  The hash $rh_evaluated_answers typically contains: 
        #      'answer1' => 34, 'answer2'=> 'Mozart', etc.
       
        # By default the  old problem state is simply passed back out again.
        my %problem_state = %$rh_problem_state;
        
        
        # %form_options might include
        # The user login name 
        # The permission level of the user
        # The studentLogin name for this psvn.
        # Whether the form is asking for a refresh or
	#     is submitting a new answer.
        
        # initial setup of the answer
        my      $total=0; 
        my %problem_result = ( score => 0,
                errors => '',
                type => 'custom_problem_grader',
                msg => 'To get full credit, all answers must be correct.  Having all but one correct is worth 50%.  Two or more incorrect answers gives a score of 0%.',
                                                 );

    # Return unless answers have been submitted
    unless ($form_options{answers_submitted} == 1) {
    
    # Since this code is in a .pg file we must use double tildes 
    # instead of Perl's backslash on the next line.
                return(~~%problem_result,~~%problem_state);
        }
        # Answers have been submitted -- process them.
        
	########################################################
	# Here's where we compute the score.  The variable     #
	# $numright is the number of correct answers.          #
	########################################################

        my      $numright=0;

        $numright += ($evaluated_answers{'AnSwEr0001'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0002'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0003'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0004'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0005'}->{score});

	if ($numright == 5) {
		$total = 1;
	} elsif ($numright == 4) {
		$total = 0.5;
	} else {
		$total = 0;
	}

        $problem_result{score} = $total; 
        # increase recorded score if the current score is greater.
        $problem_state{recorded_score} = $problem_result{score} if $problem_result{score} > $problem_state{recorded_score};

        
    $problem_state{num_of_correct_ans}++ if $total == 1;
        $problem_state{num_of_incorrect_ans}++ if $total < 1 ;
        
        # Since this code is in a .pg file we must use double tildes 
    # instead of Perl's backslash on the next line.
        (~~%problem_result, ~~%problem_state);

}

################################################################
# Now, on with the problem itself.
################################################################


TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

install_problem_grader(~~&custom_problem_grader);


$a1 = random(2,7,1);
$b1 = random(2,7,1);

$a2 = random(2,7,1);
$b2 = random(2,7,1);
$c2 = random(3,7,1);

	if ($c2/$b2 > 1) {
		$cho2 = 0;
	} else {
		$cho2 = 1;
	}

$a3 = random(2,10,1);
$b3 = random(2,10,1);

$a4= random(1,10,1);
$b4= random(1,10,1);
$c4= random(1,10,1);
$d4= random(1,10,1);
	if ($b4 < $c4) {
		$cho4 = 0;
	} else {
		$cho4 = 1;
	}
$a5 = $a3**2;

$lowb = ceil($a5**(1/$b3)+.01);

@choices = ( "Convergent", "Divergent");

@questions=();
$questions[0] = EV2( " \( \displaystyle \sum_{n=1}^\infty
	\frac{$a1 }{n(n +$b1)}		\)" );
$questions[1] = EV2( " \( \displaystyle \sum_{n=1}^\infty
	\frac{1}{$a2 + \root $b2 \of {n^{$c2}}}	\)" );
$questions[2]= EV2( " \( \displaystyle \sum_{n=1}^\infty
	\frac{\ln(n)}{$b3 n}	\)" );
$questions[3] = EV2( " \( \displaystyle \sum_{n=1}^\infty
	\frac{$a4 + $b4 ^n}{$d4 + $c4 ^n}	\)" );
$questions[4] = EV2( " \( \displaystyle \sum_{n=$lowb}^\infty
	\frac{$a1 }{n^{$b3} - $a5} 		\)" );

# Now randomize the questions:
@slice = &NchooseK(5,5);
#############################################################################

TEXT(EV2(<<EOT));
Match each of the following with the correct statement. $BR
C stands for Convergent, D stands for Divergent. $BR

EOT

TEXT(
&match_questions_list(@questions[@slice])
);

@ans=();
$ans[0] = join " ",$ALPHABET[0+2];
$ans[1] = join " ",$ALPHABET[$cho2+2];
$ans[2] = join " ",$ALPHABET[1+2];
$ans[3] = join " ",$ALPHABET[$cho4+2];
$ans[4] = join " ",$ALPHABET[0+2];

ANS(str_cmp([@ans[@slice]], filters=>["remove_whitespace","ignore_order","ignore_case"]));

ENDDOCUMENT();        # This should be the last executable line in the problem.

