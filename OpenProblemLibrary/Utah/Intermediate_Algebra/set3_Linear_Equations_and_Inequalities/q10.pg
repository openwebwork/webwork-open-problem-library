##DESCRIPTION
##   A simple matching problem testing knowledge of
##   notation of intervals
##ENDDESCRIPTION
## DBsubject(Algebra)
## DBchapter(Absolute value expressions and functions)
## DBsection(Absolute value inequalities)
## Institution(Univeristy of Utah)
## Author(Utah ww group)
## MLT(simpleIneq)
## Level(2)
## TitleText1('Intermediate Algebra')
## AuthorText1('Ron Larson and Robert P. Hostetler')
## EditionText1('4')
## Section1('.')
## Problem1('')
## TitleText2('Mathematical Applications')
## AuthorText2('Ronald J. Harshbarger and James J. Reynolds')
## EditionText2('8')
## Section2('.')
## Problem2('')
## KEYWORDS('algebra')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl"
);

install_problem_grader(~~&std_problem_grader);
TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

$a =random(1,5,1);
$b =random(6,10,1);
$c = $a-$b;
$d = $a+$b;

## Here we set up a matching problem.  The correct match to
## $questStr1 is $ansStr1, etc.  In order to keep things
## simple, we will write the ansStr string right after the
## questStr.

$questStr1 = EV2(" \(|x-$a| \lt $b \) ");
$ansStr1 = EV2(" \(x \in ($c,$d) \)");
$questStr2 = EV2(" \(|x-$a| \leq $b \) ");
$ansStr2 = EV2(" \(x \in [$c,$d] \)");
$questStr3 = EV2(" \(|x-$a| = $b \) ");
$ansStr3 = EV2(" \( x \in \lbrace $c,$d \rbrace \)");
$questStr4 = EV2(" \(|x-$a| \geq $b \) ");
$ansStr4 = EV2(" \(x \in (-\infty,$c] \cup [$d,\infty ) \)");
$questStr5 = EV2(" \(|x-$a| \gt $b \) ");
$ansStr5 = EV2(" \(x \in (-\infty,$c) \cup ($d,\infty ) \)");
$questStr6 = EV2(" \(|x-$a| \lt \infty \) ");
$ansStr6 = EV2(" \(x \in (-\infty,\infty) \)");

@questions =( $questStr1,$questStr2,$questStr3,$questStr4,$questStr5,$questStr6);
@answers =( $ansStr1,$ansStr2,$ansStr3,$ansStr4,$ansStr5,$ansStr6);

##Now we actually create the matching

# Now randomize the questions:
@slice = &NchooseK(6,5);
@shuffle = &shuffle(scalar(@slice));
################################################################################
## &NchooseKmatching(6,5,20) chooses 5 questions from the 6
## question strings: $questStr1, ... $questStr6 with at most 20
## total variations.  The questions chosen appear in random order
## in $quest1, ... , $quest5$.  The answer choices appear in random
## order in  $ansChoice1, ... $ansChoice6.  The correct answers appear
## in $partialCorrectAns1, ... , $partialCorrectAns5.

## Now we tell the students what to do.

TEXT(EV2(<<EOT));
Match the statements defined below with the letters labeling their
equivalent expressions.	$BR
You must get all of the answers correct to receive credit.
$BR
EOT

TEXT(
&match_questions_list(@questions[@slice]),
&OL(@answers[@slice[@shuffle]])
);

ANS(str_cmp([@ALPHABET[&invert(@shuffle)]]));
     ##the correct answers are obtained by applying
     ##the inverse (adjoint) permutation to the captions.

ENDDOCUMENT();        # This should be the last executable line in the problem.
