
## DESCRIPTION
## Algebra
## ENDDESCRIPTION

## Tagged by XW

## DBsubject(Algebra)
## DBchapter(Inverse functions)
## DBsection(Finding the inverse function)
## Institution(ASU)
## MLT(InverseFunctions_FindInverse_09)
## Level(2)
## KEYWORDS('algebra', 'graph', 'inverse functions', 'table')

#
# First comes some stuff that appears at the beginning of every problem
#

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"PGnumericalmacros.pl",
"PGgraphmacros.pl",
"PGstatisticsmacros.pl",
"PGasu.pl"
);

TEXT(beginproblem());

#
# Now we do the randomization of variables, and other computations
# as needed for this problem.  Sometimes we compute the answers here.
#

sub myfunc {
  my $x = shift;

  if($x<2) {
    return( -$x+4);
  }
  else 
  {
    return(-2*$x+6);
  }
}

$cut = 2;

sub invf {
 my $x = shift;
 return( ($x<$cut) ? (-$x+6)/2 : -$x+4);
}

$graph1 = init_graph(-10,-10,10,10,'axes'=>[0,0],'grid'=>[20,20],'size'=>[400,400]);

$f1 = FEQ("-x+4 for x in <-10,2) using weight:2");
$f2 = FEQ("-2*x+6 for x in [2,10> using weight:2");
($fref1) = plot_functions( $graph1, $f1, $f2);

@xvals = (-10,-8,-6,-4,-2,0,2,3,4,5,6,7,8,9,10);
@slice =  NchooseK(scalar(@xvals),5);
@slice = PGsort sub {$_[0] <=> $_[1];}, @slice;

@x = @xvals[@slice];
$ubnd = 10;
$lbnd = -10;

for ($i=0;$i<=4;++$i){
  $y[$i] =  myfunc($x[$i]);
  $answer[$i] = invf($x[$i]);
}


$new_var = "\(f^{-1}(x)\)";

TEXT(image( insertGraph($graph1) ));

BEGIN_TEXT
$BR
$BBOLD Note :$EBOLD You can click on the graph above to enlarge it.    
$PAR

Use the above graph of \(f(x)\) to complete the following table
for values of its $BBOLD inverse $EBOLD function, $new_var.

END_TEXT

#
# Now the problem text itself, with ans_rule's to indicate where the
# answers go.  You can stop entering text, do more computations, and then
# start up again if you want.
#

BEGIN_TEXT
$PAR
	$BCENTER
\{begintable(11)\}
\{row("\(x\)", @x)\}
\{row($new_var, ans_rule(10), ans_rule(10), ans_rule(10), ans_rule(10), ans_rule(10)
 )\}
\{endtable()\}
$ECENTER


END_TEXT

#
# Tell WeBWork how to test if answers are right.  These should come in the
# same order as the answer blanks above.  You tell WeBWork both the type of
# "answer evaluator" to use, and the correct answer.
#
ANS(num_cmp($answer[0]));
ANS(num_cmp($answer[1]));
ANS(num_cmp($answer[2]));
ANS(num_cmp($answer[3]));
ANS(num_cmp($answer[4]));

ENDDOCUMENT();        # This should be the last executable line in the problem.

