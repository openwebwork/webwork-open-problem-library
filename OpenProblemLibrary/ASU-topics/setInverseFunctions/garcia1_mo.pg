## DESCRIPTION
## Algebra
## ENDDESCRIPTION

## Tagged by XW

## DBsubject(Algebra)
## DBchapter(Inverse functions)
## DBsection(1-1 functions)
## Institution(ASU)
## MLT(MultipleGraphs)
## MLTleader(1)
## Level(2)
## KEYWORDS('algebra', 'graph', 'inverse functions', 'one to one function')

#
# First comes some stuff that appears at the beginning of every problem
#

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGgraphmacros.pl",
"PGasu.pl",
"PGchoicemacros.pl",
"extraAnswerEvaluators.pl",
"PGcourse.pl"
);


TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#



$showPartialCorrectAnswers=0;
install_problem_grader(~~&std_problem_grader);
# this means no partial credit! You have to get all of the answers right.

$y = "The function $BBOLD is $EBOLD one-to-one.";
$n = "The function $BBOLD is not $EBOLD one-to-one.";

$a = random(-4,-1);
$b = random(1,6);
$c = random(1, 3.5, 0.01)/6;
$up = random(-2,2,0.01);

($x1dom, $y1dom, $x2dom, $y2dom) = (10,10,10,10);
($xgrid, $ygrid) = ($x1dom+$x2dom,$y1dom+$y2dom);

$graph1 = init_graph(-$x1dom,-$y1dom,$x2dom,$y2dom,
   'axes'=>[0,0]);
$graph2 = init_graph(-$x1dom,-$y1dom,$x2dom,$y2dom,
   'axes'=>[0,0]);
$graph3 = init_graph(-$x1dom,-$y1dom,$x2dom,$y2dom,
   'axes'=>[0,0]);

@mcs = ();

#----------------------------
$equation1 = Compute(" $c(((2(x-$a)/($b-$a)-1))^3 - 3((2(x-$a)/($b-$a)-1)))" );
$f1 = "$equation1 for x in <-$x1dom,$x2dom> using color:blue and weight:2";
plot_functions($graph1, $f1);

$sys1 = "Determine if the function in the graph is one-to-one.$BR$BR" . image(insertGraph($graph1));
$mc1 = new_multiple_choice();
$mc1->qa("$sys1", $n);
$mc1->extra($y);
$mc1->makeLast($n);
push @mcs, $mc1;
#-------------------------------

$equation2 = Compute("4ln((x+7))-4");
$f2 = "$equation2 for x in <-$x1dom,$x2dom> using color:blue and weight:2";
plot_functions($graph2, $f2);

$sys1 = "Determine if the function in the graph is one-to-one.$BR$BR" . image(insertGraph($graph2));
$mc1 = new_multiple_choice();
$mc1->qa("$sys1", $y);
$mc1->extra($n);
$mc1->makeLast($n);
push @mcs, $mc1;
#--------------------------------

#from (-7,-3) to (-3,3)
$ma = (3+3)/(-3+7);
$equation3_a = Compute("$ma(x+3)+3");
$equation3_b = Compute("3");
#from (4,3) to (8,6);
$mc = (6-3)/(8-4);
$equation3_c = Compute("$mc(x-8)+6");
$f3a = "$equation3_a for x in <-7,-3> using color:blue and weight:2";
$f3b = "$equation3_b for x in <-3,4> using color:blue and weight:2";
$f3c = "$equation3_c for x in <4,8> using color:blue and weight:2";

plot_functions($graph3, $f3a, $f3b, $f3c);

$sys1 = "Determine if the function in the graph is one-to-one.$BR$BR" . image(insertGraph($graph3));
$mc1 = new_multiple_choice();
$mc1->qa("$sys1", $n);
$mc1->extra($y);
$mc1->makeLast($n);
push @mcs, $mc1;
#--------------------------------

$graph4 = init_graph(-$x1dom,-$y1dom,$x2dom,$y2dom,
   'axes'=>[0,0]);
$equation3_a = Compute("2*(x+3)+1");
$equation3_b = Compute("(x+3)+3");

$f3a = "$equation3_a for x in <-10,-3] using color:blue and weight:2";
$f3b = "$equation3_b for x in (-3,10> using color:blue and weight:2";

plot_functions($graph4, $f3a, $f3b);

$sys1 = "Determine if the function in the graph is one-to-one.$BR$BR" . image(insertGraph($graph4));
$mc1 = new_multiple_choice();
$mc1->qa("$sys1", $y);
#$mc1->extra($n);
$mc1->makeLast($n);
push @mcs, $mc1;

#--------------------------------


$graph5 = init_graph(-$x1dom,-$y1dom,$x2dom,$y2dom,
   'axes'=>[0,0]);
$equation3_a = Compute("-(x-2)-4");
$equation3_b = Compute("(x-2)+1");

$f3a = "$equation3_a for x in <-10,2) using color:blue and weight:2";
$f3b = "$equation3_b for x in [2,10> using color:blue and weight:2";

plot_functions($graph5, $f3a, $f3b);

$sys1 = "Determine if the function in the graph is one-to-one.$BR$BR" . image(insertGraph($graph5));
$mc1 = new_multiple_choice();
$mc1->qa("$sys1", $n);
$mc1->extra($y);
$mc1->makeLast($n);
push @mcs, $mc1;
#--------------------------------

@slice = NchooseK(5,5);
@mcs = @mcs[@slice];


##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT

$BR
Consider the graphs below. 
	$BR$HR$BR
\{ $mcs[0]->print_q() \}
$BR
\{ $mcs[0]->print_a() \}
$BR $HR $BR
\{ $mcs[1]->print_q() \}
$BR
\{ $mcs[1]->print_a() \}
$BR $HR $BR
\{ $mcs[2]->print_q() \}
$BR
\{ $mcs[2]->print_a() \}
$BR $HR $BR
\{ $mcs[3]->print_q() \}
$BR
\{ $mcs[3]->print_a() \}
$BR $HR $BR
\{ $mcs[4]->print_q() \}
$BR
\{ $mcs[4]->print_a() \}
END_TEXT

##############################################################
#
#  Answers
#
#
ANS(radio_cmp($mcs[0]->correct_ans));
ANS(radio_cmp($mcs[1]->correct_ans));
ANS(radio_cmp($mcs[2]->correct_ans));
ANS(radio_cmp($mcs[3]->correct_ans));
ANS(radio_cmp($mcs[4]->correct_ans));



COMMENT('MathObject version');
ENDDOCUMENT();