## DESCRIPTION
## Calculus
## ENDDESCRIPTION

## Tagged by LD


## DBsubject(Calculus - single variable)
## DBchapter(Limits and continuity)
## DBsection(One-sided limits - concept of)
## Date(6/3/2002)
## Institution(ASU)
## Level(3)
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Stewart')
## EditionText1('5e')
## Section1('2.3')
## Problem1('')
## TitleText2('Calculus: Early Transcendentals')
## AuthorText2('Stewart')
## EditionText2('6')
## Section2('2.3')
## Problem2('')
## KEYWORDS('calculus','limits', 'sequences','Limit')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGauxiliaryFunctions.pl",
           "PGgraphmacros.pl");

$showPartialCorrectAnswers=1;
# define a broken graph f and a broken graph g:

# first define the parameters (value and first derivatives)
foreach my $i (0..5) {
	$f1y[$i] = random(0, 3, 1);
	$f1yp[$i] = random(-1,1, 2);
	$f2y[$i] = random(0, 3, 1);
	$f2yp[$i] = random(-1,1, 2);
	$g1y[$i] = random(0, 3, 1);
	$g1yp[$i] = random(-1,1, 2);
	$g2y[$i] = random(0, 3, 1);
	$g2yp[$i] = random(-1,1, 2);
}

# define the functions
$hermite_f1 = new Hermite( [ -1  , 0,  1, 2 , 3, 4 ],
                   [ @f1y ],
                   [ @f1yp  ]);
$hermite_f2 = new Hermite( [ -1  , 0,  1, 2 , 3, 4 ],
                   [ @f2y ],
                   [ @f2yp  ]);
$hermite_g1 = new Hermite( [ -1  , 0,  1, 2 , 3, 4 ],
                   [ @g1y ],
                   [ @g1yp  ]);
$hermite_g2 = new Hermite( [ -1  , 0,  1, 2 , 3, 4 ],
                   [ @g2y ],
                   [ @g2yp  ]);
  
# define the break points where we switch from one hemite function to the other
# and the value of the function at that point   
               
$xf = random(0,3,1);
$yf = random(-1,4,1);
$xg = random(0,3,1);
$yg = random(-1,4,1);


# define the broken functions themselves -- we'll need them to answer questions.
sub f_rule {
	 my $x = shift;
     my $out;
     if ($x < $xf ) {
        $out = $hermite_f1->rf_f->($x);
     } elsif ($x == $xf) {
     	$out = $yf;
     } else {
        $out = $hermite_f2->rf_f->($x);
     }
      $out;
};
sub g_rule {
	my $x = shift;
    my $out;
    if ($x < $xg ) {
    	$out = $hermite_g1->rf_f->($x);
     } elsif ($x == $xg) {
        $out = $yg;
     } else {
        $out = $hermite_g2->rf_f->($x);
     }
     $out;
};


# plot the f graph
 
$graphf = init_graph(-2,-2,5,5,grid =>[7,7], axes => [0,0]);
$graphg = init_graph(-2,-2,5,5,,grid =>[7,7], axes => [0,0]);
$f1 = new Fun($hermite_f1->rf_f,$graphf);
$f2 = new Fun($hermite_f2->rf_f,$graphf);
$graphf->stamps(open_circle($xf, $hermite_f1->rf_f->($xf), 'red')   );
$graphf->stamps(open_circle($xf, $hermite_f2->rf_f->($xf), 'red')   );
$graphf ->stamps( closed_circle($xf, $yf, 'red') ); # value at $xf;
$f1->color('red');
$f2->color('red');
# restrict the two partial graph domains so that only the 'active' one is drawn
$f1->domain(-1, $xf);
$f2->domain($xf, 4);

#plot the g graph 
$g1 = new Fun($hermite_g1->rf_f,$graphg);
$g2 = new Fun($hermite_g2->rf_f,$graphg);
$graphg->stamps(open_circle($xg, $hermite_g1->rf_f->($xg), 'blue')  );
$graphg->stamps(open_circle($xg, $hermite_g2->rf_f->($xg), 'blue')  );
$graphg ->stamps(closed_circle($xg, $yg, 'blue') ); # value at $xg;
$g2->color('blue');
$g2->color('blue'); 
# restrict the two partial graph domains so that only the 'active' one is drawn 
$g1->domain(-1, $xg);
$g2->domain($xg, 4);

TEXT(beginproblem());


# draw the graphs
TEXT(
begintable(7),
row( EV2('\(a\)'), -1..4  ),
row( EV2("\(\displaystyle \lim_{x\to a^-}f(x)\)"), 'DNE', rnd(f_rule(-.00001)), rnd(f_rule(0.99999),
0),
          rnd(f_rule(1.99999), 0), rnd(f_rule(2.99999), 0),rnd(f_rule(3.99999), 0) ),
          
row( EV2("\(\displaystyle \lim_{x\to a^+}f(x)\)"), rnd(f_rule(-0.99999), 0), rnd(f_rule( .00001), 0),
rnd(f_rule(1.00001), 0),
          rnd(f_rule(2.00001), 0), rnd(f_rule(3.00001), 0), 'DNE' ),
          
row( EV2("\(f(a)\)"), rnd(f_rule(-1), 0), rnd(f_rule( 0), 0), rnd(f_rule(1), 0),
          rnd(f_rule(2), 0), rnd(f_rule(3), 0),rnd(f_rule(4), 0) ),
# now for g         
row( EV2("\(\displaystyle \lim_{x\to a^-}g(x)\)"), 'DNE', rnd(g_rule(-.00001), 0),
rnd(g_rule(0.99999), 0),
          rnd(g_rule(1.99999), 0), rnd(g_rule(2.99999), 0),rnd(g_rule(3.99999), 0) ),
          
row( EV2("\(\displaystyle \lim_{x\to a^+}g(x)\)"), rnd(g_rule(-.99999), 0), rnd(g_rule( .00001), 0),
rnd(g_rule(1.00001), 0),
          rnd(g_rule(2.00001), 0), rnd(g_rule(3.00001), 0),'DNE'), 
          
row( EV2("\(g(a)\)"), rnd(g_rule(-1), 0), rnd(g_rule( 0), 0), rnd(g_rule(1), 0),
          rnd(g_rule(2), 0), rnd(g_rule(3), 0),rnd(g_rule(4), 0) ),        
endtable(),
);
sub rnd {
	my $x = shift;
	my $places = shift;
	$places = 0 unless defined($places);
	my $sign = ($x <0 ) ? -1 : 1;
	$x = abs($x);
	
	$x = int( $x*10 **(-$places) +.5) *10 **($places);
if ($x==0){$sign="1";}
	$sign*$x;
}


sub continuousQ {
	my $rf_function = shift;
	$rf_function = $$rf_function;  # why this dereferencing is needed I don't know
	my $pt = shift;
	$delta =   .00001;
	$epsilon = .0001;
	return 0 unless defined &$rf_function($pt + $delta);
	return 0 unless defined &{$rf_function}($pt - $delta);
	return 0 unless defined &{$rf_function}($pt);
	$out = ( abs(&$rf_function($pt + $delta) - &$rf_function($pt)) < $epsilon ) 
	       && 
	       ( abs(&$rf_function($pt - $delta) - &$rf_function($pt)) < $epsilon  ); 
	       
    $out;
}       
# now construct the questions
@questions = ();
@answers = ();
# now construct the questions
@questions = ();
@answers = ();

qa( ~~@questions, ~~@answers,
 '\( \displaystyle \lim_{x\to $xf^-} [f(x) + g(x) ] \) ',
 num_cmp(rnd( f_rule($xf-.00001) +g_rule($xf-.00001)  ) ),  # we are expecting integer answers
 '\( \displaystyle \lim_{x\to $xf^+} [f(x) + g(x) ] \) ',
 num_cmp(rnd( f_rule($xf+.00001) +g_rule($xf+.00001)  ) ),  # we are expecting integer answers
 '\( f($xf) + g($xf) \)',
 num_cmp(f_rule($xf) + g_rule($xf) ),

'\( \displaystyle \lim_{x\to $xf^-} [f(x)g(x) ] \) ',
num_cmp(rnd( f_rule($xf-.00001)*g_rule($xf-.00001) ) ),  # we are expecting integer answers
'\( \displaystyle \lim_{x\to $xf^+} [f(x)g(x) ] \) ',
num_cmp(rnd( f_rule($xf+.00001)*g_rule($xf+.00001) ) ),  # we are expecting integer answers
'\( f($xf)g($xf) \)',
num_cmp(f_rule($xf)*g_rule($xf) ),

'\( \displaystyle \lim_{x\to $xf^-} [f( g(x) ) ] \) ',
(continuousQ( \&f_rule, rnd( g_rule($xf-.00001) ) ) ) ? num_cmp(rnd( f_rule(g_rule($xf-.00001) ) ) ) 
                 : str_cmp('DNE'),  # not enough information unless f is continuous.
# we are expecting integer answers
'\( \displaystyle \lim_{x\to $xf^+} [f( g(x) ) ] \) ',
(continuousQ( \&f_rule, rnd( g_rule($xf +.00001) ) ) ) ? num_cmp(rnd( f_rule(g_rule($xf+.00001)  ) ) )
                 : str_cmp('DNE'),
# we are expecting integer answers
'\( f( g($xf) ) \)',
num_cmp(f_rule( g_rule($xf) ) ),

#check for zeros in answering the division limits
'\( \displaystyle \lim_{x\to $xf^-} [f(x)/g(x) ] \) ',
(rnd(g_rule($xf-.00001)) ) ? num_cmp(rnd( f_rule($xf-.00001)/g_rule($xf-.00001) , -3 ), tol =>.002 ) : str_cmp('DNE'),  # we are expecting integer answers
'\( \displaystyle \lim_{x\to $xf^+} [f(x)/g(x) ] \) ',
(rnd( g_rule($xf+.00001)) ) ? num_cmp(rnd( f_rule($xf+.00001)/g_rule($xf+.00001) , -3 ), tol =>.002 ) : str_cmp('DNE'),  # we are expecting integer answers
'\( f($xf)/g($xf) \)',
(rnd(g_rule($xf) ) ) ? num_cmp( rnd(f_rule($xf)/g_rule($xf), -3), tol =>.002 ) : str_cmp('DNE'),

'\( \displaystyle \lim_{x\to $xg^-} [f(x) + g(x) ] \) ',
num_cmp(rnd( f_rule($xg-.00001) +g_rule($xg-.00001) ) ),  # we are expecting integer answers
'\( \displaystyle \lim_{x\to $xg^+} [f(x) + g(x) ] \) ',
num_cmp(rnd( f_rule($xg+.00001) +g_rule($xg+.00001)  ) ),  # we are expecting integer answers
'\( f($xg) + g($xg) \)',
num_cmp(f_rule($xg) + g_rule($xg) ),

'\( \displaystyle \lim_{x\to $xg^-} [f(x)g(x) ] \) ',
num_cmp(rnd( f_rule($xg-.00001)*g_rule($xg-.00001)) ),  # we are expecting integer answers
'\( \displaystyle \lim_{x\to $xg^+} [f(x)g(x) ] \) ',
num_cmp(rnd( f_rule($xg+.00001)*g_rule($xg+.00001) ) ),  # we are expecting integer answers
'\( f($xg)g($xg) \)',
num_cmp(f_rule($xg)*g_rule($xg) ),

'\( \displaystyle \lim_{x\to $xg^-} [f( g(x) ) ] \) ',
(continuousQ( \&f_rule, rnd( g_rule($xg-.00001) ) ) ) ? num_cmp(rnd( f_rule(g_rule($xg-.00001) ) ) ) 
                 : str_cmp('DNE'),  # not enough information unless f is continuous.
# we are expecting integer answers
'\( \displaystyle \lim_{x\to $xg^+} [f( g(x) ) ] \) ',
(continuousQ(\&f_rule, rnd( g_rule($xg +.00001) ) ) ) ? num_cmp(rnd( f_rule(g_rule($xg+.00001)  ) ) )
                 : str_cmp('DNE'),
# we are expecting integer answers
'\( f( g($xg) ) \)',
num_cmp(f_rule( g_rule($xg) ) ),

#check for zeros in answering the division limits
'\( \displaystyle \lim_{x\to $xg^-} [f(x)/g(x) ] \) ',
(rnd(g_rule($xg-.00001) ) ) ? num_cmp(rnd( f_rule($xg-.00001)/g_rule($xg-.00001) ,-3 ),tol=>.002 ) : str_cmp('DNE'),  # we are expecting integer answers
'\( \displaystyle \lim_{x\to $xg^+} [f(x)/g(x) ] \) ',
(rnd(g_rule($xg+.00001) ) ) ? num_cmp(rnd( f_rule($xg+.00001)/g_rule($xg+.00001) ,-3 ),tol=>.002 ) : str_cmp('DNE'),  # we are expecting integer answers
'\( f($xg)/g($xg) \)',
(rnd(g_rule($xg) ) ) ? num_cmp(rnd( f_rule($xg)/g_rule($xg),-3), tol => .002 ) : str_cmp('DNE'),
);

@slice = NchooseK(scalar(@questions) ,4);

BEGIN_TEXT
$PAR
Using the table above calcuate the limits below.  
$BR
Enter 'DNE' if the limit doesn't exist OR if
limit can't be determined from the information given.  
$PAR

\{ match_questions_list(@questions[@slice]  ) \}

$BR

END_TEXT

ANS(@answers[@slice]     );
ENDDOCUMENT();        # This should be the last executable line in the problem.
