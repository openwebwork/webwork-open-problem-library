## DESCRIPTION
## Calculus
## ENDDESCRIPTION

## Tagged by YL


## DBsubject(Calculus - single variable)
## DBchapter(Applications of differentiation)
## DBsection(Indeterminate forms and L'Hopital's rule)
## Institution(ASU)
## MLT(Indeterminate-IdentifyForms)
## MLTleader(1)
## Level(1)
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Stewart')
## EditionText1('5')
## Section1('4.4')
## Problem1('')
## TitleText2('Calculus: Early Transcendentals')
## AuthorText2('Stewart')
## EditionText2('6')
## Section2('4.4')
## Problem2('')
## KEYWORDS('calculus', 'indeterminant', 'lhopitals rule')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl"
);

sub custom_problem_grader_30_50_70 {
    my $rh_evaluated_answers = shift;
    my $rh_problem_state = shift;
    my %form_options = @_;
    my %evaluated_answers = %{$rh_evaluated_answers};
        #  The hash $rh_evaluated_answers typically contains: 
        #      'answer1' => 34, 'answer2'=> 'Mozart', etc.
       
        # By default the  old problem state is simply passed back out again.
    my %problem_state = %$rh_problem_state;
        
        
        # %form_options might include
        # The user login name 
        # The permission level of the user
        # The studentLogin name for this psvn.
        # Whether the form is asking for a refresh or
        #     is submitting a new answer.
        
        # initial setup of the answer
    my      $total=0; 
        my %problem_result = ( score => 0,
                errors => '',
                type => 'custom_problem_grader',
                msg => 'To get full credit, all answers must be correct.  
See instructions above regarding partial credit',
                               );

    # Return unless answers have been submitted
    unless ($form_options{answers_submitted} == 1) {
    
    # Since this code is in a .pg file we must use double tildes 
    # instead of Perl's backslash on the next line.
        return(~~%problem_result,~~%problem_state);
    }
        # Answers have been submitted -- process them.
        
        ########################################################
        # Here's where we compute the score.  The variable     #
        # $numright is the number of correct answers.          #
        ########################################################

    my      $numright=0;

    $numright += ($evaluated_answers{'AnSwEr0001'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0002'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0003'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0004'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0005'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0006'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0007'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0008'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0009'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0010'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0011'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0012'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0013'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0014'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0015'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0016'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0017'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0018'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0019'}->{score});
    $numright += ($evaluated_answers{'AnSwEr0020'}->{score});

    if ($numright == 20) {
        $total = 1;
    } elsif ($numright >= 17) {
        $total = 0.7;
    } elsif ($numright >= 14) {
        $total = 0.5;
    } elsif ($numright >= 10) {
        $total = 0.3;
    } else {
        $total = 0;
    }

    $problem_result{score} = $total; 
        # increase recorded score if the current score is greater.
    $problem_state{recorded_score} = $problem_result{score} if $problem_result{score} > $problem_state{recorded_score};

        
    $problem_state{num_of_correct_ans}++ if $total == 1;
    $problem_state{num_of_incorrect_ans}++ if $total < 1 ;
        
        # Since this code is in a .pg file we must use double tildes 
    # instead of Perl's backslash on the next line.
    (~~%problem_result, ~~%problem_state);

}

install_problem_grader(~~&custom_problem_grader_30_50_70);
$showPartialCorrectAnswers = 0;


TEXT(beginproblem());


$questStr1 = EV2("\(\frac{\infty}{0}\)" );
$ansStr1 = "DNE";
$questStr2 = EV2("\(\frac{0}{\infty}\)" );
$ansStr2 = "0";
$questStr3 = EV2("\(0\cdot\infty\)" );
$ansStr3 = EV2("IND");
$questStr4 = EV2("\(1\cdot\infty\)" );
$ansStr4 = "DNE";
$questStr5 = EV2("\(1^\infty\)" );
$ansStr5 = EV2("IND");
$questStr6 = EV2("\(\infty^1\)" );
$ansStr6 = "DNE";
$questStr7 = EV2("\(\infty^\infty\)" );
$ansStr7 = "DNE";
$questStr8 = EV2("\(0^\infty\)" );
$ansStr8 = "0";
$questStr9 = EV2("\(0^0\)" );
$ansStr9 = EV2("IND");
$questStr10 = EV2("\(1^0\)" );
$ansStr10 = EV2("1");
$questStr11 = EV2("\(\infty^0\)" );
$ansStr11 = "IND";
$questStr12 = EV2("\(\infty^{-e}\)" );
$ansStr12 = "0";
$questStr13 = EV2("\(\infty^{-\infty}\)" );
$ansStr13 = "0";
$questStr14 = EV2("\(0^{-\infty}\)" );
$ansStr14 = "DNE";
$questStr15 = EV2("\(\frac{1}{-\infty}\)" );
$ansStr15 = "0";
$questStr16 = EV2("\(\infty -\infty\)" );
$ansStr16 = "IND";
$questStr17 = EV2("\(\infty\cdot\infty\)" );
$ansStr17 = "DNE";
$questStr18 = EV2("\(\pi^\infty\)" );
$ansStr18 = "DNE";
$questStr19 = EV2("\(1^{-\infty}\)" );
$ansStr19 = "IND";
$questStr20 = EV2("\(\pi^{-\infty}\)" );
$ansStr20 = "0";


@questions =( $questStr1,$questStr2,$questStr3,$questStr4,$questStr5,
               $questStr6,$questStr7,$questStr8,$questStr9,$questStr10,
               $questStr11,$questStr12,$questStr13,$questStr14,$questStr15,
               $questStr16,$questStr17,$questStr18,$questStr19,$questStr20
               );
@answers = ( $ansStr1,$ansStr2,$ansStr3,$ansStr4,$ansStr5,
               $ansStr6,$ansStr7,$ansStr8,$ansStr9,$ansStr10,
               $ansStr11,$ansStr12,$ansStr13,$ansStr14,$ansStr15,
               $ansStr16,$ansStr17,$ansStr18,$ansStr19,$ansStr20
               );

# Now randomize the questions:
@shuffle = &shuffle(scalar(@questions));
################################################################################

BEGIN_TEXT
For each of the following forms determine whether the following limit type
is indeterminate, always has a fixed finite value, or never has a fixed finite
value.  In the first case answer IND, in the second case enter the numerical value,
and in the third case answer DNE. For example
$BR
IND \(\quad \frac{0}{0}\)
$BR
$BR
0  \(\qquad \frac{0}{1}\)
$BR
$BR
DNE \(\quad \frac{1}{0}\)
$BR
$BR
To discourage blind guessing, this problem is graded on the following scale
$BR
0-9 correct = 0
$BR
10-13 correct = .3
$BR
14-16 correct = .5
$BR
17-19 correct = .7
$BR
Note that l'Hospital's rule (in some form) may ONLY be applied to indeterminate
forms.
END_TEXT

TEXT(
&match_questions_list(@questions[@shuffle])
);

ANS(str_cmp([@answers[@shuffle] ]));


ENDDOCUMENT();        # This should be the last executable line in the problem.
