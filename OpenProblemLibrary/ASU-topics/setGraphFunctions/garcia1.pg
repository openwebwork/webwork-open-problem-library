## DESCRIPTION
## Algebra
## ENDDESCRIPTION

## Tagged by XW

## DBsubject(Algebra)
## DBchapter(Functions)
## DBsection(Definition, concept)
## Institution(ASU)
## MLT(graphicConcept)
## Level(2)
## KEYWORDS('algebra', 'graphs', 'functions')


#
# First comes some stuff that appears at the beginning of every problem
#

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"PGgraphmacros.pl",
"PGasu.pl",
"extraAnswerEvaluators.pl"
);

TEXT(beginproblem());

#
# Now we do the randomization of variables, and other computations
# as needed for this problem.  Sometimes we compute the answers here.
#

$showPartialCorrectAnswers=0;
install_problem_grader(~~&std_problem_grader);

$y = "Yes, it is a function.";
$n = "No, it is not a function.";
$a = random(2,3);$b = random(2,4);$c = random(16,64);

($x1dom, $y1dom, $x2dom, $y2dom) = (10,10,10,10);
($xgrid, $ygrid) = ($x1dom+$x2dom,$y1dom+$y2dom);

$graph1 = init_graph(-$x1dom,-$y1dom,$x2dom,$y2dom,
   'axes'=>[0,0],
   'grid'=>[$xgrid,$ygrid]);
$graph2 = init_graph(-$x1dom,-$y1dom,$x2dom,$y2dom,
   'axes'=>[0,0],
   'grid'=>[$xgrid,$ygrid]);
$graph3 = init_graph(-$x1dom,-$y1dom,$x2dom,$y2dom,
   'axes'=>[0,0],
   'grid'=>[$xgrid,$ygrid]);
$graph4 = init_graph(-$x1dom,-$y1dom,$x2dom,$y2dom,
   'axes'=>[0,0],
   'grid'=>[$xgrid,$ygrid]);
$graph5 = init_graph(-$x1dom,-$y1dom,$x2dom,$y2dom,
   'axes'=>[0,0],
   'grid'=>[$xgrid,$ygrid]);
$graph6 = init_graph(-$x1dom,-$y1dom,$x2dom,$y2dom,
   'axes'=>[0,0],
   'grid'=>[$xgrid,$ygrid]);
$graph7 = init_graph(-$x1dom,-$y1dom,$x2dom,$y2dom,
   'axes'=>[0,0],
   'grid'=>[$xgrid,$ygrid]);

@mcs = ();

#----------------------------
$equation1 = "y^2=x^3";
$function1a="sqrt(x^3)";
$function1b="-sqrt(x^3)";
$tmp1a="$function1a for x in <-$x1dom,$x2dom> using color:blue and weight:2";
$tmp1b="$function1b for x in <-$x1dom,$x2dom> using color:blue and weight:2";
plot_functions( $graph1, $tmp1a, $tmp1b);

$sys1 = "Determine if the figure represents a function.$BR$BR" . image(insertGraph($graph1));
$mc1 = new_multiple_choice();
$mc1->qa("$sys1", $n);
$mc1->extra($y);
$mc1->makeLast($n);
push @mcs, $mc1;
#-------------------------------

$function2a="sqrt(x)";
$function2b="-sqrt(x)";
$tmp2a="$function2a for x in <-$x1dom,$x2dom> using color:blue and weight:2";
$tmp2b="$function2b for x in <-$x1dom,$x2dom> using color:blue and weight:2";
plot_functions( $graph2, $tmp2a, $tmp2b);

$sys1 = "Determine if the figure represents a function.$BR$BR" . image(insertGraph($graph2));
$mc1 = new_multiple_choice();
$mc1->qa("$sys1", $n);
$mc1->extra($y);
$mc1->makeLast($n);
push @mcs, $mc1;
#--------------------------------

$function3a="sqrt($c-x^2)";
$function3b="-sqrt($c-x^2)";

$myfa=new Fun(sub {my $t=shift; sqrt($c)*cos($t);},
 sub {my $t=shift; sqrt($c)*sin($t);} );
$myfa->domain(0,6.3);
$myfa->draw($graph3);

$sys1 = "Determine if the figure represents a function.$BR$BR" . image(insertGraph($graph3));
$mc1 = new_multiple_choice();
$mc1->qa("$sys1", $n);
$mc1->extra($y);
$mc1->makeLast($n);
push @mcs, $mc1;
#--------------------------------

$function4="(1/2)*x*(x-$a)*(x+$a)";
$tmp4="$function4 for x in <-$x1dom,$x2dom> using color:blue and weight:2";
plot_functions( $graph4, $tmp4);

$sys1 = "Determine if the figure represents a function.$BR$BR" . image(insertGraph($graph4));
$mc1 = new_multiple_choice();
$mc1->qa("$sys1", $y);
$mc1->makeLast($n);
push @mcs, $mc1;
#--------------------------------

$function5="-(1/2)*x*(x-$a)*(x+$a)";
$tmp5="$function5 for x in <-$x1dom,$x2dom> using color:blue and weight:2";
plot_functions( $graph5, $tmp5);

$sys1 = "Determine if the figure represents a function.$BR$BR" . image(insertGraph($graph5));
$mc1 = new_multiple_choice();
$mc1->qa("$sys1", $y);
$mc1->makeLast($n);
push @mcs, $mc1;
#--------------------------------

$function6a="abs(2x)-2";
$function6b="abs(2(x-4))-2";
$function6c="abs(2(x+4))-2";
$tmp6a="$function6a for x in <-2,2> using color:blue and weight:2";
$tmp6b="$function6b for x in <2,$x2dom> using color:blue and weight:2";
$tmp6c="$function6c for x in <-$x1dom,-2> using color:blue and weight:2";
plot_functions( $graph6, $tmp6a, $tmp6b, $tmp6c);

$sys1 = "Determine if the figure represents a function.$BR$BR" . image(insertGraph($graph6));
$mc1 = new_multiple_choice();
$mc1->qa("$sys1", $y);
$mc1->makeLast($n);
push @mcs, $mc1;
#--------------------------------

#I am making a parametric plot of something that is not a function, 
#looks like a cos/sin function rotated 90 degrees

$myf1=new Fun(sub {my $t=shift; $t**2-2;},sub {my $t=shift; $t;} );
$myf1->domain(-2,2);
$myf1->draw($graph7);

$myf2=new Fun(sub {my $t=shift; -($t**2-6);},sub {my $t=shift; $t+4;} );
$myf2->domain(-2,3);
$myf2->draw($graph7);

$myf3=new Fun(sub {my $t=shift; -($t**2-6);},sub {my $t=shift; $t-4;} );
$myf3->domain(-3,2);
$myf3->draw($graph7);

$sys1 = "Determine if the figure represents a function.$BR$BR" . image(insertGraph($graph7));
$mc1 = new_multiple_choice();
$mc1->qa("$sys1", $n);
$mc1->extra($y);
$mc1->makeLast($n);
push @mcs, $mc1;

#----------------------------------
@slice = NchooseK(7,4);
@mcs = @mcs[@slice];

#
# Now the problem text itself, with ans_rule's to indicate where the
# answers go.  You can stop entering text, do more computations, and then
# start up again if you want.
#

BEGIN_TEXT
$BR
Consider the graphs below. 
	$BR$HR$BR
\{ $mcs[0]->print_q() \}
$BR
\{ $mcs[0]->print_a() \}
$BR $HR $BR
\{ $mcs[1]->print_q() \}
$BR
\{ $mcs[1]->print_a() \}
$BR $HR $BR
\{ $mcs[2]->print_q() \}
$BR
\{ $mcs[2]->print_a() \}
$BR $HR $BR
\{ $mcs[3]->print_q() \}
$BR
\{ $mcs[3]->print_a() \}
END_TEXT

ANS(radio_cmp($mcs[0]->correct_ans));
ANS(radio_cmp($mcs[1]->correct_ans));
ANS(radio_cmp($mcs[2]->correct_ans));
ANS(radio_cmp($mcs[3]->correct_ans));

#
# Tell WeBWork how to test if answers are right.  These should come in the
# same order as the answer blanks above.  You tell WeBWork both the type of
# "answer evaluator" to use, and the correct answer.
#

ENDDOCUMENT();        # This should be the last executable line in the problem.