
## DESCRIPTION
## Introduction to WeBWorK
## ENDDESCRIPTION

## KEYWORDS('functions', 'enter letters or words', 'true or false questions')
## Tagged by XW

## DBsubject('WeBWorK')
## DBchapter('WeBWorK Tutorial')
## DBsection('WeBWorK Tutorial')
## Date('')
## Author('')
## Institution('ASU')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

BEGIN_TEXT
This part demonstrates WeBWorK problems where you enter letters
or words.  We start with a True/False question.

$PAR

Enter a $BITALIC T $EITALIC or an $BITALIC F $EITALIC in
each answer space below to indicate whether the corresponding statement is true or
false.

$PAR

END_TEXT

## First we set up our variables.
$a = random(1,5,1);
$b = random(6,10,1);
$c = random(-10,-1,1);
$d = random(-10,-1,1);
$e = random(1,10,1);
$f = random(5,10,1);

$questStr1 = EV2(" \(  -$a   \lt    -$b              \) ");
$ansStr1 = "F";
$questStr2 = EV2(" \(   $c   \leq    $c              \) ");
$ansStr2 = "T";
$questStr3 = EV2(" \(   $d   \lt     $d              \) ");
$ansStr3 = "F";
$questStr4 = EV2(" \(   \pi  \geq    \frac{22}{7}    \) ") ;
$ansStr4 = "F";
$questStr5 = EV2(" \(  \sqrt {$e+3}  \geq    \sqrt $e + \sqrt 3    \) ");
$ansStr5 = "F";
$questStr6 = EV2(" \(  \sqrt {$f-3}  \geq    \sqrt $f - \sqrt 3    \) ");
$ansStr6 = "T";
$questStr7 = EV2(" \(  \sqrt {$f*$e}  \geq    \sqrt $e \sqrt $f    \) ");
$ansStr7 = "T";

@questions =( $questStr1,$questStr2,$questStr3,$questStr4,$questStr5,$questStr6,$questStr7);
@answers =( $ansStr1,$ansStr2,$ansStr3,$ansStr4,$ansStr5,$ansStr6,$ansStr7);

## Now choose randomly 5  questions out of the 7 question strings above.

@slice = NchooseK(scalar(@questions),5);

## Next we output the 5 chosen questions. #
TEXT( &match_questions_list(@questions[@slice]) );

ANS(str_cmp([ @answers[@slice] ] ));

TEXT(<<EOT);

$PAR

Notice that if one of your answers is wrong then, in this problem,
WeBWorK will tell you which parts are wrong and which parts are right.
This is the behavior for most problems, but for true/false or multiple
choice questions WeBWorK will usually only tell you whether or not all
the answers are correct.  It won't tell you which ones are wrong.  The
idea is to encourage you to think rather than to just try guessing.

$PAR Typically all of the answers must be correct before you get
credit for a problem like this.
EOT

BEGIN_TEXT

$PAR
$HR
$PAR

Now we have a question where the answer involves a word.  When a word is
a possible answer, we will usually emphasize your options by using
$BITALIC italics $EITALIC. Where would this happen? 

$PAR

Well, we might have a situation where we have division by zero. Of course, we all know that this is $BITALIC undefined $EITALIC.

$PAR

We might also try to take the square root (or even root) of a negative number. This is also $BITALIC undefined $EITALIC if we expect to get a real number as an answer. 

$PAR
$HR
$PAR

Evaluate the following expressions.  Exact real number answers are required for each problem. When one of them does not evaluate to a real number, type $BITALIC undefined $EITALIC  in its answer box. Also, if you try to enter the calculation into WeBWorK for an $BITALIC undefined $EITALIC process, WeBWorK will NOT give you credit. 

$PAR

Pay attention to how placing parentheses, shifting the location of a negative sign, or changing an operation can change the result of the calculations.

END_TEXT

BEGIN_TEXT
$PAR

$BBOLD 6. $EBOLD $SPACE (2/3-3) = \{ ans_rule(20) \}

END_TEXT

ANS(str_cmp("-7/3"));

BEGIN_TEXT
$PAR

$BBOLD 7. $EBOLD $SPACE 2/(3-3) = \{ ans_rule(20) \}

END_TEXT

ANS(str_cmp("undefined"));

BEGIN_TEXT
$PAR

$BBOLD 8. $EBOLD $SPACE (4-4)/(3*3) = \{ ans_rule(20) \}

END_TEXT

ANS(str_cmp("0"));

BEGIN_TEXT
$PAR

$BBOLD 9. $EBOLD $SPACE (4-4)/(3-3) = \{ ans_rule(20) \}

END_TEXT

ANS(str_cmp("undefined"));

BEGIN_TEXT

$PAR

$BBOLD 10. $EBOLD $SPACE \( -\sqrt{25}\) = \{ ans_rule(20) \}

$PAR

END_TEXT

$ans = "-sqrt(25)" ;
ANS(num_cmp($ans));

BEGIN_TEXT

$PAR

$BBOLD 11. $EBOLD $SPACE \( \sqrt{-25}\) = \{ ans_rule(20) \}

$PAR

END_TEXT

ANS(str_cmp("undefined"));


ENDDOCUMENT();        # This should be the last executable line in the problem.
