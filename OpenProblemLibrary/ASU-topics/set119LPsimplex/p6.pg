## DESCRIPTION
##   Simplex Method
## ENDDESCRIPTION

## Tagged by nhamblet

## DBsubject(Operations research)
## DBchapter(Linear programming)
## DBsection(Simplex method)
## Institution(ASU)
## MLT(state)
## Level(2)
## KEYWORDS('Simplex Method')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"LinearProgramming.pl",
"PGmatrixmacros.pl",
"PGasu.pl"
);


TEXT(beginproblem());
$showPartialCorrectAnswers=0;
install_problem_grader(~~&std_problem_grader);


$tops1 = ['P', 'x_1', 'x_2', 's_1', 's_2', '\mbox{\tiny{RHS}}'];
$tops2 = ['P', 'x_1', 'x_2', 'x_3', 's_1', 's_2', 's_3', '\mbox{\tiny{RHS}}'];


@base = (1,2,3,4,5,6,7,8,9,10);

$sys1 = [[0, 0, -random(2,20), 1, 0, random(15, 45)],
[0, -random(2,20), random(2,20), 0, 1, random(15, 80)],
[1, random(2,20), -random(2,20), 0, 0, 0]]; # pivot


$sys2 = [[0, 0, -random(2,20), 1, 0, random(15, 45)],
[0, random(2,20), -random(2,20), 0, 1, random(15, 80)],
[1, random(2,20), -random(2,20), 0, 0, 0]]; #unbounded

@sl = (0, @base[NchooseK(4,4)], 5);
for $jj (0..2) {
  $sys2->[$jj] = [ @{$sys2->[$jj]}[@sl] ];
}
$sys2->[2][5] = random(12,75);

$sys3 = [[0, new Fraction(17,random(2,5)), -random(2,20), 1, 0, random(15, 45)],
[0, new Fraction(11, random(2,5)), 0, 0, 1, random(15, 80)],
[1, random(2,20), random(2,20), 0, 0, 0]]; #unbounded

@sl = (0, @base[NchooseK(4,4)], 5);
for $jj (0..2) {
  $sys3->[$jj] = [ @{$sys3->[$jj]}[@sl] ];
}
$sys3->[2][5] = random(12,75);

$sys4 = [
[0, -random(2,20), 0,            random(2,20), 1, 0,0, random(15, 45)],
[0, 0,             random(2,20),-random(2,20), 0, 1,0, random(15, 80)],
[0, -random(2,20), random(2,20),random(2,20),  0, 0,1, random(15, 80)],
[1,  random(2,20), -random(12,20),-random(2,11),0, 0,0,random(12,75)]]; # pivot

@sl = (0, @base[NchooseK(6,6)], 7);
for $jj (0..3) {
  $sys4->[$jj] = [ @{$sys4->[$jj]}[@sl] ];
}
##############################

@mc=();
$dop = "Additional pivoting is required.";
$fin = "This is a final tableau; the probem has a solution.";
$unb = "This tableau shows that the problem has no solution.";

$m = new_multiple_choice();
$m->qa("\[ ". lp_display_mm($sys1, top_labels=>$tops1) ."\]",
$dop);
$m->makeLast($dop, $fin, $unb);
push @mc, $m;

$m = new_multiple_choice();
$m->qa("\[ ".lp_display_mm($sys2, top_labels=>$tops1) ." \]",
$unb);
$m->makeLast($dop, $fin, $unb);
push @mc, $m;

$m = new_multiple_choice();
$m->qa("\[ ". lp_display_mm($sys3, top_labels=>$tops1) ." \]",
$fin);
$m->makeLast($dop, $fin, $unb);
push @mc, $m;
@mc = @mc[NchooseK(3,3)];

$m = new_multiple_choice();
$m->qa("\[ ". lp_display_mm($sys4, top_labels=>$tops2) ." \]",
$dop);
$m->makeLast($dop, $fin, $unb);

BEGIN_TEXT
For each simplex tableau, decide if it requires additional pivoting, indicates that
there is no solution, or is a final tablueau (and the linear programming problem has
a solution).
	$BR$BR
\{ $mc[0]->print_q() \}
$BR
\{ $mc[0]->print_a() \}
$BR $HR $BR
\{ $mc[1]->print_q() \}
$BR
\{ $mc[1]->print_a() \}
$BR $HR $BR
\{ $mc[2]->print_q() \}
$BR
\{ $mc[2]->print_a() \}
$BR $HR $BR
\{ $m->print_q() \}
$BR
\{ $m->print_a() \}
END_TEXT

#
# Tell WeBWork how to test if answers are right.  These should come in the
# same order as the answer blanks above.  You tell WeBWork both the type of
# "answer evaluator" to use, and the correct answer.
#

ANS(radio_cmp($mc[0]->correct_ans));
ANS(radio_cmp($mc[1]->correct_ans));
ANS(radio_cmp($mc[2]->correct_ans));
ANS(radio_cmp($m->correct_ans));

ENDDOCUMENT();        # This should be the last executable line in the problem.

