## DESCRIPTION
## Rational Functions
## ENDDESCRIPTION

## Tagged by tda2d

## DBsubject(Algebra)
## DBchapter(Rational equations and functions)
## DBsection(Graphs of rational functions)
## Institution(ASU)
## MO(1)
## KEYWORDS('Algebra' 'Rational Functions')

#
# First comes some stuff that appears at the beginning of every problem
#

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"parserImplicitPlane.pl"
);

TEXT(beginproblem());

$showPartialCorrectAnswers = 1;
#
# Now we do the randomization of variables, and other computations
# as needed for this problem.  Sometimes we compute the answers here.
#


$b = random(-9,-1);

$d = random(-9,-1);

do {$c = random(1,9);} until ($c != $d/$b);
do {$a = random(1,9);} until ($a != $c);
$val = (-$d/$b);
$var = (-$b/$c);
$ha = ($a/($b*$c)); 

$f1 = nicestring([$a, $b]);
$f2 = nicestring([$b, $d]);
$f3 = nicestring([$c, $b]);

if($a==1) {$a="";}
$b1 = $b; $c1 = $c;
if($b== -1) {$b1="-";}
if($c== -1) {$c1="-";}
#
# Now the problem text itself, with ans_rule's to indicate where the
# answers go.  You can stop entering text, do more computations, and then
# start up again if you want.
#

BEGIN_TEXT
Consider the function \[ f(x)= \frac{($f1) (x + $c)}{($f2) ($f3)} .\]
$BR$BR
Enter the equations of the vertical asymptotes.  If there are no
vertical asymptotes, enter $BITALIC none$EITALIC.
If there is more than one vertical asymptote, enter a list
of the equations separated by a comma (e.g., x=20, x=-7).
$BR$BR
Vertical asymptotes:  \{ans_rule(40)\}
$BR
$HR
Enter the equations of the horizontal asymptotes.  If there are no
horizontal asymptotes, enter $BITALIC none$EITALIC.
If there is more than one horizontal asymptote, enter a list
of the equations separated by a comma (e.g., y=20, y=-7).
$BR$BR
Horizontal asymptotes: \{ans_rule(40)\}
END_TEXT

ANS(List(ImplicitPlane("x=$val"),ImplicitPlane("x=$var"))->cmp);
ANS(List(ImplicitPlane("y=$ha"))->cmp);


ENDDOCUMENT();        # This should be the last executable line in the problem.
