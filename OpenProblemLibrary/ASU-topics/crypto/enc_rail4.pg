## DESCRIPTION
##   Modular Arithmetic Application
## ENDDESCRIPTION

## DBsubject(Cryptography)
## DBchapter(Classic ciphers)
## DBsection(Rail fence cipher)
## MLT(railenc)
## Institution(ASU)
## Level(3)
## KEYWORDS('Mod', 'Modular', 'Affine cipher')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
);

TEXT(beginproblem());

sub railenc {
  my $s = shift;
  my @sarr = split(//, $s);
  my $n = length($s);
  my $r = shift;

  my @perm = ();

  my $val = 0;
  for my $j (0..($r-1)) {
    last if $j >= $n;
    @f = (2*($r-1-$j), 2*$j);
	$f[1] = 2*($r-1) if $j==0;
	$f[0] = 2*($r-1) if $j==$r-1;
	my $cnt = 0;
	my $pos = $j;
	do {
	  push @perm, $pos;
	  $pos += $f[($cnt % 2)];
	  $cnt++;
	} until ($pos >= $n);
  }
  return join('', @sarr[@perm]);
}

$a1 = random(3,5,1);

$mess = list_random(qw(ABBREVIATION BACHELORHOOD BIGHEARTEDLY CAMOUFLAGING DISASTROUSLY EPISODICALLY FLUEGELHORNS GOVERNORSHIP HEADQUARTERS IMPERIALISMS JURISDICTION KINDERGARTEN LARGEHEARTED ));


BEGIN_TEXT
Encrypt the message $BITALIC $mess $EITALIC using a rail fence
cipher with 4 rails.
$BR$BR
Answer: \{ ans_rule(40) \}
END_TEXT

ANS(str_cmp( railenc($mess, 4) ) );

ENDDOCUMENT();        # This should be the last executable line in the problem.;
