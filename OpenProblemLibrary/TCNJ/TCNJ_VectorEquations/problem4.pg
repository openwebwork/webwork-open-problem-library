## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## Tagged by tda2d

## DBsubject(Linear algebra)
## DBchapter(Euclidean spaces)
## DBsection(Linear combinations)
## Institution('TCNJ')
## KEYWORDS('vectors' 'span')
## TitleText1('Linear Algebra with Applications')
## AuthorText1('Jeffrey Holt')
## EditionText1('1')
## Section1('2.2')
## Problem1('')
DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmatrixmacros.pl",
"Parser.pl",
"Generic.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

$v01 = non_zero_random(-5,5,1);
$v02 = random(-5,5,1);
$v03 = non_zero_random(-5,5,1);

$mult = non_zero_random(-2,2,1);
$d1 = non_zero_random(-3,3,1);
$d2 = non_zero_random(-3,3,1);

$v11 = $mult*$v01;
$v12 = $mult*$v02+$d1;
$v13 = $mult*$v03+$d2;

$spot = 0;
@ans = (0,0,0,0);
Context("Vector");

$vecu = Matrix->new_column_matrix([$v01, $v02, $v03]);
$vecv = Matrix->new_column_matrix([$v11, $v12, $v13]);

$NO_SPACE = '@{}';

BEGIN_TEXT

\{ mbox( 'Let \( u = \)', display_matrix($vecu), ' and \( v = \)', display_matrix($vecv) ) \}
$BR
Find two vectors in \( span\left\{"\{"\} u, v\right\} \) that are not multiples of \(u\) or \(v\) and show the weights on \( u \) and \( v \) used to generate them.
$BR
$BR
 \{ans_rule(5)\} \(u+\) \{ans_rule(5)\} \(v\)
\(=\) \{ans_rule(15)\}
$BR
$BR
 \{ans_rule(5)\} \(u+\) \{ans_rule(5)\} \(v\)
\(=\) \{ans_rule(15)\}
$BR

END_TEXT

sub check{
  my $stu=shift();
  $ans[$spot]=$stu->extract(1); 
  $spot=$spot+1;

  $ans[$spot-1] != 0; 
}


sub check2{
  my $stu=shift();
  $x1=$stu->extract(1); 
  $x2=$stu->extract(2);
  $x3=$stu->extract(3);
  
  if($ans[$spot-2]*$v01 +$ans[$spot-1]*$v11 == $x1 && $ans[$spot-2]*$v02 +$ans[$spot-1]*$v12 == $x2 &&
 $ans[$spot-2]*$v03 +$ans[$spot-1]*$v13 == $x3)
{
if($ans[$spot-2]*$ans[$spot-1]!=0){
1;
}else{
0;
}
}else{
   0;
}
}


ANS(generic_cmp("", type => 'Number', length=>1, checker=> ~~&check));
ANS(generic_cmp("", type => 'Number', length=>1, checker=>~~&check));
ANS(generic_cmp("",type => 'Vector', length => 3, checker => ~~&check2));

ANS(generic_cmp("", type => 'Number', length=>1, checker=> ~~&check));
ANS(generic_cmp("", type => 'Number', length=>1, checker=>~~&check));
ANS(generic_cmp("",type => 'Vector', length => 3, checker => ~~&check2));


ENDDOCUMENT();       # This should be the last executable line in the problem.