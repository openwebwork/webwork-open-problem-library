## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## Tagged by tda2d

## DBsubject(Linear algebra)
## DBchapter(Euclidean spaces)
## DBsection('Span')
## Institution('TCNJ')
## KEYWORDS('vector' 'linear' 'combination' 'span')
## TitleText1('Linear Algebra with Applications')
## AuthorText1('Jeffrey Holt')
## EditionText1('1')
## Section1('2.2')
## Problem1('')
DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl",
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl",
"MathObjects.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

Context('Numeric');
Context()->variables->add( y=>'Real', z=>'Real' );
Context()->reduction->set('(-x)-y' => 0);

## the vectors are x, y,
##    w = a x + b y + c z = (a + c d) x + (b + c e) y,
##    z = d x + e y
## all of a, b, c, d and e are nonzero.  thus we know that
##    Span(x,y) = Span(x,y,z)
##    Span(x,y) = Span(x,z)
##    Span(x,y) = Span(y,z)
##    Span(x,y) = Span(w,x,y)
## (thus, we also have)
##    Span(x,y,z) = Span(w,x,y)
##    Span(x,y,z) = Span(w,x,z)
##    Span(x,y,z) = Span(w,y,z)
## if a + cd != 0, then
##    Span(x,y) = Span(w,y)
## if b + ce != 0, then
##    Span(x,y) = Span(w,x)
## if w and z are not parallel, then
##    Span(x,y) = Span(w,z)

## note that w and z are parallel if (a + cd) = k d and
##    (b + ce) = k e, for some k

## start with these
$c = non_zero_random(-4,4,1);
$d = non_zero_random(-4,4,1);
$e = non_zero_random(-4,4,1);

## the following combinations have the same span
@equiv = ( 'x, y', 'x, z', 'y, z', 'w, x, y', 'w, x, z', 'w, y, z', 'x, y, z' );

## then, to avoid all options spanning the same set, pick a condition
##    to be true
$notCond = random(1,3,1);
$notCond = 3;
if ( $notCond == 1 ) {
    ## then make a + cd = 0, and ensure that b + ce != 0
    $a = -1*$c*$d;
    $b = non_zero_random(-5,5,1);
    if ( $b + $c*$e == 0 ) {
	$b = ( $b > 0 ) ? $b + 1 : $b - 1;
    }

    push( @equiv, ('w, x', 'w, z') );
    $notequiv = 'w, y';
} elsif ( $notCond == 2 ) {
    ## then make b + ce = 0, and ensure that a + cd != 0
    $b = -1*$c*$e;
    $a = non_zero_random(-5,5,1);
    if ( $a + $c*$d == 0 ) {
	$a = ( $a > 0 ) ? $a + 1 : $a - 1;
    }

    push( @equiv, ('w, y', 'w, z') );
    $notequiv = 'w, x';
} else {
    ## make (a + cd) = k d and (b + ce) = k e
    $k = non_zero_random(-2,2,1);
    $a = $k*$d - $c*$d;
    $b = $k*$e - $c*$e;

    push( @equiv, ('w, x', 'w, y') );
    $notequiv = 'w, z';
}

## pick 6 equivalent spans
@pickEquiv = NchooseK( scalar(@equiv), 6 );

## then the we have equivalencies
@yes = (
    "Span($equiv[$pickEquiv[0]]) = Span($equiv[$pickEquiv[1]])",
    "Span($equiv[$pickEquiv[2]]) = Span($equiv[$pickEquiv[3]])",
    "Span($equiv[$pickEquiv[4]]) = Span($equiv[$pickEquiv[5]])",
);

## change this variable if there are more lin. ind. choices. entered.
$yes_number = 3;

## and some non-equivalencies are
@pickNotEquiv = NchooseK( scalar(@equiv), 2 );
@no = (
    "Span($notequiv) = Span($equiv[$pickNotEquiv[0]])",
    "Span($equiv[$pickNotEquiv[1]]) = Span($notequiv)",
);

## no_number is the number of lin. dep. choices to pick from
$no_number= 2;

## creates a new multiple choice set of problems
$cmc = new_checkbox_multiple_choice();

## initial input with two linearly independent answers
$cmc -> qa ("Using the calculation above, mark the statements below " .
	    "that must be true.", @yes );

##  additional input with the four linearly dependent answers
$cmc-> extra ( @no );

$ans1 = $c*$d + $a;
$ans2 = $c*$e + $b;

$weqn = Compute("$a*x + $b*y + $c*z")->reduce();
$zeqn = Compute("$d*x + $e*y")->reduce();

Context()->texStrings;
BEGIN_TEXT

Let \(x, y, z\) be (non-zero) vectors and suppose \(w = $weqn\).
$PAR
If \(z= $zeqn\),  then
\( w = \)\{ans_rule(5)\} \(x+\) \{ans_rule(5)\} \(y\).
$PAR
\{ $cmc -> print_q \}
$BR
\{ $cmc -> print_a \}

END_TEXT
Context()->normalStrings;

ANS(num_cmp($ans1));
ANS(num_cmp($ans2));
ANS(checkbox_cmp( $cmc->correct_ans )   ) ;



COMMENT('MathObject version');
ENDDOCUMENT();
