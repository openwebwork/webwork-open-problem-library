## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## Tagged by tda2d

## DBsubject(Linear algebra)
## DBchapter(Eigenvalues and eigenvectors)
## DBsection(Computing eigenvalues and eigenvectors)
## Institution('TCNJ')
## TitleText1('Linear Algebra with Applications')
## AuthorText1('Jeffrey Holt')
## EditionText1('1')
## Section1('6.1')
## Problem1('')
## KEYWORDS('eigenvalues' 'eigenvectors')


DOCUMENT();        # This should be the first executable line in the problem.
loadMacros(
        "PGbasicmacros.pl",
        "PGchoicemacros.pl",
        "PGanswermacros.pl",
        "PGgraphmacros.pl",
        "PGmatrixmacros.pl"
        );
 
TEXT(beginproblem());    
# Do not show which answers are incorrect.
$showPartialCorrectAnswers = 0;

# FIRST MATRIX
$a= new Matrix(3,3);
$a11 = random(-1,1,1);
$a21 = random(-1,1,2);
$a31 = random(-1,1,2);
$b1 = random(-1,1,2);
$a12 = $b1 * $a11;
$m = random(-1,1,2);
$a22 = $b1 * $a21 + $m;
$a32 = $b1 * $a31;
$c = random(-1,1,1);
$d = random(-1,1,2);
$n = random(-1,1,2);
$a13 = $c * $a11 + $d * $a12 + $n;
$a23 = $c * $a21 + $d * $a22;
$a33 = $c * $a31 + $d * $a32;
$det = - $a31 * $m * $n;
$a->assign(1,1, $a11 );
$a->assign(1,2, $a12 );
$a->assign(1,3, $a13 );
$a->assign(2,1, $a21 );
$a->assign(2,2, $a22 );
$a->assign(2,3, $a23 );
$a->assign(3,1, $a31 );
$a->assign(3,2, $a32 );
$a->assign(3,3, $a33 );
$a_lr = $a->decompose_LR();
$a_det = $a_lr->det_LR();
$b = $a_lr->invert_LR();
$e = new Matrix(3,3);
$e->one();
$e->assign(1,1, random(-5,-2,1));
$e->assign(2,2, random(-1,1,1));
$e->assign(3,3, random(2,5,1));
$e1 = $e->element(1,1);
$e2 = $e->element(2,2);
$e3 = $e->element(3,3);
$ans1 = $e2;
$matrix = $a * $e *$b;
$matrix_lr = $matrix->decompose_LR();
$matrix_det = $matrix_lr->det_LR(); 

# SECOND MATRIX
$a= new Matrix(3,3);
$a11 = random(-1,1,1);
$a21 = random(-1,1,2);
$a31 = random(-1,1,2);
$b1 = random(-1,1,2);
$a12 = $b1 * $a11;
$m = random(-1,1,2);
$a22 = $b1 * $a21 + $m;
$a32 = $b1 * $a31;
$c = random(-1,1,1);
$d = random(-1,1,2);
$n = random(-1,1,2);
$a13 = $c * $a11 + $d * $a12 + $n;
$a23 = $c * $a21 + $d * $a22;
$a33 = $c * $a31 + $d * $a32;
$det = - $a31 * $m * $n;
$a->assign(1,1, $a11 );
$a->assign(1,2, $a12 );
$a->assign(1,3, $a13 );
$a->assign(2,1, $a21 );
$a->assign(2,2, $a22 );
$a->assign(2,3, $a23 );
$a->assign(3,1, $a31 );
$a->assign(3,2, $a32 );
$a->assign(3,3, $a33 );
$a_lr = $a->decompose_LR();
$a_det = $a_lr->det_LR();
$b = $a_lr->invert_LR();
$e = new Matrix(3,3);
$e->one();
$e->assign(1,1, random(-5,-2,1));
$e->assign(2,2, random(-1,1,1));
$e->assign(3,3, random(2,5,1));
$e1 = $e->element(1,1);
$e2 = $e->element(2,2);
$e3 = $e->element(3,3);
$ans2 = random(-8,8,1);
while($e1==$ans2||$e2==$ans2||$e3==$ans2) {
$ans2 = random(-8,8,1); }
$matrix2 = $a * $e *$b;
$matrix2_lr = $matrix2->decompose_LR();
$matrix2_det = $matrix2_lr->det_LR();

# THIRD MATRIX
$a= new Matrix(3,3);
$a11 = random(-1,1,1);
$a21 = random(-1,1,2);
$a31 = random(-1,1,2);
$b1 = random(-1,1,2);
$a12 = $b1 * $a11;
$m = random(-1,1,2);
$a22 = $b1 * $a21 + $m;
$a32 = $b1 * $a31;
$c = random(-1,1,1);
$d = random(-1,1,2);
$n = random(-1,1,2);
$a13 = $c * $a11 + $d * $a12 + $n;
$a23 = $c * $a21 + $d * $a22;
$a33 = $c * $a31 + $d * $a32;
$det = - $a31 * $m * $n;
$a->assign(1,1, $a11 );
$a->assign(1,2, $a12 );
$a->assign(1,3, $a13 );
$a->assign(2,1, $a21 );
$a->assign(2,2, $a22 );
$a->assign(2,3, $a23 );
$a->assign(3,1, $a31 );
$a->assign(3,2, $a32 );
$a->assign(3,3, $a33 );
$a_lr = $a->decompose_LR();
$a_det = $a_lr->det_LR();
$b = $a_lr->invert_LR();
$e = new Matrix(3,3);
$e->one();
$e->assign(1,1, random(-5,-2,1));
$e->assign(2,2, random(-1,1,1));
$e->assign(3,3, random(2,5,1));
$e1 = $e->element(1,1);
$e2 = $e->element(2,2);
$e3 = $e->element(3,3);
$ans3 = $e3;
$matrix3 = $a * $e *$b;
$matrix3_lr = $matrix3->decompose_LR();
$matrix3_det = $matrix3_lr->det_LR();

# FOURTH MATRIX
$a= new Matrix(3,3);
$a11 = random(-1,1,1);
$a21 = random(-1,1,2);
$a31 = random(-1,1,2);
$b1 = random(-1,1,2);
$a12 = $b1 * $a11;
$m = random(-1,1,2);
$a22 = $b1 * $a21 + $m;
$a32 = $b1 * $a31;
$c = random(-1,1,1);
$d = random(-1,1,2);
$n = random(-1,1,2);
$a13 = $c * $a11 + $d * $a12 + $n;
$a23 = $c * $a21 + $d * $a22;
$a33 = $c * $a31 + $d * $a32;
$det = - $a31 * $m * $n;
$a->assign(1,1, $a11 );
$a->assign(1,2, $a12 );
$a->assign(1,3, $a13 );
$a->assign(2,1, $a21 );
$a->assign(2,2, $a22 );
$a->assign(2,3, $a23 );
$a->assign(3,1, $a31 );
$a->assign(3,2, $a32 );
$a->assign(3,3, $a33 );
$a_lr = $a->decompose_LR();
$a_det = $a_lr->det_LR();
$b = $a_lr->invert_LR();
$e = new Matrix(3,3);
$e->one();
$e->assign(1,1, random(-5,-2,1));
$e->assign(2,2, random(-1,1,1));
$e->assign(3,3, random(2,5,1));
$e1 = $e->element(1,1);
$e2 = $e->element(2,2);
$e3 = $e->element(3,3);
$ans4 = random(-8,8,1);
while($e1==$ans4||$e2==$ans4||$e3==$ans4) {
$ans4 = random(-8,8,1); }
$matrix4 = $a * $e *$b;
$matrix4_lr = $matrix4->decompose_LR();
$matrix4_det = $matrix4_lr->det_LR();

# Make a new checkbox multiple choice
$tf = new_pop_up_select_list();
$tf->ra_pop_up_list(["?"=>"Select an Answer", "Yes" => "Yes", "No" => "No"]);
# $cmc now "contains" the checkbox multiple choice object.

# Insert some  questions and matching answers in the q/a list

$tf -> qa ( 

mbox( '\( A = \)', display_matrix($matrix), ', \( \lambda = $ans1\)' ), 
"Yes",

mbox( '\( A = \)', display_matrix($matrix2), ', \( \lambda = $ans2\)' ), 
"No",

mbox( '\( A = \)', display_matrix($matrix3), ', \( \lambda = $ans3\)' ), 
"Yes",

mbox( '\( A = \)', display_matrix($matrix4), ', \( \lambda = $ans4\)' ), 
"No",            
);

$tf->choose(3);

# Insert some incorrect answers

# Print the text using $mc->print_q for the questions and
# $mc->print_a to print the answers.
BEGIN_TEXT

Determine if \( \lambda \) is an eigenvalue of the matrix \(A\).

$BR

 \{ $tf -> print_q \}

END_TEXT

# Enter the correct answers to be checked against the answers to the students.
ANS(str_cmp( $tf->ra_correct_ans )   ) ;

ENDDOCUMENT();
