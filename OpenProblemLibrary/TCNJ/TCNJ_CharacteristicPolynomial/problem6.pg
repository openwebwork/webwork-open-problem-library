## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## Tagged by tda2d



DOCUMENT();        # This should be the first executable line in the problem.

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "PGmatrixmacros.pl",
           "PGnumericalmacros.pl",
           "PGdiffeqmacros.pl",
	   "parserMultiAnswer.pl",
);


TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

$a= new Matrix(2,2);
$a11 = random(-1,1,2);
$a12 = non_zero_random(-3,3,1);
$mult = non_zero_random(-2,2,1);
$a21 = $mult * $a11;
$b1 = random(-1,1,2);
$a22 = $mult * $a12 + $b1;
$a->assign(1,1, $a11 );
$a->assign(1,2, $a12 );
$a->assign(2,1, $a21 );
$a->assign(2,2, $a22 );
$a_lr = $a->decompose_LR();
$a_det = $a11 * $b1;
$b = $a_lr->invert_LR();
$e = new Matrix(2,2);
$eig1 = non_zero_random(-8,8,1);
$eig2 = non_zero_random(-8,8,1);
while ($eig1 == $eig2){
$eig2 = non_zero_random(-8,8,1);}
$e->assign(1,1, $eig1);
$e->assign(2,2, $eig1);
$e->assign(1,2, - $eig2);
$e->assign(2,1, $eig2);
$matrix = $a * $e *$b;

## Make sure we have the right answer, and not its conjugate for the
## first eigenvector.
@mvals = ( [ $matrix->element(1,1), $matrix->element(1,2) ],
		   [ $matrix->element(2,1), $matrix->element(2,2) ] );
@ansc = ($a->element(1,1), $a->element(2,1));
@ansd = ($a->element(1,2), $a->element(2,2));
$ansflag=0;
$ansflag = 1 if(( $mvals[0]->[0]*$ansc[0] + $mvals[0]->[1]*$ansc[1] ==
	   $eig1*$ansc[0] - $eig2*$ansd[0] ) &&
	 ( $mvals[1]->[0]*$ansc[0] + $mvals[1]->[1]*$ansc[1] ==
	   $eig1*$ansc[1] - $eig2*$ansd[1] ) &&
	 ( $mvals[0]->[0]*$ansd[0] + $mvals[0]->[1]*$ansd[1] ==
	   $eig2*$ansc[0] + $eig1*$ansd[0] ) &&
	 ( $mvals[1]->[0]*$ansd[0] + $mvals[1]->[1]*$ansd[1] ==
	   $eig2*$ansc[1] + $eig1*$ansd[1] ) );

@ansd = (-$ansd[0], -$ansd[1]) unless ($ansflag == 1);

## to check that we have a correct answer, just verify that
##    the appropriate matrix multiplication works
$ev = MultiAnswer( $eig1, $eig2, $a->column(1)->list,
		   @ansd )->with(
    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  "Eigenvalues = (%s, %s), c=(%s, %s), d=(%s, %s)" ,
    tex_format =>  "\text{Eigenvalues }= (%s, %s), c=(%s, %s), d=(%s, %s)" ,
    checker => sub {
        my ( $correct, $student, $self ) = @_;
	my ($stuE1, $stuE2) = @{$student}[0..1];
	my @stuC = @{$student}[2..3];
	my @stuD = @{$student}[4..5];
        my $flag = -1;
        my $flag2 = 0;
        if( ($stuE1 && $stuE2)){
           if( ($stuE1 != $eig1) || (($stuE2 != $eig2) && 
                 ($stuE2 != - $eig2))) {
                 Value::Error("Your eigenvalues are incorrect.");
                 $flag=0; 
           }
        } else {
          Value::Error("You need to enter the eigenvalues.");
          $flag=0;
        }
        
		#Value::Error("D1 not empty " . $stuD[1]) if ($stuD[1] =~ /[0-9]/)  ;
	if ( $flag==-1 ) {
		if( ($stuE1 =~ /[0-9]/) && ($stuE2 =~ /[0-9]/) && ($stuC[0] =~ /[0-9]/) 
		  && ($stuC[1]  =~ /[0-9]/) && ($stuD[0] =~ /[0-9]/) && 
          ($stuD[1] =~ /[0-9]/) ) {
		  if ( ( $stuE1 || $stuE2 ) && ( $stuC[0] || $stuC[1] ) &&
	       ( $stuD[0] || $stuD[1] ) ) {
	        $flag2 = (( $mvals[0]->[0]*$stuC[0] + $mvals[0]->[1]*$stuC[1] ==
		       $stuE1*$stuC[0] - $stuE2*$stuD[0] ) &&
		     ( $mvals[1]->[0]*$stuC[0] + $mvals[1]->[1]*$stuC[1] ==
		       $stuE1*$stuC[1] - $stuE2*$stuD[1] ) &&
		     ( $mvals[0]->[0]*$stuD[0] + $mvals[0]->[1]*$stuD[1] ==
		       $stuE2*$stuC[0] + $stuE1*$stuD[0] ) &&
		     ( $mvals[1]->[0]*$stuD[0] + $mvals[1]->[1]*$stuD[1] ==
		       $stuE2*$stuC[1] + $stuE1*$stuD[1] ) );
        #if($flag2==0) {
	      #$flag2 = (( $mvals[0]->[0]*$stuC[0] + $mvals[0]->[1]*$stuC[1] ==
		       #$stuE1*$stuC[0] + $stuE2*$stuD[0] ) &&
		     #( $mvals[1]->[0]*$stuC[0] + $mvals[1]->[1]*$stuC[1] ==
		       #$stuE1*$stuC[1] + $stuE2*$stuD[1] ) &&
		     #( $mvals[0]->[0]*$stuD[0] + $mvals[0]->[1]*$stuD[1] ==
		       #- $stuE2*$stuC[0] + $stuE1*$stuD[0] ) &&
		     #( $mvals[1]->[0]*$stuD[0] + $mvals[1]->[1]*$stuD[1] ==
		       #- $stuE2*$stuC[1] + $stuE1*$stuD[1] ) );
         #}

	  }
      Value::Error("Your eigenvalues are correct, but not the eigenvectors") if($flag2==0);
      return $flag2
    } else {
      Value::Error("You need to enter the eigenvectors");
    }
  }
  }
);

BEGIN_TEXT
The matrix 
$BR 
\{ mbox( '\( A = \)', display_matrix($matrix) ) \}
$BR
has complex eigenvalues, \( \lambda_{1,2}= a \pm b i\),
where \(a=\) \{ $ev->ans_rule(5)\} and \(b=\) \{ $ev->ans_rule(5) \}.
$BR
$BR
The corresponding eigenvectors are \( v_{1,2}= c \pm d i\),
where \(c=\) ( \{ $ev->ans_rule(5) \},
	       \{ $ev->ans_rule(5) \} )
and \(d=\) ( \{ $ev->ans_rule(5) \},
	     \{ $ev->ans_rule(5) \} ).

END_TEXT

ANS($ev->cmp() );


ENDDOCUMENT() ;


## Old code below


## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## Tagged by tda2d

## DBsubject(Linear algebra)
## DBchapter(Eigenvalues and eigenvectors)
## DBsection(Complex eigenvalues and eigenvectors)
## Institution(TCNJ)
## MO(1)
## TitleText1('Linear Algebra with Applications')
## AuthorText1('Jeffrey Holt')
## EditionText1('1')
## Section1('6.5')
## Problem1('')
## KEYWORDS('determinant' 'characteristic polynomial' 'eigenvalues')


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "PGmatrixmacros.pl",
           "PGnumericalmacros.pl",
           "PGdiffeqmacros.pl"
);


TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

$a= new Matrix(2,2);
$a11 = random(-1,1,2);
$a12 = non_zero_random(-3,3,1);
$mult = non_zero_random(-2,2,1);
$a21 = $mult * $a11;
$b1 = random(-1,1,2);
$a22 = $mult * $a12 + $b1;
$a->assign(1,1, $a11 );
$a->assign(1,2, $a12 );
$a->assign(2,1, $a21 );
$a->assign(2,2, $a22 );
$a_lr = $a->decompose_LR();
$a_det = $a11 * $b1;
$b = $a_lr->invert_LR();
$e = new Matrix(2,2);
$eig1 = non_zero_random(-8,8,1);
$eig2 = non_zero_random(-8,8,1);
while ($eig1 == $eig2){ 
$eig2 = non_zero_random(-8,8,1);}
$e->assign(1,1, $eig1);
$e->assign(2,2, $eig1);
$e->assign(1,2, - $eig2);
$e->assign(2,1, $eig2);
$matrix = $a * $e *$b;
$matrix_lr = $matrix->decompose_LR();
$matrix_det = $matrix_lr->det_LR();

BEGIN_TEXT

The matrix 
$BR 
\{ mbox( '\( A = \)', display_matrix($matrix) ) \} 
$BR
has complex eigenvalues, \( \lambda_{1,2}= a \pm b i\), where \(a=\) \{ans_rule(5)\} and \(b=\) \{ans_rule(5)\}.
$BR
$BR
The corresponding eigenvectors are \( v_{1,2}= c \pm d i\), where \(c=\) ( \{ NAMED_ANS_RULE(vec1,5) \}  , \{ NAMED_ANS_RULE_OPTION(vec1,5) \} ) and \(d=\) ( \{ NAMED_ANS_RULE(vec2,5) \}  , \{ NAMED_ANS_RULE_OPTION(vec2,5) \} ).

END_TEXT

ANS(num_cmp($eig1));
ANS(num_cmp($eig2));
NAMED_ANS(vec1 => check_eigenvector($e->element(1,1), $matrix, correct_ans =>[$a->column(1)->list])   );
NAMED_ANS(vec2 =>check_eigenvector($e->element(2,2), $matrix, correct_ans =>[$a->column(2)->list])   );;
[$a->  $a->column(2)->list])   );;


######################################################### 
# sub  check_eigenvector {
#     my $eigenvalue = shift;
# 	my $matrix = shift;
# 	my %options = @_;
# 	my @correct_vector = ();
# 	@correct_vector = @{$options{'correct_ans'}} if defined($options{'correct_ans'});
# 	$ans_eval = sub {
# 		my $in = shift @_;
# 		my @in1 = split("~~0",$in);
# 		my $ans_hash = new AnswerHash(
# 			'score'					=>	0,
# 			'correct_ans'			=>	"( " . join(", ", @correct_vector ) . " )",
# 			'student_ans'			=>	"( " . join(", ", @in1 ) . " )",
# 			'ans_message'			=>	'',
# 			'type'					=>	"std_number",
# 			'preview_text_string'	=>	'',
# 			'preview_latex_string'	=>	'',
# 			'original_student_ans'	=>	$in
# 		);
# 		my @in=();
# 		foreach $i (0..$#in1) {
# 		    if ($in1[$i] =~/~~S/ ) {
# 				($in[$i],$PG_eval_errors,$PG_full_error_report) = PG_answer_eval(math_constants($in1[$i]));
# 			} else {
# 				$PG_eval_errors = ' ';
# 			}
# 			if ($PG_eval_errors) {			  ##error message from eval	or above
# 				$formattedSubmittedAnswer =	$PG_eval_errors;
# 				$formattedSubmittedAnswer =clean_up_error_msg($formattedSubmittedAnswer);
# 				$PGanswerMessage = 'There is a syntax error	in your	answer';
# 				$PGanswerMessage = '' if $PG_eval_errors eq	' ';
# 				my $ans_hash = new AnswerHash(
# 						'score'					=>	0,
# 						'correct_ans'			=>	"( " . join(", ", @correct_vector ) . " )",
# 						'student_ans'			=>	[@in],
# 						'ans_message'			=>	$PGanswerMessage,
# 						'type'					=>	'std_number',
# 						'preview_text_string'	=>	' ',
# 						'preview_latex_string'	=>	' ',
# 						'original_student_ans'	=>	"( " . join(", ", @in1 ) . " )"
# 				);
# 				return($ans_hash);
# 			}		
# 		}
# 		return($ans_hash) unless @correct_vector == @in;  # make sure the vectors are the same dimension
# 		$vec = new Matrix(2,1);
# 		$vec->assign(1,1, $in[0]);
# 		$vec->assign(2,1, $in[1]);
# 		$out_vec = $matrix * $vec;
# 		$diff[0] = $out_vec->element(1,1) - $vec->element(1,1)*$eigenvalue;
# 		$diff[1] = $out_vec->element(2,1) - $vec->element(2,1)*$eigenvalue;
# 		$ans_hash->{score} = zero_check(~~@diff);
# 		$ans_hash;
# 	};
# 	$ans_eval;
# }
#

ENDDOCUMENT() ;
