## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## Tagged by tda2d

## DBsubject(Linear algebra)
## DBchapter(Eigenvalues and eigenvectors)
## DBsection(Complex eigenvalues and eigenvectors)
## Institution('TCNJ')
## TitleText1('Linear Algebra with Applications')
## AuthorText1('Jeffrey Holt')
## EditionText1('1')
## Section1('6.1')
## Problem1('')
## KEYWORDS('determinant' 'characteristic polynomial' 'eigenvalues')


DOCUMENT();        # This should be the first executable line in the problem.
loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGgraphmacros.pl",
"PGmatrixmacros.pl", 
"PGnumericalmacros.pl",
"PGauxiliaryFunctions.pl",
"PGmorematrixmacros.pl"
        );
 
TEXT(beginproblem());    
# Do not show which answers are incorrect.
$showPartialCorrectAnswers = 0;

# FIRST MATRIX
$eig = random(-9,9,1);
$a= new Matrix(2,2);
$a11 = random(-1,1,2);
$a12 = non_zero_random(-3,3,1);
$mult = non_zero_random(-2,2,1);
$a21 = $mult * $a11;
$b1 = random(-1,1,2);
$a22 = $mult * $a12 + $b1;
$a->assign(1,1, $a11);
$a->assign(1,2, $a12);
$a->assign(2,1, $a21);
$a->assign(2,2, $a22);
$a_lr = $a->decompose_LR();
$a_det = $a11 * $b1;
$b = $a_lr->invert_LR();
$e = new Matrix(2,2);
$e->assign(1,1, $eig);
$e->assign(2,2, $eig);
$e->assign(1,2, non_zero_random(-2,2,1)); 
$e->assign(2,1, 0);	
$matrix = $a * $e *$b;
$matrix_lr = $matrix->decompose_LR();
$matrix_det = $matrix_lr->det_LR();
foreach $i (1..2) {
        foreach $j (1..2) {
                $m[$i][$j] = $matrix->element($i,$j);
                $m[$i][$j] = round($m[$i][$j]);
                $matrix -> assign($i,$j,$m[$i][$j]);
        }
} 

# SECOND MATRIX
$a= new Matrix(2,2);
$a11 = random(-1,1,2);
$a12 = non_zero_random(-3,3,1);
$mult = non_zero_random(-2,2,1);
$a21 = $mult * $a11;
$b1 = random(-1,1,2);
$a22 = $mult * $a12 + $b1;
$a->assign(1,1, $a11 );
$a->assign(1,2, $a12 );
$a->assign(2,1, $a21 );
$a->assign(2,2, $a22 );
$a_lr = $a->decompose_LR();
$a_det = $a11 * $b1;
$b = $a_lr->invert_LR();
$e = new Matrix(2,2);
$e->one();
$e->assign(1,1, non_zero_random(-8,8,1));
$e->assign(2,2, non_zero_random(-8,8,1));
while ($e->element(1,1) == $e->element(2,2)) { 
   $e->assign(2,2, non_zero_random(-8,8,1)); }
$matrix2 = $a * $e *$b;
$matrix2_lr = $matrix2->decompose_LR();
$matrix2_det = $matrix2_lr->det_LR();
foreach $i (1..2) {
        foreach $j (1..2) {
                $m[$i][$j] = $matrix2->element($i,$j);
                $m[$i][$j] = round($m[$i][$j]);
                $matrix2 -> assign($i,$j,$m[$i][$j]);
        }
}

# THIRD MATRIX
$a= new Matrix(2,2);
$a11 = non_zero_random(-7,7,2);
$b1 = random(2,9,1);
$r = random(-1,1,2);
$a12 = $b1 * $r;
$a21 = non_zero_random(-9,9,1);
if ($a12 * $a21 > 0) { $a21 = -1 * $a21; }
$a22 = random($a11-2, $a11+2,1);
$a->assign(1,1, $a11 );
$a->assign(1,2, $a12 );
$a->assign(2,1, $a21 );
$a->assign(2,2, $a22 );
$a_lr = $a->decompose_LR();
$a_det = $a11*$a22-$a21*$a12;
$matrix3 = $a;
$matrix3_lr = $matrix3->decompose_LR();
$matrix3_det = $matrix3_lr->det_LR();
foreach $i (1..2) {
        foreach $j (1..2) {
                $m[$i][$j] = $matrix3->element($i,$j);
                $m[$i][$j] = round($m[$i][$j]);
                $matrix3 -> assign($i,$j,$m[$i][$j]);
        }
} 

# FOURTH MATRIX
$a= new Matrix(2,2);
$a11 = random(-1,1,2);
$a12 = non_zero_random(-3,3,1);
$mult = non_zero_random(-2,2,1);
$a21 = $mult * $a11;
$b1 = random(-1,1,2);
$a22 = $mult * $a12 + $b1;
$a->assign(1,1, $a11 );
$a->assign(1,2, $a12 );
$a->assign(2,1, $a21 );
$a->assign(2,2, $a22 );
$a_lr = $a->decompose_LR();
$a_det = $a11 * $b1;
$b = $a_lr->invert_LR();
$e = new Matrix(2,2);
$e->one();
$e->assign(1,1, non_zero_random(-8,8,1));
$e->assign(2,2, non_zero_random(-8,8,1));
while ($e->element(1,1) == $e->element(2,2)) { 
   $e->assign(2,2, non_zero_random(-8,8,1)); }
$matrix4 = $a * $e *$b;
$matrix4_lr = $matrix4->decompose_LR();
$matrix4_det = $matrix4_lr->det_LR();
foreach $i (1..2) {
        foreach $j (1..2) {
                $m[$i][$j] = $matrix4->element($i,$j);
                $m[$i][$j] = round($m[$i][$j]);
                $matrix4 -> assign($i,$j,$m[$i][$j]);
        }
}

# Make a new checkbox multiple choice
$tf = new_pop_up_select_list();
$tf->ra_pop_up_list(["?"=>"Select an Answer", "Distinct Real" => "Distinct Real", "Repeated Real" => "Repeated Real", "Complex" => "Complex"]);
# $cmc now "contains" the checkbox multiple choice object.

# Insert some  questions and matching answers in the q/a list

$tf -> qa ( 

mbox( '\( A = \)', display_matrix($matrix) ), 
"Repeated Real",

mbox( '\( A = \)', display_matrix($matrix2) ), 
"Distinct Real",

mbox( '\( A = \)', display_matrix($matrix3) ), 
"Complex",

mbox( '\( A = \)', display_matrix($matrix4) ), 
"Distinct Real",

);

$tf->choose(4);

# Insert some incorrect answers

# Print the text using $mc->print_q for the questions and
# $mc->print_a to print the answers.
BEGIN_TEXT

Determine whether the eigenvalues of the matrix \( A \) are distinct real, repeated real, or complex.

$BR

 \{ $tf -> print_q \}

END_TEXT

# Enter the correct answers to be checked against the answers to the students.
ANS(str_cmp( $tf->ra_correct_ans )   ) ;

ENDDOCUMENT();
