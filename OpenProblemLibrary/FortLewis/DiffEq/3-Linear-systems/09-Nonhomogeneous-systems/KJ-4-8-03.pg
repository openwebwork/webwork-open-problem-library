## DESCRIPTION
## Linear systems: Nonhomogeneous linear systems
## ENDDESCRIPTION


## DBsubject(Differential equations)
## DBchapter(Systems of differential equations)
## DBsection(Nonhomogeneous systems)
## Date(01/31/2012)
## Institution(Fort Lewis College)
## Author(Paul Pearson and Veronika Furst)
## MLT(SDE-NH-IVP)
## Level(3)
## MO(1)
## TitleText1('Elementary Differential Equations')
## AuthorText1('Kohler and Johnson')
## EditionText1('2006')
## Section1('4.8')
## Problem1('3')
## KEYWORDS('Nonhomogeneous linear systems')


##################################
#  Initialization


DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGmatrixmacros.pl",
"MathObjects.pl",
"parserMultiAnswer.pl",
"unionLists.pl"
);

TEXT(beginproblem());


##################################
#  Setup

Context("Numeric");
Context()->variables->are(
t=>"Real"
);
Context()->flags->set(
  tolerance => 0.0001,
  tolType => "absolute",
);
Context()->variables->set(t=>{limits=>[-1,1]});

# Define real "pre-eigenvalues" for generating matrix A
$a = non_zero_random(-3,3,1);
do { $b = non_zero_random(-3,3,1); } until ($b != $a);

do { $c = non_zero_random(-3,3,1); } until ($c != -1);
# Eigenvectors:  <c,-1>, <1,1>

#  The matrix for the system
$A11 = $b + $a * $c;
$A12 = $b * $c - $a * $c;
$A21 = $b - $a;
$A22 = $a + $b * $c; 

# Redefine true eigenvalues of matrix A
$lambda1 = $a * ($c + 1);
$lambda2 = $b * ($c + 1);

# Initial conditions
$init1 = random(0,1,1);
$init2 = random(0,1,1);
 

########################################
#  Homogeneous (complementary) solution

# Correct complementary solution
# for the e-vect < c, -1 >
$yc1top = Formula("$c e^($lambda1*t)")->reduce;
$yc1bot = Formula("-e^($lambda1*t)")->reduce;

# for the e-vect < 1, 1 >
$yc2top = Formula("e^($lambda2*t)");
$yc2bot = Formula("e^($lambda2*t)");


$multians1 = MultiAnswer($yc1top, $yc1bot, $yc2top, $yc2bot)->with(

    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  
    "<table border='0' cellspacing='0'>
    <tr>
      <td><table border='0' cellspacing='5'><tr><td> %s </td></tr><tr><td> %s </td></tr></table></td>
      <td>&nbsp;&nbsp;</td>
      <td><table border='0' cellspacing='5'><tr><td> %s </td></tr><tr><td> %s </td></tr></table></td>
    </tr>
    </table>",
    tex_format =>  
    "\left\lbrack \begin{array}{r} %s \\ %s \end{array}\right\rbrack, \ \ 
     \left\lbrack \begin{array}{r} %s \\ %s \end{array}\right\rbrack",

    checker => sub {
        my ($correct, $student, $answerHash ) = @_;
        my @c = @{$correct};
	my @s = @{$student};

        my $flag1 = 0;
        my $flag2 = 0;

        Value::Error("Your solutions are not linearly independent") if
        $c[0]->typeMatch($s[0]) &&
        $c[1]->typeMatch($s[1]) &&
        $c[2]->typeMatch($s[2]) &&
        $c[3]->typeMatch($s[3]) &&
        ($s[0] * $s[3] == $s[1] * $s[2]);

        if ( $c[0]->typeMatch($s[0]) && 
             $c[1]->typeMatch($s[1]) && 
             ($s[0] != 0 || $s[1] != 0) ) 
        {
          if ( ($A11 * $s[0] + $A12 * $s[1] == $s[0]->D('t')) &&
               ($A21 * $s[0] + $A22 * $s[1] == $s[1]->D('t')) 
          ){
                $flag1=1;
          }
        }

        if ( $c[2]->typeMatch($s[2]) && 
             $c[3]->typeMatch($s[3]) && 
             ($s[2] != 0 || $s[3] != 0) ) 
        {
          if ( ($A11 * $s[2] + $A12 * $s[3] == $s[2]->D('t')) &&
               ($A21 * $s[2] + $A22 * $s[3] == $s[3]->D('t')) 
          ){
                $flag2=1;
          }
        }

        if ($flag1==1 && $flag2 ==1){
           return 1;
        } elsif ($flag1 == 1) {
           Value::Error("The vector on the left is correct");
        } elsif ($flag2 == 1) {
           Value::Error("The vector on the right is correct");
        }else{
           Value::Error("Neither of the vectors is correct");
        }
       
    }
);



##############################
#  Particular solution

do { $r = non_zero_random(-4,4,1) } until (
       $r != $lambda1 
    && $r != $lambda2 
    && $r * ($A22 + $A11 - $r) - $A11 * $A22 + $A12 * $A21 != 0
    && $A22 != $r
);

# Vector g(t) = <e^(rt), 0>
# Guess solution of the form e^(rt)*<scalar1, scalar2>

$g1 = Formula("e^($r*t)")->reduce;

$scalar1 = Real("($A22 - $r)/($r * ($A22 + $A11 - $r) - $A11 * $A22 + $A12 * $A21)")->reduce;
($num1, $den1) = reduce( $A22 - $r, ($r * ($A22 + $A11 - $r) - $A11 * $A22 + $A12 * $A21) );

$scalar2 = Real("(-1 * $A21)/($r * ($A22 + $A11 - $r) - $A11 * $A22 + $A12 * $A21)")->reduce;
($num2, $den2) = reduce( (-1 * $A21), ($r * ($A22 + $A11 - $r) - $A11 * $A22 + $A12 * $A21) );

$y1part = Compute("($num1 / $den1) e^($r t)");
$y2part = Compute("($num2 / $den2) e^($r t)");


$multians2 = MultiAnswer( $y1part, $y2part )->with(

    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  "<table border='0' cellspacing='5'>
    <tr><td> %s </td></tr>
    <tr><td> %s </td></tr>
    </table>",
    tex_format =>  "\left\lbrack\begin{array}{rr} %s \\\\ %s \end{array}\right\rbrack",

    checker => sub {
        my ($correct, $student, $answerHash ) = @_;
        my @c = @{$correct};
	my @s = @{$student};
        my @score = ();

        Value::Error('Answers should be non-constant functions') unless 
           $c[0]->typeMatch($s[0])
        && $c[1]->typeMatch($s[1])
        && $s[0]->isFormula 
        && $s[1]->isFormula;

        foreach my $i (0..1) {
          if ( $c[$i]->typeMatch($s[$i]) && $c[$i] == $s[$i] ) { 
             $score[$i] = 1; 
          } else { 
             $score[$i] = 0; 
          }
        }

        if ($score[0] == 1 && $score[1] == 1) {
           return 1;
        } elsif ($score[0] == 1) {
           Value::Error('The top entry is correct');
        } elsif ($score[1] == 1) {
           Value::Error('The bottom entry is correct');
        } else {
           Value::Error('Neither entry is correct');
        }

   }
);




#######################################
#  IVP solution

$ivpc2 = Compute("($init1 + $c * $init2 - $num1 / $den1 - $num2 / $den2 * $c) / (1+$c)");
$ivpc1 = Compute("($init1 - $ivpc2 - $num1 / $den1) / $c");

#$y1part = Compute("($num1 / $den1) e^($r t)");
#$y2part = Compute("($num2 / $den2) e^($r t)");

#$y1ivp = $y1part + $ivpc1*$yc1top + $ivpc2*$yc2top;
#$y2ivp = $y2part + $ivpc1*$yc1bot + $ivpc2*$yc2bot;

$y1ivp = Compute("($num1 / $den1) e^($r t) + $ivpc1 * $yc1top + $ivpc2 * $yc2top")->with(
  tolType => 'absolute',
  tolerance => .01,
);
$y2ivp = Compute("($num2 / $den2) e^($r t) + $ivpc1 * $yc1bot + $ivpc2 * $yc2bot")->with(
  tolType => 'absolute',
  tolerance => .01,
);

$multians3 = MultiAnswer( $y1ivp, $y2ivp )->with(

    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  "<table border='0' cellspacing='5'>
    <tr><td> %s </td></tr>
    <tr><td> %s </td></tr>
    </table>",
    tex_format =>  "\left\lbrack\begin{array}{rr} %s \\\\ %s \end{array}\right\rbrack",

    checker => sub {
        my ($correct, $student, $answerHash ) = @_;
        my @c = @{$correct};
	my @s = @{$student};
        my @score = ();

        Value::Error('Answers should be non-constant functions') unless 
           $c[0]->typeMatch($s[0])
        && $c[1]->typeMatch($s[1])
        && $s[0]->isFormula 
        && $s[1]->isFormula;

        foreach my $i (0..1) {
          if ( $c[$i]->typeMatch($s[$i]) && $c[$i] == $s[$i] ) { 
             $score[$i] = 1; 
          } else { 
             $score[$i] = 0; 
          }
        }

        if ($score[0] == 1 && $score[1] == 1) {
           return 1;
        } elsif ($score[0] == 1) {
           Value::Error('The top entry is correct');
        } elsif ($score[1] == 1) {
           Value::Error('The bottom entry is correct');
        } else {
           Value::Error('Neither entry is correct');
        }

   }
);



#######################################
#  Main text

Context()->texStrings;
BEGIN_TEXT

Consider the initial value problem
\[
\displaystyle
\ \boldsymbol{\vec{y}^{\, \prime}}
=
\left\lbrack
\begin{array}{rr}
$A11 & $A12 \\
$A21 & $A22
\end{array} 
\right\rbrack
\boldsymbol{\vec{y}}
+ \left\lbrack
\begin{array}{c}
$g1 \\
0
\end{array} 
\right\rbrack, 
\quad \quad
\boldsymbol{\vec{y}}(0)
= \left\lbrack
\begin{array}{c}
$init1 \\
$init2
\end{array} 
\right\rbrack.
\]

\{ BeginList('OL',type=>'a') \}

$ITEMSEP
$ITEM Form the complementary solution to the homogeneous equation.
$BR
$BR
\{ 
mbox(
[
' \( \boldsymbol{\vec{y}}_C(t) = c_1 \)', 
display_matrix([[$multians1->ans_rule(15)],[$multians1->ans_rule(15)]]),
' \( + \ c_2 \) ', 
display_matrix([[$multians1->ans_rule(15)],[$multians1->ans_rule(15)]]),
],
allowbreaks=>'yes'
) 
\}

$ITEMSEP
$ITEM Construct a particular solution by assuming the form 
\( \boldsymbol{\vec{y}}_P(t) = $g1 \boldsymbol{\vec{a}} \) 
and solving for the undetermined constant vector \( \boldsymbol{\vec{a}} \).
$BR
$BR
\{ 
mbox(
[
'\( \boldsymbol{\vec{y}}_P(t) = \)',
display_matrix([[$multians2->ans_rule(15)],[$multians2->ans_rule(15)]]),
],
allowbreaks=>'yes'
) 
\}

$ITEMSEP
$ITEM Form the general solution \( \boldsymbol{\vec{y}}(t) 
= \boldsymbol{\vec{y}}_C(t) + \boldsymbol{\vec{y}}_P(t) \) 
and impose the initial condition to obtain the solution of 
the initial value problem.
$BR
$BR
\{
mbox(
[
display_matrix([['\( y_1(t) \)'],['\( y_2(t) \)']]),
'\( = \)',
display_matrix([[$multians3->ans_rule(50)],[$multians3->ans_rule(50)]]),
],
allowbreaks=>'yes'
)
\}

\{ EndList('OL',type=>'a') \}
END_TEXT
Context()->normalStrings;


###################################
#  Answer evaluation

$showPartialCorrectAnswers = 1;

ANS( $multians1->cmp() );
ANS( $multians2->cmp() );
ANS( $multians3->cmp() );

COMMENT('MathObject version.');

ENDDOCUMENT();
