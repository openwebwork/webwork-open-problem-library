## DESCRIPTION
## Eigenvalues and systems of differential equations
## ENDDESCRIPTION


## DBsubject(Differential equations)
## DBchapter(Systems of differential equations)
## DBsection(Distinct real eigenvalues)
## Date(03/19/2011)
## Institution(Rochester and Fort Lewis College)
## Author(Anonymous and Paul Pearson)
## MLT(SDE-DRE-IVP)
## Level(4)
## MO(1)

## Original: Library/Rochester/setLinearAlgebra11Eigenvalues/ur_la_11_6.pg

####################################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGmatrixmacros.pl",
"MathObjects.pl",
"parserMultiAnswer.pl",
"unionLists.pl",
"answerHints.pl",
);

TEXT(beginproblem());


#####################################
#  Setup

Context("Numeric")->variables->are(t=>"Real");

$a = new Matrix(2,2);
# define matrix
        $a11 = random(-1,1,2);
        $a12 = non_zero_random(-3,3,1);
        $mult = non_zero_random(-2,2,1);
        $a21 = $mult * $a11;
        $b1 = random(-1,1,2);
        $a22 = $mult * $a12 + $b1;

        $a->assign(1,1, $a11 );
        $a->assign(1,2, $a12 );
        $a->assign(2,1, $a21 );
        $a->assign(2,2, $a22 );
        $a_lr = $a->decompose_LR();
        $a_det = $a11 * $b1;

# define inverse matrix
	$b = $a_lr->invert_LR();

# define eigenvalues
    $e = new Matrix(2,2);
    $e->one();
    $e->assign(1,1, non_zero_random(-8,8,1));
    $e->assign(2,2, non_zero_random(-8,8,1));
# make sure that the eigenvalues are distinct
	while ($e->element(1,1) == $e->element(2,2)) { $e->assign(2,2, non_zero_random(-8,8,1)); } 

# define final matrix
	$matrix = $a * $e *$b;
	$matrix_lr = $matrix->decompose_LR();
	$matrix_det = $matrix_lr->det_LR();

$m11 = $matrix->element(1,1);
$m12 = $matrix->element(1,2);
$m21 = $matrix->element(2,1);
$m22 = $matrix->element(2,2);


$C1 = non_zero_random(-3,3,1);
$C2 = non_zero_random(-3,3,1);


if ( $e->element(1,1) < $e->element(2,2) ) {

  $eval1 = $e->element(1,1);
  $eval2 = $e->element(2,2);

  @answers = ($a11, $a21, $a12, $a22);
  
  $x1init = Real("$C1 * $a11 + $C2 * $a12");
  $x2init = Real("$C1 * $a21 + $C2 * $a22");

  $x1 = Compute("$C1 * $a11 e^($eval1 t) + $C2 * $a12 e^($eval2 t)");
  $x2 = Compute("$C1 * $a21 e^($eval1 t) + $C2 * $a22 e^($eval2 t)");

} else {

  $eval1 = $e->element(2,2);
  $eval2 = $e->element(1,1);

  @answers = ($a12, $a22, $a11, $a21);

  $x1init = Real("$C1 * $a12 + $C2 * $a11");
  $x2init = Real("$C1 * $a22 + $C2 * $a21");

  $x1 = Compute("$C1 * $a12 e^($eval1 t) + $C2 * $a11 e^($eval2 t)");
  $x2 = Compute("$C1 * $a22 e^($eval1 t) + $C2 * $a21 e^($eval2 t)");

}


$multians1 = MultiAnswer($eval1, $answers[0], $answers[1], $eval2, $answers[2], $answers[3])->with(

    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  
    "<table border='0' cellspacing='0'>
    <tr>
      <td> %s, </td>
      <td><table border='0' cellspacing='5'><tr><td> %s </td></tr><tr><td> %s </td></tr></table></td>
      <td>&nbsp;&nbsp; %s,</td>
      <td><table border='0' cellspacing='5'><tr><td> %s </td></tr><tr><td> %s </td></tr></table></td>
    </tr>
    </table>",
    tex_format =>  
    "%s, \left\lbrack \begin{array}{r} %s \\ %s \end{array}\right\rbrack; \ \ 
     %s, \left\lbrack \begin{array}{r} %s \\ %s \end{array}\right\rbrack",

    checker => sub {
        my ($correct, $student, $answerHash ) = @_;
        my @c = @{$correct};
	my @s = @{$student};

        $flag1 = 0;
        $flag2 = 0;
        $flag  = 0;

        Value::Error("Your vectors are parallel") if
        $c[1]->typeMatch($s[1]) &&
        $c[2]->typeMatch($s[2]) &&
        $c[4]->typeMatch($s[4]) &&
        $c[5]->typeMatch($s[5]) &&
        ($s[1] * $s[5] == $s[2] * $s[4]);
        
        if ( $c[0]->typeMatch($s[0]) && 
             $c[1]->typeMatch($s[1]) && 
             $c[2]->typeMatch($s[2]) && 
             ($s[1] != 0 || $s[2] != 0) ) 
        {
          if ( ($m11 * $s[1] + $m12 * $s[2] == $s[0] * $s[1]) &&
               ($m21 * $s[1] + $m22 * $s[2] == $s[0] * $s[2]) 
          ){
                $flag1=1;
          }
        }

        if ( $c[3]->typeMatch($s[3]) && 
             $c[4]->typeMatch($s[4]) && 
             $c[5]->typeMatch($s[5]) && 
             ($s[4] != 0 || $s[5] != 0) ) 
        {
          if ( ($m11 * $s[4] + $m12 * $s[5] == $s[3] * $s[4]) &&
               ($m21 * $s[4] + $m22 * $s[5] == $s[3] * $s[5]) 
          ){
                $flag2=1;
          }
        }

        if($flag1==1 && $flag2 ==1){
           $flag=1;
        }else{
           if ($flag1 == 1) {
              Value::Error("The eigenpair { lambda1, v1 } is correct");
           } elsif ($flag2 == 1) {
              Value::Error("The eigenpair { lambda2, v2 } is correct");
           }else{
              Value::Error("Neither of the eigenpairs is correct");
           }
        }
        return $flag; 
       
    }
);





######################################
#  Main text

Context()->texStrings;
BEGIN_TEXT
\{ BeginList('OL',type=>'a') \}

$ITEM
Find the eigenvalues and eigenvectors of the matrix
\( 
\displaystyle
\left\lbrack
\begin{array}{rr}
$m11 & $m12 \\
$m21 & $m22
\end{array}
\right\rbrack.
\)
$BCENTER
\{ 
mbox(
[
'\( \lambda_1 = \) ',
$multians1->ans_rule(5),
', \( \boldsymbol{\vec{v}_1} =  \) ', 
display_matrix([[$multians1->ans_rule(5)],[$multians1->ans_rule(5)]]),
', and \( \lambda_2 = \) ',
$multians1->ans_rule(5),
', \( \boldsymbol{\vec{v}_2} =  \) ', 
display_matrix([[$multians1->ans_rule(5)],[$multians1->ans_rule(5)]]),
],
allowbreaks=>'yes'
) 
\}
$ECENTER


$ITEMSEP
$ITEM
Solve the system of differential equations
\( 
\displaystyle
\boldsymbol{\vec{x}^{\, \prime}}
=
\left\lbrack
\begin{array}{rr}
$m11 & $m12 \\
$m21 & $m22
\end{array}
\right\rbrack
\boldsymbol{\vec{x}}
\)
satisfying the initial conditions
\(
\displaystyle
\left\lbrack
\begin{array}{r}
x_1(0) \\
x_2(0)
\end{array}
\right\rbrack
=
\left\lbrack
\begin{array}{r}
$x1init \\
$x2init
\end{array}
\right\rbrack.
\)
$BR
$BR
\( x_1(t) = \) \{ ans_rule(40) \}
$BR
\( x_2(t) = \) \{ ans_rule(40) \}

\{ EndList('OL') \}
END_TEXT
Context()->normalStrings;


#######################################
#  Answer evaluation

$showPartialCorrectAnswers = 1;

ANS( $multians1->cmp() );

ANS( $x1->cmp() );
ANS( $x2->cmp() );

COMMENT('MathObject version.  Randomized with distinct real eigenvalues and integral answers.');

ENDDOCUMENT(); 