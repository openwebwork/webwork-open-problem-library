##DESCRIPTION
##  Curl of a vector field
##ENDDESCRIPTION


## DBsubject(Calculus - multivariable)
## DBchapter(Calculus of vector fields)
## DBsection(Curl and divergence)
## Date(10/31/09)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## Level(3)
## MO(1)
## TitleText1('Calculus')
## AuthorText1('Hughes-Hallett')
## EditionText1('4')
## Section1('20.3')
## Problem1('')
## TitleText2('Calculus')
## AuthorText2('Hughes-Hallett')
## EditionText2('5')
## Section2('20.3')
## Problem2('')
## KEYWORDS('Curl','Curl of a vector field')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGcourse.pl",
"MathObjects.pl",
"parserVectorUtils.pl",
"answerCustom.pl",
"parserPopUp.pl",
);

TEXT(beginproblem());


#####################################
#  Setup

Context("Vector");

$a = random(2,5,1);
$b = random(2,5,1);
$c = random(2,5,1);

$FX = Formula("x^($a)");
$FY = Formula("y^($b)");
$FZ = Formula("z^($c)");

$F = Vector("<$FX,$FY,$FZ>");


sub curl {
  
  my $FX = shift;
  my $FY = shift;
  my $FZ = shift;

  my $FXy = $FX->D('y');
  my $FXz = $FX->D('z');
  
  my $FYx = $FY->D('x');
  my $FYz = $FY->D('z');

  my $FZx = $FZ->D('x');
  my $FZy = $FZ->D('y');

  return Vector("<($FZy)-($FYz),($FXz)-($FZx),($FYx)-($FXy)>");

}

$answera = curl($FX,$FY,$FZ);

$P = non_zero_point3D();
@Pcomp = $P->value;

$answerb = $answera->eval(x=>"$Pcomp[0]",y=>"$Pcomp[1]",z=>"$Pcomp[2]");

$popup = PopUp(["Choose","irrotational","not irrotational","cannot be determined"],"irrotational");


########################################
#  Main text

Context()->texStrings;
BEGIN_TEXT
Compute the curl of the vector field 
\( \vec{F} =  $F \).
$BR
\( \mathrm{curl}(\vec{F}(x,y,z)) \) = 
\{ ans_rule(30) \}
$BR
$BR
What is the curl at the point \( $P \)?
$BR
\( \mathrm{curl}(\vec{F}$P) \) = 
\{ ans_rule(30) \}
$BR
$BR
Is this vector field irrotational or not?
\{ $popup->menu() \}
END_TEXT
Context()->normalStrings;

###############################################
#  Answer evaluation

$showPartialCorrectAnswers = 1;
install_problem_grader(~~&std_problem_grader);

sub mycheck {
  my ($correct, $student, $ansHash) = @_;

  if ( 
       ($correct . i == $student . i) &&  
       ($correct . j == $student . j) && 
       ($correct . k == $student . k)        
     ) { return 1; } else { return 0; }
}

ANS(custom_cmp( $answera, ~~&mycheck, showCoordinateHints=>1 ) );

ANS(custom_cmp( $answerb, ~~&mycheck, showCoordinateHints=>1 ) );

ANS($popup->cmp() );


COMMENT('MathObject version');
ENDDOCUMENT();
