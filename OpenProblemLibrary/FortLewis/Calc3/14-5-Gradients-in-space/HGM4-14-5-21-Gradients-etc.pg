## DESCRIPTION
##   Estimating directional derivatives
## ENDDESCRIPTION


## DBsubject(Calculus - multivariable)
## DBchapter(Differentiation of multivariable functions)
## DBsection(Differentiability, linearization and tangent planes)
## Date(10/15/09)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## Level(4)
## MO(1)
## TitleText1('Calculus')
## AuthorText1('Hughes-Hallett')
## EditionText1('4')
## Section1('14.5')
## Problem1('29')
## TitleText2('Calculus')
## AuthorText2('Hughes-Hallett')
## EditionText2('5')
## Section2('14.5')
## Problem2('29')
## KEYWORDS('Gradient', 'Directional Derivative')

DOCUMENT();        

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "parserVectorUtils.pl",
  "parserImplicitPlane.pl",
  "PGcourse.pl",
);


TEXT(beginproblem());

##############################################
#  Setup

Context("ImplicitPlane");

#Context("Vector");
#Context()->flags->set(reduceConstants=>0);

#
#  The point
#
$x = random(-5,-1,1);
$y = Real("-($x)");
$z = random(2,5,1);
$k = abs($x) * $z;
$P = Point($x,$y,$z);

#
#  The function
#

$g = Formula("cos(x + y)")->reduce;
$h = Formula("e^(x * z + $k)")->reduce;
$f = $g - $h;
#$f = Formula("cos(x + y) - e^(x * z + $k)")->reduce;

#
#  The gradient
#
$fx = $f->D('x');
$fy = $f->D('y');
$fz = $f->D('z');
$gradf = Formula("<$fx, $fy, $fz>") -> reduce;

$N = $gradf -> eval(x=>$x,y=>$y,z=>$z) -> reduce;


##############################################
#  Main text

Context()->texStrings;
Context()->flags->set(reduceConstants=>0);
BEGIN_TEXT

Check that the point \( $P \) lies on 
the surface \( $g = $h \).  
$BR
$BR

(a) View this surface as a level surface for a 
function \( f(x,y,z) \).  Find a vector normal 
to the surface at the point \( $P \).
$BR
$BR
\{ans_rule(30)\}

$BR
$BR
(b) Find an implicit equation for the tangent plane to 
the surface at \( $P \).
$BR
$BR
\{ans_rule(40)\} 

END_TEXT
Context()->normalStrings;

##################################################
#  Answers


# make a custom answer checker as a subroutine
sub parallel_vector_cmp {
  my ($correct, $student, $ansHash) = @_;
  return $student->isParallel($correct);
}

ANS($N->cmp( checker=>~~&parallel_vector_cmp, showCoordinateHints => 0 ) );

ANS(ImplicitPlane($P,$N)->cmp);

$showPartialCorrectAnswers = 1;


COMMENT('MathObject version');
ENDDOCUMENT();