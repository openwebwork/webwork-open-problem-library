## DESCRIPTION
## Perl subroutines
## ENDDESCRIPTION


## DBsubject(WeBWorK)
## DBchapter(WeBWorK tutorial)
## DBsection(Fort Lewis tutorial 2011)
## Date(01/30/2011)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('sample', 'WeBWorK')


#######################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGunion.pl",
);

# TEXT(beginproblem());


#######################
#  Escaped characters
#  Special formatting

$AT  = MODES( TeX => '\\@', HTML => '&#64;' );
$ATV = MODES( TeX => '@',   HTML => '&#64;' ); # inside verbatim environments

$DOL  = MODES( TeX => '\$',  HTML => '&#36;' );
$DOLV = MODES( TeX => '$',   HTML => '&#36;' );

$US   = MODES( TeX => '\_', HTML => '&#95;' );
$USV  = MODES( TeX => '_',  HTML => '&#95;' );

$LT = MODES(TeX => '\ensuremath{<}', Latex2HTML => '\\lt ', HTML => '&lt;', HTML_tth => '<' );
$GT = MODES(TeX => '\ensuremath{>}', Latex2HTML => '\\gt ', HTML => '&gt;', HTML_tth => '>' );

#$GT = MODES(TeX => '\ensuremath{\symbol{62}}', Latex2HTML => '\\gt ', HTML => '&#62;', HTML_tth => '>' );

$BCODE = MODES(TeX => '\verb+', HTML => '<code>' );
$ECODE = MODES(TeX => '+', HTML => '</code>' );

$BPRE = MODES(TeX => '\begin{verbatim}', HTML => '<pre>' );
$EPRE = MODES(TeX => '\end{verbatim}', HTML => '</pre>' );


$BTITLE = MODES(TeX => '\begin{center}\textbf{', HTML => '<h2><center>');
$ETITLE = MODES(TeX => '}\end{center}', HTML => '</center></h2>');


#######################
#  Setup

Context("Numeric");


#######################
#  Main Text

Context()->texStrings;
BEGIN_TEXT
${BTITLE}Subroutines in Perl${ETITLE}
$PAR

Named subroutines (or procedures or methods) are blocks of code that can take scalar inputs and return outputs.  They have the general form ${BCODE}sub name { code; }${ECODE}.  

\{ BeginList('OL') \}

$ITEM In this example we use a subroutine to define a function.
${BPRE}
sub fx { my ${DOLV}t=shift(); return 4*cos(${DOLV}t); }
${EPRE}
The shift operator grabs the input to the subroutine, which is then stored in the local scalar variable ${BCODE}${DOLV}t${ECODE}.  This named subroutine can be used later, for example, to create an array ${BCODE}${ATV}xcoord${ECODE} of x-coordinates of points on the radius 4 circle centered at the origin.
${BPRE}
foreach my ${DOLV}i (0..6) {
   ${DOLV}xcoord[${DOLV}i] = fx(${DOLV}i);
}
${EPRE}


$ITEM In this example, we create a subroutine that returns the max of two numerical inputs.
${BPRE}
sub max {
    ${DOLV}a = shift();
    ${DOLV}b = shift();
    if (${DOLV}a >= ${DOLV}b) {
       return ${DOLV}a;
    } else {
       return ${DOLV}b;
    }
}
max(-1,5);
${EPRE}

$ITEM By default, the inputs to a subroutine are stored in the local array ${BCODE}${ATV}${USV}${ECODE} and the scalars in this array can be accessed via ${BCODE}${DOLV}${USV}[0]${ECODE}, ${BCODE}${DOLV}${USV}[1]${ECODE}, etc.  We could rewrite our max subroutine as follows.
${BPRE}
sub max {
    if (${DOLV}_[0] >= ${DOLV}_[1]) {
       return ${DOLV}_[0];
    } else {
       return ${DOLV}_[1];
    }
}
max(-1,5);
${EPRE}

\{ EndList('OL') \}

$PAR
${BTITLE}Online References${ETITLE}
\{ BeginList('UL') \}
$ITEM \{ htmlLink('http://www.perltutorial.org/perl-subroutine-function.aspx','Perl subroutines (perltutorial.com)',"TARGET=~~"_new~~"") \}

$ITEM \{ htmlLink('http://perldoc.perl.org/functions/sort.html','Perl sort (perl.org)',"TARGET=~~"_new~~"") \}

$ITEM \{ htmlLink('http://perldoc.perl.org/perlreftut.html','Perl references (perl.org)',"TARGET=~~"_new~~"") \}

\{ EndList('UL') \}
END_TEXT
Context()->normalStrings;


#######################
#  Answer Evaluation

$showPartialCorrectAnswers = 1;

#$answer = Compute("pi * $scalar^2");

#ANS( $answer->cmp() );

;

ENDDOCUMENT();
