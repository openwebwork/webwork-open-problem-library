## DESCRIPTION
## Perl conditional statements
## ENDDESCRIPTION


## DBsubject(WeBWorK)
## DBchapter(WeBWorK Tutorial)
## DBsection(Fort Lewis Tutorial 2011)
## Date(01/30/2011)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('sample', 'WeBWorK')


#######################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGunion.pl",
);

# TEXT(beginproblem());


#######################
#  Escaped characters
#  Special formatting

$AT  = MODES( TeX => '\\@', HTML => '&#64;' );
$ATV = MODES( TeX => '@',   HTML => '&#64;' ); # inside verbatim environments

$DOL  = MODES( TeX => '\$',  HTML => '&#36;' );
$DOLV = MODES( TeX => '$',   HTML => '&#36;' );

$LT = MODES(TeX => '\ensuremath{<}', Latex2HTML => '\\lt ', HTML => '&lt;', HTML_tth => '<' );
$GT = MODES(TeX => '\ensuremath{>}', Latex2HTML => '\\gt ', HTML => '&gt;', HTML_tth => '>' );

#$GT = MODES(TeX => '\ensuremath{\symbol{62}}', Latex2HTML => '\\gt ', HTML => '&#62;', HTML_tth => '>' );

$BCODE = MODES(TeX => '\verb+', HTML => '<code>' );
$ECODE = MODES(TeX => '+', HTML => '</code>' );

$BPRE = MODES(TeX => '\begin{verbatim}', HTML => '<pre>' );
$EPRE = MODES(TeX => '\end{verbatim}', HTML => '</pre>' );

$BTITLE = MODES(TeX => '\begin{center}\textbf{', HTML => '<h2><center>');
$ETITLE = MODES(TeX => '}\end{center}', HTML => '</center></h2>');


#######################
#  Setup

Context("Numeric");


#######################
#  Main Text

Context()->texStrings;
BEGIN_TEXT
${BTITLE}Relational and Logical Operators in Perl${ETITLE}
$PAR

The following relational and logical operators are defined in Perl.  The syntax is different for comparing numbers and strings, and it is important not to mix them up.

\{ BeginList('OL') \}

$ITEM ${BCODE}==${ECODE} equality for numbers, ${BCODE}eq${ECODE} equality for strings

$ITEM ${BCODE}!=${ECODE} not equal for numbers, ${BCODE}ne${ECODE} not equal for strings

$ITEM ${BCODE}<${ECODE} less than for numbers, ${BCODE}lt${ECODE} less than for strings

$ITEM ${BCODE}<=${ECODE} less than or equal for numbers, ${BCODE}le${ECODE} less than or equal for strings

$ITEM ${BCODE}>${ECODE} greater than for numbers, ${BCODE}gt${ECODE} greater than for strings

$ITEM ${BCODE}>=${ECODE} greater than or equal for numbers, ${BCODE}ge${ECODE} greater than or equal for strings

$ITEM ${BCODE}&&${ECODE} and for numbers, ${BCODE}and${ECODE} for strings

$ITEM ${BCODE}||${ECODE} or for numbers, ${BCODE}or${ECODE} for strings

\{ EndList('OL') \}



$PAR
${BTITLE}Conditional Statements in Perl${ETITLE}
$PAR


The most commonly used conditional statements when writing WebWork questions are

\{ BeginList('OL') \}

$ITEM If-then statements:
${BPRE}
if ( 5 == 5 ) { ${DOLV}a = 1; }
if ( 5 <= 6 ) { ${DOLV}b = 1; }
if ( "Foo" eq "Foo" ) { }
${EPRE}
The first two statements are true, so ${BCODE}${DOLV}a = 1;${ECODE} 
and ${BCODE}${DOLV}b = 1;${ECODE}.  The last statement is true, 
but no action is taken since it is empty between the curly braces.


$ITEMSEP
$ITEM If-then-else statements:
${BPRE}
if ( 5 >= 6 ) { 
   ${DOLV}a = 1; 
} else {
   ${DOLV}a = 2;
}
${EPRE}
The first statement is false, so ${BCODE}${DOLV}a = 2;${ECODE} 


$ITEMSEP
$ITEM If-then-elsif-then-else statements:
${BPRE}
if ( 5 >= 6 ) { 
   ${DOLV}a = 1; 
} elsif ( "Roy" eq "James" ) {
   ${DOLV}a = 2;
} else {
   ${DOLV}a = 3;
}
${EPRE}
The first two statements are false, so ${BCODE}${DOLV}a = 3;${ECODE} 
 
$ITEMSEP
$ITEM Compound statements:
${BPRE}
if ( 5 >= 6 || 7 < 10 ) { 
   ${DOLV}a = 1; 
} 
if ( 5 >= 6 && 7 < 10 ) { 
   ${DOLV}b = 1; 
} 
${EPRE}
The first if statement would set ${BCODE}${DOLV}a = 1;${ECODE}, but 
the second if statement would take no action.
 

\{ EndList('OL') \} 

$PAR
${BTITLE}Online References${ETITLE}
\{ BeginList('UL') \}
$ITEM \{ htmlLink('http://www.tizag.com/perlT/perlif.php','Perl if statements (tizag.com)',"TARGET=~~"_new~~"") \}
$ITEM \{ htmlLink('http://www.tizag.com/perlT/perloperators.php','Perl operators (tizag.com)',"TARGET=~~"_new~~"") \}
$ITEM \{ htmlLink('http://www.perltutorial.org/perl-if.aspx','Perl if statements (perltutorial.com)',"TARGET=~~"_new~~"") \}
\{ EndList('UL') \}
END_TEXT
Context()->normalStrings;


#######################
#  Answer Evaluation

$showPartialCorrectAnswers = 1;

#$answer = Compute("pi * $scalar^2");

#ANS( $answer->cmp() );

COMMENT('MathObject version');

ENDDOCUMENT();
