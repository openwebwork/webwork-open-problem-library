## DESCRIPTION
## Perl arithmetic
## ENDDESCRIPTION


## DBsubject(WeBWorK)
## DBchapter(WeBWorK Tutorial)
## DBsection(Fort Lewis Tutorial 2011)
## Date(01/30/2011)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('sample', 'WeBWorK')


#######################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGunion.pl",
);

# TEXT(beginproblem());


#######################
#  Escaped characters
#  Special formatting

$AT  = MODES( TeX => '\\@', HTML => '&#64;' );
$ATV = MODES( TeX => '@',   HTML => '&#64;' ); # inside verbatim environments

$DOL  = MODES( TeX => '\$',  HTML => '&#36;' );
$DOLV = MODES( TeX => '$',   HTML => '&#36;' );

$LT = MODES(TeX => '\ensuremath{<}', Latex2HTML => '\\lt ', HTML => '&lt;', HTML_tth => '<' );
$GT = MODES(TeX => '\ensuremath{>}', Latex2HTML => '\\gt ', HTML => '&gt;', HTML_tth => '>' );

#$GT = MODES(TeX => '\ensuremath{\symbol{62}}', Latex2HTML => '\\gt ', HTML => '&#62;', HTML_tth => '>' );

$US   = MODES( TeX => '\_', HTML => '&#95;' );
$USV  = MODES( TeX => '_',  HTML => '&#95;' );

$BCODE = MODES(TeX => '\verb!', HTML => '<code>' );
$ECODE = MODES(TeX => '!', HTML => '</code>' );

$BPRE = MODES(TeX => '\begin{verbatim}', HTML => '<pre>' );
$EPRE = MODES(TeX => '\end{verbatim}', HTML => '</pre>' );

$BPERL = MODES(TeX => '\ensuremath{\backslash\lbrace}', HTML => '&#92;&#123;' );
$EPERL = MODES(TeX => '\ensuremath{\backslash\rbrace}', HTML => '&#92;&#125;' );

$BPERLV = MODES(TeX => '\{', HTML => '&#92;&#123;' );
$EPERLV = MODES(TeX => '\}', HTML => '&#92;&#125;' );


$BTEX = MODES(TeX => '\ensuremath{\backslash(}', HTML => '&#92;&#40;' );
$ETEX = MODES(TeX => '\ensuremath{\backslash)}', HTML => '&#92;&#41;' );

$BTEXV = MODES(TeX => '\(', HTML => '&#92;&#40;' );
$ETEXV = MODES(TeX => '\)', HTML => '&#92;&#41;' );

$BTEXX = MODES(TeX => '\ensuremath{\backslash\lbrack}', HTML => '&#92;&#91;' );
$ETEXX = MODES(TeX => '\ensuremath{\backslash\rbrack}', HTML => '&#92;&#93;' );

$BTEXXV = MODES(TeX => '\[', HTML => '&#92;&#91;' );
$ETEXXV = MODES(TeX => '\]', HTML => '&#92;&#93;' );


$end = "END";
$doc = "DOCUMENT";
$pp = "();";
$ed = $end.$doc.$pp;

$BTITLE = MODES(TeX => '\begin{center}\textbf{', HTML => '<h2><center>');
$ETITLE = MODES(TeX => '}\end{center}', HTML => '</center></h2>');


#######################
#  Setup

Context("Numeric");


#######################
#  Main Text

Context()->texStrings;
BEGIN_TEXT
${BTITLE}Methods Defined on MathObjects${ETITLE}
$PAR

All MathObjects have methods defined on them, such as ${BCODE}cmp${ECODE}, ${BCODE}perl${ECODE}, ${BCODE}perlFunction${ECODE}, ${BCODE}value${ECODE}, ${BCODE}TeX${ECODE}, ${BCODE}string${ECODE}, ${BCODE}stringify${ECODE}, and ${BCODE}getFlag${ECODE}.  If the MathObject is a Formula, it also has the methods ${BCODE}eval${ECODE}, ${BCODE}reduce${ECODE}, ${BCODE}substitute${ECODE}, and the differentiation operator ${BCODE}D${ECODE} defined on them.  We discuss the most commonly used of these methods.  

\{ BeginList('UL') \}

$ITEM The method ${BCODE}cmp${ECODE} is used when checking student's answers.  For example,
${BPRE}
${DOLV}answer1 = Compute("tan(x)");
${DOLV}answer2 = List(Formula("5x"),Formula("3"));

ANS( ${DOLV}answer1->cmp() );
ANS( ${DOLV}answer2->cmp() );
${EPRE}


$ITEMSEP
$ITEM The method ${BCODE}TeX${ECODE} produces TeX code from a MathObject.  For example,
${BPRE}
${DOLV}f = Compute("sin(x)/x");

BEGIN${USV}TEXT
${BTEXV} \displaystyle ${DOLV}f->TeX ${ETEXV}
END${USV}TEXT
${EPRE}
where ${BCODE}${DOLV}f->TeX${ECODE} produces the TeX code ${BCODE}\frac{\sin(x)}{x}${ECODE}.  To apply the TeX method automatically to every MathObject occurring inside a text block, you can change the context to ${BCODE}texStrings${ECODE} to interpret all MathObject strings as TeX strings, but don't forget to change the context back to ${BCODE}normalStrings${ECODE}.
${BPRE}
Context()->texStrings;
BEGIN${USV}TEXT
${BTEXV} \displaystyle ${DOLV}f->TeX ${ETEXV}
END${USV}TEXT
Context()->normalStrings;
${EPRE}   


$ITEMSEP
$ITEM The method ${BCODE}reduce${ECODE} method will perform very elementary simplification of formulas, such as changing ${BCODE}++${ECODE} to ${BCODE}+${ECODE}, ${BCODE}+-${ECODE} or ${BCODE}-+${ECODE} to ${BCODE}-${ECODE}, and ${BCODE}--${ECODE} to ${BCODE}+${ECODE}.  For example,
${BPRE}
${DOLV}a = -1;
${DOLV}f = Formula("x + ${DOLV}a y - ${DOLV}a z")->reduce;
${EPRE}
will make it the same as ${BCODE}${DOLV}f = Formula("x-y+z")${ECODE}.


$ITEMSEP
$ITEM Calling the method ${BCODE}eval${ECODE} on a formula produces a numerical value (a Real).
${BPRE}
${DOLV}f = Formula("sin(x)");
${DOLV}g = ${DOLV}f->eval(x=>pi/2);
${EPRE}
will give ${BCODE}${DOLV}g${ECODE} the value 1.


$ITEMSEP
$ITEM Calling the method ${BCODE}substitute${ECODE} on a formula produces a MathObject Formula (not a Real) with its parse string intact (which may give more insightful correct answer hints from the answer evaluator).
${BPRE}
${DOLV}f = Formula("sin(x)");
${DOLV}g = ${DOLV}f->substitute(x=>pi/2);
${EPRE}
will give ${BCODE}${DOLV}g${ECODE} the value ${BCODE}Formula("sin(pi/2)")${ECODE}.


$ITEMSEP
$ITEM Calling the method ${BCODE}D${ECODE} on a formula produces the derivative as a MathObject Formula.
${BPRE}
${DOLV}f = Formula("sin(x)");
${DOLV}g = ${DOLV}f->D('x');
${EPRE}
will set ${BCODE}${DOLV}g = Formula("cos(x)")${ECODE}.

\{ EndList('UL') \}


$PAR
${BTITLE}Online References${ETITLE}
\{ BeginList('UL') \}
$ITEM \{ htmlLink('http://webwork.maa.org/wiki/Introduction_to_MathObjects#Methods_shared_by_all_MathObjects','Methods defined on MathObjects',"TARGET=~~"_new~~"") \}
\{ EndList('UL') \}
END_TEXT
Context()->normalStrings;


#######################
#  Answer Evaluation

$showPartialCorrectAnswers = 1;

#$answer = Compute("pi * $scalar^2");

#ANS( $answer->cmp() );

COMMENT('MathObject version');

ENDDOCUMENT();
