## DESCRIPTION
## Perl loops
## ENDDESCRIPTION


## DBsubject(WeBWorK)
## DBchapter(WeBWorK tutorial)
## DBsection(Fort Lewis tutorial 2011)
## Date(01/30/2011)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('sample', 'WeBWorK')


#######################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGunion.pl",
);

# TEXT(beginproblem());


#######################
#  Escaped characters
#  Special formatting

$AT  = MODES( TeX => '\\@', HTML => '&#64;' );
$ATV = MODES( TeX => '@',   HTML => '&#64;' ); # inside verbatim environments

$DOL  = MODES( TeX => '\$',  HTML => '&#36;' );
$DOLV = MODES( TeX => '$',   HTML => '&#36;' );

$LT = MODES(TeX => '\ensuremath{<}', Latex2HTML => '\\lt ', HTML => '&lt;', HTML_tth => '<' );
$GT = MODES(TeX => '\ensuremath{>}', Latex2HTML => '\\gt ', HTML => '&gt;', HTML_tth => '>' );

#$GT = MODES(TeX => '\ensuremath{\symbol{62}}', Latex2HTML => '\\gt ', HTML => '&#62;', HTML_tth => '>' );

$BCODE = MODES(TeX => '\verb+', HTML => '<code>' );
$ECODE = MODES(TeX => '+', HTML => '</code>' );

$BPRE = MODES(TeX => '\begin{verbatim}', HTML => '<pre>' );
$EPRE = MODES(TeX => '\end{verbatim}', HTML => '</pre>' );

$BTITLE = MODES(TeX => '\begin{center}\textbf{', HTML => '<h2><center>');
$ETITLE = MODES(TeX => '}\end{center}', HTML => '</center></h2>');


#######################
#  Setup

Context("Numeric");


#######################
#  Main Text

Context()->texStrings;
BEGIN_TEXT
${BTITLE}For and While Loops in Perl${ETITLE}
$PAR

\{ BeginList('OL') \}

$ITEM For loops have the general form 
${BPRE}for (initial value, test, increment) { 
  code; 
}
${EPRE}  
In this example, we add up the first four numbers and store their value in ${BCODE}${DOLV}n${ECODE}.  Notice the recursive assignment ${BCODE}${DOLV}n = ${DOLV}n ...${ECODE} is allowed in Perl.
${BPRE}
${DOLV}n = 0;
for (${DOLV}i = 1; ${DOLV}i < 5; ${DOLV}i++) { 
   ${DOLV}n = ${DOLV}n + ${DOLV}i;
}
${EPRE}
  


$ITEMSEP
$ITEM Foreach loops run through arrays and have the general form 
${BPRE}foreach ${DOLV}element ${ATV}array { 
   code; 
}
${EPRE} 
and will execute the code for each element of the array.  In this example we compute 4 factorial and store it in ${BCODE}${DOLV}n${ECODE}.  By writing ${BCODE}my ${DOLV}i${ECODE} (instead of just ${BCODE}${DOLV}i${ECODE}) in the foreach loop we declare the variable ${BCODE}${DOLV}i${ECODE} is local (it has limited scope).  This means that outside of the foreach loop the variable ${BCODE}${DOLV}i${ECODE} always takes the value 75, while inside the foreach loop the variable ${BCODE}${DOLV}i${ECODE} will take the values in the array ${BCODE}(1..4)${ECODE}, and the values outside and inside the foreach loop never interfere with each other.
${BPRE}
${DOLV}i = 75;
${DOLV}n = 1;
foreach my ${DOLV}i (1..4) {
   ${DOLV}n = ${DOLV}n * ${DOLV}i;
}
${EPRE}
Foreach loops can also be used to fill arrays with values.
${BPRE}
${ATV}evens = ();
foreach my ${DOLV}i (0..10) {
   ${DOLV}evens[${DOLV}i] = 2*${DOLV}i;
}
${EPRE}


$ITEMSEP
$ITEM While loops have the general form 
${BPRE}
while (condition) { 
  code; 
}
${EPRE} 
and will continue to execute code as long as the condition remains true.  In this example, we increment ${BCODE}${DOLV}i${ECODE} by +1 so long as it is not equal to 5.  We could have used ${BCODE}<${ECODE} instead of ${BCODE}!=${ECODE} and gotten the same end result ${BCODE}${DOLV}i = 5;${ECODE}.
${BPRE}
${DOLV}i = 0;
while (${DOLV}i != 5) { ${DOLV}i++; }
${EPRE}

\{ EndList('OL') \} 



$PAR
${BTITLE}Online References${ETITLE}
\{ BeginList('UL') \}
$ITEM \{ htmlLink('http://www.perltutorial.org/perl-for.aspx','Perl for loops (perltutorial.com)',"TARGET=~~"_new~~"") \}
$ITEM \{ htmlLink('http://www.perltutorial.org/perl-while-loop.aspx','Perl while loops (perltutorial.com)',"TARGET=~~"_new~~"") \}

$ITEM \{ htmlLink('http://www.tizag.com/perlT/perlfor.php','Perl for loops (tizag.com)',"TARGET=~~"_new~~"") \}
$ITEM \{ htmlLink('http://www.tizag.com/perlT/perlwhile.php','Perl while loops (tizag.com)',"TARGET=~~"_new~~"") \}
\{ EndList('UL') \}
END_TEXT
Context()->normalStrings;


#######################
#  Answer Evaluation

$showPartialCorrectAnswers = 1;

#$answer = Compute("pi * $scalar^2");

#ANS( $answer->cmp() );

;

ENDDOCUMENT();
