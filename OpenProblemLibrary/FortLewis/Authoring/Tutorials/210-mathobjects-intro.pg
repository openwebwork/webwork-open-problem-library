## DESCRIPTION
## MathObjects introduction
## ENDDESCRIPTION


## DBsubject(WeBWorK)
## DBchapter(WeBWorK tutorial)
## DBsection(Fort Lewis tutorial 2011)
## Date(01/30/2011)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('sample', 'WeBWorK')


#######################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGunion.pl",
);

# TEXT(beginproblem());


#######################
#  Escaped characters
#  Special formatting

$AT  = MODES( TeX => '\\@', HTML => '&#64;' );
$ATV = MODES( TeX => '@',   HTML => '&#64;' ); # inside verbatim environments

$DOL  = MODES( TeX => '\$',  HTML => '&#36;' );
$DOLV = MODES( TeX => '$',   HTML => '&#36;' );

$LT = MODES(TeX => '\ensuremath{<}', Latex2HTML => '\\lt ', HTML => '&lt;', HTML_tth => '<' );
$GT = MODES(TeX => '\ensuremath{>}', Latex2HTML => '\\gt ', HTML => '&gt;', HTML_tth => '>' );

#$GT = MODES(TeX => '\ensuremath{\symbol{62}}', Latex2HTML => '\\gt ', HTML => '&#62;', HTML_tth => '>' );

$BCODE = MODES(TeX => '\verb!', HTML => '<code>' );
$ECODE = MODES(TeX => '!', HTML => '</code>' );

$BPRE = MODES(TeX => '\begin{verbatim}', HTML => '<pre>' );
$EPRE = MODES(TeX => '\end{verbatim}', HTML => '</pre>' );

$BTITLE = MODES(TeX => '\begin{center}\textbf{', HTML => '<h2><center>');
$ETITLE = MODES(TeX => '}\end{center}', HTML => '</center></h2>');


#######################
#  Setup

Context("Numeric");


#######################
#  Main Text

Context()->texStrings;
BEGIN_TEXT
${BTITLE}Introduction to MathObjects${ETITLE}
$PAR

Perl has very limited data types: scalars (i.e., numbers and strings), and arrays and hashes of scalars.  To Perl, a string like ${BCODE}"sin(x^2+6)"${ECODE} is just a string, not a function.  MathObjects were created by Davide Cervone at Union College to address this and other problems.  MathObjects are a set of formal objects introduced to make manipulation of mathematical objects in WeBWorK problems more intuitive.  For instance, ${BCODE}Formula("sin(x^2+6)")${ECODE} is a MathObject that takes the Perl string ${BCODE}"sin(x^2+6)"${ECODE} and makes it a function that can be evaluated, differentiated, can produce a TeX representation, can produce a Perl function (i.e., a subroutine that returns the value of this function), etc.  

$PAR

MathObjects are useful and powerful because they are much more than just a number or a string --- they know what context they live in, mathematical operations can be done with them, and they have methods defined on them.

\{ BeginList('OL') \}

$ITEM MathObjects know what context they live in:
${BPRE}
Context("Numeric");
${DOLV}f = Formula("sin(x^2/3)");
${DOLV}a = Real("sqrt(pi/2)");

Context("Vector");
${DOLV}v = Vector("<1,2,3>");

Context("Inequalities");
${DOLV}domain = Inequality("-16 < x < 9");
${EPRE}
In fact, we could replace ${BCODE}Formula${ECODE}, ${BCODE}Real${ECODE}, ${BCODE}Vector${ECODE}, and ${BCODE}Inequality${ECODE} all by ${BCODE}Compute${ECODE}, in which case MathObjects would discern the type of object from the context.  ${BCODE}Compute${ECODE} is usually the preferred way to convert a string to a MathObject. It preserves the original string and uses it to display the correct answer expected of the student in the most useful form.  The angle brackets in the vector and the inequality are interpreted differently (and correctly) because these MathObjects know which context they live in.  


$ITEMSEP
$ITEM Mathematical operations can be done with MathObjects:
${BPRE}
Context("Numeric");
${DOLV}f = Compute("sin(x^2/3)");
${DOLV}a = Compute("sqrt(pi/2)");
${DOLV}g = ${DOLV}a * ${DOLV}f;
${EPRE}
Note that ${BCODE}${DOLV}g${ECODE} is a MathObject, as it is the product of two MathObjects that live in the same context.  Mathematical operations cannot be done with MathObjects that live in different contexts.


$ITEMSEP
$ITEM MathObjects have methods defined on them:
${BPRE}
Context("Numeric");
${DOLV}f = Compute("sin(x^2/3)");
${DOLV}a = Compute("sqrt(pi/2)");

# evaluate f(a)
${DOLV}b = ${DOLV}f->eval(x=>${DOLV}a);

# partial derivative df/dx
${DOLV}fx = ${DOLV}f->D('x');

# basic algebraic simplification to x+4
${DOLV}c = -4;
${DOLV}g = Compute("x - ${DOLV}c")->reduce();

# get a string of TeX code for f
# returns "\sin\!\left(\frac{x^{2}}{3}\right)"
${DOLV}h = ${DOLV}f->TeX();
${EPRE}
We have called the evaluate ${BCODE}->eval()${ECODE}, partial differentiation ${BCODE}->D('x')${ECODE}, very basic algebraic simplification ${BCODE}->reduce()${ECODE}, and TeX string ${BCODE}->TeX()${ECODE} methods on MathObjects.

\{ EndList("OL") \}



$PAR
${BTITLE}Why Use MathObjects?${ETITLE}
$PAR

\{ BeginList('OL') \}

$ITEM MathObjects convert ordinary strings into a rich variety of data types such as points, vectors, matrices, real numbers, complex numbers, inequalities, etc.  (Before MathObjects, Perl strings were the best game in town.)

$ITEM You can use a single MathObject, such as a formula, to produce numeric values, other formulas, TeX output, and answer strings.  This avoids having to type the function a multitude of different ways, which would make maintaining the problem harder.  (Before MathObjects, you often had to produce each of these separately and manually.) 

$ITEM The answer checkers for MathObjects are better at giving students feedback on syntax errors and are more versatile.  (Before MathObjects, very little feedback was given.)

$ITEM The basic syntax ${BCODE}${DOLV}f->cmp()${ECODE} for comparing a student's answer to the correct answer ${BCODE}${DOLV}f${ECODE} is the same no matter what type of MathObject ${BCODE}${DOLV}f${ECODE} is.  (Before MathObjects, you had to know the name of the answer checker you wanted to apply to a Perl string.)

\{ EndList('OL') \}



$PAR
${BTITLE}Online References${ETITLE}
\{ BeginList('UL') \}

$ITEM \{ htmlLink('https://courses.webwork.maa.org/webwork2/cervone_course/setAIM-Talk/?login_practice_user=true','Talk on MathObjects',"TARGET=~~"_new~~"") \}


$ITEM \{ htmlLink('http://webwork.maa.org/wiki/Category:MathObjects','MathObjects documentation',"TARGET=~~"_new~~"") \}

$ITEM \{ htmlLink('http://webwork.maa.org/wiki/Introduction_to_MathObjects','Introduction to MathObjects',"TARGET=~~"_new~~"") \}

$ITEM \{ htmlLink('http://webwork.maa.org/pod/pg_TRUNK/doc/MathObjects/UsingMathObjects.html','Using MathObjects',"TARGET=~~"_new~~"") \}

$ITEM \{ htmlLink('http://webwork.maa.org/pod/pg_TRUNK/doc/MathObjects/MathObjectsAnswerCheckers.html','MathObjects Answer Checkers',"TARGET=~~"_new~~"") \}

$ITEM \{ htmlLink('http://webwork.maa.org/pod/pg_TRUNK/doc/MathObjects/README.html','MathObjects README',"TARGET=~~"_new~~"") \}


\{ EndList('UL') \}

END_TEXT
Context()->normalStrings;


#######################
#  Answer Evaluation

$showPartialCorrectAnswers = 1;

#$answer = Compute("pi * $scalar^2");

#ANS( $answer->cmp() );

;

ENDDOCUMENT();
