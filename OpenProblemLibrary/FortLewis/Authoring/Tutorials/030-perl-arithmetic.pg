## DESCRIPTION
## Perl arithmetic
## ENDDESCRIPTION


## DBsubject(WeBWorK)
## DBchapter(WeBWorK tutorial)
## DBsection(Fort Lewis tutorial 2011)
## Date(01/30/2011)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('sample', 'WeBWorK')


#######################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGunion.pl",
);

# TEXT(beginproblem());


#######################
#  Escaped characters
#  Special formatting

$AT  = MODES( TeX => '\\@', HTML => '&#64;' );
$ATV = MODES( TeX => '@',   HTML => '&#64;' ); # inside verbatim environments

$DOL  = MODES( TeX => '\$',  HTML => '&#36;' );
$DOLV = MODES( TeX => '$',   HTML => '&#36;' );

$LT = MODES(TeX => '\ensuremath{<}', HTML => '&lt;');
$GT = MODES(TeX => '\ensuremath{>}', HTML => '&gt;');

#$GT = MODES(TeX => '\ensuremath{\symbol{62}}', Latex2HTML => '\\gt ', HTML => '&#62;', HTML_tth => '>' );

$BCODE = MODES(TeX => '\verb!', HTML => '<code>' );
$ECODE = MODES(TeX => '!', HTML => '</code>' );

$BPRE = MODES(TeX => '\begin{verbatim}', HTML => '<pre>' );
$EPRE = MODES(TeX => '\end{verbatim}', HTML => '</pre>' );

$BTITLE = MODES(TeX => '\begin{center}\textbf{', HTML => '<h2><center>');
$ETITLE = MODES(TeX => '}\end{center}', HTML => '</center></h2>');

#######################
#  Setup

Context("Numeric");


#######################
#  Main Text

Context()->texStrings;
BEGIN_TEXT
${BTITLE}Arithmetic in Perl${ETITLE}
$PAR

The following operations are defined in perl: ${BCODE}+, -, *, /, **, %${ECODE}, where ${BCODE}2**3${ECODE} (=8) is exponentiation and ${BCODE}12 % 7${ECODE} (=5) is modular arithmetic.


$PAR

The syntax for arithmetic operations in Perl is straightforward with these 
exceptions.

\{ BeginList("OL") \}

$ITEM Always write ${BCODE}*${ECODE} when multiplying, since juxtaposition does not mean multiply in Perl.
${BPRE}
5 * 2;  # correct
(5)(2); # incorrect
5 2;    # incorrect
${EPRE}


$ITEM Use ${BCODE}**${ECODE} for exponentiation instead of ${CARET}, since ${CARET} is 
the shift operator in Perl.
${BPRE}
5**2; # correct
5^2;  # incorrect
${EPRE}


$ITEM When subtracting or negating, use extra space or parentheses.
${BPRE}
5 - -2;   # correct
5 -(-2);  # correct
5 + -2;   # correct
5 +(-2);  # correct

${DOLV}a = -2; 
5 - ${DOLV}a;   # correct
5 -(${DOLV}a);  # correct
${EPRE}
which will return the correct values \{ 5 - -2; \}, \{ 5 -(-2); \}, \{ 5 + -2; \}, \{ 5 +(-2); \}, \{ $a = -2; 5 - $a; \}, \{ $a = -2; 5-($a); \}.  However, if you don't use extra space or parentheses, you run into the problem that ${BCODE}--${ECODE} is the decrement operator in Perl (e.g., ${BCODE}5--${ECODE} is the same as ${BCODE}4${ECODE}).
${BPRE}
5--2;  # error
${EPRE}

$ITEM Be careful with fractional exponents.  Perl will evaluate ${BCODE}(-4)**(2/3)${ECODE} as \( e^{(2/3) \ln(-4)} \) which will throw an error since the natural log of -4 is undefined.   The correct syntax would be
${BPRE}
((-4)**2)**(1/3);
${EPRE}
which will return the value \{ ((-4)**2)**(1/3) \} we expect.

\{ EndList("OL") \}

From a mathematicians perspective, these problems with Perl arithmetic are rather annoying.  In fact, later in the tutorial we will see that a new part of the PG language called MathObjects, which were created by Davide Cervone at Union College, will circumvent the first three problems of Perl arithmetic.  MathObjects will not let you raise a negative number to a non-integer power (it will give an error), so you will still have to be careful with fractional exponents.


$PAR
${BTITLE}Online References${ETITLE}
\{ BeginList('UL') \}
$ITEM \{ htmlLink('http://perldoc.perl.org/perlnumber.html','Perl numbers (perl.org)',"TARGET=~~"_new~~"") \}
$ITEM \{ htmlLink('http://perldoc.perl.org/perlop.html','Perl operators (perl.org)',"TARGET=~~"_new~~"") \}
$ITEM \{ htmlLink('http://www.tizag.com/perlT/perlnumbers.php','Perl numbers (tizag.com)',"TARGET=~~"_new~~"") \}
$ITEM \{ htmlLink('http://www.tizag.com/perlT/perloperators.php','Perl operators (tizag.com)',"TARGET=~~"_new~~"") \}
\{ EndList('UL') \}
END_TEXT
Context()->normalStrings;


#######################
#  Answer Evaluation

$showPartialCorrectAnswers = 1;

#$answer = Compute("pi * $scalar^2");

#ANS( $answer->cmp() );

;

ENDDOCUMENT();
