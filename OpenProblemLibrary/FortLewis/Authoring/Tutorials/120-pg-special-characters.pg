## DESCRIPTION
## PG special characters
## ENDDESCRIPTION


## DBsubject(WeBWorK)
## DBchapter(WeBWorK tutorial)
## DBsection(Fort Lewis tutorial 2011)
## Date(01/30/2011)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('sample', 'WeBWorK')


#######################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGunion.pl",
);

# TEXT(beginproblem());

$AT  = MODES( TeX => '\\@', HTML => '&#64;' );
$ATV = MODES( TeX => '@',   HTML => '&#64;' ); # inside verbatim environments

$DOL  = MODES( TeX => '\$',  HTML => '&#36;' );
$DOLV = MODES( TeX => '$',   HTML => '&#36;' );

$LT = MODES(TeX => '\ensuremath{<}', Latex2HTML => '\\lt ', HTML => '&lt;', HTML_tth => '<' );
$GT = MODES(TeX => '\ensuremath{>}', Latex2HTML => '\\gt ', HTML => '&gt;', HTML_tth => '>' );

$US   = MODES( TeX => '\_', HTML => '&#95;' );
$USV  = MODES( TeX => '_',  HTML => '&#95;' );

$DOUBLETILDE   = MODES( TeX => '\(\sim\sim\)', HTML => '<code>&#126;&#126;</code>' );


$BCODE = MODES(TeX => '\verb+', HTML => '<code>' );
$ECODE = MODES(TeX => '+', HTML => '</code>' );

$BPRE = MODES(TeX => '\begin{verbatim}', HTML => '<pre>' );
$EPRE = MODES(TeX => '\end{verbatim}', HTML => '</pre>' );

$BPERL = MODES(TeX => '\ensuremath{\backslash\lbrace}', HTML => '&#92;&#123;' );
$EPERL = MODES(TeX => '\ensuremath{\backslash\rbrace}', HTML => '&#92;&#125;' );

$BPERLV = MODES(TeX => '\{', HTML => '&#92;&#123;' );
$EPERLV = MODES(TeX => '\}', HTML => '&#92;&#125;' );


$BTEX = MODES(TeX => '\ensuremath{\backslash(}', HTML => '&#92;&#40;' );
$ETEX = MODES(TeX => '\ensuremath{\backslash)}', HTML => '&#92;&#41;' );

$BTEXV = MODES(TeX => '\(', HTML => '&#92;&#40;' );
$ETEXV = MODES(TeX => '\)', HTML => '&#92;&#41;' );


$BTEXX = MODES(TeX => '\ensuremath{\backslash\lbrack}', HTML => '&#92;&#91;' );
$ETEXX = MODES(TeX => '\ensuremath{\backslash\rbrack}', HTML => '&#92;&#93;' );

$BTEXXV = MODES(TeX => '\[', HTML => '&#92;&#91;' );
$ETEXXV = MODES(TeX => '\]', HTML => '&#92;&#93;' );


$end = "END";
$doc = "DOCUMENT";
$pp = "();";

$ed = $end.$doc.$pp;

$BTITLE = MODES(TeX => '\begin{center}\textbf{', HTML => '<h2><center>');
$ETITLE = MODES(TeX => '}\end{center}', HTML => '</center></h2>');


#######################
#  Setup

Context("Numeric");


#######################
#  Main Text

Context()->texStrings;
BEGIN_TEXT
${BTITLE}Special Characters and Commands in PG${ETITLE}
$PAR

\{ BeginList('OL') \}

$ITEM Escape characters:  Both TeX and Perl have backslash their escape character (think of all the commands that start with backslash like ${BCODE}\newline${ECODE} in LaTeX and ${BCODE}\n${ECODE} in Perl).  Since PG is built on both TeX and Perl, this creates a conflict --- in PG, which language (TeX or Perl) should get to use backslash as its escape character?  To resolve this conflict, PG reserves backslash as the escape character for all TeX commands.  To get the Perl escape code to work in PG, use two tildes ${DOUBLETILDE} instead of backslash.  When the PG file is executed, the two tildes (in PG mode) will automatically be remapped to backslash (in Perl mode).  So, if you have a reference to an array in PG, you should use ${DOUBLETILDE}${BCODE}${ATV}array${ECODE} instead of ${BCODE}\${ATV}array${ECODE}.

$ITEMSEP

$ITEM A text block in a PG file is enclosed by ${BCODE}BEGIN_TEXT${ECODE} and ${BCODE}END_TEXT${ECODE}, ${BCODE}BEGIN_HINT${ECODE} ${BCODE}END_HINT${ECODE}, or ${BCODE}BEGIN_SOLUTION${ECODE} ${BCODE}END_SOLUTION${ECODE}.  Everything in a text block is in a new mode determined by PG, and it is possible to temporarily switch to TeX inline mode using ${BTEX} ${ETEX}, TeX display mode using ${BTEXX} ${ETEXX}, or Perl mode using ${BPERL} ${EPERL}.  Inside a text block, you will ${BBOLD}not${EBOLD} be able to access some special characters like ${DOLLAR}, ${PERCENT}, ${CARET}, ${US} simply by typing them, so PG has special commands for them.  
${BPRE}
${DOLV}DOLLAR  produces ${DOLV}
${DOLV}PERCENT produces %
${DOLV}CARET   produces ^
${DOLV}US      produces ${USV}
${EPRE}
In a text block, you may want to break a line, create a new paragraph, center text, or make text bold, italic, underlined, or quoted.  The commands for these things are different in HTML and TeX, so PG provides you with commands that work properly in both HTML and TeX.  Notice that, for example, we have written ${BCODE}${DOLV}{BBOLD}Text made bold${DOLV}{EBOLD}${ECODE} with extra curly braces around ${BCODE}${DOLV}{BBOLD}${ECODE} and ${BCODE}${DOLV}{EBOLD}${ECODE} to keep them from running together with the text they enclose.  However, since the centered text is on a separate line from ${BCODE}${DOLV}BCENTER${ECODE} and ${BCODE}${DOLV}ECENTER${ECODE}, there is no chance of things running together and we omit the extra curly braces.
${BPRE}
${DOLV}BR  produces a line break
${DOLV}PAR produces a paragraph break

${DOLV}BCENTER
Text made centered
${DOLV}ECENTER

${DOLV}{BBOLD}Text made bold${DOLV}{EBOLD}
${DOLV}{BITALIC}Text made italic${DOLV}{EITALIC}
${DOLV}{BUL}Text underlined${DOLV}{EUL}
${DOLV}{LQ}Quoted text with curly TeX quotes${DOLV}{RQ}
${EPRE} 
If you want inequalities or curly braces, use TeX's math mode.
${BPRE}
${BTEXV} < ${ETEXV}       less than
${BTEXV} > ${ETEXV}       greater than
${BTEXV} \leq ${ETEXV}    less than or equal
${BTEXV} \geq ${ETEXV}    greater than or equal
${BTEXV} \lbrace ${ETEXV} left curly brace
${BTEXV} \rbrace ${ETEXV} right curly brace
${EPRE}
The commands just discussed are defined in ${BCODE}PGbasicmacros.pl${ECODE}.

\{ EndList('OL') \}


$PAR
${BTITLE}Online References${ETITLE}
\{ BeginList('UL') \}

$ITEM \{ htmlLink('http://webwork.maa.org/pod/pg_TRUNK/PGbasicmacros.pl','Standard PG macros (POD documentation)',"TARGET=~~"_new~~"") \} 
$ITEM \{ htmlLink('http://webwork.maa.org/viewvc/system/trunk/pg/macros/PGbasicmacros.pl','Standard PG macros (source)',"TARGET=~~"_new~~"") \}


\{ EndList('UL') \}
END_TEXT
Context()->normalStrings;


#######################
#  Answer Evaluation

$showPartialCorrectAnswers = 1;

#$answer = Compute("pi * $scalar^2");

#ANS( $answer->cmp() );

;

ENDDOCUMENT();
