## DESCRIPTION
## Perl references
## ENDDESCRIPTION


## DBsubject(WeBWorK)
## DBchapter(WeBWorK tutorial)
## DBsection(Fort Lewis tutorial 2011)
## Date(01/30/2011)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('sample', 'WeBWorK')


#######################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGunion.pl",
);

# TEXT(beginproblem());


#######################
#  Escaped characters
#  Special formatting

$AT  = MODES( TeX => '\\@', HTML => '&#64;' );
$ATV = MODES( TeX => '@',   HTML => '&#64;' ); # inside verbatim environments

$DOL  = MODES( TeX => '\$',  HTML => '&#36;' );
$DOLV = MODES( TeX => '$',   HTML => '&#36;' );

$US   = MODES( TeX => '\_', HTML => '&#95;' );
$USV  = MODES( TeX => '_',  HTML => '&#95;' );

$LT = MODES(TeX => '\ensuremath{<}', Latex2HTML => '\\lt ', HTML => '&lt;', HTML_tth => '<' );
$GT = MODES(TeX => '\ensuremath{>}', Latex2HTML => '\\gt ', HTML => '&gt;', HTML_tth => '>' );

#$GT = MODES(TeX => '\ensuremath{\symbol{62}}', Latex2HTML => '\\gt ', HTML => '&#62;', HTML_tth => '>' );


$BCODE = MODES(TeX => '\verb+', HTML => '<code>' );
$ECODE = MODES(TeX => '+', HTML => '</code>' );

$BPRE = MODES(TeX => '\begin{verbatim}', HTML => '<pre>' );
$EPRE = MODES(TeX => '\end{verbatim}', HTML => '</pre>' );

$BTITLE = MODES(TeX => '\begin{center}\textbf{', HTML => '<h2><center>');
$ETITLE = MODES(TeX => '}\end{center}', HTML => '</center></h2>');


#######################
#  Setup

Context("Numeric");


#######################
#  Main Text

Context()->texStrings;
BEGIN_TEXT
${BTITLE}References in Perl${ETITLE}
$PAR

Recall that arrays and hashes in Perl are arrays and associative arrays of ${BITALIC}scalars.${EITALIC}  This means that Perl does not have arrays of arrays (i.e., matrices).  References were introduced in Perl 5 to make up for this shortcoming.  A reference is a scalar that can refer to an entire array, and if you have a reference to an array you can recover the array from it.  Since a reference is a scalar, you can have an array of references, which is every bit as useful as an array of arrays. 

\{ BeginList('OL') \}

$ITEM If you put a backslash in front of an array or hash, yet get a reference to it.
${BPRE}
${ATV}array = (11..15);
%hash = ( Jan => 1, Feb => 2 );
${DOLV}arrayref = \${ATV}array;
${DOLV}hashref  = \%hash;
${EPRE}


$ITEM To recover an array or a hash from a reference, use ${BCODE}${ATV}{${DOLV}ref}${ECODE} or ${BCODE}%{${DOLV}ref}${ECODE}
${BPRE}
${ATV}newarray = ${ATV}{${DOLV}arrayref};
%newhash  = %{${DOLV}hashref};
${EPRE}


$ITEM You can use the array ${BCODE}${ATV}{${DOLV}ref}${ECODE} and the hash ${BCODE}%{${DOLV}ref}${ECODE} just like any other array or hash.  For example, we access the scalars in these arrays.
${BPRE}
${DOLV}{${DOLV}arrayref}[1];    # 12
${DOLV}newarray[1];       # 12
${DOLV}{${DOLV}hashref}{"Feb"}; # 2
${DOLV}newhash{"Feb"};    # 2
${EPRE}


$ITEM You can create unnamed (or anonymous) arrays ${BCODE}[ items ]${ECODE} and hashes ${BCODE}{ items }${ECODE} that return references.  We create some of these below and assign them to scalar variables.
${BPRE}
${DOLV}aref = [11,12,13];
${DOLV}href = { Mar => 3, Apr => 4 };
${EPRE}

$ITEM We can use the unnamed (or anonymous) arrays to create a named array of unnamed arrays (i.e., an array of references).
${BPRE}
${ATV}matrix = (
[ "a00", "a01", "a02" ],
[ "a10", "a11", "a12" ],
[ "a20", "a21", "a22" ] 
);
${EPRE}

$ITEM We can access the scalars in this matrix using ${BCODE}${DOLV}matrix[rowindex][columnindex]${ECODE}.  Remember: the indexing always starts with zero.
${BPRE}
${DOLV}matrix[1][2]; # element "a12"
${EPRE}

$ITEM References can also be used to pass arrays to subroutines.  For example, suppose you want to create a subroutine that takes in two references to arrays of data and processes them somehow.
${BPRE}
# arrays of data
${ATV}xdata = (10,23,31);
${ATV}ydata = (95,77,84);

sub data_processor {
    # read references
    my ${DOLV}xref = shift;
    my ${DOLV}yref = shift;
    # convert references to arrays
    my ${ATV}x = ${ATV}{${DOLV}xref};
    my ${ATV}y = ${ATV}{${DOLV}yref};
    # now process arrays ${ATV}x and ${ATV}y
}

# inputs are references to arrays
data_processor( \${ATV}xdata, \${ATV}ydata );
${EPRE}

\{ EndList('OL') \}



$PAR
${BTITLE}Online References${ETITLE}
\{ BeginList('UL') \}

$ITEM \{ htmlLink('http://perldoc.perl.org/perlreftut.html','Perl references (perl.org)',"TARGET=~~"_new~~"") \}

\{ EndList('UL') \}
END_TEXT
Context()->normalStrings;


#######################
#  Answer Evaluation

$showPartialCorrectAnswers = 1;

#$answer = Compute("pi * $scalar^2");

#ANS( $answer->cmp() );

;

ENDDOCUMENT();
