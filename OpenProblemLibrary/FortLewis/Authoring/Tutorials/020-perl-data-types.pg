## DESCRIPTION
## Perl data types: scalars, arrays, and hashes
## ENDDESCRIPTION


## DBsubject(WeBWorK)
## DBchapter(WeBWorK Tutorial)
## DBsection(Fort Lewis Tutorial 2011)
## Date(01/30/2011)
## Institution(Fort Lewis College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('sample', 'WeBWorK')


#######################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGunion.pl",
);

# TEXT(beginproblem());


#######################
#  Escaped characters
#  Special formatting

$AT  = MODES( TeX => '\\@', HTML => '&#64;' );
$ATV = MODES( TeX => '@',   HTML => '&#64;' ); # inside verbatim environments

$DOL  = MODES( TeX => '\$',  HTML => '&#36;' );
$DOLV = MODES( TeX => '$',   HTML => '&#36;' );

$LT = MODES(TeX => '\ensuremath{<}', Latex2HTML => '\\lt ', HTML => '&lt;', HTML_tth => '<' );
$GT = MODES(TeX => '\ensuremath{>}', Latex2HTML => '\\gt ', HTML => '&gt;', HTML_tth => '>' );

#$GT = MODES(TeX => '\ensuremath{\symbol{62}}', Latex2HTML => '\\gt ', HTML => '&#62;', HTML_tth => '>' );

$BCODE = MODES(TeX => '\verb+', HTML => '<code>' );
$ECODE = MODES(TeX => '+', HTML => '</code>' );

$BPRE = MODES(TeX => '\begin{verbatim}', HTML => '<pre>' );
$EPRE = MODES(TeX => '\end{verbatim}', HTML => '</pre>' );

$BTITLE = MODES(TeX => '\begin{center}\textbf{', HTML => '<h2><center>');
$ETITLE = MODES(TeX => '}\end{center}', HTML => '</center></h2>');


#######################
#  Setup

Context("Numeric");

$name = "Thomas Jefferson"; 
$value = -5;

@ordinals = ("First","Second","Third"); 
@values = (11,12,13);

@alphabet = (a..z);
@names = qw(Mike Arnie Davide);

%rankings = ( 
  First  => "Twins", 
  Second => "Yankees" 
);
%integers = ( One => 1, Two => 2 );


#######################
#  Main Text

Context()->texStrings;
BEGIN_TEXT
${BTITLE}Data Types in Perl${ETITLE}
$PAR

Perl has three principal data types: scalars, arrays, and hashes.  
You will certainly need to learn how
to use scalars, and you should learn how to use arrays.  For most WebWork 
questions you write, you probably won't need hashes. 
\{ BeginList('OL') \}

$ITEM Scalars are any string or number.  Named scalars start with ${DOL}. 
${BPRE}
${DOLV}name = "Thomas Jefferson"; 
${DOLV}value = -5;
${EPRE}

$ITEM Arrays of scalars.  Named arrays start with ${AT}.  Indexing for arrays always starts with zero.
${BPRE}
${ATV}ordinals = ("First","Second","Third"); 
${ATV}values = (11,12,13);
${EPRE}
For arrays of consecutive numbers or letters, you can use the shortcuts below.  Another useful shortcut is the ${BCODE}qw( )${ECODE} function, which converts a space-separated list into an array.
${BPRE}
${ATV}values = (11..13);
${ATV}alphabet = (a..z);
${ATV}names = qw(Mike Arnie Davide);
${EPRE}

$ITEM Hashes are associative arrays of scalars.  Named hashes start with ${PERCENT}.  An entry in a hash looks like ${BCODE}key => value${ECODE} and associates a value to each key with notation very similar to function notation.
${BPRE}
%rankings = ( 
  First  => "Twins", 
  Second => "Yankees" 
);
%integers = ( One => 1, Two => 2 );
${EPRE}
  

\{ EndList('OL') \} 

Scalars, arrays, and hashes can also be references 
to something.  References are a bit more advanced and
we discuss them later.


$PAR
${BTITLE}Accessing Scalars and Using Array Indices${ETITLE}
$PAR

To access a scalar inside an array or a hash, use
${BPRE}
${DOLV}ordinals[0]
${DOLV}ordinals[-1]
${DOLV}rankings{Second}
${EPRE}
to get the values \{ $ordinals[0] \}, \{ $ordinals[-1] \}, and \{ $rankings{Second} \}.  These all start with ${DOLLAR} because we're accessing a scalar.  Notice that the indexing for the array starts with zero, and the last element in the ordinals array can be accessed either with the index 2 or -1.  You can get the index for the last element in an array and the total number of elements in an array using
${BPRE}
${DOLV}#ordinals
scalar(${ATV}ordinals)
${EPRE}
which return \{ $#ordinals \} (since the indexing starts with zero) and \{ scalar(@ordinals) \}.  You can create a new scalar whose value is an entry in an array or hash using
${BPRE}
${DOLV}age = ${DOLV}values[1];
${DOLV}myteam = ${DOLV}rankings{First};
${EPRE}
which will set ${BCODE}${DOLV}age = 12;${ECODE} and ${BCODE}${DOLV}myteam = "Twins";${ECODE}


$PAR
${BTITLE}Printing an Array${ETITLE}
$PAR

If you print an array such as ${BCODE}${ATV}names${ECODE} you will get \{ @names; \}, which is not what you expected.  If you use ${BCODE}join(", ", ${ATV}names);${ECODE} instead, then subsequent elements will be joined by a comma followed by a space and you will get \{ join(", ", @names); \}, which is what you want.

$PAR
${BTITLE}Online References${ETITLE}
\{ BeginList('UL') \}
$ITEM \{ htmlLink('http://search.cpan.org/~jesse/perl-5.12.2/pod/perldata.pod','Perl data types (cpan.org)',"TARGET=~~"_new~~"") \}

$ITEM \{ htmlLink('http://www.perltutorial.org/perl-scalar-variables.aspx','Perl scalar variables (perltutorial.com)',"TARGET=~~"_new~~"") \}
$ITEM \{ htmlLink('http://www.perltutorial.org/perl-array.aspx','Perl arrays (perltutorial.com)',"TARGET=~~"_new~~"") \}
$ITEM \{ htmlLink('http://www.perltutorial.org/perl-hash.aspx','Perl hashes (perltutorial.com)',"TARGET=~~"_new~~"") \}

$ITEM \{ htmlLink('http://www.tizag.com/perlT/perlstrings.php','Perl strings (tizag.com)',"TARGET=~~"_new~~"") \}
$ITEM \{ htmlLink('http://www.tizag.com/perlT/perlvariables.php','Perl variables (tizag.com)',"TARGET=~~"_new~~"") \}
$ITEM \{ htmlLink('http://www.tizag.com/perlT/perlarrays.php','Perl arrays (tizag.com)',"TARGET=~~"_new~~"") \}
$ITEM \{ htmlLink('http://www.tizag.com/perlT/perlhashes.php','Perl hashes (tizag.com)',"TARGET=~~"_new~~"") \}
\{ EndList('UL') \}
END_TEXT
Context()->normalStrings;


#######################
#  Answer Evaluation

$showPartialCorrectAnswers = 1;

#$answer = Compute("pi * $scalar^2");

#ANS( $answer->cmp() );

COMMENT('MathObject version');

ENDDOCUMENT();
