## DESCRIPTION
## Trigonometry: trig identities
## ENDDESCRIPTION

## DBsubject(WeBWorK)
## DBchapter(WeBWorK tutorial)
## DBsection(PGML tutorial 2015)
## Date(06/01/2015)
## Institution(Hope College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('trigonometry', 'trig identity')


####################################
#  Initialization

DOCUMENT();  

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"AnswerFormatHelp.pl",
"answerHints.pl",
"PGML.pl",
"PGcourse.pl",
);

TEXT(beginproblem());

$showPartialCorrectAnswers = 1;


####################################
#  Setup

Context("Numeric");

#
#  We redefine the function whose
#  name is tan(x) to take values
#  exp(pi * x).
#
Context()->functions->remove("tan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub tan {
  shift; my $x = shift;
  return CORE::exp($x*3.1415926535);
}
package main;
# Make it work on formulas as well as numbers
sub tan {Parser::Function->call('tan',@_)} 
#  Add the new functions to the Context
Context()->functions->add( 
  tan => {class =>'NewFunc', TeX =>'\tan'}, );

$answer_cmp = Formula("sin(x)")->cmp() 
->withPostFilter(AnswerHints(
  Compute("tan(x)*cos(x)") => 
  "No credit for entering what you were given.",
));

####################################
#  Main Text

BEGIN_PGML
Simplify the expression as much as possible.

[` \tan(x) \cos(x) = `] [________________]{$answer_cmp} [@ AnswerFormatHelp("formulas") @]*
END_PGML


###################################
#  Solution

BEGIN_PGML_SOLUTION
Solution explanation goes here.
END_PGML_SOLUTION

COMMENT("MathObject version.  Prevents students from entering trivial identities (entering what they were given).  Redefines 'tan(x)' internally as 'exp(pi*x)'.  Uses PGML.");

ENDDOCUMENT();
