## DESCRIPTION
##   Use Level Curves to Identify Critical Points
## ENDDESCRIPTION

## Tagged by nhamblet

## DBsubject(Calculus - multivariable)
## DBchapter(Differentiation of multivariable functions)
## DBsection(Extreme values and optimization)
## Date(8/23/07)
## Institution(Union College)
## MLT(ClassifyCritPtGivenContours)
## MLTleader(1)
## Level(4)
## KEYWORDS('Graph', 'Critical Point', 'Multivariable', 'Level Curve', 'Saddle')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "PGunion.pl",
  "MathObjects.pl",
  "contextString.pl",
  "unionImage.pl",
  "PGcourse.pl",
);


TEXT(beginproblem());

##############################################
#  Setup

Context("String")->strings->are(
  "a relative maximum" => {},
  "a relative minimum" => {},
  "a saddle point" => {},
  "not a critical point" => {},
  "no_answer" => {string => "", TeX => ""},
);

#
#  The functions and their associated files
#
@QA = (
  "A", "a saddle point",
  "B", "a relative minimum",
  "C", "not a critical point",
  "D", "a relative maximum",
);

$size = [300,300];
$diagram = "levels-7a.gif";

##############################################

#
#  The various pop-up choices
#
@pop_up_choices = (
  no_answer => "?",
  "a relative maximum"   => "a relative maximum",
  "a relative minimum"   => "a relative minimum",
  "a saddle point"       => "a saddle point",
  "not a critical point" => "not a critical point"
);

#
#  Make a pop up question and answer
#
sub PopUp {
  my $p = shift; my $type = shift;
  my @ropts = (separation => 0);
  ANS(string_cmp($type));
  Row(["Point ".$BBOLD.$p.$EBOLD." is ",pop_up_list(@pop_up_choices)],@ropts);
}

##############################################
#  Main text

BEGIN_TEXT

\{ColumnTable(
  Image($diagram, size=>$size, tex_size=>500, border=>0, tex_center=>1),
  "The diagram at the left represents a collection of
   level sets for a certain function, where the outer-most
   level is at the lowest height.$PAR".
   BeginTable(spacing => 3).
    PopUp(@QA[0,1]).
    PopUp(@QA[2,3]).
    PopUp(@QA[4,5]).
    PopUp(@QA[6,7]).
  EndTable(),
  indent => 0, separation => 30
)\}

END_TEXT

##################################################
#  Answers

$showPartialCorrectAnswers = 0;
install_problem_grader(~~&std_problem_grader);

##################################################


;
ENDDOCUMENT();
