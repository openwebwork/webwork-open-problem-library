## DESCRIPTION
## Calculus
## ENDDESCRIPTION

## Tagged by cmd6a 4/20/06

## DBsubject(Calculus - single variable)
## DBchapter(Differentiation)
## DBsection(Definition of the derivative)
## MLT(defDerBox)
## MLTleader(1)
## Level(3)
## KEYWORDS('Calculus','Derivatives')

&DOCUMENT();

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGnumericalmacros.pl",
); 
 




# allow the student to change the seed for this problem.
$newProblemSeed = ( defined( ${$inputs_ref}{'newProblemSeed'} ) )?  ${$inputs_ref}{'newProblemSeed'} : $problemSeed;
$PG_random_generator->srand($newProblemSeed);

# define function to be evaluated
$a= -16;
$b= random(1,60,1);
$c = 0;
$x0=random(.01,$b/16, .01);
$function = FEQ(" ${a}x^2+${b}x +$c ");
$f = sub {
	my $x = shift;
	$a*$x*$x + $b*$x +$c;
};



#  Calculate the cubic spline approximation
$llimit = -5; $rlimit = 5;
my $num_of_intervals = 500;  # number of interpolation points
my $delta =  ($rlimit-$llimit)/($num_of_intervals); 
my (@x_values, @y_values);
foreach my $i (0..$num_of_intervals) {
	my $x = $llimit + $delta*$i;
	my $y = &$f($x);
	push(@x_values, $x); push(@y_values,$y);
}

($t_ref, $a_ref, $b_ref, $c_ref, $d_ref) = create_cubic_spline (~~@x_values, ~~@y_values);

$f_approx = cubic_spline(~~@x_values, ~~@y_values);




HEADER_TEXT(javaScript_cubic_spline(~~@x_values,~~@y_values, name => 'func2', llimit => -3, rlimit => 3) );

TEXT(beginproblem());

# A warning that we are using javaScript
TEXT(M3("",
"\begin{rawhtml}
<NOSCRIPT> This problem requires that Java Script be enabled </NOSCRIPT> \end{rawhtml}
",
"<NOSCRIPT> This problem requires that Java Script be enabled </NOSCRIPT>"
));

BEGIN_TEXT
Below is an "oracle" function. An oracle function is a function presented interactively. 
When you type in a \(t\) value, and press the --f--\(>\) button  
the value \(f(t)\) appears in the right hand window.  There are three lines, 
so you can calculate
three different values of the function at one time. 

$PAR
The function f(t) represents the height in feet of a ball thrown into the air, \(t\) seconds after it has been thrown.

Calculate the average velocity  $x0 seconds after the ball has been thrown.
$PAR
Average velocity at \( $x0 \) = \{ans_rule(20) \}  You can use a 
\{htmlLink(alias("${htmlDirectory}calc.html"), "calculator" ,q!TARGET = "calculator"!) \}

$PAR
END_TEXT


HEADER_TEXT(<<EOF);
<SCRIPT LANGUAGE="JavaScript">
<!-- Begin
function func(x) {
	return $a*x*x + $b*x + $c
}
-->
</SCRIPT>

EOF


$javaScript =<<ENDOFSCRIPT;
<CENTER>
<TABLE BORDER=4>
<TR>
<TH>t</TH><TH></TH><TH>f(t)</TH>
<TR>
<TD>
<INPUT TYPE="text"   NAME="Input"  Value = "$x0" Size="16">
</TD>
<TD>
<INPUT TYPE="button" VALUE="---f-->"  
            OnClick="this.form.Output.value=func2(this.form.Input.value);">
</TD>
<TD>
<INPUT TYPE="text"   NAME="Output"   Size="30">
</TD>

</TR>

<TR>
<TD>
<INPUT TYPE="text"   NAME="Input2"  Value = "$x0" Size="16">
</TD>

<TD>
<INPUT TYPE="button" VALUE="---f-->"  
            OnClick="this.form.Output2.value=func2(this.form.Input2.value);">
</TD>
<TD>
<INPUT TYPE="text"   NAME="Output2"   Size="30">
</TD>
</TR>

<TR>
<TD>
<INPUT TYPE="text"   NAME="Input3"  Value = "$x0" Size="16">
</TD>
<TD>
<INPUT TYPE="button" VALUE="---f-->"  
            OnClick="this.form.Output3.value=func2(this.form.Input3.value);">
</TD>
<TD>
<INPUT TYPE="text"   NAME="Output3"   Size="30">
</TD>
</TR>
</TABLE>

</CENTER>
<!-- Script Size:  1.89 KB  -->
ENDOFSCRIPT

TEXT(M3(
     " \fbox{ The java Script calculator was displayed here
             }",
     "\begin{rawhtml} $javaScript \end{rawhtml}",
      $javaScript
      ));
      
BEGIN_TEXT
$PAR
Remember this technique for finding velocities.  Later we will use the same method to find the 
derivative of functions such as \(f(t) \).

END_TEXT
# The answer
$h = .000001;
$ans = ( &$f_approx($x0+$h) - &$f_approx($x0) )/$h;
my $ans_eval = num_cmp( $ans, reltol => 1, format => '%0.14g');


# we'll modify the answer messages a bit to give some encouragement.
my $answer_evaluator = sub {
						my $x = shift;
						my $ans_hash = $ans_eval->evaluate($x);
						return $ans_hash unless $x;
						# otherwise fix the error message
						$correct_answer = $ans_hash->{correct_ans};
						my $error = $correct_answer - $ans_hash ->{student_ans};
						#warn "correct answer $correct_answer and student answer", $ans_hash ->{student_ans}, "error $error";
						my $relerror = 100* abs($error/$correct_answer) unless abs($correct_answer) <.000000001 ;
						$relerror = 0 unless defined($relerror);
						if ($relerror < 1 ) {
							$ans_hash->{ans_message} = "Good.  Your answer is off by only about $error";
						} elsif ($relerror < 10 ) {
							 $ans_hash->{ans_message} = 'Your answer is within 10%. ';
						} elsif($relerror < 50) {
							$ans_hash->{ans_message} = 'Your answer is within 50%.  ';
					    } else {
					    	$ans_hash->{ans_message} = 'Your answer is off by more than 50%.';
						}	 
						$ans_hash;
						};
ANS($answer_evaluator );  #We are allowing 1 percent error for the answer.

			
ENDDOCUMENT();

