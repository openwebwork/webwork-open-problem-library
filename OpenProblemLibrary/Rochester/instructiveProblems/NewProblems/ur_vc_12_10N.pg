## DESCRIPTION
##  Sample of new style problem.
## ENDDESCRIPTION

## Tagged by jjh2b

## DBsubject(WeBWorK)
## DBchapter(WeBWorK Tutorial)
## DBsection(AIM Tutorial: New Problems)
## Institution(Rochester)
## MO(1)
## KEYWORDS('sample','webwork','new')



DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"PGcourse.pl",
"MathObjects.pl",
# "source.pl",
);

TEXT( beginproblem() );
$showPartialCorrectAnswers = 1;

###################
#
#  Setup

Context("Vector");

$a = random(1,10,1);
$b = random(1,10,1);
$c = random(1,10,1);

$ans1 = 0;

$ans7 = 0;

$VectI = Formula("$a*y*z");
$VectJ = Formula("$b*x*z");
$VectK = Formula("$c*x*y");

$VectEqu = Vector("$VectI*i + $VectJ*j + $VectK*k")->reduce;

$ans1 = ($VectI->D('x'))+($VectJ->D('y'))+($VectK->D('z'));
  #   For multi-variable functions, one must specify the variable to 
  # differentiate with respect to as a parameter of the differentiation 
  # function, i.e. $Function->D('variable');

$ans2 = &Curl($VectI,$VectJ,$VectK);
  #   Using a subroutine defined below, the Curl is returned as a vector given 
  # the function -I,J,K components as parameters.

$ans3 = Real("0");
  #   Div of Curl of F = 0.

###################
#
#  Text

Context()->texStrings;
BEGIN_TEXT
Let \( \mathbf{F} = $VectEqu \). Compute the following:
  $PAR
A. div \( \mathbf{F} = \) \{ans_rule(40)\} 
  $PAR
B. curl \( \mathbf{F} = \) \{ans_rule(80)\}
  $PAR
C. div curl \( \mathbf{F} = \) \{ans_rule(40)\} 
  $PAR
Note: Your answers should be expressions of x, y and/or z; e.g. "3xy" or "z" or 
"5".  To enter a vector as an answer use either the \( \mathbf{i} - 
\mathbf{j}-\mathbf{k} \) notation or \(<x_1,x_2,\ldots,x_n>\) notation; e.g. for 
\(5\mathbf{i} + 3\mathbf{j} + 4\mathbf{k}\) enter either "5i + 3j + 4k" or 
"<5,3,4>."  $PAR
END_TEXT
Context()->normalStrings;

###################
#
#  Answers

ANS($ans1->cmp);
ANS($ans2->cmp);
ANS($ans3->cmp);

###################
#
#  Subroutine:
#
#    Given i-j-k components of a vector function with respect to x, y, 
#  and z, and returns the curl of the function as a vector object.

sub Curl {

  my ($FnI,$FnJ,$FnK) = @_;  #   Parameters passed into those three 
                             # local variables.

  my $FnIder = ($FnK->D('y')) - ($FnJ->D('z')),
     $FnJder = ($FnI->D('z')) - ($FnK->D('x')),
     $FnKder = ($FnJ->D('x')) - ($FnI->D('y'));

  Vector("$FnIder*i + $FnJder*j + $FnKder*k");
                             #   The curl of the vector function is returned 
                             # as a vector object.

};


COMMENT('MathObject version');
ENDDOCUMENT();
