## DESCRIPTION
##   Solve a System of Equations
## ENDDESCRIPTION

## Tagged by nhamblet

## DBsubject(Linear algebra)
## DBchapter(Systems of linear equations)
## DBsection(Systems with 3 variables)
## Date(Winter 2002)
## Institution(Rochester)
## Author(Mark Schmitt)
## Level(3)
## KEYWORDS('System of Equations', 'Matrix', 'Augmented')

DOCUMENT() ;

loadMacros(
        "PG.pl",
        "PGbasicmacros.pl",
        "PGchoicemacros.pl",
        "PGanswermacros.pl",
        "PGauxiliaryFunctions.pl",
        "PGmatrixmacros.pl",
) ;
#####################################
## Build a non-singular 3x3 matrix ##
#####################################
$det=0;
$safety_switch=0;
$A = new Matrix(3,3);
$A_lr = new Matrix(3,3);
$det = 0;    # decompose into LR form.
while ($det == 0 and $safety_switch < 6) {
        foreach $i (1..3) {

           foreach $j (1..3) {
                           $A->assign($i,$j, non_zero_random(-15,15,1) );
                   }
        }
        $A_lr = $A->decompose_LR();
        $det = $A_lr->det_LR();
}

####################################
## Build a random constant matrix ##
####################################

$const = new Matrix(3,1);
foreach $i (1..3) {
        $const->assign($i,1, non_zero_random(-9,9,1));
        }

##
## We now have a consistent system since the coefficient matrix is non-singular
##

#####################################################
## Define answers here.  We may modify this later. ##
#####################################################

$A_LR = $A->decompose_LR();
($dimension, $solution, $base_matrix) = $A_LR->solve_LR($const);
$x_ans = element $solution(1,1);
$y_ans = element $solution(2,1);
$z_ans = element $solution(3,1);
$type_ans = "Independent";


###########################################################################
## Decide if the system should be independent, dependent or inconsistent ##
###########################################################################

$style = random(1,3,1);
$j = non_zero_random(-9,9,1);
$k = non_zero_random(-9,9,1);
$m = non_zero_random(-9,9,1);
while ($m == $k) {$m = non_zero_random(-9,9,1);}

if ($style == 3) {## System needs to be made inconsistent
                ### This is done by making row two of the coefficient matrix
                ### into a linear combination of rows 1 and 3, and making
                ### the second row of the constant matrix a different linear
                ### combination.
        foreach $i (1..3) {
                $A->assign(2,$i, $j*(element $A(1,$i)) + $k*(element $A(3,$i)));
                }
        $const->assign(2,1, $j*(element $const(1,1)) + $m*(element $const(3,1)));

        #########################################################
        ### Set the answers here                               ##
        #########################################################

        $x_ans = "No solution";
        $y_ans = "No solution";
        $z_ans = "No solution";
        $type_ans = "Inconsistent";
}
elsif ($style == 2) { ## System needs to be made dependent
                ### This is done by making row two of the coefficient matrix
                ### into a linear combination of rows 1 and 3, and making
                ### the second row of the constant matrix the same linear
                ### combination.
        foreach $i (1..3) {
                $A->assign(2,$i, $j*(element $A(1,$i)) + $k*(element $A(3,$i)));
                }
        $const->assign(2,1, $j*(element $const(1,1)) + $k*(element $const(3,1)));


        #########################################################
        ### Set the answers here                               ##
        #########################################################

        $a11 = element $A(1,1);
        $a12 = element $A(1,2);
        $a13 = element $A(1,3);
        $a31 = element $A(3,1);
        $a32 = element $A(3,2);
        $a33 = element $A(3,3);

        $b1 = element $const(1,1);
        $b3 = element $const(3,1);

#       @row1 = ($a11, $a12, $a13, $b1);
#       @row3 = ($a31, $a32, $a33, $b3);

#       foreach $i (0..3) {$row1[$i] = $row1[$i]/$row1[0];
#                       $ans_row[$i] = $row3[$i] - $row1[$i]*$row3[0];
#               }

        $y_ans = "(($b3-$b1*$a31/$a11) - ($a33-$a13*$a31/$a11)*t)/($a32-$a12*$a31/$a11)";

        $x_ans =  "((($b3-$b1*$a31/$a11) - ($a33-$a13*$a31/$a11)*t)/($a32-$a12*$a31/$a11))*(-$a12/$a11) + $b1/$a11 - $a13/$a11*t";

#       $x_ans = "$row1[3] - $row1[2]*t - $row1[1]*$ans_row[3]/$ans_row[1] + $ans_row[2]*t/$ans_row[1] ";
#       $y_ans = "($ans_row[3] - $ans_row[2]*t)/$ans_row[1] ";
        $z_ans = "t";

        $type_ans = "Dependent";
}


TEXT(beginproblem()) ;


$showPartialCorrectAnswers = 1 ;

BEGIN_TEXT
Solve the system associated with the augmented matrix below.  If the system is inconsistent, type
"No Solution" in each blank.  If the system is dependent, use the variable "t"
as your free variable.
\[ \{display_matrix_mm($A)\} \{display_matrix_mm($const)\}
\]



$BR
The solution to the system is: (\{ans_rule(15)\},\{ans_rule(15)\},\{ans_rule(15)\})
END_TEXT
#\[\left(\begin{array}{ccccc}
#\{join("& ",tex_ans_rule(10),",",tex_ans_rule(10),",",tex_ans_rule(10))\}
#\end{array}\right)\]


if ($type_ans eq "Independent") {
        ANS(num_cmp($x_ans));
        ANS(num_cmp($y_ans));
        ANS(num_cmp($z_ans));
        }
elsif ($type_ans eq "Inconsistent"){
        ANS(str_cmp($x_ans));
        ANS(str_cmp($y_ans));
        ANS(str_cmp($z_ans));
        }
else {
        ANS(fun_cmp($x_ans,var=>['t']));
        ANS(fun_cmp($y_ans,var=>['t']));
        ANS(fun_cmp($z_ans,var=>['t']));
}
ENDDOCUMENT() ;


