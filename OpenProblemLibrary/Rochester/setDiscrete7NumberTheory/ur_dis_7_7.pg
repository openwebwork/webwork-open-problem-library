## DESCRIPTION
##   Modular Arithmetic in Modern Cryptography (RSA)
## ENDDESCRIPTION

## Tagged by nhamblet

## DBsubject(Number theory)
## DBchapter(Congruences)
## DBsection(Fast powering)
## Institution(Rochester)
## Level(2)
## KEYWORDS('Mod', 'Modular Arithmetic', 'RSA')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl"
);

TEXT(beginproblem());

$i = random(0,5,1);
$j = random(0,5,1);
while($i == $j) {$j = random(0,5,1);}
$prime1 = $i**2+$i+41;
$prime2 = $j**2+$j+41;
$n = $prime1*$prime2;

@primes = (11, 13, 17, 19);
$k = random(0,3,1);
$key = $primes[$k];

$pq = ($prime1-1)*($prime2-1);
BEGIN_TEXT
(Modification of exercise 36 in section 2.5 of Rosen.) $BR
The goal of this exercise is to work thru the RSA system in a simple case:
$BR
We will use primes \( p = $prime1, q = $prime2 \) and form \( n= $prime1 \cdot
$prime2 = $n \). $BR
[This is typical of the RSA system which chooses two large primes at
random generally, and multiplies them to find n. The public will know n 
but p and q will be kept private.] $BR

Now we choose our public key \( e = $key \). This will work 
since \( gcd($key,(p-1)(q-1)) = gcd($key, $pq)=1 \). 
[In general as long as we choose an 'e' with gcd(e,(p-1)(q-1))=1, the
system will work.] $BR

Next we encode letters of the alphabet numerically say via the usual: $PAR
(A=0,B=1,C=2,D=3,E=4,F=5,G=6,H=7,I=8,$PAR
J=9,K=10,L=11,M=12,N=13,O=14,P=15,Q=16,R=17,$PAR
S=18,T=19,U=20,V=21,W=22,X=23,Y=24,Z=25.)$BR

We will practice the RSA encryption on the single integer 15. (which is 
the numerical representation for the letter "P"). In the language of
the book, M=15 is our original message. $BR

The coded integer is formed via \( c = M^e \text{ mod } n \). $BR

Thus we need to calculate \( 15^{$key} \text{ mod } $n \). 
$BR$BR

This is not as hard as it seems and you might consider using fast modular
multiplication. $BR
$BR
The canonical representative of \( 15^{$key} \text{ mod } $n \) is \{
ans_rule(20) \}
END_TEXT

$ans = 1;
for ($i = 0; $i < $key; $i++) {
    $ans *= 15;
    $ans %= $n;
}

ANS(num_cmp($ans));

ENDDOCUMENT();        # This should be the last executable line in the problem.;
