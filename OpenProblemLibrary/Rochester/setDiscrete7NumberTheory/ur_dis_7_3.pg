## DESCRIPTION
##   Modular Arithmetic
## ENDDESCRIPTION

## Tagged by nhamblet

## DBsubject(Number theory)
## DBchapter(Congruences)
## DBsection(Chinese remainder theorem)
## Institution(Rochester)
## Level(3)
## KEYWORDS('Mod', 'Modular Arithmetic', 'Chinese Remainder Theorem')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl"
);

TEXT(beginproblem());

$showPartialCorrectAnswers=1;

$m1 = 3;

@m2 = ();
for($i = 0; $i < 4; $i ++ ) {
	$m2[$i] = $i**2+$i+5;
}
@slice1 = NchooseK(4,2);
@sm2 = @m2[@slice1];

@m3 = ();
for($i = 0; $i < 4; $i ++ ) {
	$m3[$i] = $i**2+$i+41;
}
@slice2 = NchooseK(4,1);
@sm3 = @m3[@slice2];

$a1 = random(1,$m1-1,1);
$a2 = random(1,$sm2[0]-1,1);
$a3 = random(1,$sm2[1]-1,1);
$a4 = random(1,$sm3[0]-1,1);

$m = $m1*$sm2[0]*$sm2[1]*$sm3[0];
$ans1 = $m/$m1;
$ans2 = $m/$sm2[0];
$ans3 = $m/$sm2[1];
$ans4 = $m/$sm3[0];

BEGIN_TEXT

We will find the smallest positive integer x that solves the following 
system of congruences via the Chinese Remainder Theorem: $BR
\( x \equiv $a1 \text{ mod } $m1 \) $BR
\( x \equiv $a2 \text{ mod } $sm2[0] \)  $BR
\( x \equiv $a3 \text{ mod } $sm2[1] \) $BR
\( x \equiv $a4 \text{ mod } $sm3[0] \)  $BR
$PAR
In the language of Theorem 4 from page 142 of the 4th edition of Rosen, 
we thus have the values of the following variables: $BR
\( a_1 = $a1 \) and \( m_1 = $m1 \) $BR
\( a_2 = $a2 \) and \( m_2 = $sm2[0]  \) $BR 
\( a_3 = $a3 \) and \( m_3 = $sm2[1] \) $BR
\( a_4 = $a4 \) and \( m_4 = $sm3[0]  \) $BR
$PAR
The first step is to calculate \( m = m_1 m_2 m_3 m_4 \). 
When we do this we get: $BR
\( m = \) \{ ans_rule(20) \} $PAR
The second step is to calculate the \( \hat{m}_k \) which 
are given by the formula \( \hat{m}_k = \frac{m}{m_k} \). 
Enter their values below: $BR
\( \hat{m}_1 = \) \{ ans_rule(20) \} $BR
\( \hat{m}_2 = \) \{ ans_rule(20) \} $BR
\( \hat{m}_3 = \) \{ ans_rule(20) \} $BR
\( \hat{m}_4 = \) \{ ans_rule(20) \} $BR
$PAR
END_TEXT

ANS(num_cmp($m));
ANS(num_cmp($ans1));
ANS(num_cmp($ans2));
ANS(num_cmp($ans3));
ANS(num_cmp($ans4));

$mod1 = $ans1 % $m1;

BEGIN_TEXT
$PAR
Next we find the \( \hat{y}_k \) which are given by solving 
\[ \hat{y}_k \hat{m}_k \equiv 1 \text{ mod } m_k \] $BR
Thus for example, to find \( \hat{y}_1 \) we need to solve $BR
\[ $ans1 \hat{y}_1 \equiv 1 \text{ mod } $m1 \] $BR
Since we know \( $ans1 \equiv $mod1 \text{ mod } $m1 \), this simplifies to $BR
\[ $mod1 \hat{y}_1 \equiv 1 \text{ mod } $m1 \] $BR
Solve this either by trial and error or by using the Euclidean algorithm 
and enter the value of \( \hat{y}_1 \) below: (Use the canonical
representative modulo $m1.) $BR
\( \hat{y}_1 = \) \{ ans_rule(20) \}
END_TEXT

$j1 = 0;
do { $j1 ++;
	$x = $j1 * $mod1;
	$x -= 1;
	$x = $x/$m1;
} until $x == int( $x );

ANS(num_cmp($j1));

$mod2 = $ans2 % $sm2[0];
BEGIN_TEXT
$PAR
Similarly, to find \( \hat{y}_2 \) we need to solve $BR
\[ $ans2 \hat{y}_2 \equiv 1 \text{ mod } $sm2[0] \] $BR
Since we know \( $ans2 \equiv $mod2 \text{ mod } $sm2[0] \),this simplifies to $BR
\[ $mod2 \hat{y}_2 \equiv 1 \text{ mod } $sm2[0] \] $BR
Solve this either by trial and error or by using the Euclidean algorithm 
and enter the value of \( \hat{y}_2 \) below: (Use the canonical
representative modulo $sm2[0].) $BR
\( \hat{y}_2 = \) \{ ans_rule(20) \}
END_TEXT

$j2 = 0;
do { $j2 ++;
	$x = $j2 * $mod2;
	$x -= 1;
	$x = $x/$sm2[0];
} until $x == int( $x );

ANS(num_cmp($j2));

$mod3 = $ans3 % $sm2[1];
BEGIN_TEXT
$PAR
Similarly, to find \( \hat{y}_3 \) we need to solve $BR
\[ $ans3 \hat{y}_3 \equiv 1 \text{ mod } $sm2[1] \] $BR
Since we know \( $ans3 \equiv $mod3 \text{ mod } $sm2[1] \),this simplifies to $BR
\[ $mod3 \hat{y}_3 \equiv 1 \text{ mod } $sm2[1] \] $BR
Solve this either by trial and error or by using the Euclidean algorithm 
and enter the value of \( \hat{y}_3 \) below: (Use the canonical
representative modulo $sm2[1].) $BR
\( \hat{y}_3 = \) \{ ans_rule(20) \}
END_TEXT

$j3 = 0;
do { $j3 ++;
	$x = $j3 * $mod3;
	$x -= 1;
	$x = $x/$sm2[1];
} until $x == int( $x );


ANS(num_cmp($j3));

$mod4 = $ans4 % $sm3[0];
BEGIN_TEXT
$PAR

Similarly, to find \( \hat{y}_4 \) we need to solve $BR
\[ $ans4 \hat{y}_4 \equiv 1 \text{ mod } $sm3[0] \] $BR
Since we know \( $ans4 \equiv $mod4 \text{ mod } $sm3[0] \),this simplifies to $BR
\[ $mod4 \hat{y}_4 \equiv 1 \text{ mod } $sm3[0] \] $BR
Solve this either by trial and error or by using the Euclidean algorithm 
and enter the value of \( \hat{y}_4 \) below: (Use the canonical
representative modulo $sm3[0].) $BR
\( \hat{y}_4 = \) \{ ans_rule(20) \}
END_TEXT

$j4 = 0;
do { $j4 ++;
	$x = $j4 * $mod4;
	$x -= 1;
	$x = $x/$sm3[0];
} until $x == int( $x );

ANS(num_cmp($j4));

BEGIN_TEXT
Now that we have all the \( a_k, \hat{m}_k \) and \( \hat{y}_k \), 
use the formula \( x=\sum_{k=1}^4 a_k \hat{m}_k \hat{y}_k \) to find an
integer solution x to the original system. The Chinese remainder theorem
says that this x and any integer congruent modulo m to it, 
will solve the original system. Enter the SMALLEST positive integer
solution to the original system here: \{ ans_rule(20) \}.
END_TEXT
$ans = $a1*$ans1*$j1+$a2*$ans2*$j2+$a3*$ans3*$j3+$a4*$ans4*$j4;
$ans = $ans % $m;
$ans = $ans % $m;
ANS(num_cmp($ans) );

ENDDOCUMENT();        # This should be the last executable line in the problem.;
