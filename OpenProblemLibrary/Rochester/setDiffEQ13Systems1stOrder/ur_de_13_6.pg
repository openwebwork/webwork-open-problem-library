## DESCRIPTION
## Calculus
## ENDDESCRIPTION

## Tagged by tda2d

## DBsubject(Differential equations)
## DBchapter(Systems of differential equations)
## DBsection(Verification of solutions)
## Institution(Rochester)
## MLT(SDE-VS-match)
## MLTleader(1)
## Level(3)
## KEYWORDS('differential equation' 'first order' 'matrices')


# Description
# The first example using match lists
# EndDescription


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "PGnumericalmacros.pl",
           "PGmatrixmacros.pl"
           );

# TEXT( ... , ... , )
# Is the simplest way of printing text, each string in the input is immediately printed.
# It does not do any of the simplifying and evaluating tricks performed by the BEGIN_TEXT/END_TEXT construction.

# beginproblem() is a macro which outputs the string
# which contains the number
# of points the problem is worth.

# Putting these two ideas together prints the standard opening line of a problem.
# We will use this construction routinely at the beginning of all subsequent problems.

TEXT(beginproblem());

# Since this is a matching questions, we do not usually wish to tell students which
# parts of the matching question have been answered correctly and which are
# incorrect.  That is too easy.  To accomplish this we set the following flag to zero.

$showPartialCorrectAnswers = 0;

# Make a new match list

$ml = new_match_list();

# $ml ->rf_print_a(~~&print_eqn_a);
# $ml now "contains" the match list object.  (Actually $ml is a scalar variable which contains a pointer to
# the match list object, but you can think of the match list object as being shoe horned into the variable $ml.
# You need to remember that $ml contains (a pointer to) an object, and not ordinary data such as a number or string.

# Some people use the convention $o_ml to remind them that the variable contains an object, but for short problems
# that is probably not necessary.

# An object contains both data (in this case the list of questions and answers) and subroutines (called methods)
# for manipulating that data.

# Insert some  questions and matching answers in the q/a list by calling on the objects qa method.
# using the construction $ml ->qa(..list of alternating questions and matching answers ...).
# Think of this as asking the object $ml to store the  matching questions
# and answers given in the argument to the method qa.

#1    #####
$ml -> qa (
mbox( "\(y'(t)=\)", display_matrix([[15, 0, 0], [4, 20, -15], [4, 30, -25]]), "\(y(t)\)" ),
$BR.mbox( "\(y(t)=\)", display_matrix([[0], [1], [1]]), "\( e^{5 t}\)" )
);

#2    #################
$ml -> qa (
mbox( "\(y'(t)=\)", display_matrix([[-32, 49, -23], [-64, 78, -34], [64, -78, 34]]), "\(y(t)\)" ),
$BR.mbox( "\(y(t)=\)", display_matrix([[-1], [-3], [-5]]) )

);

#3   #########################
$ml -> qa (
mbox( "\(y'(t)=\)", display_matrix([[14, 0, -4], [2, 13, -8], [-3, 0, 25]]), "\(y(t)\)" ),
$BR.mbox( "\(y(t)=\)", display_matrix([[4], [5], [1]]), "\(e^{13 t}\)" )
);

#4    #########################
$ml -> qa (
mbox( "\(y'(t)=\)", display_matrix([[-13, -2, 3], [-15, -18, 5], [-33, -18, 7]]), "\(y(t)\)" ),
$BR.mbox( "\(y(t)=\)", display_matrix([[-1], [0], [-3]]), "\(e^{-4 t}\)" )
);

#5    #########################
$ml -> qa (
mbox( "\(y'(t)=\)", display_matrix([[-97, 33, -5], [-140, 84, 35], [-4, 15, -8]]), "\(y(t)\)" ),
$BR.mbox( "\(y(t)=\)", display_matrix([[-2], [-4], [4]]), "\(e^{-21 t}\)" )
);

#6    #########################
$ml -> qa (
mbox( "\(y'(t)=\)", display_matrix([[-2, 0, 0], [0, -2, 0], [0, 0, -2]]), "\(y(t)\)" ),
$BR.mbox( "\(y(t)=\)", display_matrix([[2], [2], [0]]), "\(e^{-2 t}\)" )
);

#7    #########################
$ml -> qa (
mbox( "\(y'(t)=\)", display_matrix([[-86, 218, -160], [73, -49, 80], [111, -138, 165]]), "\(y(t)\)" ),
$BR.mbox( "\(y(t)=\)", display_matrix([[-2], [1], [3]]), "\(e^{45 t}\)" )
);

##########################

# Choose two of the question and answer pairs at random.
$ml ->choose(3);  # Using choose(3) would choose all three questions, but the order of the questions and answers would be
                  # scrambled.


# Now print the text using $ml->print_q for the questions and $ml->print_a to print the answers.

BEGIN_TEXT

Match the differential equations and their vector valued function solutions: $BR
It will be good practice to multiply at least one solution out fully, to make sure that you
know how to do it, but you can get the other answers quickly by process of elimination and
just multiply out one row element.
$BR$BR
\{ $ml -> print_q \}
$BR
\{ $ml -> print_a \}

END_TEXT

# Enter the correct answers to be checked against the answers to the students.

ANS(str_cmp( $ml->ra_correct_ans )   ) ;

# That's it.

ENDDOCUMENT() ;        







