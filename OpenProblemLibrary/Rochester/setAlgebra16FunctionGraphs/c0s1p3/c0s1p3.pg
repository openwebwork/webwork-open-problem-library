## DESCRIPTION
## Algebra
## ENDDESCRIPTION

## Tagged by tda2d

## DBsubject(Algebra)
## DBchapter(Functions)
## DBsection(Interpretation and applications)
## Date(6/3/2002)
## MLT(Function_wordProblem_GraphMatch)
## Level(3)
## TitleText1('College Algebra')
## AuthorText1('Stewart, Redlin, Watson')
## EditionText1('3')
## Section1('4.4')
## Problem1('20')
## KEYWORDS('function' 'graph' 'domain' 'range' 'applications' 'velocity','funcitons', 'graph', 'applications')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
"PGauxiliaryFunctions.pl");

TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

$pictSet=&random(1,3,1);  #there are three sets of graphs

$pictNum=&random(1,4,1);  #each set has 4 graphs the numbers are below

@pictID = (
"1-26176.gif",
"1-23229.gif",
"1-55327.gif",
"1-16418.gif",
"2-52134.gif",
"2-46294.gif",
"2-98382.gif",
"2-45436.gif",
"3-56120.gif",
"3-91235.gif",
"3-50325.gif",
"3-87486.gif",);
sub pictIndex{    # this gives offsets into @pictID -- I was too laxy to do multidimensional arrays
	my ($i,$j)=@_;
	return(($i-1)*4+$j-1 )
	}
@question = ();
@answer =();
TEXT(beginproblem(),
 "Almost any kind of quantitative data can be represented by a graph and
   most of these graphs represent functions. This is why functions and graphs
    are the objects analyzed by calculus. The next two problems illustrate
     data which can be represented by a graph. Match the following
     descriptions with their graphs below:"
);
qa(~~@question,~~@answer,
 "The graph of the distance traveled by a car as it enters a superhighway vs. time.",
@pictID[&pictIndex($pictSet,1)],
"The graph of the distance traveled by a car as it drives along a city street vs. time.",
@pictID[&pictIndex($pictSet,2)],
 "The graph of the velocity of a car entering a superhighway vs. time.",
@pictID[&pictIndex($pictSet,3)],
"The graph of the velocity of a car as it drives along a city street vs. time.",
@pictID[&pictIndex($pictSet,4)],
);
@slice = &NchooseK(4,4);				# select an ordered subset of the questions and answers
@shuffle = &shuffle(scalar(@slice));    # create a permutation of the right length
@images =  @answer[@slice[@shuffle]];   # create a permuted list of the answers
@captions =@ALPHABET[0..3];             # the caption letters are always in order
TEXT(
&match_questions_list(@question[@slice]), # format the ordered subset of questions
&imageRow(~~@images,~~@captions)          # format the answers (and caption letters)
);
@ans =  @ALPHABET[&invert(@shuffle ) ] ;
ANS(str_cmp( [@ans ]  ) ); # the correct answers are obtained by applying the inverse (adjoint) permutation to the captions.


ENDDOCUMENT();        # This should be the last executable line in the problem.
