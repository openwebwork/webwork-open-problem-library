## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## Tagged by cmd6a 4/30/06

## DBsubject(Linear algebra)
## DBchapter(Inner products)
## DBsection(Orthogonal and orthonormal sets)
## Date(July 2013)
## Institution(Rochester and Hope College)
## Author(Paul Pearson)
## Level(3)
## MO(1)
## TitleText1('Linear Algebra with Applications')
## AuthorText1('Jeffrey Holt')
## EditionText1('1')
## Section1('8.2')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGchoicemacros.pl",
"MatrixCheckers.pl",
"PGcourse.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

Context('Matrix');

$a[1][1] = 1;    $a[1][2] = 1;    $a[1][3] = 1;    $a[1][4] = 1;
$a[2][1] = 1;    $a[2][2] = 1;    $a[2][3] = -1;   $a[2][4] = -1;
$a[3][1] = 1;    $a[3][2] = -1;   $a[3][3] = 1;    $a[3][4] = -1;
$a[4][1] = -1;   $a[4][2] = 1;    $a[4][3] = 1;    $a[4][4] = -1;

@slice1 = NchooseK(4,4);
@slice2 = NchooseK(4,4);

$case = random(0,1,1);

if ($case==0) { 
	foreach $i (1..4) { 
		foreach $j (1..4) { 
			$b[$i][$j] = $a[$slice1[$i-1]+1][$slice2[$j-1]+1]/2;
		}
	}
} else { 
        foreach $i (1..4) { 
                foreach $j (1..4) { 
                        $b[$i][$j] = $a[$slice1[$j-1]+1][$slice2[$i-1]+1]/2;
                }
        }
}

$v1 = Matrix([[$b[1][1]], [$b[2][1]], [$b[3][1]], [$b[4][1]]]);
$v2 = Matrix([[$b[1][2]], [$b[2][2]], [$b[3][2]], [$b[4][2]]]);
$v3 = Matrix([[$b[1][3]], [$b[2][3]], [$b[3][3]], [$b[4][3]]]);

$v4 = Matrix([ $b[1][4], $b[2][4], $b[3][4], $b[4][4] ])->transpose;

Context()->texStrings;
BEGIN_TEXT
Let
\[ 
\vec{v}_1 = $v1, \ 
\vec{v}_2 = $v2, \ 
\vec{v}_3 = $v3. 
\]
Find a vector \(\vec{v}_4\) in \({\mathbb R}^4\) such that the vectors \(\vec{v}_1\), \(\vec{v}_2\), \(\vec{v}_3\), and \(\vec{v}_4\) are orthonormal. 
$BR
$BR
\(\vec{v}_4=\) \{ $v4->ans_array \} 
END_TEXT
Context()->normalStrings;

ANS($v4->cmp(checker=>~~&unit_basis_checker_one_column));
;
ENDDOCUMENT();       # This should be the last executable line in the problem.

checker=>sub { 
  my ( $correct, $student, $ansHash ) = @_;
  my $c = Matrix($correct);
  my $s = Matrix($student);
  $c = Vector($c);
  $s = Vector($s);
  return (($s == $c) or ($s == -1*$c));
}