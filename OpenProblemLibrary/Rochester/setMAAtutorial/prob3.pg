##DESCRIPTION
##KEYWORDS('sample')
## Tagged by jjh2b

## DBsubject('WeBWorK')
## DBchapter('WeBWorK Tutorial')
## DBsection('MAA Tutorial')
## Date('8/30/07')
## Author('')
## Institution('')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros("PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "PGnumericalmacros.pl"
           );

# TEXT( ... , ... , )
# Is the simplest way of printing text, each string in the input is immediately printed.
# It does not do any of the simplifying and evaluating tricks performed by the BEGIN_TEXT/END_TEXT construction.

# beginproblem() is a macro which outputs the string 
# which contains the number
# of points the problem is worth.

# Putting these two ideas together prints the standard opening line of a problem.
# We will use this construction routinely at the beginning of all subsequent problems.
TEXT(beginproblem());

# Since this is a matching questions, we do not usually wish to tell students which
# parts of the matching question have been answered correctly and which are
# incorrect.  That is too easy.  To accomplish this we set the following flag to zero.
$showPartialCorrectAnswers = 0;


#####################################################################
# This section allows you to manipulate the problem seed while working on the problem
# thus seeing different versions of the problem. Skip the details of how this works
# for now.

# allow the student to change the seed for this problem.
$newProblemSeed = ( defined( ${$inputs_ref}{'newProblemSeed'} ) )?  ${$inputs_ref}{'newProblemSeed'} : $problemSeed;
$PG_random_generator->srand($newProblemSeed);

BEGIN_TEXT     

To see a different version of the problem change
the problem seed and press the 'Submit Answer' button below.$PAR Problem Seed:
\{  M3(
qq! Change the problem seed to change the problem:$problemSeed!,
qq! Change the problem seed to change the problem:
    \begin{rawhtml}
    <INPUT NAME="newProblemSeed" VALUE = "$newProblemSeed" SIZE = "10">
    \end{rawhtml}!,
qq! <INPUT NAME="newProblemSeed" VALUE = "$newProblemSeed" SIZE = "10">!
)
\}

$HR  
END_TEXT
#####################################################################


# Make a new match list
$ml = new_match_list();

# $ml now "contains" the match list object.  (Actually $ml is a scalar variable which contains a pointer to 
# the match list object, but you can think of the match list object as being shoe horned into the variable $ml.
# You need to remember that $ml contains (a pointer to) an object, and not ordinary data such as a number or string.

# Some people use the convention $o_ml to remind them that the variable contains an object, but for short problems
# that is probably not necessary.

# An object contains both data (in this case the list of questions and answers) and subroutines (called methods)
# for manipulating that data.


# Insert some  questions and matching answers in the q/a list by calling on the objects qa method.
# using the construction $ml ->qa(..list of alternating questions and matching answers ...).
# Think of this as asking the object $ml to store the  matching questions 
# and answers given in the argument to the method qa.

$ml -> qa (
"\( \sin(x) \)",        # Notice the use of the LateX construction for math mode: \\( ...  \\)
"\( \cos(x) \)",        # and the use of TeX symbols such as \\sin and \\tan
"\( \cos(x) \)",        # Use " ... " to enter a string
"\( -\sin(x) \)",
"\( \tan(x) \)",
"\( \sec^2(x) \)"       # Remember that in these strings we are only specifying typography, 
                        # via TeX, not any calculational rules.
);

#
# Calculate coefficients for another question
$b=random(2,5);
$exp= random(2,5);
$coeff=$b*$exp;
$new_exp = $exp-1;

# Store the question and answers in the match list object. 
$ml -> qa (
"\( ${b}x^$exp \)",
"\( ${coeff}x^{$new_exp} \)",
);

# Add another example
$b2=random(2,5);
$exp2= random(2,5);
$coeff2=$b2*$exp;
$new_exp2 = $exp-1;
$ml -> qa (
"\( ${b2}x^$exp2 \)",
"\( ${coeff2}x^{$new_exp2} \)",
);


# Choose two of the question and answer pairs at random.
$ml ->choose(2);  # Using choose(3) would choose all three questions, but the order of the questions and answers would be 
                  # scrambled.


# Now print the text using $ml->print_q for the questions and $ml->print_a to print the answers.

BEGIN_TEXT
$PAR

Match the functions and their derivatives: $BR

\{ $ml -> print_q \}

$PAR

\{$ml -> print_a \}
END_TEXT

# Enter the correct answers to be checked against the answers to the students.

ANS(str_cmp( $ml->ra_correct_ans )   ) ;

# That's it.

#########################################################  

BEGIN_TEXT
<hr>

You can view the 
\{ htmlLink(alias("${htmlDirectory}/links/set$setNumber/prob3.html"),"source", q!TARGET="source"!)\} 
for this problem.
END_TEXT

TEXT(
"$PAR Return to ", htmlLink($$inputs_ref{returnPage},$$inputs_ref{returnPage}),
) if exists($$inputs_ref{returnPage});
#########################################################  



ENDDOCUMENT();        # This should be the last executable line in the problem.
#</PRE>
#</BODY>
#</HTML>
