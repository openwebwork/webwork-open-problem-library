## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## Tagged by cmd6a 5/3/06

## DBsubject(Linear algebra)
## DBchapter(Determinants)
## DBsection(Properties)
## Date(July 2013)
## Institution(Rochester and Hope College)
## Author(Paul Pearson)
## MO(1)


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros("PGstandard.pl",
"MathObjects.pl",
"PGmatrixmacros.pl",
"PGcourse.pl",
           );


TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

Context('Complex-Matrix');

#$matrix = new Matrix(2,2);
#$matrix->zero;
#$matrix_det=0;
#$max_iterations = 10;

#while (abs($matrix_det)<.1  && $max_iterations-- ) {
## define matrix
#                    $matrix->assign(1,1, Complex->make(random(-5,5,1),random(-5,5,1)) );
#                    $matrix->assign(1,2, Complex->make(random(-5,5,1),random(-5,5,1)) );        
#                    $matrix->assign(2,1, Complex->make(random(-5,5,1),random(-5,5,1)) );
#                    $matrix->assign(2,2, Complex->make(random(-5,5,1),random(-5,5,1)) );
#                    $matrix_det = ($matrix->element(1,1))*($matrix->element(2,2))-($matrix->element(1,2))*($matrix->element(2,1));
#}
#warn "Can't calculate an invertible matrix" unless $max_iterations;
# The resulting matrix is guaranteed invertible and the upper left corner is non zero
# so that you won't have to change orders in order to get a pivot.

do {

$matrix = Matrix([
[random(-5,5,1) + i*random(-5,5,1),random(-5,5,1) + i*random(-5,5,1)],
[random(-5,5,1) + i*random(-5,5,1),random(-5,5,1) + i*random(-5,5,1)],
]);

$matrix_det = $matrix->det;

} until (abs($matrix_det) > 0.1);

# define solution
#	$x = Complex->make(non_zero_random(-5,5,1),random(-5,5,1));
#	$y = Complex->make(non_zero_random(-5,5,1),non_zero_random(-5,5,1));

$x = random(-5,5,1) + i * random(-5,5,1);
$y = random(-5,5,1) + i * random(-5,5,1);

$X = Matrix([[$x],[$y]]);

#define right hand side
#        $rhs = new Matrix(2,1);  # a column vector
#        $rhs-> assign(1,1, ($matrix->element(1,1))*$x + ($matrix->element(1,2)*$y));
#        $rhs-> assign(2,1, ($matrix->element(2,1))*$x + ($matrix->element(2,2)*$y));

$rhs = $matrix * $X;

$m11 = $matrix->element(1,1);
$m12 = $matrix->element(1,2);
$m21 = $matrix->element(2,1);
$m22 = $matrix->element(2,2);

$rhs11 = $rhs->element(1,1);
$rhs21 = $rhs->element(2,1);

Context()->texStrings;
BEGIN_TEXT

Perform one step of row reduction, in order to calculate the values for \(x\) and \(y\) by back substitution.
Then calculate the values for \(x\) and for \(y\).  Also calculate the determinant of the original matrix.
$PAR
You can let webwork do much of the calculation for you if you want (e.g.  enter 45-(56/76)(-3) instead
of evaluating it and then entering it).  You can also use the preview feature in order to make sure
that you have used the correct syntax in entering the answer.
$PAR

$PAR
(Note: since the determinant is unchanged by row reduction it will be easier to calculate the
determinant of the row reduced matrix.)
\[
$matrix 
\left\lbrack \begin{array}{c} x \\ y \end{array} \right\rbrack
=
$rhs
\]
$BR
\{mbox([ display_matrix([["\($m11\)", "\($m12\)"], ["\(0\)", ans_rule(25)]]), 
display_matrix([['\(x\)'],['\(y\)']]), '\(=\)', 
display_matrix([["\($rhs11\)"], [ans_rule(25)]]) ]) \}
$BR
\(x = \) \{ans_rule(50)\} $BR
\(y = \) \{ans_rule(50)\} $BR
\(\mbox{det} = \)\{ans_rule(50)\}

END_TEXT
Context()->normalStrings;

#ANS  cplx_cmp( $matrix->element(1,1),   tol=>.2  );
#ANS cplx_cmp( $matrix->element(1,2) ,   tol=>.2  );

$ratio = ($matrix->element(2,1))/$matrix->element(1,1);

$ans1 = $matrix->element(2,2)-$ratio*$matrix->element(1,2);

ANS( Compute($ans1)->cmp);
#ANS(cplx_cmp( $rhs->element(1,1), tol=>.2 ));

$ans2 = $rhs->element(2,1)- $ratio*$rhs->element(1,1);

ANS(Compute($ans2)->cmp);

ANS(Compute($x)->cmp);
ANS(Compute($y)->cmp);
ANS(Compute($matrix_det)->cmp);


#########################################################

COMMENT('MathObject version');
ENDDOCUMENT() ;    




