## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## Tagged by cmd6a 4/30/06

## DBsubject(Linear algebra)
## DBchapter(Inner products)
## DBsection(Gram-Schmidt process)
## Date(July 2013)
## Institution(Rochester and Hope College)
## Author(Paul Pearson)
## Level(4)
## MO(1)
## TitleText1('Linear Algebra with Applications')
## AuthorText1('Jeffrey Holt')
## EditionText1('1')
## Section1('8.3')
## Problem1('')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"parserMultiAnswer.pl",
"MatrixCheckers.pl",
"PGcourse.pl",
);
TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

Context('Matrix');
Context()->flags->set(
  tolerance => 0.001,
  tolType => "absolute",
);

# create an invertible matrix with det either 1  or -1

$a11 = non_zero_random(-2,2,1);
$a21 = random(-1,1,2);
$a31 = random(-1,1,2);

$b1 = random(-1,1,2);
$a12 = $b1 * $a11;
$m = random(-1,1,2);
$a22 = $b1 * $a21 + $m;
$a32 = $b1 * $a31;

$c = random(-1,1,1);
$d = random(-1,1,2);
$n = random(-1,1,2);
$a13 = $c * $a11 + $d * $a12 + $n;
$a23 = $c * $a21 + $d * $a22;
$a33 = $c * $a31 + $d * $a32;

$det = - $a31 * $m * $n;

# define matrix

$a = Matrix([
[$a11,$a12,$a13],
[$a21,$a22,$a23],
[$a31,$a32,$a33],
]);

#        $a_lr = $a->decompose_LR();
#        $a_det = $a_lr->det_LR();

# define inverse matrix
#        $b = $a_lr->invert_LR();

$b = $a->inverse;

# define eigenvalues 

$eig1 = non_zero_random(-4,4,1);
$eig2 = random(-4,4,1);
if ($eig1 == $eig2) { $eig2 = $eig2+1;}

$e = Matrix([
[$eig1,0,0],
[0,$eig1,0],
[0,0,$eig2],
]);

# define final matrix
        $matrix = $a * $e *$b;
#        $matrix_lr = $matrix->decompose_LR();
#        $matrix_det = $matrix_lr->det_LR();

# matrix entries are integers, but we'll round them to avoid printing 0.999999999

$A = $matrix;

sub mydotprod {
  # inputs are two n x 1 matrices
  my ($v1,$v2) = @_;
  return (($v1->transpose)*$v2)->element(1,1);
}

sub myunit {
  # input is an 3 x 1 matrix
  my $v = shift;
  my $v1 = $v->element(1,1);
  my $v2 = $v->element(2,1);
  my $v3 = $v->element(3,1);
  my $length = sqrt($v1**2 + $v2**2 + $v3**2);
  return Matrix([[$v1/$length],[$v2/$length],[$v3/$length]]);
}

# now apply Gram-Schmidt'
$col1 = $a -> column(1);
$col2 = $a -> column(2);
$scalar = mydotprod($col1,$col2) / mydotprod($col1,$col1);
$col2 = $col2 - $scalar*$col1;
$col1 = myunit($col1);
$col2 = myunit($col2);

$basis1 = $col1; # Matrix([ [$a[1][1]], [0], [$a[3][1]], [$a[4][1]] ]);
$basis2 = $col2; # Matrix([ [0], [1], [0], [0] ]);


$multians = MultiAnswer($basis1, $basis2)->with(
  singleResult => 1,
  separator => ',',
  tex_separator => ',',
  allowBlankAnswers=>0,
  checker => ~~&orthonormal_basis_checker_columns,
);


Context()->texStrings;
BEGIN_TEXT
The matrix \[ A = $A \]
has two real eigenvalues, \(\lambda_1 = $eig1\) of multiplicity \(2\), and \(\lambda_2 = $eig2\) of multiplicity \(1\). 
Find an orthonormal basis for the eigenspace corresponding to \( \lambda_1 \).
$BR
$BR
$BCENTER
\(\Bigg\lbrace\) 
\{ $multians->ans_array(15) \}, 
\{ $multians->ans_array(15) \} 
\(\Bigg\rbrace.\)
$ECENTER
END_TEXT
Context()->normalStrings;


ANS( $multians->cmp );

;
ENDDOCUMENT();