## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## Tagged by cmd6a 4/30/06

## DBsubject(Linear algebra)
## DBchapter(Eigenvalues and eigenvectors)
## DBsection(Computing eigenvalues and eigenvectors)
## Date(July 2013)
## Institution(Rochester and Hope College)
## Author(Paul Pearson)
## MO(1)
## TitleText1('Linear Algebra with Applications')
## AuthorText1('Jeffrey Holt')
## EditionText1('1')
## Section1('6.5')
## Problem1('')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGcourse.pl",
);
TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

Context('Matrix');

# create an invertible matrix with det either 1  or -1

$a[1][1] = random(-2,2,1);
$a[2][1] = random(-1,1,2);
$a[3][1] = random(-1,1,2);
$a[4][1] = random(-1,1,1);

$b1 = random(-1,1,2);
foreach $i (1..4) { 
	$a[$i][2] = $b1 * $a[$i][1];
}
$p = random(-1,1,2);
$a[2][2] = $a[2][2] + $p;

$c = random(-1,1,1);
$d = random(-1,1,2);
$n = random(-1,1,2);
foreach $i (1..4) {
	$a[$i][3] = $c * $a[$i][1] + $d * $a[$i][2];
}
$n = random(-1,1,2);
$a[1][3] = $a[1][3] + $n;

$f = random(-1,1,2);
$g = random(-1,1,1);
$h = random(-1,1,1);
foreach $i (1..4) {
	$a[$i][4] = $f * $a[$i][1] + $g * $a[$i][2] + $h * $a[$i][3];  
}
$q = random(-1,1,2);
$a[4][4] = $a[4][4] + $q;

$det = - $a[3][1] * $p * $n * $q;

# define matrix

$A = Matrix([
[ $a[1][1], $a[1][2], $a[1][3], $a[1][4] ],
[ $a[2][1], $a[2][2], $a[2][3], $a[2][4] ],
[ $a[3][1], $a[3][2], $a[3][3], $a[3][4] ],
[ $a[4][1], $a[4][2], $a[4][3], $a[4][4] ],
]);

#        $A_lr = $A->decompose_LR();
#        $A_det = $A_lr->det_LR();

# define inverse matrix
#        $b = $A_lr->invert_LR();

$b = $A->inverse;

# define eigenvalues 


$eig = non_zero_random(-4,4,1);
$case = random(1,8,1);

	

if ($case == 1) { 
	$mult1 = 1;
	$mult2 = 1;
	$dim1 = 1;
	$dim2 = 1;

	$m = random(-1,1,2);

$e = Matrix([
[$eig,0,0,0],
[0,0,$m,0],
[0,-1*$m,0,0],
[0,0,0,0],
]);

} 

if ($case == 2) {
        $mult1 = 1;
        $mult2 = 3;
        $dim1 = 1;
        $dim2 = 1;
 
	$m = non_zero_random(-2,2,1);

$e = Matrix([
[$eig,0,0,0],
[0,0,$m,0],
[0,0,0,$m],
[0,0,0,0],
]);

} 

if ($case == 3) {
        $mult1 = 1;
        $mult2 = 3;
        $dim1 = 1;
        $dim2 = 2;
        $m = non_zero_random(-2,2,1);

$e = Matrix([
[$eig,0,0,0],
[0,0,$m,0],
[0,0,0,0],
[0,0,0,0],
]);

}

if ($case == 4) {
        $mult1 = 1;
        $mult2 = 3;
        $dim1 = 1;
        $dim2 = 3;

$e = Matrix([
[$eig,0,0,0],
[0,0,0,0],
[0,0,0,0],
[0,0,0,0],
]);

}

if ($case == 5) {
        $mult1 = 2;
        $mult2 = 2;
        $dim1 = 1;
        $dim2 = 1;
        $m = non_zero_random(-2,2,1);

$e = Matrix([
[$eig,$m,0,0],
[0,$eig,0,0],
[0,0,0,$m],
[0,0,0,0],
]);

}

if ($case == 6) {
        $mult1 = 2;
        $mult2 = 2;
        $dim1 = 1;
        $dim2 = 2;
        $m = non_zero_random(-2,2,1);

$e = Matrix([
[$eig,$m,0,0],
[0,$eig,0,0],
[0,0,0,0],
[0,0,0,0],
]);

}

if ($case == 7) {
        $mult1 = 2;
        $mult2 = 2;
        $dim1 = 2;
        $dim2 = 1;
        $m = non_zero_random(-2,2,1);

$e = Matrix([
[$eig,0,0,0],
[0,$eig,0,0],
[0,0,0,$m],
[0,0,0,0],
]);

}

if ($case == 8) {  
        $mult1 = 2;
        $mult2 = 2;
        $dim1 = 2;
        $dim2 = 2;

$e = Matrix([
[$eig,0,0,0],
[0,$eig,0,0],
[0,0,0,0],
[0,0,0,0],
]);

}

# define final matrix
        $matrix = $A * $e *$b;
#        $matrix_lr = $matrix->decompose_LR();
#       $matrix_det = $matrix_lr->det_LR();

Context()->texStrings;
BEGIN_TEXT
The matrix \[A=$matrix\]
has two real eigenvalues \(\lambda_1 < \lambda_2\). Find these eigenvalues, their multiplicities, and the dimensions of their
corresponding eigenspaces. 
$BR
$BR
The smaller eigenvalue \(\lambda_1 =\) \{ans_rule(5)\} has multiplicity \{ans_rule(5)\} and the dimension of its corresponding eigenspace is \{ans_rule(5)\}. 
$BR
$BR
The larger eigenvalue \(\lambda_2=\) \{ans_rule(5)\} has multiplicity \{ans_rule(5)\} and the dimension of its corresponding eigenspace is \{ans_rule(5)\}.
END_TEXT
Context()->normalStrings;

if ($eig<0) { 
	ANS(Compute("$eig")->cmp);  ANS(Compute("$mult1")->cmp);  ANS(Compute("$dim1")->cmp); 
	ANS(Compute("0")->cmp);  ANS(Compute("$mult2")->cmp);  ANS(Compute("$dim2")->cmp);
} else {
	ANS(Compute("0")->cmp);  ANS(Compute("$mult2")->cmp);  ANS(Compute("$dim2")->cmp);
	ANS(Compute("$eig")->cmp);  ANS(Compute("$mult1")->cmp);  ANS(Compute("$dim1")->cmp);
}
COMMENT('MathObject version');
ENDDOCUMENT();