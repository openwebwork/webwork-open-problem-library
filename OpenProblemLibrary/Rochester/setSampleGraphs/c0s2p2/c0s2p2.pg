#DESCRIPTION
# Tests the ability to recognize the graphs created by
# translation and stretching transformations.
## lcao tagged and PAID on 2-20-2004

## DBsubject(Algebra)
## DBchapter(Transformations of functions and graphs)
## DBsection(Three or more transformations)
## Date(5/26/2005)
## Institution(UVA)
## Author(Jeff Holt)
## Level(2)
## TitleText1('College Algebra')
## AuthorText1('Stewart, Redlin, Watson')
## EditionText1('3')
## Section1('4.5')
## Problem1('10')
## TitleText2('Calculus: Early Transcendentals')
## AuthorText2('Stewart')
## EditionText2('5')
## Section2('1.3')
## Problem2('')
## TitleText3('Calculus: Early Transcendentals')
## AuthorText3('Stewart')
## EditionText3('6')
## Section3('1.3')
## Problem3('')
## KEYWORDS('Algebra','Transformtions','Graphs','calculus', 'functions','models')
#ENDDESCRIPTION

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
                   "PGauxiliaryFunctions.pl"
                   );


$showPartialCorrectAnswers = 0;

TEXT(beginproblem());


# Define which of the three sets of pictures to use

# The pictures are labeled 1.gif, 2.gif and 3.gif and
# stored in the same directory as staticgraphicsexample.gif
# These are the corresponding transformed pictures.
# Be careful with the labeling, since the URL's could give the
# correct answers away.
# (In this example the middle integer tells you
#  the correct position.)

$pictID[1] = [
"1-31126.gif",  # "\( F(x+3)\)",
"1-76239.gif",  # "\(F(x-3) \)" ,
"1-96355.gif",  # "\( -F(-x)\)",
"1-24438.gif",  # "\( F(-x) \)",
"1-89540.gif",  # "\( 5F(x) \)",
"1-42639.gif",  # "\( F(3x) \)" ,
"1-91734.gif",  # "\( F(x/3) \)",
"1-34859.gif",  # "\( F(x^2) \)",
];
$pictID[2] = [
"2-70190.gif",  # ditto
"2-49261.gif",
"2-62384.gif",
"2-54427.gif",
"2-64591.gif",
"2-42653.gif",
"2-81779.gif",
"2-92879.gif",
];
$pictID[3] = [
"3-14197.gif",
"3-89262.gif",
"3-99389.gif",
"3-68458.gif",
"3-14538.gif",
"3-37616.gif",
"3-46739.gif",
"3-52898.gif",
];
$ml = new_match_list();

$pictSet=random(1,3,1);  # Choose one of the three picture sets
$pictSetname = $pictSet.".gif";
$ml->qa (
"\( F(x+3)\) ",
image($pictID[$pictSet][0],tex_size=>200, width=>238, height=>197),
"\(F(x-3) \)" ,
image($pictID[$pictSet][1],tex_size=>200, width=>238, height=>197),
"\( -F(-x)\) ",
image($pictID[$pictSet][2],tex_size=>200, width=>238, height=>197),
"\( F(-x) \)",
image($pictID[$pictSet][3],tex_size=>200, width=>238, height=>197),
"\( 5F(x) \)",
image($pictID[$pictSet][4],tex_size=>200, width=>238, height=>197),
"\( F(3x) \)" ,
image($pictID[$pictSet][5],tex_size=>200, width=>238, height=>197),
"\( F(x/3) \)",
image($pictID[$pictSet][6],tex_size=>200, width=>238, height=>197),
"\( F(x^2) \)",
image($pictID[$pictSet][7],tex_size=>200, width=>238, height=>197),
);
$numGraphs = 4;
$ml->choose($numGraphs);
sub format_graphs {
        my $self = shift;
        my @in = @_;
        my $out = "";
        while(@in) {
                $out .=  shift(@in). "#" ;
        }
        $out;      # The output has to be a string in order to conform to the
                   # specs for the match list object, but I've put some
                   # markers in (#) so that
                   # I can break the string up into a list for use
                   # as an input into row.
}

# We need to change the output, since the normal
# output routine will put the pictures one above another. 
$ml->rf_print_a(~~&format_graphs);
               
BEGIN_TEXT
This is a graph of the function \( F(x) \):
$BR
\{ image($pictSetname, width=>238, height=>197) \}
$BR
Enter the letter of the graph below which corresponds to the transformation
of the function.
\{ $ml -> print_q \}
END_TEXT

# Place the output into a table
TEXT(
begintable($numGraphs),
 row( split("#",$ml->print_a() ) ),
 row(@ALPHABET[ 0..($numGraphs-1) ] ),
endtable(),
);

ANS(str_cmp( $ml ->ra_correct_ans()   ) ) ;

ENDDOCUMENT();        # This should be the last executable line in the problem.
