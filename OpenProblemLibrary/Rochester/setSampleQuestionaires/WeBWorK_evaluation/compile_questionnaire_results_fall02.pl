#!/usr/bin/perl
use strict;
##
## REVISION HISTORY
## M. Gage (Rochester) and W.K. Ziemer (CSULB) Dec. 1999
## M. Gage (Rochester) and A. Pizer (Rochester) Apr. 2000
## A. Pizer (Rochester) June 2001
## A. Pizer (Rochester) November 2002
##
##
## This script parses results generated by the questionnaire_spring00.pg and summarizes them
## into an excel file and an essay file. Further it creates an html file which reproduces the
## original questionnaire together with a histogram of the results for each question.  Each
## question is followed by a sumary of the responses to that question.  The orginal files have
## the format described at the end of this file.

## The the required inputs are the html source of the questionnaire, a file containing all the
## email responses concatenated into one file, and a base file name [e.g. foo] (without an extension)
## for the three output files [the three output files will be e.g. foo.html, foo.xls, and foo.txt].
## Usually this data will be kept on a course by course basis so all email esponses from a single
## course should be saved in one file.

my ($questionnaire,$filename,@data,%percent_results,%count_results,$question,$numeric,$standardOutput);
my ($in, $psvn, $question_number, %question_response, %essay_response, $inpath);

## An ans and c_ans variable is needed for each possible value of a student's response. For this
## questionnaire, the question with the greatest number of possible responses is question A,
## What mathematics or physics course are you currently enrolled in? with responses 1,2, ..., or 8.

my $max_number_of_ans = 100;

my @ans;
my @c_ans;

if(@ARGV==3){
	$questionnaire = $ARGV[0];
	$inpath = $ARGV[1];
	$filename = $ARGV[2];
}else{
	print "\nNote: the following items can be supplied as command line arguments.\n
(i.e. compile_questionnaire_results_sp00.pl  questionnaire.html  raw_data.txt  mth142_results\n";
	print "\nQuestionnaire HTML file is: ";
	chomp($questionnaire = <STDIN>);
	print "\nFile of email responses to questionnaire.pg is: ";
	chomp($inpath = <STDIN>);
	print "\nYou need to enter base file name (without an extension) to use for the output files.\n";
	print "   For example, if the base file name is MTH100_results, the output files will be\n";
	print "   MTH100_results.html, MTH100_results.xls, and MTH100_results.txt\n";
    print "Enter the base file name: ";
	chomp($filename = <STDIN>);
};
my $outfile  = "$filename".'_full.html'; ## html file summarizing all responses
my $outfile1 = "$filename".'_numeric.html';  ## html file summarizing non essay responses
my $outpath1 = "$filename".'.xls';  ## tab delimited file of non essay responses
my $outpath2 = "$filename".'.txt';  ## essay responses (questions 28, 29, 30)

open(QUESTIONNAIRE, "<$inpath") or die "Can't read  file at: $inpath";

print "Reading input from $inpath\n";
my $counter=0;

my %psvn_hash = ();
my %histogram = ();

while (<QUESTIONNAIRE>) {
    $in = $_;
    # skip blank lines
    next unless $in =~ /\S/;
    # skip other lines
    next if $in =~/Delivered-To:|To:|X-Remote-Host:|Subject:|Date:|From:/;
    if ( $in =~ /^\s*(\d+)\-Problem\-\d+\-Question\-([^\:]+):/  ) {
        $psvn = $1;
        $question_number = $2;
		$psvn_hash{$psvn}++;
		$counter++;
    } else {
		# text line
		chomp($in);
		if ( $question_number =~/28|29|30/ ) {
			# essay responses are accumulated
			$essay_response{"$psvn - $question_number"} .= $in;
		} else {
		   # a new record entry is defined, unless a non-blank one has already been defined.
		   # this means that the first non-blank or non-zero response is recorded.
		   $question_response{"$psvn - $question_number"} = $in unless defined($question_response{"$psvn - $question_number"} and $question_response{"$psvn - $question_number"} =~ /\S/);
		}
    }
}
close(QUESTIONNAIRE);
print "\n\n$counter Questions processed ";
print "from ",scalar(keys %psvn_hash), " students\n";


open(OUT1, ">$outpath1") or die "Can't write to file at: $outpath1";
open(OUT2, ">$outpath2") or die "Can't write to file at: $outpath2";

print "Excel output sent to  file $outpath1\n";
print "Essay questions sent to  file $outpath2\n";

my ($key, $key1, $line);
my %count = ();

# This is the list of question numbers in the order you want them printed out to the tab separated Excel file.
 my @key_list = qw ( A B C D D1 E E1 F F1 G G1 H H1 I J K K1 L M N O
          P P1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 );
# Print the header for the excel file;

print OUT1 "\t",join("\t",@key_list ),"\tnumber of replies", "\n";

foreach my $key (sort  keys %psvn_hash ) {
	 print OUT1 "$key\t";  # print the psvn key
			 foreach my $key2 (  @key_list ) {
				 print OUT1 $question_response{"$key - $key2"}  if defined $question_response{"$key - $key2"};
				 print OUT1 "\t";
				 if ($question_response{"$key - $key2"} =~ /[0-9]+/){
					 $histogram{$key2}[$question_response{"$key - $key2"}]++;
					 $count{$key2}++;
				 };
	 }
	 print OUT1 "$psvn_hash{$key}\n";  # record the number of responses
}

foreach my $key2 ( @key_list ) {
	if ( defined $histogram{$key2}) {
		my $i=0;
		my $j=0;
		my $val;
		while( @{$histogram{$key2}} ){
		        $val = shift(@{$histogram{$key2}});
				$percent_results{$key2}[$i++]= sprintf("%.1f",$val/$count{$key2}*100);
				$count_results{$key2}[$j++]= $val;
		};
	};
};

sub by_question27 {
    $question_response{"$b - 27"} <=> $question_response{"$a - 27"};
}
my @questions = qw (28 29 30);
my @sorted_psvn_keys = sort by_question27 keys %psvn_hash;

print OUT2 "Questions are sorted by the overall evaluation each student gave WeBWorK on a scale of 1-5 (from Question 27)";
foreach my $key2 (@questions) {
    print OUT2 "\n\nQuestion: $key2\n\n";
    foreach my $key (@sorted_psvn_keys) {
	print OUT2 "psvn:$key\n\t";
	my $label = "$key - $key2";
	my $label27 = "$key - 27";
	print OUT2 "$question_response{$label27} - $essay_response{$label}" if defined $essay_response{$label};
	print OUT2 "\n";
	}
}

print "Questionnaire processed\n";

foreach my $file ( ($outfile, $outfile1) ) {
	print "\nMaking $file...\n";
	open(QUESTIONNAIRE, "<$questionnaire")||die "Can't read questionnaire $questionnaire, $!";
	open(OUT, ">$file")||die "Can't write to $file, $!";

	while(<QUESTIONNAIRE>){
		$line =$_;
		if ($line =~ /^<TEXTAREA/i) { next unless $file eq $outfile1 };
		if ($line =~ /<\/TEXTAREA>\s*$/i) { next unless $file eq $outfile1 };
		print OUT $line unless ( ($line =~ m|^<P> <HR>|i) or ($line =~ m|^<p> </p><hr>|i) ) ;
		if($line =~ /^([A-Z])\./){$question = $1};
		if($line =~ /^(\d+)\./){$numeric = $1};
		if($line =~ m|^<P>\s*(\d+)\.|i or $line =~ m|^</p><p>\s*(\d+)\.|i){$numeric = $1};
		next unless ($line =~ m|^<P> <HR>|i or $line =~ m|^<p> </p><hr>|i or $line =~ /^\d+\./ or $line =~ /^<P>\s*\d+\./i or $line =~ m|^</p><p>\s*\d+\.|i);
		if ($line =~ m|^<P> <HR>|i or $line =~ m|^<p> </p><hr>|i ) {
		    print_letter_out(\@{$count_results{$question}},\@{$percent_results{$question}},\%count);
		    print OUT "\n<HR>\n";

		}elsif (!($numeric == 28 || $numeric == 29 || $numeric == 30)) {
			@ans = @{$percent_results{$numeric}};
			@c_ans = @{$count_results{$numeric}};

			for (my $i=0; $i<6; $i++) {
				$c_ans[$i] = 0 unless defined $c_ans[$i];
			}

			print OUT "\n</TD><TD>\n";
			$standardOutput = select OUT; #switch default output file handle to OUT

			$~ = "NUMERICOUT"; # switch format for OUT to NUMERICOUT
			write;
			$~ = "OUT";  # restore format for OUT
			select($standardOutput); # restore default file handle for output
		}elsif ($file eq $outfile1) {} # do nothing (don't print essay responses in numeric html file)
		else {
			print OUT '<p><p>';
			print OUT "<h5>Questions are sorted by the overall evaluation each student gave WeBWorK on a scale of 1-5 (from Question 27)</h5>";
	                foreach  $key (@sorted_psvn_keys) {
	                	my $label = "$key - $numeric";
				my $label27 = "$key - 27";
	                        print OUT "&nbsp;" x 10 . "$question_response{$label27} - $essay_response{$label}<p><p>" if (defined $essay_response{$label});
	                }
	                print OUT "<p> <p>";
		};

	};
	close(QUESTIONNAIRE)||die "Can't close questionnaire $questionnaire, $!";
	close(OUT)||die "Can't close the output file $file, $!";
}

print "Done\n";


sub print_letter_out {
    my ($c_ans_ref, $ans_ref, $count_ref) = @_;
    my %count = %$count_ref;
    my (@c_ans) = @$c_ans_ref;
    my (@ans) = @$ans_ref;
    print OUT '<TABLE BORDER> <tr ALIGN=CENTER> <td> Answer </td> <td> Count </td><td> Percent </td></tr>';

    my @alphabet = ('0', 'A' .. 'Z');  ## elemt 1 is A
    for (my $i=1; $i<=$max_number_of_ans; $i++) {
    	if (defined $c_ans[$i]) {
		print OUT "<tr ALIGN=CENTER> <td> " . $alphabet[$i] . "</td> <td> $c_ans[$i] </td><td> $ans[$i] </td></tr>";
	}
    }
    if (defined $c_ans[0]) {
        print OUT "<tr ALIGN=CENTER> <td> other </td> <td> $c_ans[0] </td><td> $ans[0] </td></tr>";
    }

    print OUT "<tr ALIGN=CENTER> <td> Total </td> <td> $count{$question} </td><td> 100 </td></tr>\n
          </TABLE>";
}


format NUMERICOUT =
<TABLE BORDER> <tr ALIGN=CENTER> <td> Answer </td> <td> Count </td> <td> Percent </td></tr>
<tr ALIGN=CENTER> <td> 5 </td> <td> @>>>> </td> <td> @>>> </td></tr>
                                    $c_ans[5],       $ans[5]
<tr ALIGN=CENTER> <td> 4 </td> <td> @>>>> </td> <td> @>>> </td></tr>
		                    $c_ans[4],       $ans[4]
<tr ALIGN=CENTER> <td> 3 </td> <td> @>>>> </td> <td> @>>> </td></tr>
	                            $c_ans[3],       $ans[3]
<tr ALIGN=CENTER> <td> 2 </td> <td> @>>>> </td> <td> @>>> </td></tr>
                                    $c_ans[2],       $ans[2]
<tr ALIGN=CENTER> <td> 1 </td> <td> @>>>> </td> <td> @>>> </td></tr>
			            $c_ans[1],       $ans[1]
<tr ALIGN=CENTER> <td> 0 </td> <td> @>>>> </td> <td> @>>> </td></tr>
				    $c_ans[0],       $ans[0]
<tr ALIGN=CENTER> <td> Total </td> <td> @>>>> </td><td> 100 </td></tr>
                                        $count{$numeric}
</TABLE>
.
