#!/usr/bin/perl


## this script is for use with questionnaire produced by WeBWorK 2
use strict;

##
## REVISION HISTORY
## A. Pizer (Rochester) Multiple revisions June 2000 -  May 2006
##

## IMPORTANT. If you modify the survey form, you will probably have to modify this script.
## See MODIFICATIONS below.

## This script parses results generated by TA_evaluation_XXXX.pg and summarizes them
## into 5 files.  

## The required inputs are the html source of the questionnaire, a file 
## containing all the email responses concatenated into one file, and a base 
## file name [e.g. spring06_TA_results] (without an extension) for the five 
## output files. The five output files will be e.g. 
## spring06_TA_results_summary.html, spring06_TA_results_short.html, 
## spring06_TA_results.html, spring06_TA_results.xls, and 
## spring06_TA_results.txt.

## spring06_TA_results_summary.html is a small file containing a summary of the 
## responses of question 5 which is the overall evaluation and for question C 
## "Would you take a recitation with this TA again?"

## spring06_TA_results_short.html is a file containing the responses to question 
## 5 (overall evaluation) and question C ("Would you take a recitation with this 
## TA again?") along with all student written comments.  The comments are 
## ordered in the approximate order of from better to worst.

## spring06_TA_results.html is a large file containing detailed information on 
## each TA along with all student written comments. The comments are ordered in 
## the approximate order of from better to worst.

## TA_evalation_fall02.xls is a large file suitable for importation to a 
## spreadsheet program such as Excel. It contains all numerical data.

## TA_evalation_fall02.txt is a large file suitable for importation to a 
## spreadsheet program such as Excel. It contains all written comments.  The 
## numerical and written data are keyed to each other.


## MODIFICATIONS.  This script obtains data and formatting information from the html source of the
## survey problem.  Thus if you modify the survey problem, you will probably have to modify this script.
## Check the following:
## 1. $semester in line 50
## 2. lines 109, 135-135 (if your source is in latex2html mode) or lines 154, 169-178 (if your source is
##    another mode).  This is where the data (course names, TA names and recitation times) is obtained
##    from the html source of the questionnaire. If you change the questionnaire, the format of this data
##    may change and you may have to modify the code accordingly.



my  $semester = 'Spring 2006';

my ($questionnaire,$filename,@data,%percent_results,%count_results,$question,$numeric,$standardOutput);
my ($in, $psvn, $question_number, %question_response, %essay_response, $inpath,$TA_number);

my $max_number_of_ans = 100;  ## among all questions, the one with the maximum possible number of answers
                              ## has at most the answers 0,1,2,3, ..., 100. For example if you have over 100
                              ## TA's, this needs to be modified.
my @ans;
my @c_ans;

if(@ARGV==3){
    $questionnaire = $ARGV[0];
    $inpath = $ARGV[1];
    $filename = $ARGV[2];
}else{
    print "\nNote: the following items can be supplied as command line arguments.\n
(i.e. compile_TA_results_spring06.pl  questionnaire_source  raw_data.txt  spring06_TA_results\n";
    print "\nQuestionnaire HTML file is: ";
    chomp($questionnaire = <STDIN>);
    print "\nFile of email responses to questionnaire.pg is: ";
    chomp($inpath = <STDIN>);
    print "\nYou need to enter base file name (without an extension) to use for the output files.\n";
    print "   For example, if the base file name is TA_results, the output files will be\n";
    print "   TA_results.html, TA_results.xls, and TA_results.txt\n";
    print "Enter the base file name: ";
    chomp($filename = <STDIN>);
};

my $outfile  = "$filename".'.html'; ## html file summarizing responses with comments
my $outpath1 = "$filename".'.xls';  ## tab delimited file of non essay responses
my $outpath2 = "$filename".'.txt';  ## essay responses (question 6)
my $outpath3  = "$filename".'_summary.html'; ## small html file summarizing overall evaluation
my $outpath4  = "$filename".'_short.html'; ## moderate html file summarizing overall evaluation 
										   ## and coments

# Get the list of recitations from the questionnaire
# This is the list of numbers associated to recitations in question B

open(QUESTIONNAIRE, "<$questionnaire")||die "Can't read questionnaire $questionnaire, $!";

my %TA_name_hash = ();     ## key is TA number, value is TA name and recitation time
my %Course_name_hash = ();	## key is TA number, value is course name
my  ($line,$mode,$course_name);


my $last_TA_number=0;

# Get the list of TA's and the course they are TA'ing for from the HTML source

while($line = <QUESTIONNAIRE>){
	next unless (($line =~ /NAME="AnSwEr2"/) or ($line =~ /<H3>MTH/));
## lines look like

# <H3>MTH 140A TA's </H3> 
#<INPUT TYPE=RADIO NAME="AnSwEr2" VALUE="1" >Lauren Burr			W	5:00-5:50	Hylan 105 <BR>
#
 #<H3>MTH 141 TA's </H3> 
#<INPUT TYPE=RADIO NAME="AnSwEr2" VALUE="2" >Michelle Bass			R	10:00-10:50	Hylan 105 <BR>
#<INPUT TYPE=RADIO NAME="AnSwEr2" VALUE="3" >Chad Gratton 			M	12:00-12:50	Hylan 101 <BR>
#<INPUT TYPE=RADIO NAME="AnSwEr2" VALUE="4" >Chad Gratton 			R	12:55-1:45	Hylan 105 <BR>
#<INPUT TYPE=RADIO NAME="AnSwEr2" VALUE="5" >Amy Tse				F	11:00-11:50	Hylan 102 <BR>

	if ($line =~ /<H3>MTH/) {
		$line =~ /^.*?<H3>(.*?)TA's/;
		$course_name = $1;
	}
	if ($line =~ /NAME="AnSwEr2"/) {
		$line =~ /^.*?VALUE="(\d+)".*?>(.*)<BR>/;
    	$TA_name_hash{$1}=$2;
    	$Course_name_hash{$1}=$course_name;  ## course names come before TA names
    	if ($last_TA_number < $1) {$last_TA_number = $1;}
#    	print "TA $1 is $2\n";			#uncomment for debugging
   	}
}

close(QUESTIONNAIRE);

sub numerically {$a <=> $b; }
my @TA_number_array = sort numerically keys %TA_name_hash;

## Order the TA's so that all of a TA's recitations are grouped together
## The order comes from the html source of the questionnaire
@TA_number_array = (1..$last_TA_number);

open(RAWDATA, "<$inpath") or die "Can't read  file at: $inpath";

print "Reading input from $inpath\n";
my $counter=0;

my %psvn_hash = ();
my %histogram = ();

while (<RAWDATA>) {
    $in = $_;
    # skip blank lines
    next unless $in =~ /\S/;
    # skip other lines
    next if $in =~/X-Original-To:|Delivered-To:|To:|X-Remote-Host:|Subject:|Date:|From:/;
    # skip lines added by my spam filter
    next if $in =~/X-Spam-Checker-Version:|X-Spam-Status:|X-Spam-Level:|version=2.63|X-Bayesian-Result:|X-Bayesian-Words:|X-SpamPal:|X-Wlist-Pattern:|mail.math.rochester.edu/;
    if ( $in =~ /^\s*(\w+?)\-Problem\-\d*\-Question\-([^\:]+):/  ) {
        $psvn = $1;
        $question_number = $2;
        $psvn_hash{$psvn}++;
        $counter++;
    } else {
        # text line
        chomp($in);
        $in =strip_spaces($in);
        if ( $question_number =~/B/ ) {$TA_number = $in;}    # get TA_number
        if ( $question_number =~/6/ ) {
            # the last not blank essay response is recorded as students tend to resubmit
            # questionnaires.
            my $label = "$psvn - $question_number";
            $essay_response{$TA_number}{$label} = $in unless defined($essay_response{$TA_number}{$label} and $in !~ /\S/);
        }
        else {
            # the last not blank response is recorded as students tend to resubmit
            # questionnaires.
           $question_response{"$psvn - $question_number"} = $in unless defined($question_response{"$psvn - $question_number"} and $in !~ /\S/);
        }
    }
}
close(RAWDATA);
print "\n\n$counter Questions processed ";
print "from ",scalar(keys %psvn_hash), " students\n";


open(OUT1, ">$outpath1") or die "Can't write to file at: $outpath1";
open(OUT2, ">$outpath2") or die "Can't write to file at: $outpath2";


my ($key, $key1, $key2, $key3, %count);

# order (keys %psvn_hash) by the response to question 5.  Doing so will approximately order the
# essay responses from good to bad.

sub by_question5 {
    $question_response{"$b - 5"} <=> $question_response{"$a - 5"};
}

my @sorted_psvn_keys = sort by_question5 keys %psvn_hash;

# This is the list of question numbers in the order you want them printed out to the tab separated Excel file.
 my @key_list = qw (A B C 1 2 3 4 5);
# Print the header for the excel file;

print OUT1 "\t",join("\t",@key_list ),"\tnumber of replies", "\n";

foreach my $key (@sorted_psvn_keys) {
     print OUT1 "$key\t";  # print the psvn key
             foreach my $key2 (  @key_list ) {
                my $label = "$key - $key2";
                 print OUT1 $question_response{$label}  if defined $question_response{$label};
                 print OUT1 "\t";
                 if ($question_response{$label} =~ /[0-9]+/){
                    $key3 = $question_response{"$key - B"};
                    $histogram{$key3}{$key2}[$question_response{$label}]++;
                    $count{$key3}{$key2}++;
                 };
     }
     print OUT1 "$psvn_hash{$key}\n";  # record the number of responses
}
close(OUT1);


foreach $TA_number (@TA_number_array) {
    foreach  $key2 ( @key_list ) {

        if ( defined $histogram{$TA_number}{$key2}) {
            my $i=0;
            my $j=0;
            my $val;

            while( @{$histogram{$TA_number}{$key2}} ){
                $val = shift(@{$histogram{$TA_number}{$key2}});
                $percent_results{$TA_number}{$key2}[$i++]= sprintf("%.1f",$val/$count{$TA_number}{$key2}*100);
                $count_results{$TA_number}{$key2}[$j++]= $val;
            };
        };
    };
}
my @questions = qw (6);
my $response;

foreach $TA_number (@TA_number_array) {
    print OUT2 "\n\n\n $TA_name_hash{$TA_number}";
    foreach  $key2 (@questions) {
        print OUT2 "\n\nQuestion: $key2\n\n";
        foreach  $key (@sorted_psvn_keys) {
            if (defined $essay_response{$TA_number}{"$key - $key2"})
             {
                my $label="$key - $key2";
#                print "psvn:$key\n\t";
                print OUT2 "psvn:$key\n\t";
# print "response for |${TA_number}| and |${label}| is \n $essay_response{$TA_number}{$label}\n";
                print  OUT2 "$essay_response{$TA_number}{$label}\n";
            }
        }
        print OUT2 "\n";
    }
}
close(OUT2);
print "The Questionnaire has been processed\n";


## Now output the full information in an html page

open(OUT, ">$outfile")||die "Can't write to $outfile, $!";

print OUT <<EOT;
<HTML>

<HEAD>
<TITLE>
   $semester student TA evaluations
</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<H1> $semester Student TA evaluations </H1>
<H2>TA's are listed by course (starting with MTH 140A) and recitation </H2>

EOT

foreach $TA_number (@TA_number_array) {
    open(QUESTIONNAIRE, "<$questionnaire")||die "Can't read questionnaire $questionnaire, $!";


	while(<QUESTIONNAIRE>){
	    $line =$_;
	    
	    if ($line =~ /^<!DOCTYPE html/) {         ## skip initial stuff
NEXTLINE1:	while(<QUESTIONNAIRE>) {
	        $line =$_;
	        next NEXTLINE1 unless $line =~ /^\s*Dear Students/  ;
	        last NEXTLINE1 if $line =~   /^\s*Dear Students/  ;
	        }
		}

	    last if $line =~ /^\s*<TEXTAREA NAME=/;
	    if($line =~ /^\s*Dear Students/) {
	    	print OUT '<HR noshade size="10"><HR noshade size="10">';
	        print OUT '<H1>';
	        print OUT "$TA_name_hash{$TA_number} <br> $Course_name_hash{$TA_number}  $semester";
	        print OUT '</H1>';
	    }

	    ## skip initial stuff which gives no information
	    if($line =~ /^\s*Dear Students/) {         
NEXTLINE2:	while(<QUESTIONNAIRE>) {
	        $line =$_;
	        next NEXTLINE2 unless $line =~ /^\s*<h2>A\./;
	        last NEXTLINE2 if $line =~   /^\s*<h2>A\./;
	        }
		}	    
	    
		print OUT $line unless $line =~ /^\s*<HR>/;
    	if($line =~ /^\s*<h2>([A-Z])\./){$question = $1};  	## questions A-C
    	if($line =~ /^(\d)\./){$numeric = $1};      		## questions 1-5
    	if($line =~ /^\s*<h2>\s*(\d+)\./){$numeric = $1}; 		## question 6
    	next unless ($line =~ /^\s*<HR>/ or $line =~ /^\d+\./ or $line =~ /^\s*<h2>\s*\d+\./);


    	if ($line =~ /^\s*<HR>/) {

	        print_letter_out(\@{$count_results{$TA_number}{$question}},\@{$percent_results{$TA_number}{$question}},\%{$count{$TA_number}});
	        print OUT "\n<HR>\n";

	        if ($question eq 'A') {         ## skip question B --- list of TA's
	            print OUT "\nSkipping question B which lists TA's and recitations.\n";
	            print OUT "\n<HR>\n";

NEXTLINE3:	        while(<QUESTIONNAIRE>) {
	                $line =$_;
	                next NEXTLINE3 unless $line =~ /^\s*<HR>/ ;
	                last NEXTLINE3 if $line =~ /^\s*<HR>/ ;
	            }
            }
		}
		elsif (!($numeric eq '6')and defined @{$percent_results{$TA_number}{$numeric}} ) {

			@ans = @{$percent_results{$TA_number}{$numeric}};
			@c_ans = @{$count_results{$TA_number}{$numeric}};
			my $i;
            for ($i = 0; $i <6; $i++) {
                $c_ans[$i] = 0 unless defined $c_ans[$i];
            }
			print OUT "\n</TD><TD>\n";
			$standardOutput = select OUT; #switch default output file handle to OUT
							  $~ = "NUMERICOUT"; # switch format for OUT to NUMERICOUT
							   write;
		$~ = "OUT";  # restore format for OUT
			 select($standardOutput); # restore default file handle for output
    	}
    	elsif (!($numeric eq '6')) {} ## do nothing
    	else { 
 		
    		 ## print out essay responses
    	    print  OUT '<p><p>';
            foreach  $key2 (@questions) {
                foreach  $key (@sorted_psvn_keys) {
                    if (defined $essay_response{$TA_number}{"$key - $key2"})
                        {
                        my $label="$key - $key2";
                        my $label5="$key - 5";
                        print  OUT "&nbsp;" x 10 . "$question_response{$label5} - $essay_response{$TA_number}{$label}<p><p>";
                    }
                }
                print OUT '<p> <p>';
            }
        }
    }
    close(QUESTIONNAIRE)||die "Can't close questionnaire $questionnaire, $!";

}


print  OUT  "\n </body> \n </html>\n";
close(OUT)||die "Can't close the output file $outfile, $!";


## produce a summary of the results of the overall evaluation 


my %TA_recitations;     ## a hash of arrays. For each TA name, we list all his or her recitations
my $TA_name;

foreach $TA_number (keys %TA_name_hash) {
    $TA_name = $TA_name_hash{$TA_number};

##  The TA_name will be  given in the form below.  We just want the name
##  Chris Gibson			T		12:30-1:20		Hutch. 339 <BR>
##  Patricia Gravenstetter	R		10:00-10:50		Hutch. 339 <BR>

    $TA_name =~ s/\t.*//;  ## just keep name
    $TA_name =~ s/\s*$//; ## remove trailing spaces

    push @{ $TA_recitations{$TA_name} }, $TA_number;
}

my (%last_name,$last_name);
foreach $TA_name (keys %TA_recitations) {
    $TA_name =~ m!(\S*)$!;
    $last_name{$TA_name} = $1;
}

sub by_last_name { $last_name{$a} cmp $last_name{$b};  }

my %summary;            ## a hash of arrays. For each TA name, we list # of recitations, # of responses
                        ## avg. of overall evaluations (among non zero responses), and number of responses
                        ## that are 5's, 4's, etc.

my ($avg,$non_zero_count, @total_5_ans, @total_C_ans, $total_count, $num_of_recitations, $i);
my %Course_hash = ();	## key is $TA_name, value is course name

foreach $TA_name (sort by_last_name keys %TA_recitations) {
    $avg = 0;
    $non_zero_count = 0;
    $total_count = 0;
    $num_of_recitations = 0;
    for ($i=0; $i <= 5; $i++) {$total_5_ans[$i] = 0;}
    for ($i=0; $i <= 1; $i++) {$total_C_ans[$i] = 0;}
    foreach $TA_number (@{ $TA_recitations{$TA_name} }) {
    	$Course_hash{$TA_name} = $Course_name_hash{$TA_number};  ## get name of course
        $num_of_recitations++;
# results from question C "Would you take a recitation with this TA again?"
        for ($i=0; $i <= 1; $i++) {
#print "TA num $TA_number, i is $i, count is $count_results{$TA_number}{'C'}[$i+1]\n";
            $total_C_ans[$i] += $count_results{$TA_number}{'C'}[$i+1];
        }
#@c_ans = @{$count_results{$TA_number}{'5'}};   ## results from over all evaluation
        for ($i=0; $i <= 5; $i++) {
            $total_5_ans[$i] += $count_results{$TA_number}{'5'}[$i];
        }
#for ($i=0; $i <= 5; $i++) {$total_5_ans[$i] += $c_ans[$i];}
        $total_count += $count{$TA_number}{'5'};
    }
    for ($i=1; $i <= 5; $i++) {$non_zero_count += $total_5_ans[$i];}
    for ($i=1; $i <= 5; $i++) {$avg += $i*$total_5_ans[$i];}
    if ($non_zero_count > 0) {
        $avg = sprintf("%.2f",$avg/$non_zero_count);
    }
    else {$avg = 0};
    push @{ $summary{$TA_name} }, $Course_hash{$TA_name}, $num_of_recitations, $total_count,$avg, reverse (@total_5_ans),' ',@total_C_ans;
}

open(OUT3, ">$outpath3") or die "Can't write to file at: $outpath1";

print OUT3 <<EOT;
<HTML>

<HEAD>
<TITLE>
    $semester Summary of student TA evaluations
</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<BR CLEAR=ALL>

<H1> $semester Summary of student TA evaluations</H1>
<H2>Results from the overall evaluation question No. 5 and <br>
question C "Would you take a recitation with this TA again?"
</H2>
<H3>avg is the average for all non zero responses to question No. 5. <br>
If a TA covered multiple courses, only one course is named.</H3>

<TABLE BORDER> <tr ALIGN=CENTER> <td> T A </td> <td> Course </td><td> recitations </td><td>students </td><td>avg </td><td> 5's </td><td> 4's </td><td> 3's </td><td> 2's </td><td> 1's </td><td>0's </td> <td></td> <td colspan="2">Take Recitation Again?</td></tr>
<tr ALIGN=CENTER> <td> </td> <td> </td><td> </td><td></td><td> </td><td> </td><td></td><td>  </td><td> </td><td>  </td><td> </td> <td></td> <td>Yes</td><td>No</td></tr>
EOT



foreach $TA_name (sort by_last_name keys %TA_recitations) {
    next if $TA_name eq 'None';
    print  OUT3  "\n <tr ALIGN=CENTER> <td>$TA_name </td>";
    for ($i=0; $i <=12; $i++) {
        print  OUT3  "<td> $summary{$TA_name}[$i] </td>";
    }
    print OUT3 "</td></tr>\n";
}

## now handle the "None" case
#    $TA_name = 'None';
#    print  OUT3  "\n <tr ALIGN=CENTER> <td>$TA_name </td>";
#    for ($i=0; $i <=8; $i++) {
#        print  OUT3  "<td> $summary{$TA_name}[$i] </td>";
#    }
#    print OUT3 "</td></tr>\n";

print OUT3 <<EOT;

</TABLE>
</BODY>
</HTML>

EOT



close (OUT3);

## produce a summary of the results with comments 

open(OUT4, ">$outpath4")||die "Can't write to $outpath4, $!";

print OUT4 <<EOT;
<HTML>

<HEAD>
<TITLE>
   $semester student TA evaluations
</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<H1> $semester Student TA evaluations </H1>
<H2>Summary with comments </H2>
<H2>TA's are listed by course (starting with MTH 140A) and recitation </H2>
<H2>Results from the overall evaluation question No. 5 and <br>
question C "Would you take a recitation with this TA again?"
</H2>
<H3>avg is the average for all non zero responses to question No. 5. <br>
All student comments are listed under the time and place of the recitation.
</H3>
EOT

my %TA_name_used= ();  ## key is TA name, value is 1 if used
my $rec_name;

foreach $TA_number (@TA_number_array) {
	
	$TA_name = $TA_name_hash{$TA_number};
	##  The TA_name will be  given in the form below.  We want to split the name and recitation
##  Chris Gibson			T		12:30-1:20		Hutch. 339 <BR>
##  Patricia Gravenstetter	R		10:00-10:50		Hutch. 339 <BR>

    $TA_name =~ /(.*?)\t(.*)$/;  ## split the name and recitation
	$TA_name = $1;
	$rec_name = $2;
	$rec_name =~ s/\s*$//; ## remove trailing spaces
	$rec_name =~ s/^\s*//; ## remove begining spaces

	$TA_name =~ s/\s*$//; ## remove trailing spaces

	unless (defined $TA_name_used{$TA_name} and $TA_name_used{$TA_name} == 1) {
		print OUT4 '<HR noshade size="10"><HR noshade size="10">';
		print OUT4 '<H1>';
		print OUT4 "$TA_name $Course_name_hash{$TA_number}  $semester";
		print OUT4 '</H1>';
		
print OUT4 <<EOT;		
<TABLE BORDER> <tr ALIGN=CENTER> <td> T A </td> <td> Course </td><td> recitations </td><td>students </td><td>avg </td><td> 5's </td><td> 4's </td><td> 3's </td><td> 2's </td><td> 1's </td><td>0's </td> <td></td> <td colspan="2">Take Recitation Again?</td></tr>
<tr ALIGN=CENTER> <td> </td> <td> </td><td> </td><td></td><td> </td><td> </td><td></td><td>  </td><td> </td><td>  </td><td> </td> <td></td> <td>Yes</td><td>No</td></tr>
EOT
    print  OUT4  "\n <tr ALIGN=CENTER> <td>$TA_name </td>";
    for ($i=0; $i <=12; $i++) {
        print  OUT4  "<td> $summary{$TA_name}[$i] </td>";
    }
    print OUT4 "</td></tr>\n";	
    print OUT4 "\n </TABLE>";
		}		
	$TA_name_used{$TA_name} = 1;
	print OUT4 '<HR noshade size="10">' ;
	print OUT4 '<H1>';
	print OUT4 "$rec_name";
	print OUT4 '</H1>';

    		 ## print out essay responses
	print  OUT4 '<p><p>';
	foreach  $key2 (@questions) {
		foreach  $key (@sorted_psvn_keys) {
		if (defined $essay_response{$TA_number}{"$key - $key2"})
			{
			my $label="$key - $key2";
			my $label5="$key - 5";
			print  OUT4 "&nbsp;" x 10 . "$question_response{$label5} - $essay_response{$TA_number}{$label}<p><p>";
			}
		}
		print OUT4 '<p> <p>';
	}

}


print  OUT4  '</body></html>';
close(OUT4)||die "Can't close the output file $outfile, $!";




print "\nhtml full data including comments sent to $outfile\n";
print "html data including comments sent to file $outpath4\n";
print "html summary data sent to file $outpath3\n";
print "Excel output sent to file $outpath1\n";
print "Essay questions sent to file $outpath2\n";



sub print_letter_out {
    my ($c_ans_ref, $ans_ref, $count_ref) = @_;
    my %count = %$count_ref;
    my @c_ans = @$c_ans_ref;
    my @ans = @$ans_ref;

    print OUT '<TABLE BORDER> <tr ALIGN=CENTER> <td> Answer </td> <td> Count </td><td> Percent </td></tr>';
    my $i;
    my @alphabet = ('0', 'A' .. 'Z');  ## element 1 is A
    for ($i = 1; $i <= $max_number_of_ans; $i++) {
        if (defined $c_ans[$i]) {
        print OUT "<tr ALIGN=CENTER> <td> $alphabet[$i] </td> <td> $c_ans[$i] </td><td> $ans[$i] </td></tr>";
        }
    }
    if (defined $c_ans[0]) {
        print OUT "<tr ALIGN=CENTER> <td> other </td> <td> $c_ans[0] </td><td> $ans[0] </td></tr>";
    }

    print OUT "<tr ALIGN=CENTER> <td> Total </td> <td> $count{$question} </td><td> 100 </td></tr>\n
          </TABLE>";
}



format NUMERICOUT =
<TABLE BORDER> <tr ALIGN=CENTER> <td> Answer </td> <td> Count </td> <td> Percent </td></tr>
<tr ALIGN=CENTER> <td> 5 </td> <td> @>>>> </td> <td> @>>> </td></tr>
								  $c_ans[5],  $ans[5]
<tr ALIGN=CENTER> <td> 4 </td> <td> @>>>> </td> <td> @>>> </td></tr>
								   $c_ans[4], $ans[4]
<tr ALIGN=CENTER> <td> 3 </td> <td> @>>>> </td> <td> @>>> </td></tr>
								  $c_ans[3],  $ans[3]
<tr ALIGN=CENTER> <td> 2 </td> <td> @>>>> </td> <td> @>>> </td></tr>
								    $c_ans[2],$ans[2]
<tr ALIGN=CENTER> <td> 1 </td> <td> @>>>> </td> <td> @>>> </td></tr>
								    $c_ans[1],$ans[1]
<tr ALIGN=CENTER> <td> 0 </td> <td> @>>>> </td> <td> @>>> </td></tr>
									$c_ans[0], $ans[0]
<tr ALIGN=CENTER> <td> Total </td> <td> @>>>> </td><td> 100 </td></tr>
                                       $count{$TA_number}{$numeric}
</TABLE>
.




sub strip_spaces {
    my $in = shift;
    $in =~ s/^\s*//;
    $in =~ s/\s*$//;
    $in;
}

#Format being read:

#Delivered-To: apizer@math.rochester.edu
#To: apizer@math.rochester.edu
#X-Remote-Host:  unknown host(128.151.94.49)
#Subject: mth142 TA evaluation
#Date: Sat, 29 Apr 2000 02:52:07 -0400 (EDT)
#From: webmaster@math.rochester.edu
#
#
#
#10475-Problem-2-Question-A:
# 1
#10475-Problem-2-Question-B:
# 6
#10475-Problem-2-Question-C:
# 1
#10475-Problem-2-Question-1:
# 3
#10475-Problem-2-Question-2:
# 3
#10475-Problem-2-Question-3:
# 3
#10475-Problem-2-Question-4:
# 3
#10475-Problem-2-Question-5:
# 3
#10475-Problem-2-Question-6:
# Gives good alternative examples. A nice guy.
