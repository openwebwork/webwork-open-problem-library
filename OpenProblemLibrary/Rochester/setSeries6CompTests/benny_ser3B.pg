## DESCRIPTION
## Calculus
## ENDDESCRIPTION

## Tagged by cmd6a 5/6/06

## DBsubject(Calculus - single variable)
## DBchapter(Infinite sequences and series)
## DBsection(Comparison tests)
## Date(6/3/2002)
## Institution(OSU)
## MLT(Is_the_argument_correct_CT)
## Level(3)
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Stewart')
## EditionText1('6')
## Section1('11.4')
## Problem1('23')
## TitleText2('Calculus: Early Transcendentals')
## AuthorText2('Rogawski')
## EditionText2('1')
## Section2('10.3')
## Problem2('23')
## KEYWORDS('series','divergent','convergent','comparison test','Series' , 'Comparison Test'  ,'calculus')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl"
);


################################################################
# We need a special problem grader on this problem, since we
# want the student to get full credit for all 6 answers correct,
# 50% credit for 5 correct, and 0% for 4 or fewer correct.
# To change this scheme, look through the following mess of code
# for the place where the variable $numright appears, and change
# that part.
# Also change the long line beginning "msg ==>", to show what will
# appear on the screen for the student.
#
# To look at the problem itself, look for the boxed comment below
# announcing the problem itself.
################################################################

sub custom_problem_grader {
        my $rh_evaluated_answers = shift;
        my $rh_problem_state = shift;
        my %form_options = @_;
        my %evaluated_answers = %{$rh_evaluated_answers};
        #  The hash $rh_evaluated_answers typically contains: 
        #      'answer1' => 34, 'answer2'=> 'Mozart', etc.
       
        # By default the  old problem state is simply passed back out again.
        my %problem_state = %$rh_problem_state;
        
        
        # %form_options might include
        # The user login name 
        # The permission level of the user
        # The studentLogin name for this psvn.
        # Whether the form is asking for a refresh or
	#     is submitting a new answer.
        
        # initial setup of the answer
        my      $total=0; 
        my %problem_result = ( score => 0,
                errors => '',
                type => 'custom_problem_grader',
                msg => 'To get full credit, all answers must be correct.  Having all but one correct is worth 50%.  Two or more incorrect answers gives a score of 0%.',
                                                 );

    # Return unless answers have been submitted
    unless ($form_options{answers_submitted} == 1) {
    
    # Since this code is in a .pg file we must use double tildes 
    # instead of Perl's backslash on the next line.
                return(~~%problem_result,~~%problem_state);
        }
        # Answers have been submitted -- process them.
        
	########################################################
	# Here's where we compute the score.  The variable     #
	# $numright is the number of correct answers.          #
	########################################################

        my      $numright=0;

        $numright += ($evaluated_answers{'AnSwEr0001'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0002'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0003'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0004'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0005'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0006'}->{score});

	if ($numright == 6) {
		$total = 1;
	} elsif ($numright == 5) {
		$total = 0.5;
	} else {
		$total = 0;
	}

        $problem_result{score} = $total; 
        # increase recorded score if the current score is greater.
        $problem_state{recorded_score} = $problem_result{score} if $problem_result{score} > $problem_state{recorded_score};

        
    $problem_state{num_of_correct_ans}++ if $total == 1;
        $problem_state{num_of_incorrect_ans}++ if $total < 1 ;
        
        # Since this code is in a .pg file we must use double tildes 
    # instead of Perl's backslash on the next line.
        (~~%problem_result, ~~%problem_state);

}

################################################################
# Now, on with the problem itself.
################################################################


TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

install_problem_grader(~~&custom_problem_grader);


$a = random(1,7,1);
$b = random(1,8,1);
$c = random(1,9,1);

# Here's the long list of questions:

qa(~~@questions, ~~@answers,

"For all \(n > 1 \),
\( \displaystyle \frac{1}{n \ln (n)} < \frac{2}{n} \),
and the series \( \displaystyle 2 \sum \frac{1}{n} \)
diverges, so by the Comparison Test, the series
\( \displaystyle \sum \frac{1}{n \ln (n)} \) diverges." , "I",

"For all \(n > 2 \), \( \displaystyle \frac{\sqrt{n+1}}{n} > \frac{1}{n} \),
and the series \( \displaystyle \sum \frac{1}{n} \) diverges,
so by the Comparison Test, the series
\( \displaystyle \sum \frac{\sqrt{n+1}}{n} \) diverges." , "C",

"For all \(n > 1 \), \( \displaystyle \frac{n}{$a-n^3} < \frac{1}{n^2} \),
and the series \( \displaystyle \sum \frac{1}{n^2} \) converges, so by
the Comparison Test, the series
\( \displaystyle \sum \frac{n}{$a -n^3} \) converges." , "I",

"For all \(n > 2 \), \( \displaystyle \frac{1}{n^2- $b} < \frac{1}{n^2} \),
and the series \( \displaystyle \sum \frac{1}{n^2} \) converges,
so by the Comparison Test, the series
\( \displaystyle \sum \frac{1}{n^2 - $b} \) converges." , "I",

"For all \(n > 2 \), \( \displaystyle \frac{n}{n^3 - $c} < \frac{2}{n^2} \),
and the series \( \displaystyle 2 \sum \frac{1}{n^2} \) converges, so by
the Comparison Test, the series
\( \displaystyle \sum \frac{n}{n^3 - $c} \) converges." , "C",

"For all \(n > 2 \), \( \displaystyle \frac{\ln (n)}{n^2} > \frac{1}{n^2} \),
and the series \( \displaystyle \sum \frac{1}{n^2} \) converges, so
by the Comparison Test, the series
\( \displaystyle \sum \frac{\ln (n)}{n^2} \) converges." , "I",

"For all \(n > 1 \),
\( \displaystyle \frac{\sin^2 (n)}{n^2} < \frac{1}{n^2} \), and
the series \( \displaystyle \sum \frac{1}{n^2} \) converges,
so by the Comparison Test, the series
\( \displaystyle \sum \frac{\sin^2 (n)}{n^2} \) converges." , "C",

"For all \(n > 1 \),
\( \displaystyle \frac{\arctan (n)}{n^3} < \frac{\pi}{2n^3} \), and
the series \( \displaystyle \frac{\pi}{2} \sum \frac{1}{n^3} \) converges,
so by the Comparison Test, the series
\( \displaystyle \sum \frac{\arctan (n)}{n^3} \) converges." , "C",

      );

# Now randomize the questions:
@slice = &NchooseK(8,6);
@shuffle = &shuffle(scalar(@slice));
($ans1, $ans2, $ans3, $ans4, $ans5, $ans6) = @answers[@slice] ;

TEXT(EV3(<<'EOT'));
Each of the following statements is an attempt to show that
a given series is convergent or divergent not using the Comparison Test
(NOT the Limit Comparison Test.)
For each statement, enter C (for "correct") if the argument
is valid, or enter I (for "incorrect") if any part of the
argument is flawed.  (Note: if the conclusion is true but
the argument that led to it was wrong, you must enter I.)
$BR $BR
EOT
TEXT(EV2(match_questions_list(@questions[@slice])));

ANS(str_cmp($ans1),
 str_cmp($ans2),
 str_cmp($ans3),
 str_cmp($ans4),
 str_cmp($ans5),
 str_cmp($ans6));

ENDDOCUMENT();        # This should be the last executable line in the problem.
