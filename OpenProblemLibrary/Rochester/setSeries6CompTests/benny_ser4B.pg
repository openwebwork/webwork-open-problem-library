## DESCRIPTION
## Calculus
## ENDDESCRIPTION

## Tagged by cmd6a 5/6/06

## DBsubject(Calculus - single variable)
## DBchapter(Infinite sequences and series)
## DBsection(Comparison tests)
## Date(6/3/2002)
## Institution(OSU)
## Author(Utah ww group)
## MLT(Compare_with_a_series_in_a_given_list)
## MLTleader(1)
## Level(3)
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Stewart')
## EditionText1('6')
## Section1('11.4')
## Problem1('13 23 24 25 28')
## TitleText2('Calculus')
## AuthorText2('Dale Varberg, Edwin J. Purcell, and Steve E. Rigdon')
## EditionText2('9')
## Section2('.')
## Problem2('')
## KEYWORDS('series','divergent','convergent','comparison test','Series' , 'Comparison Test'  ,'calculus','limit comparison test')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl"
);


################################################################
# We need a special problem grader on this problem, since we
# want the student to get full credit for all 3 answers correct,
# 50% credit for 2 correct, and 0% for 0 or 1 correct.
# To change this scheme, look through the following mess of code
# for the place where the variable $numright appears, and change
# that part.
# Also change the long line beginning "msg ==>", to show what will
# appear on the screen for the student.
#
# To look at the problem itself, look for the boxed comment below
# announcing the problem itself.
################################################################

sub custom_problem_grader {
        my $rh_evaluated_answers = shift;
        my $rh_problem_state = shift;
        my %form_options = @_;
        my %evaluated_answers = %{$rh_evaluated_answers};
        #  The hash $rh_evaluated_answers typically contains: 
        #      'answer1' => 34, 'answer2'=> 'Mozart', etc.
       
        # By default the  old problem state is simply passed back out again.
        my %problem_state = %$rh_problem_state;
        
        
        # %form_options might include
        # The user login name 
        # The permission level of the user
        # The studentLogin name for this psvn.
        # Whether the form is asking for a refresh or
	#     is submitting a new answer.
        
        # initial setup of the answer
        my      $total=0; 
        my %problem_result = ( score => 0,
                errors => '',
                type => 'custom_problem_grader',
                msg => 'To get full credit, all answers must be correct.  Having all but one correct is worth 50%.  Two or more incorrect answers gives a score of 0%.',
                                                 );

    # Return unless answers have been submitted
    unless ($form_options{answers_submitted} == 1) {
    
    # Since this code is in a .pg file we must use double tildes 
    # instead of Perl's backslash on the next line.
                return(~~%problem_result,~~%problem_state);
        }
        # Answers have been submitted -- process them.
        
	########################################################
	# Here's where we compute the score.  The variable     #
	# $numright is the number of correct answers.          #
	########################################################

        my      $numright=0;

        $numright += ($evaluated_answers{'AnSwEr0001'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0002'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0003'}->{score});

	if ($numright == 3) {
		$total = 1;
	} elsif ($numright == 2) {
		$total = 0.5;
	} else {
		$total = 0;
	}

        $problem_result{score} = $total; 
        # increase recorded score if the current score is greater.
        $problem_state{recorded_score} = $problem_result{score} if $problem_result{score} > $problem_state{recorded_score};

        
    $problem_state{num_of_correct_ans}++ if $total == 1;
        $problem_state{num_of_incorrect_ans}++ if $total < 1 ;
        
        # Since this code is in a .pg file we must use double tildes 
    # instead of Perl's backslash on the next line.
        (~~%problem_result, ~~%problem_state);

}

################################################################
# Now, on with the problem itself.
################################################################


TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

install_problem_grader(~~&custom_problem_grader);


$a = random(6,10,1);
$b = random(2,5,1);
$c = random(1,9,1);
$cc = 187*$c;
$d = random(2,9,1);
$g = random(2,9,1);
$f = $g + random(1,4,1);

$m = random(3,6,1);
$l = $m + $a;
$k = $a + 2;
$j=  $a + $b;
$h = $a - 1;

# Here's the three possible questions:

qa(~~@questions, ~~@answers,
"\( \displaystyle \sum_{n=1}^{\infty} \;
\frac{$d n^{$m} + n^2 - $d n}{$f n^{$l} - $g n^{$k} + $c} \)",
	"AC",
"\( \displaystyle \sum_{n=1}^{\infty} \;
\frac{$g n^2 + $d n^{$h}}{$b n^{$a} + $f n^3 - $b} \)",
	"CD",
"\( \displaystyle \sum_{n=1}^{\infty} \;
\frac{$b n^$b + n^{$a}}{$cc n^{$j} + $f n^{$b} + $g} \)",
	"BC"
      );

# Now randomize the questions:
@slice = &NchooseK(3,3);
@shuffle = &shuffle(scalar(@slice));
($ans1, $ans2, $ans3) = @answers[@slice] ;

TEXT(EV3(<<'EOT'));
The three series \( \sum A_n \), \( \sum B_n \),
and \( \sum C_n \) have terms
\[ A_n = \frac{1}{n^{$a}}, \quad
B_n = \frac{1}{n^{$b}}, \quad
C_n = \frac{1}{n}. \]
Use the Limit Comparison Test to compare the following
series to any of the above series.  For each of the series
below, you must enter two letters.  The first is
the letter (A,B, or C) of the series above that it can
be legally compared to with the Limit Comparison Test.
The second is C if the given series converges, or D if it
diverges.  So for instance, if you believe the series
converges and can be compared with series C above, you
would enter CC; or if you believe it diverges and can be
compared with series A, you would enter AD.
$BR $BR
EOT
TEXT(EV2(match_questions_list(@questions[@slice])));

ANS(str_cmp($ans1), str_cmp($ans2), str_cmp($ans3));

ENDDOCUMENT();        # This should be the last executable line in the problem.
