## DESCRIPTION
## Calculus
## ENDDESCRIPTION

## Tagged by cmd6a 5/6/06

## DBsubject(Calculus - single variable)
## DBchapter(Infinite sequences and series)
## DBsection(Comparison tests)
## Date(6/3/2002)
## Institution(Univeristy of Utah)
## Author(Utah ww group)
## MLT(Does_the_CT_LCT_apply_with_conclusion)
## Level(3)
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Stewart')
## EditionText1('6')
## Section1('11.4')
## Problem1('29 18 10 28 13')
## TitleText2('Calculus')
## AuthorText2('Dale Varberg, Edwin J. Purcell, and Steve E. Rigdon')
## EditionText2('9')
## Section2('.')
## Problem2('')
## TitleText3('Calculus: Early Transcendentals')
## AuthorText3('Rogawski')
## EditionText3('1')
## Section3('10.3')
## Problem3('25')
## KEYWORDS('series','divergent','convergent','comparison test','Series' , 'Comparison Test' , 'Limit Comparison Test' ,'calculus')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl"
);


################################################################
# We need a special problem grader on this problem, since we
# want the student to get full credit for all 5 answers correct,
# 50% credit for 4 correct, and 0% for 3 or fewer correct.
# To change this scheme, look through the following mess of code
# for the place where the variable $numright appears, and change
# that part.
# Also change the long line beginning "msg ==>", to show what will
# appear on the screen for the student.
#
# To look at the problem itself, look for the boxed comment below
# announcing the problem itself.
################################################################

sub custom_problem_grader {
        my $rh_evaluated_answers = shift;
        my $rh_problem_state = shift;
        my %form_options = @_;
        my %evaluated_answers = %{$rh_evaluated_answers};
        #  The hash $rh_evaluated_answers typically contains: 
        #      'answer1' => 34, 'answer2'=> 'Mozart', etc.
       
        # By default the  old problem state is simply passed back out again.
        my %problem_state = %$rh_problem_state;
        
        
        # %form_options might include
        # The user login name 
        # The permission level of the user
        # The studentLogin name for this psvn.
        # Whether the form is asking for a refresh or
	#     is submitting a new answer.
        
        # initial setup of the answer
        my      $total=0; 
        my %problem_result = ( score => 0,
                errors => '',
                type => 'custom_problem_grader',
                msg => 'To get full credit, all answers must be correct.  Having all but one correct is worth 50%.  Two or more incorrect answers gives a score of 0%.',
                                                 );

    # Return unless answers have been submitted
    unless ($form_options{answers_submitted} == 1) {
    
    # Since this code is in a .pg file we must use double tildes 
    # instead of Perl's backslash on the next line.
                return(~~%problem_result,~~%problem_state);
        }
        # Answers have been submitted -- process them.
        
	########################################################
	# Here's where we compute the score.  The variable     #
	# $numright is the number of correct answers.          #
	########################################################

        my      $numright=0;

        $numright += ($evaluated_answers{'AnSwEr0001'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0002'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0003'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0004'}->{score});
        $numright += ($evaluated_answers{'AnSwEr0005'}->{score});

	if ($numright == 5) {
		$total = 1;
	} elsif ($numright == 4) {
		$total = 0.5;
	} else {
		$total = 0;
	}

        $problem_result{score} = $total; 
        # increase recorded score if the current score is greater.
        $problem_state{recorded_score} = $problem_result{score} if $problem_result{score} > $problem_state{recorded_score};

        
    $problem_state{num_of_correct_ans}++ if $total == 1;
        $problem_state{num_of_incorrect_ans}++ if $total < 1 ;
        
        # Since this code is in a .pg file we must use double tildes 
    # instead of Perl's backslash on the next line.
        (~~%problem_result, ~~%problem_state);

}

################################################################
# Now, on with the problem itself.
################################################################


TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

install_problem_grader(~~&custom_problem_grader);


$a = random(2,9,1);
$b = random(1,10,1);
$c = random(2,9,1);

$q = random(2,6,1);
$dp = random(2,5,1);
$p = $q + $dp;
$r = $q + 1;
$s = $p + 2;

$m = random(2,6,1);

$d = random(3,9,1);
$g = random(2,9,1);


qa(~~@questions, ~~@answers,
"\( \displaystyle \sum_{n=1}^\infty \frac{$a n^{$q}}{n^{$p} + $b}  \)" ,
	"CONV",
"\( \displaystyle \sum_{n=1}^\infty \frac{$a n^{$q}}{n^{$r} + $b}  \)" ,
	"DIV",
"\( \displaystyle \sum_{n=1}^\infty \frac{(-1)^n}{$c n} \)" ,
	"NA",
"\( \displaystyle \sum_{n=1}^\infty \frac{\cos^2(n)\sqrt{n}}{n^{$q}} \)" ,
	"CONV",
"\( \displaystyle \sum_{n=1}^\infty \frac{\cos(n)\sqrt{n}}{$a n + $b} \)" ,
	"NA",
"\( \displaystyle \sum_{n=1}^\infty \frac{$d n^{$p} - n^{$r}
	+ $a\sqrt{n}}{$c n^{$s} - n^{$q} + $m }  \)" ,
	"CONV",
"\( \displaystyle \sum_{n=1}^\infty \frac{(\ln (n))^{$m}}{n + $g}  \)" ,
	"DIV"
      );

# Now randomize the questions:
@slice = &NchooseK(7,5);
@shuffle = &shuffle(scalar(@slice));
($ans1, $ans2, $ans3, $ans4, $ans5) = @answers[@slice] ;

TEXT(EV3(<<'EOT'));
Test each of the following series for convergence by either the
Comparison Test or the Limit Comparison Test.
If at least one test can be applied to the series, enter CONV if
it converges or DIV if it diverges.
If neither test can be applied to the series, enter NA.
(Note: this means that even if you know a given series converges
by some other test, but the comparison tests cannot be applied to it,
then you must enter NA rather than CONV.)  $BR $BR
EOT
TEXT(EV2(match_questions_list_varbox(10,@questions[@slice])));

ANS(str_cmp($ans1),
 str_cmp($ans2),
 str_cmp($ans3),
 str_cmp($ans4),
 str_cmp($ans5));

ENDDOCUMENT();        # This should be the last executable line in the problem.
