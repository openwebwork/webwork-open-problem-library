## DESCRIPTION
## Calculus
## ENDDESCRIPTION

## Tagged by tda2d

## DBsubject(Differential equations)
## DBchapter(First order differential equations)
## DBsection(Direction fields)
## Institution(Rochester)
## MLT(d_field_02)
## Level(2)
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Rogawski')
## EditionText1('1')
## Section1('9.3')
## Problem1('9')
## KEYWORDS('differential equation' 'direction field')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "PGnumericalmacros.pl"
           );

TEXT(beginproblem()); # standard preamble to each problem.

# Since this is a true questions, we do not usually wish to tell students which
# parts of the matching question have been answered correctly and which are
# incorrect.  That is too easy.  To accomplish this we set the following flag to zero.
$showPartialCorrectAnswers = 1;


# Make a new select list

$tf = new_match_list();
# $tf now "contains" the select list object.  


# use pop-up list instead of an answer rule.


# What should the pop-up list say, and what should it submit for an answer when selected?
# These are specified in the statment below.
# To enter T as an answer choose the list element "True"
# To enter F as an answer choose the list element "False"
# The first choice is a blank to make the students do SOMETHING!!!
$tf -> ra_pop_up_list( [ No_answer => "��?", T => "True", F => "False"] ); 
# Note how the list is constructed [ answer => list element , answer => list element ]

# Insert some  questions and whether or not they are true.
$numberOfQuestions = 4;
$tf -> qa (
"\(y'= y + xe^{-x} + 1 \)",
sub{my ($x,$y) = @_; $y + $x*exp(-$x) + 1; },
"\( y'= 2xy + 2xe^{-x^2} \)",
sub{my ($x,$y) = @_; 2*$x*$y +2*$x*exp(-$x**2);},

"\(\displaystyle y'= \frac{y}{x} +3\cos(2x)\)",
sub{my ($x,$y) = @_; ($x!=0) ? $y/$x +3*cos(2*$x) : $y/.001;},
"\(y'= 2\sin(3x) + 1 + y\)",
sub{my ($x,$y) = @_; 2*sin(3*$x) + 1 + $y;},
"\(\displaystyle y'= -\frac{(2x+y)}{(2y)} \)",
sub{my ($x,$y) = @_; ($y==0)? -2*$x/0.001 : -(2*$x+$y)/(2*$y);},
"\(y'= 2y - 2\)",
sub{my ($x,$y) = @_; 2*$y - 2 ;},
);   # remember every statement has to end with a semi-colon.
$tf ->choose($numberOfQuestions);
BEGIN_TEXT

	Match the following equations with their direction field.  
	Clicking on each picture will give you an 
	enlarged view.  While you can probably solve this problem by guessing, it is useful
	to try to predict characteristics of the direction field and then match them to the picture.
	$BR
	Here are some handy characteristics to start with -- you will develop more as you practice.
	$BR
	\{OL(
	"Set \(y\) equal to zero and look at how the derivative behaves along the \(x\)-axis.",
	 "Do the same for the \(y\)-axis by setting \(x\) equal to \(0\)",
	 "Consider the curve in the plane defined by setting \(y'=0\) -- this should correspond to the points
	 in the picture where the slope is zero.",
	 "Setting \(y'\) equal to a constant other than zero gives the curve of points where the slope is that 
	 constant.  These are called isoclines, and can be used to construct the direction field picture
	 by hand."
	 )\}
	 $BR
	\{ $tf->print_q \}

END_TEXT

$dx_rule = sub{my ($x,$y) = @_; 1; };
$dy_rule = sub{my ($x,$y) = @_; $y; };
# prepare graphs:
@dy_rules = @{ $tf->{selected_a} };

for my $i (0..$numberOfQuestions-1) {
	$graph[$i] = init_graph(-4,-4,4,4,'axes'=>[0,0],'grid'=>[8,8]);
	$vectorfield[$i] = new VectorField($dx_rule, $dy_rules[$i], $graph[$i]);
	$vectorfield[$i]->dot_radius(2);
	$graphURL[$i] = insertGraph($graph[$i]);
}

BEGIN_TEXT
	$BR
	\{  imageRow( [@graphURL[0..$numberOfQuestions/2-1]], 
		      [@ALPHABET[0..$numberOfQuestions/2-1]], 
	    	      height => 200, width => 200,tex_size=>450 )  \}
	\{  imageRow( [@graphURL[$numberOfQuestions/2..$numberOfQuestions-1]], 
		      [@ALPHABET[$numberOfQuestions/2..$numberOfQuestions-1]], 
		      height => 200, width => 200,tex_size=>450 )  \}
	
END_TEXT

ANS(str_cmp( $tf->ra_correct_ans )   ) ;



#########################################################  



ENDDOCUMENT();        # This should be the last executable line in the problem.

