## DESCRIPTION
## First order ODEs: phase portraits
## ENDDESCRIPTION


## DBsubject(Differential equations)
## DBchapter(First order differential equations)
## DBsection(Equilibrium points and phase lines)
## Date(08/12/2013)
## Institution(Cleveland State University)
## Author(Felipe Martins)
## Level(4)
## MO(1)
## TitleText1('A Modern Introduction to Differential Equations')
## AuthorText1('Ricardo')
## EditionText1('2009')
## Section1('2.5')
## Problem1('2')
## KEYWORDS('differential equations','first order','phase portraits','NSF-0941388')
## Language(en)
## 
## Javascript & html5 canvas replace original Flash app. -- G. Jennings, Jan. 2021 


########################################################################
# This work is supported in part by the National Science Foundation 
# under the grant DUE-0941388.
########################################################################

DOCUMENT();
loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"parserPopUp.pl",
"PGcourse.pl"
);

########## set up in perl ##################################

Context("Numeric");

## parameters used in problem
$a = random(200,300,10);
$b = random(30,50,10);

$equilPt = Compute($b); ## equilibrium point

$canvasId = "phasePortrait18";
$canvasWidth = 420;
$canvasHeight = 150;
$axLengthX = 400; # axis length in canvas coordinates
$debug = 0;  # =0 to hide answer box, =1 to show answer box 

# # # # # # # # # # # # # # # # # # # # # # 
# Configure ticks on the axis 
# the axis has three coordinate systems:
# t and T stand for the coordinate displayed on the tick labels
# x and X stand for the X-coordinate in the canvas coordinate system
# n is integer valued, used for locating arrows etc.
# t,x,n are related by their values at left tick and intervals between ticks.
# ticks range from leftTickT to tPerTick*(tickCount - 1) in t-coordinates 
# # # # # # # # # # # # # # # # # # # # # # 

$leftTickT = -10;

$tickCount = 34;
$tPerTick = 10;
$nPerTick = 2;

## the canvas element

sub printCanvas {   
  return MODES( 
    TeX => image("phaseline18.png"), 
    HTML => qq!<canvas id="$canvasId" width="$canvasWidth" height="$canvasHeight"></canvas>!,
    PTX => " HTML5 canvas element "
  );
}

##  the answer box.  It holds the canvas state and is  filled automatically by javascript so 
##  normally it's hidden (displayed only if $debug = 1).   

sub printAnswerBox {
  if ($debug) { return MODES(
    TeX => '',
    HTML => NAMED_ANS_RULE( 'answerBox', 50 ),
    PTX => ''
  );}
  else { return MODES (
    TEX => '',
    HTML => NAMED_HIDDEN_ANS_RULE( 'answerBox', 50 ),
    PTX => ''
  );}
} 

####################################################################
##### Begin javascript (this will go in html header) ###############
####################################################################

$javascript = <<"END_JAVASCRIPT";
    <script>
// ***** layout ********
// x,y refer to canvas coordinates 

// boxes
const boxLeftX = 35;       // center of left box 
const boxY = 40;           // box center
const boxSize = 20;        // distance from center to edge
const boxSpacing = 88;    // space between boxes
// box legends
const legendY = 15;
// axis
const axLeftX = 10;        // position of axis 
const axY = 125;
const axLengthX = $axLengthX; 
// ticks
const tickCount = $tickCount;
const xPerTick = $axLengthX/$tickCount;
const tPerTick = $tPerTick;
const nPerTick = $nPerTick;
const leftTickX = axLeftX + xPerTick/2;
const leftTickT = $leftTickT;
const tickHeight = 10;
// tick labels
const labelOffsetY = 20;      // relative to axis

// functions that draw boxes, symbols, axis, ticks, tick labels

function drawBox(ctx,x){	
  ctx.beginPath();
  ctx.strokeStyle="Black";
  ctx.lineWidth = 2;
  ctx.rect(x-boxSize,boxY-boxSize,2*boxSize,2*boxSize);
  ctx.fill();
  ctx.stroke();
}

function drawLeftArrow(ctx,x,y){
  ctx.strokeStyle="Black";
  ctx.lineWidth=5;
  ctx.beginPath();
  ctx.moveTo(x+10,y-10);
  ctx.lineTo(x,y);
  ctx.lineTo(x+10,y+10);
  ctx.stroke()
}

function drawRightArrow(ctx,x,y){
  ctx.strokeStyle="Black";
  ctx.lineWidth=5;
  ctx.beginPath();
  ctx.moveTo(x-10,y-10);
  ctx.lineTo(x,y);
  ctx.lineTo(x-10,y+10);
  ctx.stroke()
}
 
function drawDot(ctx,x,y){
  ctx.strokeStyle="Black";
  ctx.beginPath();
  ctx.arc(x,y,5,0,2*Math.PI);
  ctx.fillStyle="Black";
  ctx.fill();
  ctx.stroke();
}

function drawVert(ctx,x,y){
  ctx.strokeStyle="Black";
  ctx.lineWidth = 5;
  ctx.beginPath();
  ctx.moveTo(x, y-10);
  ctx.lineTo(x, y+10);
  ctx.stroke();
}

function drawCross(ctx,x,y){
  ctx.strokeStyle="Red";
  ctx.lineWidth=5;
  ctx.beginPath();
  ctx.moveTo(x-10, y-10);
  ctx.lineTo(x+10, y+10);
  ctx.stroke();
  ctx.beginPath();
  ctx.moveTo(x+10, y-10);
  ctx.lineTo(x-10, y+10);
  ctx.stroke();
}

function drawAxis(ctx){
  ctx.strokeStyle="Black";
  ctx.lineWidth=2;
  ctx.beginPath();
  ctx.moveTo(axLeftX, axY);
  ctx.lineTo(axLeftX + axLengthX, axY);
  ctx.stroke();
}

function drawTick(ctx,x){
  ctx.beginPath();
  ctx.moveTo(x,axY);
  ctx.lineTo(x,axY+tickHeight);
  ctx.stroke();
}

function drawTickLabel(ctx, x ,i){
  // label every fifth tick
  ctx.textAlign = "center";
  if (i % 5 == 1){
    ctx.fillText(String(leftTickT + i*tPerTick), x , axY + labelOffsetY );  
  }
}


// functions for converting between canvas x coordinate and discrete coordinate n on axis
// n is used for comparing locations of points

let nPerX = nPerTick/xPerTick;

function xToN(x){
  const N = (x - leftTickX)*nPerX;
  const n = Math.floor(N);
  if (N-n < 0.5){ return n; }
  else { return n+1; }
}

function nToX(n){
  return leftTickX + n/nPerX;
}

// box legends
legend = ["decreasing", "increasing", "equilibrium", "slope undefined", "delete"];
legendOffset = [-33, -32, -34, -44, -18];

/////////////////////////////////////////////
// the axisSymbol object represents the current state of the canvas.
// It saves the symbols that appear on the axis and their positions 
// in "n-coordinates": axisSymbol[n] = symbol at position n
// It will be encoded as a Webwork List of Lists 
// ...,(n,symbol),...  in the answer box.  To avoid confusing 
// WeBWork's answer checkers it uses integers to represent 
// the symbols :
// 0 represents left arrow, 
// 1 represents right arrow
// 2 represents dot
// 3 represents vertical bar
// 4 represents cross ("delete")
/////////////////////////////////////////////////

// drawSymbol[i]( ...arguments.. ) draws symbol i  

drawSymbol = [ drawLeftArrow, drawRightArrow, drawDot, 
  drawVert, drawCross ];

symbolOffset = [-5, 5, 0, 0, 0]; // X-offset for drawing symbol[i] in box[i]

/////////////////////////////////////////////////////////////////
// convert between answer string and canvas state 
// axisSymbol = { .., n:s , ... } assigns a symbol s = 0,1,2,3, or 4 to 
// the point on the axis with n-coordinate = n.  It sets the state 
// of the canvas and is equivalent to the answer
/////////////////////////////////////////////////////////////////

// convert axisSymbol object to answer string, a list of pairs "...,(s,n),..." 

function axisSymbolToAnswer(){
  let answerList = [];
  for (const n in axisSymbol){
    answerList.push("(" + n + "," + axisSymbol[n] + ")" ); 
  }
  return answerList.join(",");
};

// convert answer string to axisSymbol object

function answerToAxisSymbol(answer){
  if (answer === ''){return {};}
  // convert n pairs to nx2 array
  let str = answer.slice(1,-1);   
  let arr = str.split( '),(' ).map( pair => pair.split(',') ); 
  // convert array to object
  let axisSymbol = {};
  for (let i=0; i < arr.length; i++){
    axisSymbol[Number(arr[i][0])] = Number(arr[i][1]);
  }
  return axisSymbol;
};

selectedSymbol = null;

/////////////////////
////  Draw  /////////
/////////////////////

document.addEventListener("DOMContentLoaded", function() {
  const canvas = document.getElementById("$canvasId");
  const ctx = canvas.getContext('2d');

  // get canvas state from previous answer

  let previousAnswer = document.getElementById("answerBox").value;
  axisSymbol = answerToAxisSymbol(previousAnswer);
  
  // draw  
  ctx.font = "10pt Arial";
  for (let i = 0; i < drawSymbol.length; i++){
    let x = boxLeftX + i*boxSpacing;
    ctx.fillStyle = "Black";
    ctx.fillText(legend[i], x+legendOffset[i], legendY); 
    ctx.fillStyle = "LightGrey";
    drawBox(ctx, x,boxY);
    drawSymbol[i](ctx, x + symbolOffset[i], boxY);
  }
  drawAxis(ctx);
  ctx.fillStyle="Black";
  ctx.font = "10pt Arial";
  for (let i = 0; i < tickCount; i++){
    let tickX = leftTickX + i*xPerTick;
    drawTick(ctx, tickX);
    drawTickLabel(ctx, tickX, i); 
  }
  // draw axis symbols 
  for (n in axisSymbol){
    let x = nToX(n);
    drawSymbol[axisSymbol[n]](ctx, x, axY);
  }

  canvas.addEventListener('mousedown', function(event) {
    const x = event.offsetX;
    const y = event.offsetY;

    // if cursor points to a box then update selectedSymbol
    if ( Math.abs(y-boxY) < boxSize +1){
      for (let i = 0; i < drawSymbol.length; i++){
	let boxX = boxLeftX + i*boxSpacing;
	if ( Math.abs(x - boxX) < boxSize + 1 ) { selectedSymbol = i; }
      }
    }
    // if cursor points to the axis then update axisSymbol
    if ( selectedSymbol != null && Math.abs(y - axY) < 10 &&
         axLeftX - 1 < x && x < axLeftX + axLengthX +1  
    ){
      const n = xToN(x);  // discrete coordinate on axis
      if ( selectedSymbol == 4){   // "delete"
	if (axisSymbol[n] != undefined){ delete axisSymbol[n]; }
      }
      else {
	axisSymbol[n] = selectedSymbol;
      }
    }
    
    // redraw  
    ctx.clearRect(0,0,canvas.width,canvas.height);
    ctx.font = "10pt Arial";
    for (let i = 0; i < drawSymbol.length; i++){
      let x = boxLeftX + i*boxSpacing;
      ctx.fillStyle = "Black";
      ctx.fillText(legend[i], x+legendOffset[i], legendY); 
      // update box color
      if ( selectedSymbol == i ){ ctx.fillStyle = "White"; }
      else { ctx.fillStyle = "LightGrey";}
      drawBox(ctx, x ,boxY);
      drawSymbol[i](ctx, x + symbolOffset[i], boxY);
    }
    drawAxis(ctx);
    ctx.fillStyle="Black";
    ctx.font = "10pt Arial";
    for (let i = 0; i < tickCount; i++){
      let tickX = leftTickX + i*xPerTick;
      drawTick(ctx, tickX);
      drawTickLabel(ctx, tickX, i);
    }
    // draw axis symbols 
    for (n in axisSymbol){
      let x = nToX(n);
      drawSymbol[axisSymbol[n]](ctx, x, axY);
    }
    // insert axisSymbol into answer blank
    document.getElementById('answerBox').value = axisSymbolToAnswer();
  });
});

    </script>
END_JAVASCRIPT

################################################
######## end of javascript #####################
################################################

MODES (
  TeX => '',
  HTML => HEADER_TEXT($javascript),
  PTX => ''
);

TEXT(beginproblem());
Context()->texStrings;
BEGIN_TEXT
A type of chemical reaction can be modeled by the equation  
\[ \displaystyle \frac{dx}{dt}=\kappa(\alpha-x)(\beta-x).\]

$PAR
Part A). If \(\alpha=$a\) and \(\beta=$b\) and \(\kappa\) is a positive constant produce the phase portrait of the equation in the space below.
$PAR
To place a symbol on the line click a symbol button then click a point on the line. $BR 
To remove a symbol from the line click the "delete" button then click the symbol on the line. $PAR
\{printCanvas()\} 
\{printAnswerBox\}
END_TEXT
Context()->normalStrings;

## grade the answer
## "answer" is a string encoding axisState so we'll need to decode it

# answer code: symbol codes are listed left to right, separated by commas.  
# Symbol codes are: 0=left arrow, 1=right arrow, (2,t)=dot at coordinate t,
# (3,t)=vertical bar ("undefined") at coordinate t.   
# Arrows are not given coordinates.

$ans = List("1,(2,$b),0,(2,$a),1");

sub nToT{  
  my $n = shift;
  return $leftTickT + $n*$tPerTick/$nPerTick;
}

NAMED_ANS( 'answerBox' => $ans->cmp( 
list_checker => sub { 
  my ($correct, $student, $ansHash, $value) = @_;
  my $corrN = scalar(@$correct);
  my $studN = scalar(@$student);
  my $score = 0;
  my @errors = ();
  # copy student answers into a sortable doubly-indexed array
  my @arr = ();
  for ($i=0; $i<$studN; $i++){
    push(@arr, [$student->[$i]->value]);
  }
  # sort the array so the n's are in increasing order
  my @arrSort = PGsort( sub { return $_[0][0] < $_[1][0] }, @arr);
  # drop redundant consecutive duplicate arrow symbols (s=0,1) 
  # and drop n from arrows that remain 
  my @studClean=(); ## for grading
  my @display=(); ## for display
  my @toSymbol = ("-<<-","->>-","dot","undef");
  my $t;
  for ($i=0; $i<scalar(@arrSort); $i++){
    my ($n,$s) = @{$arrSort[$i]};
    # if s is not an arrow convert position to t-coordinates
    if ($s>1) { 
      $t = nToT($n);
      push(@studClean, "($s,$t)" ); 
      push(@display, "(".$toSymbol[$s]." at $t)" );
    }
    # otherwise s is an arrow so eliminate redundancies and drop position 
    elsif ( $i==0 or $s != $arrSort[$i-1][1] ){ 
      push( @studClean, "$s" );
      push( @display, $toSymbol[$s] );
    } 
  }
  # answer is converted to display to make it easier to read
  $ansHash->{student_ans}=join("",@display);
  $ansHash->{preview_latex_string}="\text{".join("",@display)."}";
  $ansHash->{correct_ans_latex_string}="\text{->>-(dot at $equilPt)-<<-}";
  my $decodedStudAns = List(join(",",@studClean));
  my $correctAns = List($correct);
  if ($decodedStudAns == $correctAns){ return ($studN,@errors); }
  else { return (0,@errors); }
}
));

$popup = PopUp(["??", "tends to zero", "tends to equilibrium", "grows without bound"], "tends to equilibrium");

Context()->texStrings;
BEGIN_TEXT
$PAR
Part B). If \(x(0)=0\), how does \(x\) behave as \(t\to\infty\)?  \{ $popup->menu() \}
$PAR
Part C).  If you entered 'tends to equilibrium' for part (b), what is the value of the equilibrium?  Enter 'NA' if you chose another answer for part (b).  $BR
The equilibrium point is \{ans_rule(15)\}.
END_TEXT
Context()->normalStrings;

Context()->strings->add(NA=>{});
ANS( $popup->cmp() );
ANS( Compute($equilPt)->cmp());

COMMENT("To show graphics in Library Browser click 'eye' icon (on upper right).");

ENDDOCUMENT();
