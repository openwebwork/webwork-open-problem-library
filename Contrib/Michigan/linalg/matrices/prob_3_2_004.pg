# DESCRIPTION
# Problem from Holt Linear Algebra, 1st ed.
# WeBWorK problem written by Gavin LaRose,
# <glarose(at)umich(dot)edu>
# ENDDESCRIPTION

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Matrix Operations')
## KEYWORDS('matrix multiplication, transpose, identity matrix')
## TitleText1('Linear Algebra')
## EditionText1('1')
## AuthorText1('Holt')
## Section1('3.2')
## Problem1('4')
## Author('Gavin LaRose')
## Institution('UMich')

DOCUMENT();
loadMacros(
"PGstandard.pl",
"MathObjects.pl",
# "compoundProblem.pl",
"parserPopUp.pl",
);

# make sure we're in the context we want
Context("Matrix");

# make A or C 3x2
$is3x2 = list_random('a', 'c');

# some matrices
$mat1 = Matrix( [[ random(-5,5,1), random(-3,3,1) ],
		 [ random(-3,3,1), random(-5,5,1) ],
		 [ random(-5,5,1), random(-3,3,1) ]] );
$mat2 = Matrix( [[ random(-3,3,1), random(-3,3,1) ],
		 [ random(-3,3,1), random(-3,3,1) ]] );
$bmat = Matrix( [[ random(-3,3,1), random(-3,3,1) ],
		 [ random(-3,3,1), random(-3,3,1) ]] );
$dmat = Matrix( [[ random(-6,6,1), random(-3,3,1), random(-3,3,1) ],
		 [ random(-3,3,1), random(-6,6,1), random(-6,6,1) ],
		 [ random(-6,6,1), random(-3,3,1), random(-3,3,1) ]] );

# popups give whether a given calculation is possible
$canBCt = PopUp( [ '?', 'can be calculated', 'cannot be calculated' ],
		  'can be calculated' );

$bcT = $bmat * $mat1->transpose();
$dcpi = $dmat * $mat1;

if ( $is3x2 eq 'a' ) {
    $amat = $mat1;  $cmat = $mat2;
    $ca = 'A';

    $canA3 = PopUp( [ '?', 'can be calculated', 'cannot be calculated' ],
		    'cannot be calculated' );

    # in this case don't add I to the last, making it calculable
    $pI = '';
    $canDCpI = PopUp( [ '?', 'can be calculated', 'cannot be calculated' ],
		      'can be calculated' );
} else {
    $amat = $mat2;  $cmat = $mat1;
    $ca = 'C';
    $ac = 'A';

    $canA3 = PopUp( [ '?', 'can be calculated', 'cannot be calculated' ],
		     'can be calculated' );
    $amat2 = $amat * $amat;
    $amat3 = $amat ** 3;

    # in this case add I to the last, making it non-calculable
    $pI = ' + I_3';
    $canDCpI = PopUp( [ '?', 'can be calculated', 'cannot be calculated' ],
		      'cannot be calculated' );
}

# $cp = new compoundProblem( parts=>2, weights=>[1,3], nextStyle=>'Forced' );


$showPartialCorrectAnswers = 0;

TEXT(beginproblem());
Context()->texStrings;
BEGIN_TEXT

If
\[ A = $amat, B = $bmat, \]
\[ C = $cmat, D = $dmat \]
indicate if it is possible to find each of the following.
${BITALIC}(If it is not, be sure you can explain why not.
Note that partial correct answers are not shown for this
problem part because answers are multiple choice.)$EITALIC

$PAR
${BBOLD}(a)$EBOLD
\( A^3 \) \{ $canA3->menu() \}

$PAR
${BBOLD}(b)$EBOLD
\(B $ca^T\)  \{ $canBCt->menu() \}

$PAR
${BBOLD}(c)$EBOLD
\(D $ca $pI\)  \{ $canDCpI->menu() \}

END_TEXT
Context()->normalStrings;

ANS( $canA3->cmp() );
ANS( $canBCt->cmp() );
ANS( $canDCpI->cmp() );

$ans_hash1 = $canA3->cmp()->evaluate( $inputs_ref->{ANS_NUM_TO_NAME(1)} );
$ans_hash2 = $canBCt->cmp()->evaluate( $inputs_ref->{ANS_NUM_TO_NAME(2)} );
$ans_hash3 = $canDCpI->cmp()->evaluate( $inputs_ref->{ANS_NUM_TO_NAME(3)} );

if ( $ans_hash1->{score} == 1 && $ans_hash2->{score} == 1 &&
     $ans_hash3->{score} == 1 ) {
$showPartialCorrectAnswers = 1;

# we include the pop-ups from before to suppress input errors

Context()->texStrings;
BEGIN_TEXT

$PAR
Find the result of each possible calculation.

END_TEXT

if ( $is3x2 eq 'a' ) {
BEGIN_TEXT

$PAR
${BBOLD}(a)$EBOLD
\(A^3\)  ${BITALIC}Cannot be calculated.$EITALIC

END_TEXT
} else {
BEGIN_TEXT

$PAR
${BBOLD}(a)$EBOLD
\(A^3 = \)  \{ $amat3->ans_array() \}

END_TEXT
Context()->normalStrings;

ANS( $amat3->cmp() );
} # end if is3x2 eq a/else

Context()->texStrings;
BEGIN_TEXT

$PAR
${BBOLD}(b)$EBOLD
\( B $ca^T = \)  \{ $bcT->ans_array() \}

END_TEXT
Context()->normalStrings;

ANS( $bcT->cmp() );

if ( $is3x2 eq 'a' ) {

Context()->texStrings;
BEGIN_TEXT
$PAR
${BBOLD}(c)$EBOLD
\( D $ca $pI = \) \{ $dcpi->ans_array() \}

END_TEXT
Context()->normalStrings;

ANS( $dcpi->cmp() );

} else {

Context()->texStrings;
BEGIN_TEXT
$PAR
${BBOLD}(c)$EBOLD
\( D $ca $pI \) ${BITALIC}Cannot be calculated.$EITALIC

END_TEXT
Context()->normalStrings;

} # end if is3x2 eq a/else
} # end part conditional
##### end part 2

Context()->texStrings;
if ( $is3x2 eq 'a' ) {
    $atxt =<<EOT;
This cannot be calculated, because \(A\) is \(3\times2\): then
\(A^3 = (A)(A A)\).  But we can't find \(A A\) because of the
mismatch between the number of rows and columns.
EOT
    $ctxt =<<EOT;
This can be calculated, because we're taking a product of appropriately
dimensioned matrices:
\( D $ca = $dmat $mat1 = $dcpi \).
EOT
} else {
    $atxt =<<EOT;
This can be calculated, because \(A\) is \(2\times2\):
\( A^3 = A A^2 = A $amat $amat = $amat $amat2 = $amat3 \).
EOT
    $ctxt =<<EOT;
This cannot be calculated, because while we can find the initial product,
\( D $ca = $dmat $mat1 = $dcpi \),
this is then a \(3\times2\) matrix, to which we cannot add \(I_3\)
(which is \(3\times3\)).
EOT
}
Context()->normalStrings;

$mat1T = $mat1->transpose();

Context()->texStrings;
BEGIN_SOLUTION

${BBOLD}(a)$EBOLD
\( A^3 \)
$atxt

$PAR
${BBOLD}(b)$EBOLD
\( B $ca^T \)
This can be calculated, because \($ca\) is \(3\times 2\), so that
\($ca^T\) is \(2\times3\), and can therefore be multiplied on the
left by a \(2\times2\) matrix:
\( B $ca^T = $bmat $mat1 = $bmat $mat1T = $bcT \).

$PAR
${BBOLD}(c)$EBOLD
\( D $ca $pI \)
$ctxt

END_SOLUTION
Context()->normalStrings;

ENDDOCUMENT();
