# DESCRIPTION
# Problem from Holt Linear Algebra, 1st ed.
# WeBWorK problem written by Gavin LaRose, 
# <glarose(at)umich(dot)edu>
# ENDDESCRIPTION

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Linear Transformations')
## KEYWORDS('linear transformations, one-to-one, onto')
## TitleText1('Linear Algebra')
## EditionText1('1')
## AuthorText1('Holt')
## Section1('3.1')
## Problem1('78')
## Author('Gavin LaRose')
## Institution('UMich')

DOCUMENT();
loadMacros(
"PGstandard.pl",
"MathObjects.pl",
);

# make sure we're in the context we want
Context("Matrix");
Context()->variables->add( a=>'Real' );
Context()->strings->add( none=>{} );
# because we're checking the calculation of the determinant,
#    the accuracy we require has to be moved down a bit; this
#    ends up requiring about 5 decimal places in the value of
#    a provided
Context()->flags->set( tolType=>'absolute', tolerance=>0.001 );

# a random 4x4 matrix
@a = ();
$numZeros = 0;
for ( my $i=0; $i<4; $i++ ) {
    $a[$i] = [];
    for ( my $j=0; $j<4; $j++ ) {
	$v = random(-7,7,1);
	$numZeros++ if ( $v == 0 );
	push( @{$a[$i]}, $v );
    }
}
# make the first entry nice
$numZeros-- if ( ! $a[0]->[0] );
$a[0]->[0] = 1;

# placeholder for our variable a
$numZeros-- if ( ! $a[3]->[3] );
$a[3]->[3] = 0;

# make sure there are at least two zeros
for ( my $j=$numZeros; $j<2; $j++ ) {
    $ii = random(0,3,1);
    $ij = random(0,3,1);
    while ( ! $a[$ii]->[$ij] ) {
	$ij = ($ij + 1)%4;
	$ii = ($ii + 1)%4 if ( ! $ij );
	$ij++ if ( $ii == 0 && $ij == 0 );
    }
    $a[$ii]->[$ij] = 0;
}

# and ensure that we're well conditioned through
#    three columns
$a[1]->[1]++ if ( $a[1]->[1] - $a[1]->[0]*$a[0]->[1] == 0 );
$a[2]->[2]++ if ( $a[2]->[2] - $a[2]->[0]*$a[0]->[2] -
		  (($a[2]->[1]-$a[2]->[1]*$a[0]->[1])*
		    ($a[1]->[2] - $a[1]->[0]*$a[0]->[2]))/
		  ($a[1]->[1] - $a[1]->[0]*$a[0]->[1]) == 0 );

# yucky row reduction
# clear first entries
@ind = ( 0, 1, 2, 3 );
@b = ( [ map { $a[0]->[$_] } @ind ] );
#    a[1,1] is one
$a21 = $a[1]->[0];  $a31 = $a[2]->[0];  $a41 = $a[3]->[0];
$b[1] = [ map { $a[1]->[$_]-$a21*$a[0]->[$_] } @ind ];
$b[2] = [ map { $a[2]->[$_]-$a31*$a[0]->[$_] } @ind ];
$b[3] = [ map { $a[3]->[$_]-$a41*$a[0]->[$_] } @ind ];
# clear second entry for third row, third for fourth, and
#    normalize second row (first is already nice)
$b22 = $b[1]->[1];   # guaranteed to be nonzero
@c = ( [ @{$b[0]} ],
       [ map { $b[1]->[$_]/$b22 } @ind ] );
$b32 = $b[2]->[1];
$c[2] = [ map { $b[2]->[$_]-($b32/$b22)*$b[1]->[$_] } @ind ];
$b42 = $b[3]->[1];
$c[3] = [ map { $b[3]->[$_]-($b42/$b22)*$b[1]->[$_] } @ind ];

# clear third entry in last row, normalize third row
@d = ( [ @{$b[0]} ], [ @{$c[1]} ] );
$c33 = $c[2]->[2];
$d[2] = [ map { $c[2]->[$_]/$c33 } @ind ];
$c43 = $c[3]->[2];
$d[3] = [ map { $c[3]->[$_]-($c43/$c33)*$c[2]->[$_] } @ind ];

# normalize last row
@e = ( [ @{$b[0]} ], [ @{$c[1]} ], [ @{$d[2]} ] );
if ( $d[3]->[3] ) {
    $e[3] = [ 0, 0, 0, $d[3]->[3] ];
} else {
    $e[3] = [ 0, 0, 0, 0 ];
}

# need to substitute in our variable a
$amat = Matrix( [ $a[0], $a[1], $a[2], [ @{$a[3]}[0..2], Compute("a") ] ] );
$redform = Matrix( [ $e[0], $e[1], $e[2],
		     [ @{$e[3]}[0..2], Compute("a + $e[3]->[3]") ] ] );

# now this is one-to-one and onto as long as the determinant of the
#    matrix is non-zero
#  $amat0 = $amat->eval( a=>0 );
#  $adetConst = $amat0->det();
#  $amat1 = $amat->eval( a=>1 );
#  $adetCoeff = $amat1->det() - $adetConst;
#  $a4 = Compute( "-$adetConst/$adetCoeff" );
# alternately, we can use the reduced form to determine this
$a4 = Compute( -$e[3]->[3] );
$v = ( $a4 == 1 ) ? 0 : 1;
$a1 = Compute( $v );
$a2 = Compute( $v );
$a3 = Compute( $v );


TEXT(beginproblem());
Context()->texStrings;
BEGIN_TEXT

Let \(T(\mathbf{x}) = A\mathbf{x}\) for
\[ A = $amat. \]
Find values of \(a\) such that
$PAR
${BBOLD}(a)$EBOLD
\(T\) is one-to-one: \( a = \) \{ $a1->ans_rule() \}
$BR
${BITALIC}(If it is not possible to find such a value,
enter ${BBOLD}none$EBOLD for your answer.)$EITALIC

$PAR
${BBOLD}(b)$EBOLD
\(T\) onto: \( a = \) \{ $a2->ans_rule() \}
$BR
${BITALIC}(If it is not possible to find such a value,
enter ${BBOLD}none$EBOLD for your answer.)$EITALIC

$PAR
${BBOLD}(c)$EBOLD
\(T\) is both one-to-one and onto: \( a = \) \{ $a3->ans_rule() \}
$BR
${BITALIC}(If it is not possible to find such a value,
enter ${BBOLD}none$EBOLD for your answer.)$EITALIC

$PAR
${BBOLD}(d)$EBOLD
\(T\) is neither one-to-one nor onto: \( a = \) \{ $a4->ans_rule() \}
$BR
${BITALIC}(If it is not possible to find such a value,
enter ${BBOLD}none$EBOLD for your answer.)$EITALIC

END_TEXT
Context()->normalStrings;

ANS( $a1->cmp( typeMatch=>Value::Real,
	       checker=>sub {
		  my ( $cor, $stu, $ans ) = @_;
		  $stuMat = $amat->eval( a=>$stu );
		  return $stuMat->det() != 0;
	      } ) );
ANS( $a2->cmp( typeMatch=>Value::Real,
	       checker=>sub {
		  my ( $cor, $stu, $ans ) = @_;
		  $stuMat = $amat->eval( a=>$stu );
		  return $stuMat->det() != 0;
	      } ) );
ANS( $a3->cmp( typeMatch=>Value::Real,
	       checker=>sub {
		  my ( $cor, $stu, $ans ) = @_;
		  $stuMat = $amat->eval( a=>$stu );
		  return $stuMat->det() != 0;
	      } ) );
ANS( $a4->cmp( typeMatch=>Value::Real,
	       checker=>sub {
		  my ( $cor, $stu, $ans ) = @_;
		  $stuMat = $amat->eval( a=>$stu );
		  return Compute(0) == $stuMat->det();
	      } ) );

Context()->texStrings;
BEGIN_SOLUTION

${BBOLD}(a)$EBOLD
Using a computer algebra system, the matrix has the
row-reduced form
\[ $amat \sim $redform. \]
Thus as long as \( a\ne $a4 \), \(T\) is one-to-one, since
\( A\mathbf{x} = \mathbf{0} \) has only the trivial solution.
$PAR

${BBOLD}(b)$EBOLD
Using the reduced form in (a), we see that as long as
\( a\ne $a4 \), \(T\) is onto, since
\( A\mathbf{x} = \mathbf{b} \) has a solution for all \(\mathbf{b}\).
$PAR

${BBOLD}(c)$EBOLD
From (a) and (b), we need require only that
\( a\ne $a4 \).
$PAR

${BBOLD}(d)$EBOLD
Similarly, this is true if \(a = $a4\).

END_SOLUTION
Context()->normalStrings;

ENDDOCUMENT();
