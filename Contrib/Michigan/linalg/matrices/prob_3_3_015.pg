# DESCRIPTION
# Problem from Holt Linear Algebra, 1st ed.
# WeBWorK problem written by Gavin LaRose,
# <glarose(at)umich(dot)edu>
# ENDDESCRIPTION

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('The Inverse of a Matrix')
## KEYWORDS('inverse matrix')
## TitleText1('Linear Algebra')
## EditionText1('1')
## AuthorText1('Holt')
## Section1('3.3')
## Problem1('15')
## Author('Gavin LaRose')
## Institution('UMich')

DOCUMENT();
loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"parserMultiAnswer.pl",
"PGunion.pl",
);

# make sure we're in the context we want
Context("Matrix");

$a2 = random(2,6,1);
$a3 = random(1,6,1);
$a4 = random(-6,-1,1);
$a5 = random(-6,-2,1);
$a6 = random(1,6,1);
$a7 = random(1,4,1);
$amat = Matrix( [ [ 1, $a2, $a3, $a4 ], [ 0, 1, $a5, $a6 ],
		  [ 0, 0, 1, $a7 ], [ 0, 0, 0, 1 ] ] );
@aug1 = ( [ 1, $a2, $a3, $a4, 1, 0, 0, 0 ],
	  [ 0,   1, $a5, $a6, 0, 1, 0, 0 ],
	  [ 0,   0,   1, $a7, 0, 0, 1, 0 ],
	  [ 0,   0,   0,   1, 0, 0, 0, 1 ] );
$augmat1 = Matrix( [ @aug1 ] );

# do some row reduction.  we don't have to reduce downward, and so
#    can begin with the upward reduction in column 4
my @ind = ( 0..7 );
@aug2 = ( [ map { $aug1[0]->[$_] - $a4*$aug1[3]->[$_] } @ind ],
	  [ map { $aug1[1]->[$_] - $a6*$aug1[3]->[$_] } @ind ],
	  [ map { $aug1[2]->[$_] - $a7*$aug1[3]->[$_] } @ind ],
	  $aug1[3] );
$augmat2 = Matrix( [ @aug2 ] );

# then column 3, in rows 1 and 2
@aug3 = ( [ map { $aug2[0]->[$_] - $a3*($aug2[2]->[$_]) } @ind ],
	  [ map { $aug2[1]->[$_] - $a5*($aug2[2]->[$_]) } @ind ],
	  $aug2[2], $aug2[3] );
$augmat3 = Matrix( [ @aug3 ] );

# and element (1,2)
@aug4 = ( [ map { $aug3[0]->[$_] - $a2*($aug3[1]->[$_]) } @ind ],
	  $aug3[1], $aug3[2], $aug3[3] );
$augmat4 = Matrix( [ @aug4 ] );

# and the inverse is
$ainv = $amat->inverse();

# our row reduction checkers
$achk2 = MultiAnswer( Compute($aug2[0]->[2]), Compute($aug2[0]->[4]),
		      Compute($aug2[0]->[5]), Compute($aug2[0]->[6]),
		      Compute($aug2[0]->[7]), Compute($aug2[1]->[2]),
		      Compute($aug2[1]->[4]), Compute($aug2[1]->[5]),
		      Compute($aug2[1]->[6]), Compute($aug2[1]->[7]),
		      Compute($aug2[2]->[4]), Compute($aug2[2]->[5]),
		      Compute($aug2[2]->[6]), Compute($aug2[2]->[7]),
		      Compute($aug2[3]->[4]), Compute($aug2[3]->[5]),
		      Compute($aug2[3]->[6]), Compute($aug2[3]->[7]) )->with(
    singleResult=>1,
    checker=>sub {
	my ( $cor, $stu, $self ) = @_;
	my @c = @{$cor};
	foreach my $i ( 0..$#c ) {
	    return 0 if $cor->[$i] != $stu->[$i];
	}
	return 1;
    }
);
$achk3 = MultiAnswer( Compute($aug3[0]->[4]), Compute($aug3[0]->[5]),
		      Compute($aug3[0]->[6]), Compute($aug3[0]->[7]),
		      Compute($aug3[1]->[4]), Compute($aug3[1]->[5]),
		      Compute($aug3[1]->[6]), Compute($aug3[1]->[7]),
		      Compute($aug3[2]->[4]), Compute($aug3[2]->[5]),
		      Compute($aug3[2]->[6]), Compute($aug3[2]->[7]),
		      Compute($aug3[3]->[4]), Compute($aug3[3]->[5]),
		      Compute($aug3[3]->[6]), Compute($aug3[3]->[7]) )->with(
    singleResult=>1,
    checker=>sub {
	my ( $cor, $stu, $self ) = @_;
	my @c = @{$cor};
	foreach my $i ( 0..$#c ) {
	    return 0 if $cor->[$i] != $stu->[$i];
	}
	return 1;
    }
);
$achk4 = MultiAnswer( Compute($aug4[0]->[4]), Compute($aug4[0]->[5]),
		      Compute($aug4[0]->[6]), Compute($aug4[0]->[7]),
		      Compute($aug4[1]->[4]), Compute($aug4[1]->[5]),
		      Compute($aug4[1]->[6]), Compute($aug4[1]->[7]),
		      Compute($aug4[2]->[4]), Compute($aug4[2]->[5]),
		      Compute($aug4[2]->[6]), Compute($aug4[2]->[7]),
		      Compute($aug4[3]->[4]), Compute($aug4[3]->[5]),
		      Compute($aug4[3]->[6]), Compute($aug4[3]->[7]) )->with(
    singleResult=>1,
    checker=>sub {
	my ( $cor, $stu, $self ) = @_;
	my @c = @{$cor};
	foreach my $i ( 0..$#c ) {
	    return 0 if $cor->[$i] != $stu->[$i];
	}
	return 1;
    }
);

# we redefine unionTables BeginTable and EndTable to avoid hardcopy
#    errors with embedded \par and \medskip macros in horizontal mode
sub myBeginTable {
  my %options = (
    border => 0, padding => 0, spacing => 0, center => 1,
    tex_spacing => "1em", tex_border => "0pt", @_
  );
  my ($bd,$pd,$sp) = ($options{border},$options{padding},$options{spacing});
  my ($tsp,$tbd) = ($options{tex_spacing},$options{tex_border});
  my ($center,$tcenter) = (' ALIGN="CENTER"','\centerline');
     ($center,$tcenter) = ('','') if (!$options{center});
  my $table =
    qq{<TABLE BORDER="$bd" CELLPADDING="$pd" CELLSPACING="$sp"$center>};

  MODES(
    TeX => '{\kern '.$tbd.
           '\vbox{\hsize=.5\hsize\halign{#\hfil&&\kern '.$tsp.' #\hfil',
    HTML => $table."~~n",
  );
}

sub myEndTable {
  my %options = (tex_border => "0pt", @_);
  my $tbd = $options{tex_border};
  MODES(
    TeX => '\cr}}\kern '.$tbd.'}'."~~n",
    HTML => '</TABLE>'."~~n",
  );
}

TEXT(beginproblem());
Context()->texStrings;
BEGIN_TEXT

Let the invertible matrix \(A\) be
\[ A = $amat. \]
Fill in the blanks for the augmented matrix and row reduction in
the calculation below to find the inverse of \(A\).
$PAR
\{ $augmat1->ans_array() \} $BR
\{ myBeginTable(border=>0, tex_border=>"0pt", spacing=>0, padding=>4) .
   AlignedRow( [ "\(\qquad\sim \Bigg[\)",
		 myBeginTable( border=>0, tex_border=>"0pt", spacing=>0,
			     padding=>4 ) .
		 AlignedRow( [ 1, $aug2[0]->[1], $achk2->ans_rule(5), 0,
			       $achk2->ans_rule(5), $achk2->ans_rule(5),
			       $achk2->ans_rule(5), $achk2->ans_rule(5) ],
			     align=>'CENTER', separation=>0 ) .
		 AlignedRow( [ 0, 1, $achk2->ans_rule(5), 0,
			       $achk2->ans_rule(5), $achk2->ans_rule(5),
			       $achk2->ans_rule(5), $achk2->ans_rule(5) ],
			     align=>'CENTER', separation=>0 ) .
		 AlignedRow( [ 0, 0, 1, 0,
			       $achk2->ans_rule(5), $achk2->ans_rule(5),
			       $achk2->ans_rule(5), $achk2->ans_rule(5) ],
			     align=>'CENTER', separation=>0 ) .
		 AlignedRow( [ 0, 0, 0, 1,
			       $achk2->ans_rule(5), $achk2->ans_rule(5),
			       $achk2->ans_rule(5), $achk2->ans_rule(5) ],
			     align=>'CENTER', separation=>0 ) .
		 myEndTable(), "\(\Bigg]\)" ],
	       align=>'CENTER', valign=>'MIDDLE', separation=>0 ) .
   myEndTable() \}
$BR
\{ myBeginTable(border=>0, tex_border=>"0pt", spacing=>0, padding=>4) .
   AlignedRow( [ "\(\qquad\sim \Bigg[\)",
		 myBeginTable( border=>0, tex_border=>"0pt", spacing=>0,
			     padding=>4 ) .
		 AlignedRow( [ 1, $aug3[0]->[1], 0, 0,
			       $achk3->ans_rule(5), $achk3->ans_rule(5),
			       $achk3->ans_rule(5), $achk3->ans_rule(5) ],
			     align=>'CENTER', separation=>0 ) .
		 AlignedRow( [ 0, 1, 0, 0,
			       $achk3->ans_rule(5), $achk3->ans_rule(5),
			       $achk3->ans_rule(5), $achk3->ans_rule(5) ],
			     align=>'CENTER', separation=>0 ) .
		 AlignedRow( [ 0, 0, 1, 0,
			       $achk3->ans_rule(5), $achk3->ans_rule(5),
			       $achk3->ans_rule(5), $achk3->ans_rule(5) ],
			     align=>'CENTER', separation=>0 ) .
		 AlignedRow( [ 0, 0, 0, 1,
			       $achk3->ans_rule(5), $achk3->ans_rule(5),
			       $achk3->ans_rule(5), $achk3->ans_rule(5) ],
			     align=>'CENTER', separation=>0 ) .
		 myEndTable(), "\(\Bigg]\)" ],
	       align=>'CENTER', valign=>'MIDDLE', separation=>0 ) .
   myEndTable() \}
$BR
\{ myBeginTable(border=>0, tex_border=>"0pt", spacing=>0, padding=>4) .
   AlignedRow( [ "\(\qquad\sim \Bigg[\)",
		 myBeginTable( border=>0, tex_border=>"0pt", spacing=>0,
			     padding=>4 ) .
		 AlignedRow( [ 1, 0, 0, 0,
			       $achk4->ans_rule(5), $achk4->ans_rule(5),
			       $achk4->ans_rule(5), $achk4->ans_rule(5) ],
			     align=>'CENTER', separation=>0 ) .
		 AlignedRow( [ 0, 1, 0, 0,
			       $achk4->ans_rule(5), $achk4->ans_rule(5),
			       $achk4->ans_rule(5), $achk4->ans_rule(5) ],
			     align=>'CENTER', separation=>0 ) .
		 AlignedRow( [ 0, 0, 1, 0,
			       $achk4->ans_rule(5), $achk4->ans_rule(5),
			       $achk4->ans_rule(5), $achk4->ans_rule(5) ],
			     align=>'CENTER', separation=>0 ) .
		 AlignedRow( [ 0, 0, 0, 1,
			       $achk4->ans_rule(5), $achk4->ans_rule(5),
			       $achk4->ans_rule(5), $achk4->ans_rule(5) ],
			     align=>'CENTER', separation=>0 ) .
		 myEndTable(), "\(\Bigg]\)" ],
	       align=>'CENTER', valign=>'MIDDLE', separation=>0 ) .
   myEndTable() \}
$BR
so that
\(A^{-1} = \) \{ $ainv->ans_array() \}


END_TEXT
Context()->normalStrings;

ANS( $augmat1->cmp() );
ANS( $achk2->cmp() );
ANS( $achk3->cmp() );
ANS( $achk4->cmp() );
ANS( $ainv->cmp() );

Context()->texStrings;
BEGIN_SOLUTION

We have
\[ \begin{aligned} & $augmat1 \\
   &\quad\sim $augmat2 \\
   &\quad\sim $augmat3 \\
   &\quad\sim $augmat4, \end{aligned} \]
so that
\[ A^{-1} = $ainv. \]

END_SOLUTION
Context()->normalStrings;

ENDDOCUMENT();
