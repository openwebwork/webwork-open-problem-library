# DESCRIPTION
## DBsubject('Calculus')
## DBchapter('Limits')
## DBsection('Investigating Limits')
## KEYWORDS('Limits', 'one-sided', 'infinity')
## TitleText1('Calculus: Early Transcendentals')
## EditionText1('4')
## AuthorText1('Rogawski')
## Section1('2.2')
## Institution('UW Eau Claire')

# Copied and modified by Warren Shull (UWEC) August 7, 2023

DOCUMENT();
loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "scaffold.pl",
           "PGauxiliaryFunctions.pl",
           "PGgraphmacros.pl",
		   "freemanMacros.pl",
  	       "AnswerFormatHelp.pl",
           "Parser.pl");

loadMacros("niceTables.pl");

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
   #"scaffold.pl",
   "unionTables.pl",
   "parserPopUp.pl",   # <--------------------------------------NEEDED FOR DROPDOWN MENUS
   "PGtikz.pl",
);

loadMacros(
  "contextFraction.pl",
  "parserMultiAnswer.pl",
"answerHints.pl",
  "PGcourse.pl",           # Customization file for the course
   "customCSS.pl", # <---- MAKES BOXES PURPLE
);

Context("Numeric");

$yes = PopUp(
  ["Choose one", "yes","no"],
  "yes");

$no = PopUp(
  ["Choose one", "yes","no"],
  "no");

$dne = String("DNE");

#$contin = String('continuous');

$a=random(-3,3,2);

$a1=$a-.1;
$a2=$a-.01;
$a3=$a-.001;
$a4=$a+.1;
$a5=$a+.01;
$a6=$a+.001;

$f=Formula("cos(pi/x)")->reduce;

$fa = $f->eval(x=>$a);
$fa1 = $f->eval(x=>$a1);
$fa2 = $f->eval(x=>$a2);
$fa3 = $f->eval(x=>$a3);
$fa4 = $f->eval(x=>$a4);
$fa5 = $f->eval(x=>$a5);
$fa6 = $f->eval(x=>$a6);

$b1=2;
$b2=2/3;
$b3=2/5;
$b4=-2;
$b5=-2/3;
$b6=-2/5;

$fb1 = $f->eval(x=>$b1);
$fb2 = $f->eval(x=>$b2);
$fb3 = $f->eval(x=>$b3);
$fb4 = $f->eval(x=>$b4);
$fb5 = $f->eval(x=>$b5);
$fb6 = $f->eval(x=>$b6);

$c1=-1;
$c2=-1/3;
$c3=-1/5;
$c4=1;
$c5=1/3;
$c6=1/5;

$fc1 = $f->eval(x=>$c1);
$fc2 = $f->eval(x=>$c2);
$fc3 = $f->eval(x=>$c3);
$fc4 = $f->eval(x=>$c4);
$fc5 = $f->eval(x=>$c5);
$fc6 = $f->eval(x=>$c6);

$d1=-1/2;
$d2=-1/4;
$d3=-1/6;
$d4=1/2;
$d5=1/4;
$d6=1/6;

$fd1 = $f->eval(x=>$d1);
$fd2 = $f->eval(x=>$d2);
$fd3 = $f->eval(x=>$d3);
$fd4 = $f->eval(x=>$d4);
$fd5 = $f->eval(x=>$d5);
$fd6 = $f->eval(x=>$d6);

$j=random(-7,-1);
$d=$j+2;
$i=$j+random(1,10-$j,2);
#while($i==$j){$i=non_zero_random(-10,10);}


$p1=-1;
$p2=-.2;
$p3=-.05;
$p4=1;
$p5=.2;
$p6=.05;

## THIS IS PROBLEM 2 OF A 4 PROBLEM SERIES INTRODUCING LIMITS ALGEBRAICALLY. IF YOU USE THEM TOGETHER, YOU CAN USE PASSCODES TO ALLOW YOU TO REQUIRE THE PROBLEMS BE DONE IN ORDER. BELOW IS SOME OF THE CODE YOU'LL NEED:

#SRAND($psvn);
#$passcode1 = random(1000,9999);
#$passcode2 = random(1000,9999);
#$passcode3 = random(1000,9999);

## END PASSCODE CODE




$p=non_zero_random(-5,5);
$g=Formula("$p*x/|x|");

$gp1 = $g->eval(x=>$p1);
$gp2 = $g->eval(x=>$p2);
$gp3 = $g->eval(x=>$p3);
$gp4 = $g->eval(x=>$p4);
$gp5 = $g->eval(x=>$p5);
$gp6 = $g->eval(x=>$p6);

$width = 200;
$height = 200;

HEADER_TEXT(MODES(
    HTML=>'<script src="https://www.desmos.com/api/v1.7/calculator.js?apiKey=dcb31709b452b1cf9dc26972add0fda6"></script>',
    TeX=>''
));

$unique_div_id = "evaluating_f";
$desmos_div = MODES(
    HTML=>qq(<div id="$unique_div_id" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);


TEXT(beginproblem());
Context()->texStrings;

Scaffold::Begin(can_open => "when_previous_correct", is_open  => "first_incorrect");
###########################################
Section::Begin("New function!");

BEGIN_PGML

The next function we will look at is [``f(x)=\cos\left(\frac\pi x\right)``].

[% Enter the passcode from the previous problem: [_]{$passcode1} %]

END_PGML

Section::End();

Section::Begin('x approaching ' . $a);

BEGIN_PGML

First, let's find [``\lim_{x\rightarrow[$a]}\cos\left(\frac\pi x\right)``]:

END_PGML

$table=DataTable(
[
    ['\(x\)',"rounding",'\(f(x)\)'],
    ['\('.$a1.'\)',2,ans_rule(10)],
    ['\('.$a2.'\)',4,ans_rule(10)],
    ['\('.$a3.'\)',6,ans_rule(10)],
    ['\('.$a4.'\)',2,ans_rule(10)],
    ['\('.$a5.'\)',4,ans_rule(10)],
    ['\('.$a6.'\)',6,ans_rule(10)],
],
align => '|l | c|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);

TEXT(ColumnTable($table,$desmos_div));


Context()->{format}{number} = "%.2f";
ANS(Real(sprintf("%.2f",$fa1))->cmp());

Context()->{format}{number} = "%.4f";
ANS(Real(sprintf("%.4f",$fa2))->cmp());

Context()->{format}{number} = "%.6f";
ANS(Real(sprintf("%.6f",$fa3))->cmp());

Context()->{format}{number} = "%.2f";
ANS(Real(sprintf("%.2f",$fa4))->cmp());

Context()->{format}{number} = "%.4f";
ANS(Real(sprintf("%.4f",$fa5))->cmp());

Context()->{format}{number} = "%.6f";
ANS(Real(sprintf("%.6f",$fa6))->cmp());

Context()->{format}{number} = "%g";

# EXTRA LINES OF CODE FOR OTHER PURPOSES:
#   Context()->{format}{number} = "%18.15f";
#   ANS(Real(sprintf("%.3f",$gd2->value))->cmp(tolType   => 'absolute',tolerance => .01));
#   ANS(Real(sprintf("%.8f",$gd6))->cmp(tolType   => 'absolute',tolerance => 1e-7));
#   ANS($fb1->cmp(tolType   => 'absolute',tolerance => .5));
#   ANS($gd6->cmp());

BEGIN_PGML

[``\lim_{x\rightarrow[$a]}f(x)=``] [_]{$fa}

[``f([$a])=``] [_]{$fa}

Are these the same? [_]{$yes}

END_PGML

Section::End();

Section::Begin("Continuity");

# DESMOS NEXT TO TABLE OF VALUES (hopefully):
#   $column1 = $desmos_div ."$PAR $PAR $PAR $PAR ". $desmos_div2;

BEGIN_PGML

Since [``\lim_{x\rightarrow[$a]}f(x)=f([$a])``], we say [`f`] is *continuous* at [`[$a]`] (or "continuous at [`x=[$a]`]").

[@ openDiv({ "class" => "importantFormula" }) @]*
Continuity:

If [``\lim_{x\rightarrow c}f(x)=f(c)``], then [`f`] is *continuous* at [`x=c`].
[@ closeDiv() @]*

Keep this in mind for the future. [%Retype the word "continuous" here: [_]{$contin}%]
END_PGML

Section::End();

Section::Begin("x approaching 0");

BEGIN_PGML

Let's look at the same function, but as [`x`] approaches [`0`].

[@
DataTable(
[
    ['\(x\)','\(f(x)\)'],
    ['\(-2\)',ans_rule(10)],
    ['\(-\frac23\)',ans_rule(10)],
    ['\(-\frac25\)',ans_rule(10)],
    ['\(2\)',ans_rule(10)],
    ['\(\frac23\)',ans_rule(10)],
    ['\(\frac25\)',ans_rule(10)],
],
align => '|l | l|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);
@]*

END_PGML

ANS($fb1->cmp());

ANS($fb2->cmp());

ANS($fb3->cmp());

ANS($fb4->cmp());

ANS($fb5->cmp());

ANS($fb6->cmp());

BEGIN_PGML

What number does [`f(x)`] seem to be approaching? [_]{0}

END_PGML
Section::End();

Section::Begin("Trying other numbers");

BEGIN_PGML

Seems like the limit might be 0. But just in case, let's try different numbers:

[@
DataTable(
[
    ['\(x\)','\(f(x)\)'],
    ['\(-1\)',ans_rule(10)],
    ['\(-\frac13\)',ans_rule(10)],
    ['\(-\frac15\)',ans_rule(10)],
    ['\(1\)',ans_rule(10)],
    ['\(\frac13\)',ans_rule(10)],
    ['\(\frac15\)',ans_rule(10)],
],
align => '|l | l|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);
@]*

END_PGML

ANS($fc1->cmp());

ANS($fc2->cmp());

ANS($fc3->cmp());

ANS($fc4->cmp());

ANS($fc5->cmp());

ANS($fc6->cmp());

BEGIN_PGML

What do these answers seem to be approaching? [_]{-1}

END_PGML

Section::End();

Section::Begin("More numbers!");

BEGIN_PGML

It seems like [`f(x)`] is approaching two different numbers!

Let's try a few more values of [`x`]:

[@
DataTable(
[
    ['\(x\)','\(f(x)\)'],
    ['\(-\frac12\)',ans_rule(10)],
    ['\(-\frac14\)',ans_rule(10)],
    ['\(-\frac16\)',ans_rule(10)],
    ['\(\frac12\)',ans_rule(10)],
    ['\(\frac14\)',ans_rule(10)],
    ['\(\frac16\)',ans_rule(10)],
],
align => '|l | l|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);
@]*

END_PGML

ANS($fd1->cmp());

ANS($fd2->cmp());

ANS($fd3->cmp());

ANS($fd4->cmp());

ANS($fd5->cmp());

ANS($fd6->cmp());

BEGIN_PGML

What are these approaching? [_]{1}

END_PGML
Section::End();

Section::Begin("Another function");
BEGIN_PGML

This function is very strange! It seems to be approaching a bunch of different numbers all at once!

If we use an expression like [``\lim_{x\rightarrow c}f(x)``], we want it to refer to _one_ number, not a bunch of numbers at the same time. So if the function approaches more than one number, we say the limit *does not exist*.

Let's look at one more function:

[``g(x)=\frac{[$p]x}{|x|}``]

(Recall that [`|x|`] is [`x`] if [`x\geq0`], and it's [`-x`] if [`x<0`].)

This time, you can calculate [`g(x)`] yourself for these values of [`x`]:

[@
DataTable(
[
    ['\(x\)','\(g(x)\)'],
    ['\(-1\)',ans_rule(10)],
    ['\(-.2\)',ans_rule(10)],
    ['\(-.05\)',ans_rule(10)],
    ['\(1\)',ans_rule(10)],
    ['\(.2\)',ans_rule(10)],
    ['\(.05\)',ans_rule(10)],
],
align => '|l | l|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);
@]*

END_PGML

ANS($gp1->cmp());

ANS($gp2->cmp());

ANS($gp3->cmp());

ANS($gp4->cmp());

ANS($gp5->cmp());

ANS($gp6->cmp());

#Context()->{format}{number} = "%18.15f";
#ANS(Real(sprintf("%.3f",$gd2->value))->cmp(tolType   => 'absolute',tolerance => .01));
#ANS(Real(sprintf("%.8f",$gd6))->cmp(tolType   => 'absolute',tolerance => 1e-7));

Section::End();

Section::Begin("Limit existence?");

BEGIN_PGML

Based on the table we just filled in, do you think [``\lim_{x\rightarrow0}g(x)``] exists? [_]{$no}

END_PGML

Section::End();

Section::Begin("Passcode");

BEGIN_PGML

In this problem, we saw two nonexistent limits! In both cases, they did not exist because the function approached _more than one number_. But you may notice some differences between them. We will explore that in the next problem.

[% The passcode for the next problem is [`[$passcode2]`]. Enter it here: [_]{$passcode2} %]

END_PGML

Section::End();

  Scaffold::End();

Context()->normalStrings;

#ANS( num_cmp( $answ, tol=>0.001, tolType=>"absolute" ));

#ANS($dq->cmp);

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        //expressions: false, 
        expressions: true,
        graphpaper: false,
        settingsMenu: true, 
        expressionsTopbar: true
    });

    my_calculator.setExpressions([
        { id: 'function', latex: 'f(x)=\\cos(\\pi/x)'},
    ]);
    
    my_calculator.setMathBounds({
      left: -101,
      right: -99,
      bottom: -1,
      top: 1
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL, expressions: true });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

ENDDOCUMENT();
