##DESCRIPTION
##  Training problem on the relationship between rates of change and slopes of lines
##ENDDESCRIPTION

##KEYWORDS('secant line', 'tangent line', 'slope', 'average rate of change', 'instantaneous rate of change')

## DBsubject('Calculus')
## DBchapter('Limits, Derivatives')
## DBsection('Rates of change')
## Date('Summer 2023')
## Author('Warren Shull')
## Institution('UWEC')

########################################################################

DOCUMENT();

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   "scaffold.pl",
   "parserPopUp.pl",   # <--------------------------------------NEEDED FOR DROPDOWN MENUS
   "desmos.pl",
);

loadMacros("customCSS.pl");

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

################################
#  Desmos setup
#
#  In html mode, load the Desmos api script and create the <div> to attach the Desmos graph to.
#  In tex mode, print a message to direct the student to the html version.
#  Desmos API reference: https://www.desmos.com/api/v1.7/docs/index.html

$unique_div_id = "parabola_unrestricted";
$unique_div_id2 = "parabola_restricted";
$unique_div_id3 = "fifth_restricted";
$unique_div_id4 = "fifth_unrestricted";
$unique_div_id5 = "fifth_unrestricted_tangent_line";
$unique_div_id6 = "tangent_line_with_dragable_point";
$width = 400;
$height = 400;

desmos_enable_construct_new();

$desmos_div = MODES(
    HTML=>qq(<div id="$unique_div_id" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$desmos_div2 = MODES(
    HTML=>qq(<div id="$unique_div_id2" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$desmos_div3 = MODES(
    HTML=>qq(<div id="$unique_div_id3" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$desmos_div4 = MODES(
    HTML=>qq(<div id="$unique_div_id4" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$desmos_div5 = MODES(
    HTML=>qq(<div id="$unique_div_id5" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$desmos_div6 = MODES(
    HTML=>qq(<div id="$unique_div_id6" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);


##############################################################
#
#  Setup

Context("Numeric");
Context()->variables->add(t=>'Real');

$x1 = non_zero_random(-10,10); #middle, where $a begins
$y1 = non_zero_random(-10,10); #up or down shift from default

$x1_max = $x1+1;
$x1_min = $x1-2;

$f1 = Formula("(x-$x1)^2+$y1");
$y1_left = $f1->eval(x=>$x1_min);
$y1_right = $f1->eval(x=>$x1_max);

$x2 = non_zero_random(-10,10);
$y2 = non_zero_random(-100,100,10);
$x2_top = $x2-2;
$x2_bottom = $x2+2;
$x2_left = $x2-2.5;
$x2_right = $x2+2.5;
$x2_start = $x2-1;
$x2_fake = $x2+1;

$f2_str = "3*(x-$x2)^5-20*(x-$x2)^3+$y2";
$f2 = Formula($f2_str);
$y2_left = $f2->eval(x=>$x2_left);
$y2_right = $f2->eval(x=>$x2_right);
$y2_bottom = $f2->eval(x=>$x2_bottom);
$y2_top = $f2->eval(x=>$x2_top);
$y2_start = $f2->eval(x=>$x2_start);
$y2_fake = $f2->eval(x=>$x2_fake);


## THIS IS PROBLEM 1 OF A 3 PROBLEM SERIES INTRODUCING THE EXTREME VALUE THEOREM. IF YOU USE THEM TOGETHER, YOU CAN USE PASSCODES TO ALLOW YOU TO REQUIRE THE PROBLEMS BE DONE IN ORDER. BELOW IS SOME OF THE CODE YOU'LL NEED:

#SRAND($psvn);
#$passcode1 = random(1000,9999);

## END PASSCODE CODE

##############################################################
#
#  Text

Scaffold::Begin(
      can_open => "when_previous_correct",
      is_open  => "first_incorrect"
);

BEGIN_PGML

[@ openDiv({ "class" => "problemPurpose" }) @]*
Purpose:

How do we tell when a function reaches its highest or lowest value? What about its lowest? We can use derivatives to help figure that out! But first, some terminology:

[@ closeDiv() @]*

[@ openDiv({ "class" => "importantFormula" }) @]*

Let [`f`] be a function and let [`a`] be any number in the domain of [`f`]. We say [`f(a)`] is the

* *absolute minimum* of [`f`] if [`f(a)\leq f(x)`] for all [`x`] in the domain of [`f`].
* *absolute maximum* of [`f`] if [`f(a)\geq f(x)`] for all [`x`] in the domain of [`f`].

[@ closeDiv() @]*

The word *extremum* refers collectively to either a maximum or a minimum. The plurals of these words are *maxima*, *minima*, and *extrema*.

END_PGML

Section::Begin("Function 1a");

BEGIN_PGML

The function graphed below has no absolute maximum, but it does have an absolute minimum!

[@ $desmos_div @]*

* What is the absolute minimum of [`f`]? That is, what is the lowest y-value [`f`] ever reaches? [_]{$y1}

* At what [`x`]-value does [`f`] reach its absolute minimum? [`x\,=`] [_]{$x1}

END_PGML
Section::End();

Section::Begin("Function 1b");

BEGIN_PGML

Rather than looking at the entire domain of a function, we can limit our attention to a narrower interval:

[@ openDiv({ "class" => "importantFormula" }) @]*

Let [`f`] be a function defined on an interval [`I`] and let [`a\in I`]. We say [`f(a)`] is the

* *absolute minimum* of [`f`] on [`I`] if [`f(a)\leq f(x)`] for all [`x\in I`].
* *absolute maximum* of [`f`] on [`I`] if [`f(a)\geq f(x)`] for all [`x\in I`].

[@ closeDiv() @]*

Here we see the same function as before, but restricted to the interval [`[[$x1_min],[$x1_max]]`].

[@ $desmos_div2 @]*

Absolute maxima and minima (that's the plural form of the word) can also be expressed as _ordered pairs_.

* Fill in the ordered pair for the absolute minimum of [`f`]: [`\big(`][_]{$x1}[`,`][_]{$y1}[`\big)`].

* Fill in the ordered pair for the absolute maximum of [`f`]: [`\big(`][_]{$x1_min}[`,`][_]{$y1_left}[`\big)`].

END_PGML
Section::End();

Section::Begin("Function 2a");

BEGIN_PGML

Here is a new function [`g`], restricted to the interval [`[[$x2_left],[$x2_right]]`].

[@ $desmos_div3 @]*

* Fill in the ordered pair for the absolute minimum of [`g`]: [`\big(`][_]{$x2_bottom}[`,`][_]{$y2_bottom}[`\big)`].

* Fill in the ordered pair for the absolute maximum of [`g`]: [`\big(`][_]{$x2_top}[`,`][_]{$y2_top}[`\big)`].

END_PGML
Section::End();

Section::Begin("Function 2b");

BEGIN_PGML

Here we see the same function as before, without any restriction.

[@ $desmos_div4 @]*

This has _no absolute maximum or minimum_. Any point you choose on the graph, I can find other points both higher and lower (scrolling or zooming out if necessary).

Look at the point [`([$x2_top],[$y2_top])`] (shown in red). Even though it is not an absolute maximum, in some ways it "looks" like a maximum compared to the other points near it.

Similarly, the point [`([$x2_bottom],[$y2_bottom])`] (shown in blue) "looks" like a minimum compared to other points near it.

Thus, we call these points a *local maximum* and a *local minimum*.

[@ openDiv({ "class" => "importantFormula" }) @]*

Let [`f`] be a function and let [`c`] be in its domain. We say the point [`(c,f(c))`] is a

* *local minimum* of [`f`] if there is some open interval [`I`] containing [`c`] such that [`f(x)`] is never less than [`f(c)`] for any [`x\in I`].
* *local maximum* of [`f`] if there is some open interval [`I`] containing [`c`] such that [`f(x)`] is never greater than [`f(c)`] for any [`x\in I`].

[@ closeDiv() @]*

As a reminder, an _open_ interval is one with round parentheses on (both,numbers). If we did not require [`I`] to be open, we could use an interval like [`[[$x2_start],[$x2_fake]]`] and call the point [`([$x2_start],[$y2_start])`] (purple) a "local maximum" and [`([$x2_fake],[$y2_fake])`] (black) a "local minimum."

In other words, open intervals are just a way of formalizing the idea of being higher (or lower) than any "nearby" points.

Here's the same graph again, but with a tangent line:

[@ $desmos_div5 @]*

What is the slope of the tangent line at the local maximum? [_]{0} What about at the local minimum? [_]{0}

END_PGML
Section::End();

Section::Begin("One more tangent line, then the passcode");

BEGIN_PGML

As we just saw, the tangent lines were horizontal at the local maximum and minimum. That means the derivative is zero at those points!

[@ openDiv({ "class" => "importantFormula" }) @]*
*Fermat's Theorem*:

If [`(c,f(c))`] is a local maximum or minimum, then either [`f'(c)=0`] or [`f'(c)`] does not exist.
[@ closeDiv() @]*

However, the reverse is NOT true. Sometimes [`f'(c)=0`] even when [`(c,f(c))`] is not a local extremum.

There's one such point on the graph above: [`\big(`][_]{$x2}[`,`][_]{$y2}[`\big)`]

[% The passcode for the next question is [`[$passcode1]`].

Enter it here: [_]{$passcode1} %]

END_PGML
Section::End();

Scaffold::End();

Context()->normalStrings;

##################################
#  Desmos graph (via the API)
#  Execute this only after the $desmos_div object has been put on the html page.

$right1 = $x1 + 4;
$top1 = $y1 + 6;
$left1 = $x1 - 4;
$bottom1 = $y1 - 2;

$right2 = $x2_right + 2;
$top2 = $y2_top + 5;
$left2 = $x2_left - 2;
$bottom2 = $y2_bottom - 5;

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        expressions: false, 
        settingsMenu: true, 
        expressionsTopbar: true
    });
    
    my_calculator.setExpressions([
        { latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},
        { id: 'function', latex: 'f(x) = $f1', color: Desmos.Colors.BLUE},
    ]);
    
    my_calculator.setMathBounds({
      left: $left1,
      right: $right1,
      bottom: $bottom1,
      top: $top1
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL, authorFeatures: true, expressions: false });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id2");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        expressions: false,
        settingsMenu: true, 
        expressionsTopbar: true
    });
    
    my_calculator.setExpressions([
        { latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},
        { id: 'left_endpoint', latex: '($x1_min,$y1_left),($x1_max,$y1_right)', color: Desmos.Colors.BLUE},
        { id: 'function', latex: 'f(x) = $f1 \\left\\{ $x1_min\\leq x\\leq $x1_max\\right\\}', color: Desmos.Colors.BLUE},
    ]);
    
    my_calculator.setMathBounds({
      left: $left1,
      right: $right1,
      bottom: $bottom1,
      top: $top1
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id3");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        expressions: false,
        settingsMenu: true, 
        expressionsTopbar: true
    });
    
    my_calculator.setExpressions([
        { latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},
        { id: 'left_endpoint', latex: '($x2_left,$y2_left),($x2_right,$y2_right)', color: Desmos.Colors.GREEN},
        { id: 'function', latex: 'f(x) = $f2 \\left\\{ $x2_left\\leq x\\leq $x2_right\\right\\}', color: Desmos.Colors.GREEN},
    ]);
    
    my_calculator.setMathBounds({
      left: $left2,
      right: $right2,
      bottom: $bottom2,
      top: $top2
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id4");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        expressions: false,
        settingsMenu: true, 
        expressionsTopbar: true
    });
    
    my_calculator.setExpressions([
        { latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},
        { id: 'function', latex: 'f(x) = $f2', color: Desmos.Colors.GREEN},
        { id: 'local_max', latex: '($x2_top,$y2_top)', color: Desmos.Colors.RED},
        { id: 'local_min', latex: '($x2_bottom,$y2_bottom)', color: Desmos.Colors.BLUE},
        { id: 'fake_max', latex: '($x2_start,$y2_start)', color: Desmos.Colors.PURPLE},
        { id: 'fake_min', latex: '($x2_fake,$y2_fake)', color: Desmos.Colors.BLACK},
    ]);
    
    my_calculator.setMathBounds({
      left: $left2,
      right: $right2,
      bottom: $bottom2,
      top: $top2
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id5");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        expressions: false,
        settingsMenu: true, 
        expressionsTopbar: true
    });
    
    my_calculator.setExpressions([
        { id: 'slider', latex: 'a=$x2_start', sliderBounds: {min: $x2_left-2, max: $x2_right+2, secret:'true', step: 0.1}},
        { id: 'function', latex: 'f(x) = $f2_str', color: Desmos.Colors.GREEN},
        { id: 'local_max', latex: '($x2_top,$y2_top)', color: Desmos.Colors.RED},
        { id: 'local_min', latex: '($x2_bottom,$y2_bottom)', color: Desmos.Colors.BLUE},
        { id: 'base_point', latex: '(a, f(a))', color: Desmos.Colors.BLACK},
        { id: 'tangent_line', latex: 'y = f\'(a)*(x-a) + f(a)', label: 'tangent line', color: Desmos.Colors.BLACK},
    ]);
    
    my_calculator.setMathBounds({
      left: $left2,
      right: $right2,
      bottom: $bottom2,
      top: $top2
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

ENDDOCUMENT();
