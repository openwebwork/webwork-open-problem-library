# DESCRIPTION
## DBsubject('Calculus')
## DBchapter('Limits')
## DBsection('Investigating Limits')
## KEYWORDS('Limits')
## TitleText1('Calculus: Early Transcendentals')
## EditionText1('4')
## AuthorText1('Rogawski')
## Section1('2.2')
## Institution('UW Eau Claire')
## Copied and modified by Warren Shull (UWEC) July 29, 2023

DOCUMENT();
loadMacros("PG.pl",
           "PGcourse.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "scaffold.pl",
           "PGauxiliaryFunctions.pl",
           "PGgraphmacros.pl",
		   "freemanMacros.pl",
  	       "AnswerFormatHelp.pl",
           "Parser.pl");

loadMacros("niceTables.pl");

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
   #"scaffold.pl",
   "unionTables.pl",
   "parserPopUp.pl",   # <--------------------------------------NEEDED FOR DROPDOWN MENUS
   "PGtikz.pl",
);

Context("Numeric");

$dne = String("DNE");

$a3=random(30,40,1);
$a=random(1,3,1);

$a2=Formula(".5+$a");
$aa1=Formula("$a+.01");
$aa2=Formula("$a+.001");
$aa3=Formula("$a+.0001");
$aa4=Formula("$a-.01");
$aa5=Formula("$a-.001");
$aa6=Formula("$a-.0001");

$av1=Real("($a3*$aa1-4.9*(($aa1)^2)-($a3 *$a -4.9* (($a)^2)))/0.01");
$av2=Real("($a3*$aa2-4.9*(($aa2)^2)-($a3 *$a -4.9* (($a)^2)))/0.001");
$av3=Real("($a3*$aa3-4.9*(($aa3)^2)-($a3 *$a -4.9* (($a)^2)))/0.0001");
$av4=Real("($a3*$a-4.9*(($a)^2)-($a3 *$aa4 -4.9* (($aa4)^2)))/0.01");
$av5=Real("($a3*$a-4.9*(($a)^2)-($a3 *$aa5 -4.9* (($aa5)^2)))/0.001");
$av6=Real("($a3*$a-4.9*(($a)^2)-($a3 *$aa6 -4.9* (($aa6)^2)))/0.0001");
$answ=Real("$a3-9.8*$a");

$b=non_zero_random(-5,5);
$b_example=$b+2.5;
$c=non_zero_random(-5,5);

$f_top=Formula("x^2-([$b+$c])x+$b*$c")->reduce;
$f_bottom=Formula("x-$b")->reduce;

$f=Formula("$f_top/$f_bottom")->reduce;
$fp=Formula("x");
$gp=Formula("x");

$b1=$b-.2;
$b2=$b-.05;
$b3=$b-.01;
$b4=$b+.2;
$b5=$b+.05;
$b6=$b+.01;

$fb1 = $f->eval(x=>$b1);
$fb2 = $f->eval(x=>$b2);
$fb3 = $f->eval(x=>$b3);
$fb4 = $f->eval(x=>$b4);
$fb5 = $f->eval(x=>$b5);
$fb6 = $f->eval(x=>$b6);

$j=random(-7,-1);
$d=$j+2;
$i=$j+random(1,10-$j,2);
#while($i==$j){$i=non_zero_random(-10,10);}

$g_top=Formula("x^2-([$d+$i])x+$d*$i")->reduce;
$g_bottom=Formula("x^2-([$d+$j])x+$d*$j")->reduce;

$g=Formula("$g_top/$g_bottom");

$d1=$d-.01;
$d2=$d-.001;
$d3=$d-.0001;
$d4=$d+.01;
$d5=$d+.001;
$d6=$d+.0001;

$gd1 = $g->eval(x=>$d1);
$gd2 = $g->eval(x=>$d2);
$gd3 = $g->eval(x=>$d3);
$gd4 = $g->eval(x=>$d4);
$gd5 = $g->eval(x=>$d5);
$gd6 = $g->eval(x=>$d6);

$p=random(1,5);
while($p==3){
    $p=random(1,5);
}

$p1=-.15;
$p2=-.06;
$p3=-.02;
$p4=.15;
$p5=.06;
$p6=.02;

$h_top=Formula("1-cos(x)")->reduce;
$h_bottom=Formula("$p*x^2")->reduce;

$h=Formula("$h_top/$h_bottom")->reduce;

$hp1 = $h->eval(x=>$p1);
$hp2 = $h->eval(x=>$p2);
$hp3 = $h->eval(x=>$p3);
$hp4 = $h->eval(x=>$p4);
$hp5 = $h->eval(x=>$p5);
$hp6 = $h->eval(x=>$p6);

$width = 200;
$height = 200;

HEADER_TEXT(MODES(
    HTML=>'<script src="https://www.desmos.com/api/v1.7/calculator.js?apiKey=dcb31709b452b1cf9dc26972add0fda6"></script>',
    TeX=>''
));

$unique_div_id = "evaluating_f";
$desmos_div = MODES(
    HTML=>qq(<div id="$unique_div_id" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$unique_div_id2 = "evaluating_g";
$desmos_div2 = MODES(
    HTML=>qq(<div id="$unique_div_id2" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$unique_div_id3 = "evaluating_h";
$desmos_div3 = MODES(
    HTML=>qq(<div id="$unique_div_id3" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

## THIS IS PROBLEM 1 OF A 4 PROBLEM SERIES INTRODUCING LIMITS ALGEBRAICALLY. IF YOU USE THEM TOGETHER, YOU CAN USE PASSCODES TO ALLOW YOU TO REQUIRE THE PROBLEMS BE DONE IN ORDER. BELOW IS SOME OF THE CODE YOU'LL NEED:

#SRAND($psvn);
#$passcode1 = random(1000,9999);

## END PASSCODE CODE

TEXT(beginproblem());
Context()->texStrings;

Scaffold::Begin(can_open => "when_previous_correct", is_open  => "first_incorrect");
###########################################
Section::Begin("Close, but not exact");

BEGIN_PGML
Throughout the previous section, we looked at average rates of change (such as average velocities) between a "base point" and another point. We wanted the other point to be _close_ to the first one, but *not the exact same point*. (If it were the exact same point, finding the slope would involve dividing by zero.)

As a reminder, here is one of the tables you filled out in the previous section (with the answer boxes removed, and possibly with different numbers):

[@
DataTable(
[
    ["time interval","average velocity" ],
    ['\( ['.$a.', '.$aa1.'] \)',''],
    ['\( ['.$a.', '.$aa2.'] \)',""],
    ['\( ['.$a.', '.$aa3.'] \)',""],
    ['\( ['.$aa4.', '.$a.'] \)',""],
    ['\( ['.$aa5.', '.$a.'] \)',""],
    ['\( ['.$aa6.', '.$a.'] \)',""],
],
align => '|l | l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);
@]*

[%BEGIN_TEXT (OLD VERSION OF THE TABLE)

$PAR
\{begintable(2)\}
        \{row("time interval","average velocity",@firstrow)\}
        \{row("\( [$a, $aa1]\)","\(\qquad \qquad\)",@secondrow)\}
        \{row("\([$a, $aa2]\)","\(\qquad \qquad\)",@thirdrow)\}
        \{row("\([$a, $aa3]\)","\(\qquad \qquad\)",@fourthrow)\}
        \{row("\([$aa6, $a]\)","\(\qquad \qquad\)",@fifthrow)\}
        \{row("\([$aa5, $a]\)","\(\qquad \qquad\)",@sixthrow)\}
        \{row("\([$aa4, $a]\)","\(\qquad \qquad\)",@seventhrow)\}
\{endtable()\}$PAR

END_TEXT%]

After filling out the table, you estimated what number your answers were getting _close_ to, even though they were not exactly the same. However, it was *not possible* to find the "average velocity" over [`[[$a],[$a]]`] as the rise and run would both be 0.

We would like more precise language for talking about inputs and outputs that are _close_ to certain numbers, but not exactly equal. As an example, let [``f(x)=[$f]``]. Retype the numerator and denominator here:

[`f(x)=\Big(`][_]{Formula("$f_top")->reduce}[`\Big)/\Big(`][_]{Formula("$f_bottom")->reduce}[`\Big)`]

END_PGML

Section::End();

Section::Begin("Filling in a table");

BEGIN_PGML

Fill in the table below. You can use the window on the right as a calculator; simply backspace out the [`[$b_example]`] and replace it with any other value of [`x`].

END_PGML

$table=DataTable(
[
    ['\(x\)','\(f(x)\)'],
    ['\('.$b1.'\)',ans_rule(10)],
    ['\('.$b2.'\)',ans_rule(10)],
    ['\('.$b3.'\)',ans_rule(10)],
    ['\('.$b4.'\)',ans_rule(10)],
    ['\('.$b5.'\)',ans_rule(10)],
    ['\('.$b6.'\)',ans_rule(10)],
],
align => '|l | l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);

TEXT(ColumnTable($table,$desmos_div));

#[@ $desmos_div @]*

#ANS($fb1->cmp(tolType   => 'absolute',tolerance => .5));

ANS($fb1->cmp());

ANS($fb2->cmp());

ANS($fb3->cmp());

ANS($fb4->cmp());

ANS($fb5->cmp());

#Context()->{format}{number} = "%.1f";

ANS($fb6->cmp());

#Context()->{format}{number} = "%g";

BEGIN_PGML
As [`x`] gets closer to [`[$b]`], what number is [`f(x)`] getting closer to? [_]{Formula("$b-$c")->reduce}
END_PGML

Section::End();

Section::Begin("Introducing Limits!");

BEGIN_PGML

Since [`f(x)`] gets closer to [`[$b-$c]`] as [`x`] gets closer to [`[$b]`], we write:

[``\lim_{x\rightarrow[$b]}f(x)=[$b-$c]``]

which we say out loud as:

"The limit of [`f(x)`] as [`x`] approaches [`[$b]`] equals [`[$b-$c]`]."

Meanwhile, what is [`f([$b])`]? If it does not exist, you may write DNE.

[`f([$b])=`] [_]{$dne}

END_PGML

Section::End();

Section::Begin("More examples");

BEGIN_PGML

Let [`g(x)=[$g]`]. Let's try to find [``\lim_{x\rightarrow[$d]}g(x)``]. Round each answer to as many decimal places as the number in the "rounding" column. (You can still type [`g(`]any number[`)`] in line 2 of the window on the right as a calculator.)

END_PGML
#[@ $desmos_div2 @]*


$table=DataTable(
[
    ['\(x\)',"rounding",'\(g(x)\)'],
    ['\('.$d1.'\)',3,ans_rule(10)],
    ['\('.$d2.'\)',4,ans_rule(10)],
    ['\('.$d3.'\)',5,ans_rule(10)],
    ['\('.$d4.'\)',3,ans_rule(10)],
    ['\('.$d5.'\)',4,ans_rule(10)],
    ['\('.$d6.'\)',5,ans_rule(10)],
],
align => '|l | c|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);

TEXT(ColumnTable($table,$desmos_div2));

#Context()->{format}{number} = "%18.15f";
Context()->{format}{number} = "%.3f";

ANS(Real(sprintf("%.3f",$gd1))->cmp());

Context()->{format}{number} = "%.4f";

ANS(Real(sprintf("%.4f",$gd2))->cmp());

#ANS(Real(sprintf("%.3f",$gd2->value))->cmp(tolType   => 'absolute',tolerance => .01));
Context()->{format}{number} = "%.5f";

ANS(Real(sprintf("%.5f",$gd3))->cmp());

Context()->{format}{number} = "%.3f";

ANS(Real(sprintf("%.3f",$gd4))->cmp());

Context()->{format}{number} = "%.4f";
ANS(Real(sprintf("%.4f",$gd5))->cmp());
Context()->{format}{number} = "%.5f";

ANS(Real(sprintf("%.5f",$gd6))->cmp());

#ANS(Real(sprintf("%.8f",$gd6))->cmp(tolType   => 'absolute',tolerance => 1e-7));
Context()->{format}{number} = "%g";

#ANS($gd6->cmp());

BEGIN_PGML

[``\lim_{x\rightarrow[$d]}g(x)=``] [_]{Formula("($d-$i)/($d-$j)")->reduce}

[`g([$d])=`] [_]{$dne}

--------

Let [`h(x)=[$h]`]. Let's try to find [``\lim_{x\rightarrow0}h(x)``]. Again, round to as many decimal places as the number in the "rounding" column.

END_PGML

$table=DataTable(
[
    ['\(x\)',"rounding",'\(h(x)\)'],
    ['\('.$p1.'\)',4,ans_rule(10)],
    ['\('.$p2.'\)',5,ans_rule(10)],
    ['\('.$p3.'\)',6,ans_rule(10)],
    ['\('.$p4.'\)',4,ans_rule(10)],
    ['\('.$p5.'\)',5,ans_rule(10)],
    ['\('.$p6.'\)',6,ans_rule(10)],
],
align => '|l | c|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);

TEXT(ColumnTable($table,$desmos_div3));

Context()->{format}{number} = "%.4f";
ANS(Real(sprintf("%.4f",$hp1))->cmp());

Context()->{format}{number} = "%.5f";
ANS(Real(sprintf("%.5f",$hp2))->cmp());

Context()->{format}{number} = "%.6f";
ANS(Real(sprintf("%.6f",$hp3))->cmp());

Context()->{format}{number} = "%.4f";
ANS(Real(sprintf("%.4f",$hp4))->cmp());

Context()->{format}{number} = "%.5f";
ANS(Real(sprintf("%.5f",$hp5))->cmp());

Context()->{format}{number} = "%.6f";
ANS(Real(sprintf("%.6f",$hp6))->cmp());

Context()->{format}{number} = "%g";

BEGIN_PGML

[``\lim_{x\rightarrow0}h(x)=``] [_]{Formula("1/(2*$p)")->reduce}

[`h(0)=`] [_]{$dne}

END_PGML

Section::End();

#Section::Begin("Passcode");

#BEGIN_PGML

#In the examples you just saw, [``\lim_{x\rightarrow a}f(x)``] always existed even though [`f(a)`] did not. Not all limits exist, however! In the next problem, you will see some limits that do not exist, and some problems where [`f(a)`] and [``\lim_{x\rightarrow a}f(x)``] are two different numbers!

#The passcode for the next problem is [`[$passcode1]`]. Enter it here: [_]{$passcode1}

#END_PGML

#Section::End();

  Scaffold::End();

Context()->normalStrings;

#ANS( num_cmp( $answ, tol=>0.001, tolType=>"absolute" ));

#ANS($dq->cmp);

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        //expressions: false,
        graphpaper: false,
        expressions: true,
        settingsMenu: true, 
        expressionsTopbar: true
    });

    my_calculator.setExpressions([
        { id: 'function', latex: 'f(x)=\\frac{$f_top}{$f_bottom}'},
        { id: 'plugin', latex: 'f($b_example)'},
    ]);
    
    my_calculator.setMathBounds({
      left: -101,
      right: -99,
      bottom: -1,
      top: 1
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL, expressions: true });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id2");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        //expressions: false, 
        expressions: true,
        graphpaper: false,
        settingsMenu: true, 
        expressionsTopbar: true
    });

    my_calculator.setExpressions([
        { id: 'function', latex: 'g(x)=\\frac{$g_top}{$g_bottom}'},
    ]);
    
    my_calculator.setMathBounds({
      left: 99,
      right: 101,
      bottom: 99,
      top: 101
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL, expressions: true });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id3");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        //expressions: false, 
        expressions: true,
        graphpaper: false,
        settingsMenu: true, 
        expressionsTopbar: true
    });

    my_calculator.setExpressions([
        { id: 'function', latex: 'h(x)=\\frac{1-\\cos x}{$p x^2}'},
    ]);
    
    my_calculator.setMathBounds({
      left: 99,
      right: 101,
      bottom: 99,
      top: 101
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL, expressions: true });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

ENDDOCUMENT();
