# DESCRIPTION
## DBsubject('Calculus')
## DBchapter('Limits')
## DBsection('Investigating Limits')
## KEYWORDS('Limits', 'one-sided', 'infinity')
## TitleText1('Calculus: Early Transcendentals')
## EditionText1('4')
## AuthorText1('Rogawski')
## Section1('2.2')
## Institution('UW Eau Claire')
## Copied and modified by Warren Shull (UWEC) August 8, 2023

DOCUMENT();
loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "scaffold.pl",
           "PGauxiliaryFunctions.pl",
           "PGgraphmacros.pl",
		   "freemanMacros.pl",
  	       "AnswerFormatHelp.pl",
           "Parser.pl", "desmos.pl",);

loadMacros("niceTables.pl");

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
   #"scaffold.pl",
   "unionTables.pl",
   "parserPopUp.pl",   # <--------------------------------------NEEDED FOR DROPDOWN MENUS
   "PGtikz.pl",
);

loadMacros(
  "contextFraction.pl",
  "parserMultiAnswer.pl",
"answerHints.pl",
  "PGcourse.pl",           # Customization file for the course
   "customCSS.pl", # <---- MAKES BOXES PURPLE
);

Context("Numeric");

$yes = PopUp(
  ["Choose one", "yes","no"],
  "yes");

$no = PopUp(
  ["Choose one", "yes","no"],
  "no");

$dne = String("DNE");

$width = 200;
$height = 350;

desmos_enable_construct_new();
$unique_div_id = "evaluating_f";
$desmos_div = MODES(
    HTML=>qq(<div id="$unique_div_id" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$unique_div_id2 = "evaluating_h";
$desmos_div2 = MODES(
    HTML=>qq(<div id="$unique_div_id2" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

#$contin = String('continuous');

$p1=-1;
$p2=-.2;
$p3=-.05;
$p4=1;
$p5=.2;
$p6=.05;

$a=random(2,6); #left piece $a*x
$b=random(-5,-1); #left to middle
#middle piece x^2
$c=random(1,5); #middle to right
$d=random(1,5); #right piece $d-x
while($d-$c==$c*$c){$d=random(1,5);}

$f1=Formula("$a*x")->reduce; #left
$f2=Formula("x^2")->reduce;  #middle
$f3=Formula("$d-x")->reduce; #right

$b1=$b-.1;
$b2=$b-.01;
$b3=$b-.001;

$fb1 = $f1->eval(x=>$b1);
$fb2 = $f1->eval(x=>$b2);
$fb3 = $f1->eval(x=>$b3);

$b4=$b+.1;
$b5=$b+.01;
$b6=$b+.001;

$fb4 = $f2->eval(x=>$b4);
$fb5 = $f2->eval(x=>$b5);
$fb6 = $f2->eval(x=>$b6);

$fb_left = $f1->eval(x=>$b);
$fb_right = $f2->eval(x=>$b);

$c1=$c-.1;
$c2=$c-.01;
$c3=$c-.001;
 
$fc1 = $f2->eval(x=>$c1);
$fc2 = $f2->eval(x=>$c2);
$fc3 = $f2->eval(x=>$c3);

$c4=$c+.1;
$c5=$c+.01;
$c6=$c+.001;

$fc4 = $f3->eval(x=>$c4);
$fc5 = $f3->eval(x=>$c5);
$fc6 = $f3->eval(x=>$c6);

$fc_left = $f2->eval(x=>$c);
$fc_right = $f3->eval(x=>$c);

SRAND($psvn);

$i=random(-7,-2); #left-to-middle
$j=random(1,5); #vertical asymptote on the right
$j_less=$j-2; #middle-to-right

$h1 = Formula("2^(x-$i)")->reduce; #left piece
$h3 = Formula("(($j+2)*x-($j*$j+2*$j-2))/(x-$j)")->reduce; #right piece; x=j asymptote

$hi_left=$h1->eval(x=>$i);
$hj_right=$h3->eval(x=>$j-2); #j-2 not j; should equal j+1

Context("Fraction");

$h_slope = Fraction("$hj_right/($j-2-$i)")->reduce;

Context("Numeric");

$h2_partial = Formula("(x-$i)")->reduce; #just the x-i part without the slope

$h2=Formula("$h_slope*$h2_partial");

$hi_right=$h2->eval(x=>$i);
$hj_left=$h2->eval(x=>$j-2); #j-2 not j

$k=random(-10,10);
while($k==$hj_left){$k=random(-10,10);}

$i1=$i-.02;
$i2=$i-.005;
$i3=$i-.001;

$hi1=$h1->eval(x=>$i1);
$hi2=$h1->eval(x=>$i2);
$hi3=$h1->eval(x=>$i3);

$i4=$i+.1;
$i5=$i+.01;
$i6=$i+.001;

$hi4=$h2->eval(x=>$i4);
$hi5=$h2->eval(x=>$i5);
$hi6=$h2->eval(x=>$i6);

$j1=$j-2-.1;
$j2=$j-2-.01;
$j3=$j-2-.001;

$hj1=$h2->eval(x=>$j1);
$hj2=$h2->eval(x=>$j2);
$hj3=$h2->eval(x=>$j3);

$j4=$j-2+.1;
$j5=$j-2+.01;
$j6=$j-2+.001;

$hj4=$h3->eval(x=>$j4);
$hj5=$h3->eval(x=>$j5);
$hj6=$h3->eval(x=>$j6);

## THIS IS PROBLEM 3 OF A 4 PROBLEM SERIES INTRODUCING LIMITS ALGEBRAICALLY. IF YOU USE THEM TOGETHER, YOU CAN USE PASSCODES TO ALLOW YOU TO REQUIRE THE PROBLEMS BE DONE IN ORDER. BELOW IS SOME OF THE CODE YOU'LL NEED:

#SRAND($psvn);

#$passcode1 = random(1000,9999);
#$passcode2 = random(1000,9999);
#$passcode3 = random(1000,9999);

## END PASSCODE CODE

$p=non_zero_random(-5,5);
$g=Formula("$p*x/|x|");

$gp1 = $g->eval(x=>$p1);
$gp2 = $g->eval(x=>$p2);
$gp3 = $g->eval(x=>$p3);
$gp4 = $g->eval(x=>$p4);
$gp5 = $g->eval(x=>$p5);
$gp6 = $g->eval(x=>$p6);

$cts_neither = PopUp(
  ["Choose one", 'x='.$i,"x=".$j_less,"both","neither"],
  "neither");

TEXT(beginproblem());
Context()->texStrings;

Scaffold::Begin(can_open => "when_previous_correct", is_open  => "first_incorrect");
###########################################
Section::Begin("Passcode");

BEGIN_PGML

In the previous problem, we looked at

[```g(x)=[$g]```]

[% Enter the passcode from the previous problem: [_]{$passcode2} %]

END_PGML

Section::End();

Section::Begin("Previous table");

BEGIN_PGML

Here is the table we made for [``\lim_{x\rightarrow0}g(x)``]. I've added a few rows; go ahead and fill them in!

[@
DataTable(
[
    ['\(x\)','\(g(x)\)'],
    ['\(-1\)','\('.$gp1.'\)'],
    ['\(-.2\)','\('.$gp2.'\)'],
    ['\(-.05\)','\('.$gp3.'\)'],
    ['\(-.02\)',ans_rule(10)],
    ['\(-.005\)',ans_rule(10)],
    ['\(1\)','\('.$gp4.'\)'],
    ['\(.2\)','\('.$gp5.'\)'],
    ['\(.05\)','\('.$gp6.'\)'],
    ['\(.02\)',ans_rule(10)],
    ['\(.005\)',ans_rule(10)],
],
align => '|l | l|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);
@]*

END_PGML

ANS($gp2->cmp());

ANS($gp3->cmp());

ANS($gp5->cmp());

ANS($gp6->cmp());

BEGIN_PGML

As we established in the previous problem, [``\lim_{x\rightarrow0}g(x)``] does not exist. However, if you look *only* at [`x`]-values *less than* 0, [`g(x)`] is approaching what number? [_]{$gp1}

Similarly, for [`x`]-values *greater than* 0, what number is [`g(x)`] approaching? [_]{$gp4}

END_PGML

Section::End();

Section::Begin("One-sided limits");

BEGIN_PGML

We call these numbers *one-sided limits*! For [`x`]-values less than any number [`c`], we write

[```\lim_{x\rightarrow c^-}g(x)```]

and for [`x`]-values greater than [`c`], we write

[```\lim_{x\rightarrow c^+}g(x)```]

So, in this example,

[``\lim_{x\rightarrow0^-}g(x)=``][_]{$gp1}

and

[``\lim_{x\rightarrow0^+}g(x)=``] [_]{$gp4}

One-sided limits will be especially common in _piecewise functions_. We will look at one next! If you would like a refresher on what piecewise functions are, the next scaffold bar (which should appear green instead of yellow) has a video about it from Prof. Shull. (Feel free to skip if you remember piecewise functions well.)

END_PGML

Section::End();

Section::Begin("Piecewise function review video (20:45)");

BEGIN_PGML

[@
kalturaShull("1_4ver89yh")
@]*

END_PGML
Section::End();


Section::Begin("Piecewise function limits");

BEGIN_PGML

Let's find some limits for this piecewise function!

You can use the window on the right as a calculator, but you need to type the function yourself! Don't try to type the whole piecewise function; just type the piece you need for each value of [`x`].

[```f(x)=
\begin{cases}
[$a]x&x<[$b]\\
x^2&[$b]\leq x\leq[$c]\\
[$d]-x&x>[$c]\\
\end{cases}```]

END_PGML

$table=DataTable(
[
    ['\(x\)','\(f(x)\)'],
    ['\('.$b1.'\)',ans_rule(10)],
    ['\('.$b2.'\)',ans_rule(10)],
    ['\('.$b3.'\)',ans_rule(10)],
    ['\('.$b4.'\)',ans_rule(10)],
    ['\('.$b5.'\)',ans_rule(10)],
    ['\('.$b6.'\)',ans_rule(10)],
    ['\('.$c1.'\)',ans_rule(10)],
    ['\('.$c2.'\)',ans_rule(10)],
    ['\('.$c3.'\)',ans_rule(10)],
    ['\('.$c4.'\)',ans_rule(10)],
    ['\('.$c5.'\)',ans_rule(10)],
    ['\('.$c6.'\)',ans_rule(10)],
],
align => '|l | l|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);

TEXT(ColumnTable($table,$desmos_div));

#Context()->{format}{number} = "%.2f";
#ANS(Real(sprintf("%.2f",$fb1))->cmp());
ANS($fb1->cmp());

#Context()->{format}{number} = "%.4f";
#ANS(Real(sprintf("%.4f",$fb2))->cmp());
ANS($fb2->cmp());

#Context()->{format}{number} = "%.6f";
#ANS(Real(sprintf("%.6f",$fb3))->cmp());
ANS($fb3->cmp());

#Context()->{format}{number} = "%.2f";
#ANS(Real(sprintf("%.2f",$fb4))->cmp());
ANS($fb4->cmp());

#Context()->{format}{number} = "%.4f";
#ANS(Real(sprintf("%.4f",$fb5))->cmp());
ANS($fb5->cmp());

#Context()->{format}{number} = "%.6f";
#ANS(Real(sprintf("%.6f",$fb6))->cmp());
ANS($fb6->cmp());

#Context()->{format}{number} = "%g";

ANS($fc1->cmp());
ANS($fc2->cmp());
ANS($fc3->cmp());
ANS($fc4->cmp());
ANS($fc5->cmp());
ANS($fc6->cmp());

BEGIN_TEXT
$PAR $PAR $PAR
END_TEXT

BEGIN_PGML

Use your answers in the table to evaluate these four one-sided limits, then evaluate [`f`] at the two numbers listed.

[``\lim_{x\rightarrow[$b]^-}f(x)=``] [_]{$fb_left}

[``\lim_{x\rightarrow[$b]^+}f(x)=``] [_]{$fb_right}

[``\lim_{x\rightarrow[$c]^-}f(x)=``] [_]{$fc_left}

[``\lim_{x\rightarrow[$c]^+}f(x)=``] [_]{$fc_right}

[``f([$b])=``] [_]{$fb_right}

[``f([$c])=``] [_]{$fc_left}

END_PGML

Section::End();

Section::Begin("Another piecewise function");

BEGIN_PGML

Here's another piecewise function:

[```h(x)=
\begin{cases}
[$h1]&x\leq[$i]\\
[$h_slope]([$h2_partial])&[$i]<x<[$j-2]\\
[$k]&x=[$j-2]\\
[$h3]&x>[$j-2]\\
\end{cases}```]

Fill in the table, rounding as indicated.

END_PGML

$table=DataTable(
[
    ['\(x\)',"rounding",'\(h(x)\)'],
    ['\('.$i1.'\)',2,ans_rule(10)],
    ['\('.$i2.'\)',3,ans_rule(10)],
    ['\('.$i3.'\)',4,ans_rule(10)],
    ['\('.$i4.'\)',3,ans_rule(10)],
    ['\('.$i5.'\)',4,ans_rule(10)],
    ['\('.$i6.'\)',5,ans_rule(10)],
    ['\('.$j1.'\)',2,ans_rule(10)],
    ['\('.$j2.'\)',3,ans_rule(10)],
    ['\('.$j3.'\)',4,ans_rule(10)],
    ['\('.$j4.'\)',2,ans_rule(10)],
    ['\('.$j5.'\)',3,ans_rule(10)],
    ['\('.$j6.'\)',4,ans_rule(10)],
],
align => '|l | c|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);

TEXT(ColumnTable($table,$desmos_div2));

Context()->{format}{number} = "%.2f";
ANS(Real(sprintf("%.2f",$hi1))->cmp());

Context()->{format}{number} = "%.3f";
ANS(Real(sprintf("%.3f",$hi2))->cmp());

Context()->{format}{number} = "%.4f";
ANS(Real(sprintf("%.4f",$hi3))->cmp());

Context()->{format}{number} = "%.3f";
ANS(Real(sprintf("%.3f",$hi4))->cmp());

Context()->{format}{number} = "%.4f";
ANS(Real(sprintf("%.4f",$hi5))->cmp());

Context()->{format}{number} = "%.5f";
ANS(Real(sprintf("%.5f",$hi6))->cmp());

Context()->{format}{number} = "%.2f";
ANS(Real(sprintf("%.2f",$hj1))->cmp());

Context()->{format}{number} = "%.3f";
ANS(Real(sprintf("%.3f",$hj2))->cmp());

Context()->{format}{number} = "%.4f";
ANS(Real(sprintf("%.4f",$hj3))->cmp());

Context()->{format}{number} = "%.2f";
ANS(Real(sprintf("%.2f",$hj4))->cmp());

Context()->{format}{number} = "%.3f";
ANS(Real(sprintf("%.3f",$hj5))->cmp());

Context()->{format}{number} = "%.4f";
ANS(Real(sprintf("%.4f",$hj6))->cmp());

Context()->{format}{number} = "%g";

BEGIN_PGML

Based on the table, answer the following questions (write "DNE" if something does not exist):

[``\lim_{x\rightarrow[$i]^-}h(x)=``] [_]{$hi_left}

[``\lim_{x\rightarrow[$i]^+}h(x)=``] [_]{$hi_right}

[``\lim_{x\rightarrow[$i]}h(x)=``] [_]{$dne}

[``\lim_{x\rightarrow[$j-2]^-}h(x)=``] [_]{$hj_left}

[``\lim_{x\rightarrow[$j-2]^+}h(x)=``] [_]{$hj_right}

[``\lim_{x\rightarrow[$j-2]}h(x)=``] [_]{$hj_left}

[`h([$i])=`] [_]{$hi_left}

[`h([$j-2])=`] [_]{$k}

END_PGML

Section::End();

Section::Begin("Continuity & passcode");

BEGIN_PGML

As you just saw, one of the two-sided limits in the previous part _did_ exist, and one did not. But what about continuity? Based on what we know so far, [`h(x)`] is continuous at [_]{$cts_neither}.

[% The passcode for the next question is [`[$passcode3]`]. Enter it here: [_]{$passcode3} %]

END_PGML

Section::End();

# EXTRA LINES OF CODE FOR OTHER PURPOSES:
#   Context()->{format}{number} = "%18.15f";
#   ANS(Real(sprintf("%.3f",$gd2->value))->cmp(tolType   => 'absolute',tolerance => .01));
#   ANS(Real(sprintf("%.8f",$gd6))->cmp(tolType   => 'absolute',tolerance => 1e-7));
#   ANS($fb1->cmp(tolType   => 'absolute',tolerance => .5));
#   ANS($gd6->cmp());

# SIDE BY SIDE CODE:
#   $column1 = $desmos_div ."$PAR $PAR $PAR $PAR ". $desmos_div2;

  Scaffold::End();

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        //expressions: false, 
        expressions: true,
        settingsMenu: true,
        graphpaper: false,
        expressionsTopbar: true
    });

    
    my_calculator.setMathBounds({
      left: -101,
      right: -99,
      bottom: -1,
      top: 1
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL, expressions: true });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id2");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        //expressions: false, 
        expressions: true,
        settingsMenu: true,
        graphpaper: false,
        expressionsTopbar: true
    });

    
    my_calculator.setMathBounds({
      left: -101,
      right: -99,
      bottom: -1,
      top: 1
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL, expressions: true });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

Context()->normalStrings;

ENDDOCUMENT();

