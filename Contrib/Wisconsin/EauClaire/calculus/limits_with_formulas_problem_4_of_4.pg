# DESCRIPTION
## DBsubject('Calculus')
## DBchapter('Limits')
## DBsection('Investigating Limits')
## KEYWORDS('Limits', 'one-sided', 'infinity')
## TitleText1('Calculus: Early Transcendentals')
## EditionText1('4')
## AuthorText1('Rogawski')
## Section1('2.2')
## Institution('UW Eau Claire')
## Copied and modified by Warren Shull (UWEC) August 8, 2023

DOCUMENT();
loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "scaffold.pl",
           "PGauxiliaryFunctions.pl",
           "PGgraphmacros.pl",
		   "freemanMacros.pl",
  	       "AnswerFormatHelp.pl",
           "Parser.pl", "desmos.pl",);

loadMacros("niceTables.pl");

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
   #"scaffold.pl",
   "unionTables.pl",
   "parserPopUp.pl",   # <--------------------------------------NEEDED FOR DROPDOWN MENUS
   "PGtikz.pl",
);

loadMacros(
  "contextFraction.pl",
  "parserMultiAnswer.pl",
"answerHints.pl",
  "PGcourse.pl",           # Customization file for the course
   "customCSS.pl", # <---- MAKES BOXES PURPLE
);

Context("Numeric");

$Inf = Infinity;
$NInf = -(Infinity);

$yes = PopUp(
  ["Choose one", "yes","no"],
  "yes");

$no = PopUp(
  ["Choose one", "yes","no"],
  "no");

$negative_infinity = PopUp(
  ["Choose one", "Approaches more than one number", "Goes up forever","Goes down forever", "Jumps around unpredictably", "Stops existing"],
  "Goes down forever");

$positive_infinity = PopUp(
  ["Choose one", "Approaches more than one number", "Goes up forever","Goes down forever", "Jumps around unpredictably", "Stops existing"],
  "Goes up forever");

$dne = String("DNE");

#$contin = String('continuous');

#a,b,c,d available

$width = 200;
$height = 200;

desmos_enable_construct_new();

$unique_div_id = "evaluating_h_5_left";
$desmos_div = MODES(
    HTML=>qq(<div id="$unique_div_id" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$unique_div_id2 = "evaluating_h_5_right";
$desmos_div2 = MODES(
    HTML=>qq(<div id="$unique_div_id2" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$unique_div_id3 = "evaluating_h_inf";
$desmos_div3 = MODES(
    HTML=>qq(<div id="$unique_div_id3" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$unique_div_id4 = "evaluating_h_neg_inf";
$desmos_div4 = MODES(
    HTML=>qq(<div id="$unique_div_id4" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$p1=-1;
$p2=-.2;
$p3=-.05;
$p4=1;
$p5=.2;
$p6=.05;

SRAND($psvn);

$i=random(-7,-2); #left-to-middle
$j=random(1,5); #vertical asymptote on the right
$j_less=$j-2; #middle-to-right

$h1 = Formula("2^(x-$i)")->reduce; #left piece
$h3 = Formula("(($j+2)*x-($j*$j+2*$j-2))/(x-$j)")->reduce; #right piece; x=j asymptote

$hi_left=$h1->eval(x=>$i);
$hj_right=$h3->eval(x=>$j-2); #j-2 not j; should equal j+1

Context("Fraction");

$h_slope = Fraction("$hj_right/($j-2-$i)")->reduce;

Context("Numeric");

$h2_partial = Formula("(x-$i)")->reduce; #just the x-i part without the slope

$h2=Formula("$h_slope*$h2_partial");

$hi_right=$h2->eval(x=>$i);
$hj_left=$h2->eval(x=>$j-2); #j-2 not j

$k=random(-10,10);
while($k==$hj_left){$k=random(-10,10);}

$i1=$i-.02;
$i2=$i-.005;
$i3=$i-.001;

$hi1=$h1->eval(x=>$i1);
$hi2=$h1->eval(x=>$i2);
$hi3=$h1->eval(x=>$i3);

$i4=$i+.1;
$i5=$i+.01;
$i6=$i+.001;

$hi4=$h2->eval(x=>$i4);
$hi5=$h2->eval(x=>$i5);
$hi6=$h2->eval(x=>$i6);

$j1=$j-2-.1;
$j2=$j-2-.01;
$j3=$j-2-.001;

$hj1=$h2->eval(x=>$j1);
$hj2=$h2->eval(x=>$j2);
$hj3=$h2->eval(x=>$j3);

$j4=$j-2+.1;
$j5=$j-2+.01;
$j6=$j-2+.001;

$hj4=$h3->eval(x=>$j4);
$hj5=$h3->eval(x=>$j5);
$hj6=$h3->eval(x=>$j6);


## THIS IS PROBLEM 4 OF A 4 PROBLEM SERIES INTRODUCING LIMITS ALGEBRAICALLY. IF YOU USE THEM TOGETHER, YOU CAN USE PASSCODES TO ALLOW YOU TO REQUIRE THE PROBLEMS BE DONE IN ORDER. BELOW IS SOME OF THE CODE YOU'LL NEED:

#SRAND($psvn);

#$passcode1 = random(1000,9999);
#$passcode2 = random(1000,9999);
#$passcode3 = random(1000,9999);

## END PASSCODE CODE


$p=non_zero_random(-5,5);
$g=Formula("$p*x/|x|");

$gp1 = $g->eval(x=>$p1);
$gp2 = $g->eval(x=>$p2);
$gp3 = $g->eval(x=>$p3);
$gp4 = $g->eval(x=>$p4);
$gp5 = $g->eval(x=>$p5);
$gp6 = $g->eval(x=>$p6);

$cts_neither = PopUp(
  ["Choose one", 'x='.$i,"x=".$j_less,"both","neither"],
  "neither");
  
$ja0=$j-.2;
$ja1=$j-.05;
$ja2=$j-.01;
$ja3=$j-.002;
$ja4=$j-.0005;

$hja0=$h3->eval(x=>$ja0);
$hja1=$h3->eval(x=>$ja1);
$hja2=$h3->eval(x=>$ja2);
$hja3=$h3->eval(x=>$ja3);
$hja4=$h3->eval(x=>$ja4);

$ja5=$j+.2;
$ja6=$j+.05;
$ja7=$j+.01;
$ja8=$j+.002;
$ja9=$j+.0005;

$hja5=$h3->eval(x=>$ja5);
$hja6=$h3->eval(x=>$ja6);
$hja7=$h3->eval(x=>$ja7);
$hja8=$h3->eval(x=>$ja8);
$hja9=$h3->eval(x=>$ja9);

$jb1=$j+100;
$jb2=$j+1000;
$jb3=$j+10000;

$hjb1=$h3->eval(x=>$jb1);
$hjb2=$h3->eval(x=>$jb2);
$hjb3=$h3->eval(x=>$jb3);

$jb4=$i-3;
$jb5=$i-9;
$jb6=$i-14;

$hjb4=$h1->eval(x=>$jb4);
$hjb5=$h1->eval(x=>$jb5);
$hjb6=$h1->eval(x=>$jb6);

TEXT(beginproblem());
Context()->texStrings;

Scaffold::Begin(can_open => "when_previous_correct", is_open  => "first_incorrect");
###########################################
Section::Begin("Passcode");

BEGIN_PGML

In the previous problem, we looked at

[```h(x)=
\begin{cases}
[$h1]&x\leq[$i]\\
[$h_slope]([$h2_partial])&[$i]<x<[$j-2]\\
[$k]&x=[$j-2]\\
[$h3]&x>[$j-2]\\
\end{cases}```]

[% Enter the passcode from the previous problem: [_]{$passcode3} %]

END_PGML

Section::End();

Section::Begin("One more limit...");

BEGIN_PGML

Let's see what happens when [`x`] is close to [`[$j]`]. We will start with [`x`] values slightly _less_ than [`[$j]`]:

END_PGML

$table=DataTable(
[
    ['\(x\)','\(h(x)\)'],
    ['\('.$ja0.'\)',ans_rule(10)],
    ['\('.$ja1.'\)',ans_rule(10)],
    ['\('.$ja2.'\)',ans_rule(10)],
    ['\('.$ja3.'\)',ans_rule(10)],
    ['\('.$ja4.'\)',ans_rule(10)],
],
align => '|l | l|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);

TEXT(ColumnTable($table,$desmos_div));

#Context()->{format}{number} = "%.2f";
#ANS(Real(sprintf("%.2f",$hja0))->cmp());
ANS($hja0->cmp());
ANS($hja1->cmp());
ANS($hja2->cmp());
ANS($hja3->cmp());
ANS($hja4->cmp());

#Context()->{format}{number} = "%g";

BEGIN_PGML

Is there any number these [`y`]-values are approaching? [_]{$no}

END_PGML
Section::End();

Section::Begin("Describing the y-values");

BEGIN_PGML

When [`x`] is slightly less than [`[$j]`] and getting closer to it, how would you describe what the output [`h(x)`] does? [_]{$negative_infinity}

END_PGML

Section::End();

Section::Begin("Other side");

$table2=DataTable(
[
    ['\(x\)','\(h(x)\)'],
    ['\('.$ja5.'\)',ans_rule(10)],
    ['\('.$ja6.'\)',ans_rule(10)],
    ['\('.$ja7.'\)',ans_rule(10)],
    ['\('.$ja8.'\)',ans_rule(10)],
    ['\('.$ja9.'\)',ans_rule(10)],
],
align => '|l | l|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);

TEXT(ColumnTable($table2,$desmos_div2));

ANS($hja5->cmp());
ANS($hja6->cmp());
ANS($hja7->cmp());
ANS($hja8->cmp());
ANS($hja9->cmp());

BEGIN_PGML

When [`x`] is slightly _more_ than [`[$j]`] and getting closer to it, how would you describe what the output [`h(x)`] does? [_]{$positive_infinity}

END_PGML

Section::End();

Section::Begin("Infinite Limits!");

BEGIN_PGML

When [`h(x)`] goes up or down forever, we often refer to that limit as "equaling" either [`\infty`] or [`-\infty`] (you can type [`\infty`] with "inf"). In this case:

[``\lim_{x\rightarrow[$j]^-}h(x)=``] [_]{$NInf}

[``\lim_{x\rightarrow[$j]^+}h(x)=``] [_]{$Inf}

We call both of these *infinite limits*. Keep in mind that [`\infty`] and [`-\infty`] are _not_ numbers, so in a sense we can still say these limits "do not exist." However, sometimes we want to specify if a function goes up or down forever, and the limit notation along with the [`\infty`] symbol is a great way to do it!

If you are ever unsure whether a problem wants you to answer "DNE" for an infinite limit, or to answer [`\infty`] or [`-\infty`] where they would fit, either try it both ways or ask your instructor. (For this problem set, use [`\infty`] and [`-\infty`].)

Are your last two answers the same? [_]{$no}

So what is [``\lim_{x\rightarrow5}h(x)``]? [_]{$dne}

END_PGML

Section::End();

Section::Begin('What about when \(x\) goes way up...?');

BEGIN_PGML

We just saw an example of _output_ numbers approaching [`\infty`] or [`-\infty`]. But what about _input_ numbers?

END_PGML

$table3=DataTable(
[
    ['\(x\)','\(h(x)\)'],
    ['\('.$jb1.'\)',ans_rule(10)],
    ['\('.$jb2.'\)',ans_rule(10)],
    ['\('.$jb3.'\)',ans_rule(10)],
],
align => '|l | l|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);

TEXT(ColumnTable($table3,$desmos_div3));

#Context()->{format}{number} = "%.2f";
#ANS(Real(sprintf("%.2f",$hja0))->cmp());
ANS($hjb1->cmp());
ANS($hjb2->cmp());
ANS($hjb3->cmp());

#Context()->{format}{number} = "%g";

BEGIN_PGML

As [`x`] keeps going up, what is [`h(x)`] getting close to? [_]{2+$j}

We call this number [``\lim_{x\rightarrow\infty}h(x)``].

END_PGML

Section::End();

Section::Begin('...or down?');

BEGIN_PGML

Let's see what happens when [`x`] keeps going down.
END_PGML

$table4=DataTable(
[
    ['\(x\)',"rounding",'\(h(x)\)'],
    ['\('.$jb4.'\)','',ans_rule(10)],
    ['\('.$jb5.'\)',5,ans_rule(10)],
    ['\('.$jb6.'\)',6,ans_rule(10)],
],
align => '|l | c|l|',
midrules => 1,
tablecss => " border-spacing:0px 0px; border-radius: 5px; border-collapse:separate;"
);

TEXT(ColumnTable($table4,$desmos_div4));

Context()->normalStrings;

ANS($hjb4->cmp());

Context()->{format}{number} = "%.5f";
ANS(num_cmp($hjb5,tol=>5e-6, tolType=>"absolute"));

Context()->{format}{number} = "%.6f";
ANS(num_cmp($hjb6,tol=>5e-7, tolType=>"absolute"));

Context()->{format}{number} = "%g";

Context()->texStrings;

BEGIN_PGML

[``\lim_{x\rightarrow-\infty}=``] [_]{0}

(It might not seem like these [`x`] values are that far down, but this number is approached _really_ fast.)

END_PGML

Section::End();
  Scaffold::End();

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        //expressions: false, 
        expressions: true,
        settingsMenu: true,
        graphpaper: false,
        expressionsTopbar: true
    });
    
    my_calculator.setMathBounds({
      left: -101,
      right: -99,
      bottom: -1,
      top: 1
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL, expressions: true });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id2");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        //expressions: false, 
        expressions: true,
        settingsMenu: true,
        graphpaper: false,
        expressionsTopbar: true
    });
    
    my_calculator.setMathBounds({
      left: -101,
      right: -99,
      bottom: -1,
      top: 1
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL, expressions: true });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id3");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        //expressions: false, 
        expressions: true,
        settingsMenu: true,
        graphpaper: false,
        expressionsTopbar: true
    });
    
    my_calculator.setMathBounds({
      left: -101,
      right: -99,
      bottom: -1,
      top: 1
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL, expressions: true });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id4");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        //expressions: false, 
        expressions: true,
        settingsMenu: true,
        graphpaper: false,
        expressionsTopbar: true
    });
    
    my_calculator.setMathBounds({
      left: -101,
      right: -99,
      bottom: -1,
      top: 1
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL, expressions: true });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

Context()->normalStrings;

ENDDOCUMENT();

# EXTRA LINES OF CODE FOR OTHER PURPOSES:
#   Context()->{format}{number} = "%18.15f";
#   ANS(Real(sprintf("%.3f",$gd2->value))->cmp(tolType   => 'absolute',tolerance => .01));
#   ANS(Real(sprintf("%.8f",$gd6))->cmp(tolType   => 'absolute',tolerance => 1e-7));
#   ANS($fb1->cmp(tolType   => 'absolute',tolerance => .5));
#   ANS($gd6->cmp());

# SIDE BY SIDE CODE:
#   $column1 = $desmos_div ."$PAR $PAR $PAR $PAR ". $desmos_div2;

