##DESCRIPTION
##  Training problem on the relationship between rates of change and slopes of lines
##ENDDESCRIPTION

##KEYWORDS('secant line', 'tangent line', 'slope', 'average rate of change', 'instantaneous rate of change')

## DBsubject('Calculus')
## DBchapter('Limits, Derivatives')
## DBsection('Curve Sketching')
## Date('7/23/2023')
## Author('Warren Shull') # also modified by silviana amethyst
## Institution('UWEC')

########################################################################

DOCUMENT();

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   "scaffold.pl",
   "parserPopUp.pl",   # <--------------------------------------NEEDED FOR DROPDOWN MENUS
   "PGtikz.pl",
);

loadMacros("customCSS.pl");

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

$number_line_image = createTikZImage();
$number_line_image->tikzLibraries("arrows.meta");

$number_line2 = createTikZImage();
$number_line2->tikzLibraries("arrows.meta");

$number_line3 = createTikZImage();
$number_line3->tikzLibraries("arrows.meta");

$number_line4 = createTikZImage();
$number_line4->tikzLibraries("arrows.meta");

# Randomization
$a = non_zero_random(-6, 6);    # horizonatal translation
$b = random(-4, 4);             # vertical translation
$z1 = -9; #first zero
$z2 = -3; #second zero
$m1=($z1+$z2)/2; #average of them

$positive = PopUp(
  ["Choose one", "positive","negative"],
  "positive");

$negative = PopUp(
  ["Choose one", "positive","negative"],
  "negative");

$increasing = PopUp(
  ["Choose one", "increasing","decreasing"],
  "increasing");

$decreasing = PopUp(
  ["Choose one", "increasing","decreasing"],
  "decreasing");

$minimum = PopUp(
  ["Choose one", "minimum","maximum"],
  "minimum");

$maximum = PopUp(
  ["Choose one", "minimum","maximum"],
  "maximum");

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

################################
#  Desmos setup
#
#  In html mode, load the Desmos api script and create the <div> to attach the Desmos graph to.
#  In tex mode, print a message to direct the student to the html version.
#  Desmos API reference: https://www.desmos.com/api/v1.7/docs/index.html

$unique_div_id = "increasing_concave_up";
$width = 700;
$height = 400;

HEADER_TEXT(MODES(
    HTML=>'<script src="https://www.desmos.com/api/v1.7/calculator.js?apiKey=dcb31709b452b1cf9dc26972add0fda6"></script>',
    TeX=>''
));

$desmos_div = MODES(
    HTML=>qq(<div id="$unique_div_id" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

##############################################################
#
#  Setup
#
#

Context("Numeric");
Context()->variables->add(t=>'Real');

## THIS IS PROBLEM 2 OF A 3 PROBLEM SERIES INTRODUCING CONCAVITY. IF YOU USE THEM TOGETHER, YOU CAN USE PASSCODES TO ALLOW YOU TO REQUIRE THE PROBLEMS BE DONE IN ORDER. BELOW IS SOME OF THE CODE YOU'LL NEED:

#SRAND($psvn);
#$passcode1 = random(1000,9999);
#$passcode2 = random(1000,9999);

## END PASSCODE CODE


$i1= non_zero_random(-10,10);
$spacing=random(2,5);
$c1left=$i1-$spacing;
$c1right=$i1+$spacing;
$y1=non_zero_random(-3,3);

$f=Formula("x^3-3*$i1*x^2+3*$c1left*$c1right*x+$y1")->reduce;
$fp=Formula("3*x^2-6*$i1*x+3*$c1left*$c1right")->reduce;

$tx1=$c1left-1;
$td1=$fp->eval(x=>$tx1);
$tx2=$i1;
$td2=$fp->eval(x=>$tx2);
$tx3=$c1right+1;
$td3=$fp->eval(x=>$tx3);

$number_line_image->BEGIN_TIKZ
\tikzset{>={Stealth[scale=2]}}
\filldraw[
    draw=LightBlue,
    fill=white,
    rounded corners=10pt,
    thick,use as bounding box
] (-15,-2) rectangle (15,2);
\draw[<->,thick] (12,0) -- (-12,0) node[left,font={\Huge},outer sep=4pt]{\(f(x)\)};
\draw[thick] (-4,10pt) -- (-4,-10pt) node[font={\Huge},below,outer sep=4pt]{\($c1left\)};
\draw[thick] (4,10pt) -- (4,-10pt) node[font={\Huge},below,outer sep=4pt]{\($c1right\)};
END_TIKZ

$number_line2->BEGIN_TIKZ
\tikzset{>={Stealth[scale=2]}}
\filldraw[
    draw=LightBlue,
    fill=white,
    rounded corners=10pt,
    thick,use as bounding box
] (-15,-2) rectangle (15,2);
\draw[<->,thick] (12,0) -- (-12,0) node[left,font={\Huge},outer sep=4pt]{\(f'(x)\)};
\draw[thick] (-4,10pt) -- (-4,-10pt) node[font={\Huge},below,outer sep=4pt]{\($c1left\)};
\draw[thick] (4,10pt) -- (4,-10pt) node[font={\Huge},below,outer sep=4pt]{\($c1right\)};
\draw[thick] (-8,0pt) -- (-8,0pt) node[font={\Huge},above,outer sep=10pt]{\(+\)};
END_TIKZ

$number_line3->BEGIN_TIKZ
\tikzset{>={Stealth[scale=2]}}
\filldraw[
    draw=LightBlue,
    fill=white,
    rounded corners=10pt,
    thick,use as bounding box
] (-15,-2) rectangle (15,2);
\draw[<->,thick] (12,0) -- (-12,0) node[left,font={\Huge},outer sep=4pt]{\(f'(x)\)};
\draw[thick] (-4,10pt) -- (-4,-10pt) node[font={\Huge},below,outer sep=4pt]{\($c1left\)};
\draw[thick] (4,10pt) -- (4,-10pt) node[font={\Huge},below,outer sep=4pt]{\($c1right\)};
\draw[thick] (-8,0pt) -- (-8,0pt) node[font={\Huge},above,outer sep=10pt]{\(+\)};
\draw[thick] (0,0pt) -- (0,0pt) node[font={\Huge},above,outer sep=10pt]{\(-\)};
END_TIKZ

$number_line4->BEGIN_TIKZ
\tikzset{>={Stealth[scale=2]}}
\filldraw[
    draw=LightBlue,
    fill=white,
    rounded corners=10pt,
    thick,use as bounding box
] (-15,-2) rectangle (15,2);
\draw[<->,thick] (12,0) -- (-12,0) node[left,font={\Huge},outer sep=4pt]{\(f'(x)\)};
\draw[thick] (-4,10pt) -- (-4,-10pt) node[font={\Huge},below,outer sep=4pt]{\($c1left\)};
\draw[thick] (4,10pt) -- (4,-10pt) node[font={\Huge},below,outer sep=4pt]{\($c1right\)};
\draw[thick] (-8,0pt) -- (-8,0pt) node[font={\Huge},above,outer sep=10pt]{\(+\)};
\draw[thick] (0,0pt) -- (0,0pt) node[font={\Huge},above,outer sep=10pt]{\(-\)};
\draw[thick] (8,0pt) -- (8,0pt) node[font={\Huge},above,outer sep=10pt]{\(+\)};
END_TIKZ


##############################################################
#
#  Text
#
#

Scaffold::Begin(
    can_open => "when_previous_correct",
    is_open  => "first_incorrect"
);

BEGIN_PGML

This is the second in a sequence of three problems developing the first and second derivative tests.

[@ openDiv({ "class" => "problemPurpose" }) @]*
Purpose:

In this problem we label a partitioned number line with the sign of the first derivative, and lead to the "first derivative test", which lets us classify critical points as optima or saddle points --- just from the first derivative.

[@ closeDiv() @]*

END_PGML

Section::Begin("🔑 Segue from previous problem");

BEGIN_PGML

Recall that a *critical number* is an [`x`]-value, commonly called [`c`], where either [`f'(c)=0`] or [`f'(c)`] does not exist.

In this problem, we will see what happens _in-between_ the critical numbers.

[% Enter the passcode from the previous question: [_]{$passcode1} %]

END_PGML
Section::End();
Section::Begin("Compute the critical numbers");

BEGIN_PGML

As we have seen, when [`f'`] is positive, it means [`f`] is increasing, and when [`f'`] is negative, it means [`f`] is decreasing.

Let [`f(x)=[$f]`].  

🎯 Compute the first derivative, and the critical numbers.

* The first derivative is [`f'(x)=`] [_]{$fp}
* The critical numbers ([`x`]-values) of [`f`] are [_]{List("$c1left,$c1right")}

END_PGML

Section::End();









Section::Begin("Use test numbers for intervals of increasing/decreasing");

BEGIN_PGML

The critical numbers are the only places where the derivative is zero (or nonexistent, but that doesn't happen in this case). Everywhere else, it is either positive or negative!

Furthermore, the critical points are the only places the function can _switch_ between increasing and decreasing.

Let's make a number line to keep track of what we know. Notice that we put tick marks *only* at the critical numbers.

>> [@ image($number_line_image, width => 400, tex_size => 600) @]* <<

👀 As you can see, the two critical numbers divide the number line into three parts. Within each part, [`f`] will either increase the whole time or decrease the whole time. To decide which, we need only test one number from that part.

🎯 Let's begin by testing a number from the left part, where [`x<[$c1left]`]  (any [`x`] left of [`[$c1left]`] will do, so we *arbitrarily* chose [`[$tx1]`]).

[`f'([$tx1])=`] [_]{$td1}

Since [`f'([$tx1])`] is [_]{$positive}, [`f`] is [_]{$increasing} at [`x=[$tx1]`]

END_PGML

Section::End();








Section::Begin("Label the middle interval with the sign of \(f'\)");

BEGIN_PGML

Since [`f'([$tx1])`] is positive, [`f'(x)`] must be positive for all [`x<[$c1left]`]. We show this with a [`+`] sign on that part of the number line:

>> [@ image($number_line2, width => 400, tex_size => 600) @]* <<

Now let's do something similar for the middle part of the number line. We can test any number between [`[$c1left]`] and [`[$c1right]`]. Let's try testing [`[$tx2]`]:

[`f'([$tx2])=`] [_]{$td2}

When [`[$c1left]<x<[$c1right]`], [`f'(x)`] is [_]{$negative} so [`f(x)`] is [_]{$decreasing}.

END_PGML

Section::End();






Section::Begin("Label the last interval");

BEGIN_PGML

Since [`f'`] is negative for [`x`] between [`[$c1left]`] and [`[$c1right]`], we put a [`-`] sign on that part of the number line:

>> [@ image($number_line3, width => 400, tex_size => 600) @]* <<

🎯 Let's solve the last part, adding the rightmost label to the graph!

[`f'([$tx3])=`] [_]{$td3}, which is [_]{$positive} so [`f`] is [_]{$increasing} when [`x>[$c1right]`].

END_PGML

Section::End();








Section::Begin("Associate a \(f'\)-signed number line with intervals of increasing/decreasing");

BEGIN_PGML

Here's the full picture of where [`f'`] is positive and where it's negative.

>> [@ image($number_line4, width => 400, tex_size => 600) @]* <<

🎯 Correlate increasing/decreasing with the sign of [`f'`].

* [`f`] is [_]{$increasing} on [`\Big(-\infty,`] [_]{$c1left}[`\Big)`]
* [`f`] is [_]{$decreasing} on [`\Big(`][_]{$c1left}[`,`] [_]{$c1right}[`\Big)`]
* [`f`] is [_]{$increasing} on [`\Big(`][_]{$c1right}[`,\infty\Big)`]

Think about it: 

[@ openDiv({ "class" => "importantFormula" }) @]*
When a person has a fever 🤒 their temperature 🌡️ goes up, and when the fever "breaks" their tempurature goes down. Increasing, then decreasing.  A person's highest temperature is when it switches from increasing to decreasing.

Overnight 🌌, we usually experience the "nightly low" temperature.  The tempurature falls through the evening, and then it starts rising again as the sun comes up.  The minimum tempurature is when it switches from decreasing to increasing.
[@ closeDiv() @]*

🎯 Classify the two critical points using this reasoning.  

[`f`] has a local [_]{$maximum} at [`x=[$c1left]`] and a local [_]{$minimum} at [`x=[$c1right]`].

END_PGML

Section::End();










Section::Begin("The first derivative test 🔑");

BEGIN_PGML

[@ openDiv({ "class" => "importantFormula" }) @]*
*First Derivative Test*:

Let [`c`] be a critical point of [`f`].

* If [`f'(x)<0`] when [`x`] is slightly less than [`c`] and [`f'(x)>0`] when [`x`] is slightly greater than [`c`], then [`(c,f(c))`] is a local minimum.

* If [`f'(x)>0`] when [`x`] is slightly less than [`c`] and [`f'(x)<0`] when [`x`] is slightly greater than [`c`], then [`(c,f(c))`] is a local maximum.
[@ closeDiv() @]*

We can also use the second derivative to classify a critical point as local min or max.  That's the next problem.

[% The passcode for the next question is [`[$passcode2]`]. 🎯  Enter it here: [_]{$passcode2}. %]

END_PGML
Section::End();

Scaffold::End();

Context()->normalStrings;

##################################
#  Desmos graph (via the API)
#  Execute this only after the $desmos_div object has been put on the html page.

#$right1 = $x1_max + 2;
#$top1 = $g1_max + 2;
#$left1 = $x1_min - 2;
#$bottom1 = $g1_min - 2;

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        //expressions: false, 
        expressions: true,
        settingsMenu: true, 
        expressionsTopbar: true
    });

    my_calculator.setExpressions([
        { id: 'slider', latex: 'y=x', sliderBounds: {min: 1, max: ,4 step: 0.1}},
        { id: 'base_point', latex: '(a, g(a))'},
        { id: 'tangent_line', latex: 'y = 3x-5', label: 'tangent line'},
        { latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},
        { id: 'g_curve', latex: 'g(x)=x^2 \\left\\{1\\leq x\\leq4\\right\\}'},
    ]);
    
    my_calculator.setMathBounds({
      left: $left1,
      right: $right1,
      bottom: $bottom1,
      top: $top1
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

ENDDOCUMENT();
