##DESCRIPTION
##  Training problem on the relationship between rates of change and slopes of lines
##ENDDESCRIPTION

##KEYWORDS('secant line', 'tangent line', 'slope', 'average rate of change', 'instantaneous rate of change')

## DBsubject('Calculus')
## DBchapter('Limits, Derivatives')
## DBsection('Curve Sketching')
## Date('7/23/2023')
## Author('Warren Shull')
## Institution('UWEC')

########################################################################

DOCUMENT();

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   "scaffold.pl",
   "unionTables.pl",
   "parserPopUp.pl",   # <--------------------------------------NEEDED FOR DROPDOWN MENUS
   "PGtikz.pl",
);

loadMacros("customCSS.pl");

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

Context("Numeric");
Context()->variables->add(t=>'Real');

$second_line1 = createTikZImage();
$second_line1->tikzLibraries("arrows.meta");

$second_line2 = createTikZImage();
$second_line2->tikzLibraries("arrows.meta");

$both_lines = createTikZImage();
$both_lines->tikzLibraries("arrows.meta");

$combined_line = createTikZImage();
$combined_line->tikzLibraries("arrows.meta");

$positive = PopUp(
  ["Choose one", "positive","negative"],
  "positive");

$negative = PopUp(
  ["Choose one", "positive","negative"],
  "negative");

$increasing = PopUp(
  ["Choose one", "increasing","decreasing"],
  "increasing");

$decreasing = PopUp(
  ["Choose one", "increasing","decreasing"],
  "decreasing");

$minimum = PopUp(
  ["Choose one", "minimum","maximum"],
  "minimum");

$maximum = PopUp(
  ["Choose one", "minimum","maximum"],
  "maximum");

$concave_up = PopUp(
  ["Choose one", "concave up","concave down"],
  "concave up");

$concave_down = PopUp(
  ["Choose one", "concave up","concave down"],
  "concave down");

$increasing_concave_up = PopUp(
  ["Choose one", "increasing concave up","increasing concave down","decreasing concave up","decreasing concave down"],
  "increasing concave up");

$decreasing_concave_up = PopUp(
  ["Choose one", "increasing concave up","increasing concave down","decreasing concave up","decreasing concave down"],
  "decreasing concave up");

$increasing_concave_down = PopUp(
  ["Choose one", "increasing concave up","increasing concave down","decreasing concave up","decreasing concave down"],
  "increasing concave down");

$decreasing_concave_down = PopUp(
  ["Choose one", "increasing concave up","increasing concave down","decreasing concave up","decreasing concave down"],
  "decreasing concave down");

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

################################
#  Desmos setup
#
#  In html mode, load the Desmos api script and create the <div> to attach the Desmos graph to.
#  In tex mode, print a message to direct the student to the html version.
#  Desmos API reference: https://www.desmos.com/api/v1.7/docs/index.html

$width = 300;
$height = 300;


$x1_mid = non_zero_random(-10,10); #middle, where $a begins
$x2_mid = non_zero_random(-10,10); #middle, where $a begins
$x3_mid = non_zero_random(-10,10); #middle, where $a begins
$x4_mid = non_zero_random(-10,10); #middle, where $a begins
$y1 = non_zero_random(-10,10); #up or down shift from default
$y2 = non_zero_random(-10,10); #up or down shift from default
$y3 = non_zero_random(-10,10); #up or down shift from default
$y4 = non_zero_random(-10,10); #up or down shift from default

$x1_max = $x1_mid+1.9;
$x1_min = $x1_mid-2;
$x2_max = $x2_mid+2;
$x2_min = $x2_mid-1.9;
$x3_max = $x3_mid+2;
$x3_min = $x3_mid-1.9;
$x4_max = $x4_mid+1.9;
$x4_min = $x4_mid-2;

$g1 = Formula("$y1-sqrt(16-(x-$x1_min)^2)");
$g2 = Formula("$y2+sqrt(16-(x-$x2_max)^2)");
$g3 = Formula("$y3-sqrt(16-(x-$x3_max)^2)");
$g4 = Formula("$y4+sqrt(16-(x-$x4_min)^2)");

$g1_max = $g1->eval(x=>$x1_max);
$g1_min = $g1->eval(x=>$x1_min);
$g2_max = $g2->eval(x=>$x2_max);
$g2_min = $g2->eval(x=>$x2_min);
$g3_max = $g3->eval(x=>$x3_max);
$g3_min = $g3->eval(x=>$x3_min);
$g4_max = $g4->eval(x=>$x4_max);
$g4_min = $g4->eval(x=>$x4_min);

if ($g1_max<$g1_min){ #swap if they're in the wrong order
    $g1_temp=$g1_max;
    $g1_max=$g1_min;
    $g1_min=$g1_temp;
}

if ($g2_max<$g2_min){ #swap if they're in the wrong order
    $g2_temp=$g2_max;
    $g2_max=$g2_min;
    $g2_min=$g2_temp;
}

if ($g3_max<$g3_min){ #swap if they're in the wrong order
    $g3_temp=$g3_max;
    $g3_max=$g3_min;
    $g3_min=$g3_temp;
}

if ($g4_max<$g4_min){ #swap if they're in the wrong order
    $g4_temp=$g4_max;
    $g4_max=$g4_min;
    $g4_min=$g4_temp;
}

HEADER_TEXT(MODES(
    HTML=>'<script src="https://www.desmos.com/api/v1.7/calculator.js?apiKey=dcb31709b452b1cf9dc26972add0fda6"></script>',
    TeX=>''
));

$unique_div_id = "increasing_concave_up";
$desmos_div = MODES(
    HTML=>qq(<div id="$unique_div_id" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$unique_div_id2 = "increasing_concave_down";
$desmos_div2 = MODES(
    HTML=>qq(<div id="$unique_div_id2" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$unique_div_id3 = "decreasing_concave_up";
$desmos_div3 = MODES(
    HTML=>qq(<div id="$unique_div_id3" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$unique_div_id4 = "decreasing_concave_down";
$desmos_div4 = MODES(
    HTML=>qq(<div id="$unique_div_id4" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

$unique_div_id5 = "function_graph";
$desmos_div5 = MODES(
    HTML=>qq(<div id="$unique_div_id5" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);

##############################################################
#
#  Setup
#
#

## THIS IS PROBLEM 3 OF A 3 PROBLEM SERIES INTRODUCING CONCAVITY. IF YOU USE THEM TOGETHER, YOU CAN USE PASSCODES TO ALLOW YOU TO REQUIRE THE PROBLEMS BE DONE IN ORDER. BELOW IS SOME OF THE CODE YOU'LL NEED:

#SRAND($psvn);
#$passcode1 = random(1000,9999);
#$passcode2 = random(1000,9999);

## END PASSCODE CODE

$i1= non_zero_random(-10,10);
$spacing=random(2,5);
$c1left=$i1-$spacing;
$c1right=$i1+$spacing;
$y0=non_zero_random(-3,3);

$f=Formula("x^3-3*$i1*x^2+3*$c1left*$c1right*x+$y0")->reduce;
$fp=Formula("3*x^2-6*$i1*x+3*$c1left*$c1right")->reduce;
$fpp=Formula("6*x-6*$i1")->reduce;

$y5min=$f->eval(x=>$c1right);
$y5max=$f->eval(x=>$c1left);
$y5inf=$f->eval(x=>$i1);

$t2x1=$i1-1;
$t2d1=$fpp->eval(x=>$t2x1);
$t2x2=$i1+1;
$t2d2=$fpp->eval(x=>$t2x2);

$second_line1->BEGIN_TIKZ
\tikzset{>={Stealth[scale=2]}}
\filldraw[
    draw=LightBlue,
    fill=white,
    rounded corners=10pt,
    thick,use as bounding box
] (-15,-2) rectangle (15,2);
\draw[<->,thick] (12,0) -- (-12,0) node[left,font={\Huge},outer sep=4pt]{\(f''(x)\)};
\draw[thick] (0,10pt) -- (0,-10pt) node[font={\Huge},below,outer sep=4pt]{\($i1\)};
END_TIKZ

$second_line2->BEGIN_TIKZ
\tikzset{>={Stealth[scale=2]}}
\filldraw[
    draw=LightBlue,
    fill=white,
    rounded corners=10pt,
    thick,use as bounding box
] (-15,-2) rectangle (15,2);
\draw[<->,thick] (12,0) -- (-12,0) node[left,font={\Huge},outer sep=4pt]{\(f''(x)\)};
\draw[thick] (0,10pt) -- (0,-10pt) node[font={\Huge},below,outer sep=4pt]{\($i1\)};
\draw[thick] (-6,0pt) -- (-6,0pt) node[font={\Huge},above,outer sep=4pt]{\(-\)};
\draw[thick] (6,0pt) -- (6,0pt) node[font={\Huge},above,outer sep=4pt]{\(+\)};
END_TIKZ

$both_lines->BEGIN_TIKZ
\tikzset{>={Stealth[scale=2]}}
\filldraw[
    draw=LightBlue,
    fill=white,
    rounded corners=10pt,
    thick,use as bounding box
] (-15,-2) rectangle (15,6);
\draw[<->,thick] (12,4) -- (-12,4) node[left,font={\Huge},outer sep=4pt]{\(f'(x)\)};
\draw[thick] (-6,125pt) -- (-6,105pt) node[font={\Huge},below,outer sep=4pt]{\($c1left\)};
\draw[thick] (6,125pt) -- (6,105pt) node[font={\Huge},below,outer sep=4pt]{\($c1right\)};
\draw[thick] (-9,115pt) -- (-9,115pt) node[font={\Huge},above,outer sep=4pt]{\(+\)};
\draw[thick] (0,115pt) -- (0,115pt) node[font={\Huge},above,outer sep=4pt]{\(-\)};
\draw[thick] (9,115pt) -- (9,115pt) node[font={\Huge},above,outer sep=4pt]{\(+\)};
\draw[<->,thick] (12,0) -- (-12,0) node[left,font={\Huge},outer sep=4pt]{\(f''(x)\)};
\draw[thick] (0,10pt) -- (0,-10pt) node[font={\Huge},below,outer sep=4pt]{\($i1\)};
\draw[thick] (-6,0pt) -- (-6,0pt) node[font={\Huge},above,outer sep=4pt]{\(-\)};
\draw[thick] (6,0pt) -- (6,0pt) node[font={\Huge},above,outer sep=4pt]{\(+\)};
END_TIKZ

$combined_line->BEGIN_TIKZ
\tikzset{>={Stealth[scale=2]}}
\filldraw[
    draw=LightBlue,
    fill=white,
    rounded corners=10pt,
    thick,use as bounding box
] (-15,-2) rectangle (15,6);
\draw[<->,thick] (12,0) -- (-12,0);
\draw[thick] (0,10pt) -- (0,-10pt) node[font={\Huge},below,outer sep=4pt]{\($i1\)};
\draw[thick] (-6,10pt) -- (-6,-10pt) node[font={\Huge},below,outer sep=4pt]{\($c1left\)};
\draw[thick] (6,10pt) -- (6,-10pt) node[font={\Huge},below,outer sep=4pt]{\($c1right\)};
\draw[thick] (-9,0pt) -- (-9,0pt) node[font={\Huge},above,outer sep=45pt]{\(f'+\)};
\draw[thick] (-9,0pt) -- (-9,0pt) node[font={\Huge},above,outer sep=10pt]{\(f''-\)};
\draw[thick] (-3,0pt) -- (-3,0pt) node[font={\Huge},above,outer sep=45pt]{\(f'-\)};
\draw[thick] (-3,0pt) -- (-3,0pt) node[font={\Huge},above,outer sep=10pt]{\(f''-\)};
\draw[thick] (3,0pt) -- (3,0pt) node[font={\Huge},above,outer sep=45pt]{\(f'-\)};
\draw[thick] (3,0pt) -- (3,0pt) node[font={\Huge},above,outer sep=10pt]{\(f''+\)};
\draw[thick] (9,0pt) -- (9,0pt) node[font={\Huge},above,outer sep=45pt]{\(f'+\)};
\draw[thick] (9,0pt) -- (9,0pt) node[font={\Huge},above,outer sep=10pt]{\(f''+\)};
END_TIKZ

##############################################################
#
#  Text
#
#

Scaffold::Begin(
    can_open => "when_previous_correct",
    is_open => "first_incorrect"
);

BEGIN_PGML

[@ openDiv({ "class" => "problemPurpose" }) @]*
Purpose:

In this problem, we will build tools to know how each part of a graph is shaped, focusing on the second derivative.

[@ closeDiv() @]*
END_PGML

Section::Begin("Passcode");

BEGIN_PGML

In this problem, we will focus on the same function from the previous problem:

[`f(x)=[$f]`]

[% 🎯🔑 Enter the passcode from the previous question: [_]{$passcode2} %]

END_PGML
Section::End();



Section::Begin("Second derivative");

BEGIN_PGML

🎯 Begin by finding the first and second derivative.

[`f(x)=[$f]`]

* [`f'(x)=`] [_]{$fp}
* [`f''(x)=`] [_]{$fpp}

There is one number [`c`] such that [`f''(c)=0`]. 🎯 Compute it

[`f''\Big(`] [_]{$i1} [`\Big)=0`]

END_PGML

Section::End();







Section::Begin("Second derivative number line");

BEGIN_PGML

In the previous problem, we made a number line for the first derivative. Now, we will make one for the second derivative! As before, we only need tick marks where the second derivative is either 0 or does not exist.

>> [@ image($second_line1, width => 400, tex_size => 600) @]* <<

This time, the tick mark only divides the number line into two parts. As before, we only need to test one number from each part. 

🎯 "Test" the signs of the derivatives using [`[$t2x1]`] for the left part and [`[$t2x2]`] for the right part.

* [`f''([$t2x1])=`] [_]{$t2d1}, so [`f''(x)`] is [_]{$negative} when [`x<[$i1]`].
* [`f''([$t2x2])=`] [_]{$t2d2}, so [`f''(x)`] is [_]{$positive} when [`x>[$i1]`].

END_PGML

Section::End();







Section::Begin("Number line finished");

BEGIN_PGML

🎉 We now have what we need for a second derivative number line:

>> [@ image($second_line2, width => 400, tex_size => 600) @]* <<

🧠 But how does this affect the shape of the graph?

END_PGML

Section::End();
Section::Begin("Problem 5 pictures");

$column1 = $desmos_div ."$PAR $PAR $PAR $PAR ". $desmos_div2;

$column2 = $desmos_div3 ."$PAR $PAR $PAR $PAR ". $desmos_div4;

BEGIN_PGML

Recall these pictures from Problem 5:

END_PGML

TEXT(ColumnTable($column1,$column2));

BEGIN_PGML
The two at the top had [_]{$positive} second derivatives, and the two at the bottom had [_]{$negative} second derivatives.

🧠 Do you see anything visually different about the top two versus the bottom two?

END_PGML

Section::End();
Section::Begin("Concavity");

BEGIN_PGML

Here's a tip to help remember concavity direction:

[@ openDiv({ "class" => "importantFormula" }) @]*
* We say the top two pictures are *concave up* because they are shaped like a smile! 
* The other two are *concave down* because they are shaped like a frown.  They rhyme!
[@ closeDiv() @]* 


(In other words, [`f`] was concave up when [`f'`] was increasing, and [`f`] was concave down when [`f'`] was decreasing.)

So getting back to our number line:

>> [@ image($second_line2, width => 400, tex_size => 600) @]* <<

🎯 Connect the sign of [`f'`] with increasing / decreasing.

* On the interval [`\Big(-\infty,`] [_]{$i1}[`\Big)`], [`f''`] is [_]{$negative}, so the graph of [`f`] is [_]{$concave_down}.
* On the interval [`\Big(`] [_]{$i1}[`,\infty\Big)`], [`f''`] is [_]{$positive}, so the graph of [`f`] is [_]{$concave_up}.

END_PGML

Section::End();

Section::Begin("Combining concavity with increase/decrease");

BEGIN_PGML

Here are the number lines for both the first and second derivative:

>> [@ image($both_lines, width => 400, tex_size => 600) @]* <<

We can combine them into one! On the combined number line, we need a tick mark wherever _either_ of the two lines had a tick mark. 🎯 List the numbers where either of the two lines (or both) have a tick mark, *in increasing order*:

END_PGML

BEGIN_PGML

[@ ans_rule(10) @]*

Now let's combine the two number lines...
END_PGML

Context()->normalStrings;
COMMENT("TODO: this flag of ordered=>0 isn't working, and it's only accepting them in this order.  ");
$combined_points = List( "$c1left,$i1,$c1right" );
ANS($combined_points->cmp(ordered=>0,showLengthHints => 1));

Context()->texStrings;

Section::End();

Section::Begin("Combined number line");

BEGIN_PGML

>> [@ image($combined_line, width => 400, tex_size => 600) @]* <<

We have divided the number line into 4 intervals. 🎯 Fill them in, in order from left to right:

* [`\Big(-\infty,`] [_]{$c1left}[`\Big)`]
* [`\Big(`][_]{$c1left}[`,`] [_]{$i1}[`\Big)`]
* [`\Big(`][_]{$i1}[`,`] [_]{$c1right}[`\Big)`]
* [`\Big(`][_]{$c1right}[`,\infty\Big)`]

END_PGML

Section::End();

Section::Begin("Assigning shapes to each interval");

BEGIN_PGML

>> [@ image($combined_line, width => 400, tex_size => 600) @]* <<

🎯 Connect the combinations of signs of [`f'`] and [`f''`] using the dropdowns.

* On the interval [`(-\infty,[$c1left])`], the graph of [`f`] is [_]{$increasing_concave_down}
* On the interval [`([$c1left],[$i1])`], the graph of [`f`] is [_]{$decreasing_concave_down}
* On the interval [`([$i1],[$c1right])`], the graph of [`f`] is [_]{$decreasing_concave_up}
* On the interval [`([$c1right],\infty)`], the graph of [`f`] is [_]{$increasing_concave_up}

Let's look at the graph to see if it agrees with these statements!

END_PGML

Section::End();

Section::Begin("Graph and new rule!");

BEGIN_PGML

[@ $desmos_div5 @]*

As you can see, the graph of [`y=f(x)`] agrees with the combined number line above.

In the previous problem, we found the local maximum (shown in green) and the local minimum (shown in blue). Notice the _concavity_ at both of these points.

[@ openDiv({ "class" => "importantFormula" }) @]*
*Second Derivative Test*:

Let [`c`] be a critical number of [`f`].  🎯 Connect direction of concavity to local optima using the dropdowns.

* If [`f''(c)>0`], then [`f`] is [_]{$concave_up} and has a local [_]{$minimum}.

* If [`f''(c)<0`], then [`f`] is [_]{$concave_down} and has a local [_]{$maximum}.

[@ closeDiv() @]*

But what about the point shown in red? That's where the concavity changes, so we call it an *inflection point*. 🎯 Enter the coordinates of that point here:

[`\Big(`][_]{$i1}[`,`] [_]{$y5inf}[`\Big)`]

END_PGML
Section::End();

Scaffold::End();

Context()->normalStrings;

##################################
#  Desmos graph (via the API)
#  Execute this only after the $desmos_div object has been put on the html page.

$right1 = $x1_max + 2;
$top1 = $g1_max + 2;
$left1 = $x1_min - 2;
$bottom1 = $g1_min - 2;

$right2 = $x2_max + 2;
$top2 = $g2_max + 2;
$left2 = $x2_min - 2;
$bottom2 = $g2_min - 2;

$right3 = $x3_max + 2;
$top3 = $g3_max + 2;
$left3 = $x3_min - 2;
$bottom3 = $g3_min - 2;

$right4 = $x4_max + 2;
$top4 = $g4_max + 2;
$left4 = $x4_min - 2;
$bottom4 = $g4_min - 2;

$right5 = $c1right + 4;
$top5 = $y5max + (($y5max-$y5min)/10);
$left5 = $c1left - 4;
$bottom5 = $y5min - (($y5max-$y5min)/10);

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        expressions: false, 
        settingsMenu: true, 
        expressionsTopbar: true,
        zoomButtons: false
    });

    my_calculator.setExpressions([
        { id: 'slider', latex: 'a=$x1_mid', sliderBounds: {min: $x1_min, max: $x1_max, step: 0.1}},
        { id: 'base_point', latex: '(a, g(a))'},
        { id: 'tangent_line', latex: 'y = g\'(a)*(x-a) + g(a)', label: 'tangent line'},
        { latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},
        { id: 'g_curve', latex: 'g(x)=$y1-\\sqrt{16-(x-$x1_min)^2} \\left\\{$x1_min\\leq x\\leq$x1_max\\right\\}'},
    ]);
    
    my_calculator.setMathBounds({
      left: $left1,
      right: $right1,
      bottom: $bottom1,
      top: $top1
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL, expressions: false });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst2 = document.getElementById("$unique_div_id2");

    var my_calculator2 = Desmos.Calculator(arstarst2, {
        keypad: false, 
        expressions: false, 
        settingsMenu: true, 
        expressionsTopbar: true,
        zoomButtons: false
    });

    my_calculator2.setExpressions([
        { id: 'slider', latex: 'a=$x2_mid', sliderBounds: {min: $x2_min, max: $x2_max, step: 0.1}},
        { id: 'base_point', latex: '(a, g(a))'},
        { id: 'tangent_line', latex: 'y = g\'(a)*(x-a) + g(a)', label: 'tangent line'},
        { latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},
        { id: 'g_curve', latex: 'g(x)=$y2+\\sqrt{16-(x-$x2_max)^2} \\left\\{$x2_min\\leq x\\leq$x2_max\\right\\}'},
    ]);

    my_calculator2.setMathBounds({
      left: $left2,
      right: $right2,
      bottom: $bottom2,
      top: $top2
    });

    my_calculator2.updateSettings({ fontSize: Desmos.FontSizes.SMALL });

    var state = my_calculator2.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst3 = document.getElementById("$unique_div_id3");

    var my_calculator3 = Desmos.Calculator(arstarst3, {
        keypad: false, 
        expressions: false, 
        settingsMenu: true, 
        expressionsTopbar: false,
        zoomButtons: false
    });

    my_calculator3.setExpressions([
        { id: 'slider', latex: 'a=$x3_mid', sliderBounds: {min: $x3_min, max: $x3_max, step: 0.1}},
        { id: 'base_point', latex: '(a, g(a))'},
        { id: 'tangent_line', latex: 'y = g\'(a)*(x-a) + g(a)', label: 'tangent line'},
        { latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},
        { id: 'g_curve', latex: 'g(x)=$y3-\\sqrt{16-(x-$x3_max)^2} \\left\\{$x3_min\\leq x\\leq$x3_max\\right\\}'},
    ]);

    my_calculator3.setMathBounds({
      left: $left3,
      right: $right3,
      bottom: $bottom3,
      top: $top3
    });

    my_calculator3.updateSettings({ fontSize: Desmos.FontSizes.SMALL });

    var state = my_calculator3.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst4 = document.getElementById("$unique_div_id4");

    var my_calculator4 = Desmos.Calculator(arstarst4, {
        keypad: false, 
        expressions: false, 
        settingsMenu: true, 
        expressionsTopbar: true,
        zoomButtons: false
    });

    my_calculator4.setExpressions([
        { id: 'slider', latex: 'a=$x4_mid', sliderBounds: {min: $x4_min, max: $x4_max, step: 0.1}},
        { id: 'base_point', latex: '(a, g(a))'},
        { id: 'tangent_line', latex: 'y = g\'(a)*(x-a) + g(a)', label: 'tangent line'},
        { latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},{ latex: ' '},
        { id: 'g_curve', latex: 'g(x)=$y4+\\sqrt{16-(x-$x4_min)^2} \\left\\{$x4_min\\leq x\\leq$x4_max\\right\\}'},
    ]);

    my_calculator4.setMathBounds({
      left: $left4,
      right: $right4,
      bottom: $bottom4,
      top: $top4
    });

    my_calculator4.updateSettings({ fontSize: Desmos.FontSizes.SMALL });

    var state = my_calculator4.getState();
</script>
END_SCRIPT

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst5 = document.getElementById("$unique_div_id5");

    var my_calculator5 = Desmos.Calculator(arstarst5, {
        keypad: false, 
        expressions: false, 
        settingsMenu: true, 
        expressionsTopbar: true,
        zoomButtons: false
    });

    my_calculator5.setExpressions([
        { id: 'f_curve', latex: 'f(x)=$f', color: Desmos.Colors.BLACK},
        { id: 'left_cp', latex: '($c1left, $y5max)', color: Desmos.Colors.GREEN},
        { id: 'right_cp', latex: '($c1right, $y5min)', color: Desmos.Colors.BLUE},
        { id: 'inflection', latex: '($i1, $y5inf)', color: Desmos.Colors.RED},
    ]);

    my_calculator5.setMathBounds({
      left: $left5,
      right: $right5,
      bottom: $bottom5,
      top: $top5
    });

    my_calculator5.updateSettings({ fontSize: Desmos.FontSizes.SMALL });

    var state = my_calculator5.getState();
</script>
END_SCRIPT

ENDDOCUMENT();
