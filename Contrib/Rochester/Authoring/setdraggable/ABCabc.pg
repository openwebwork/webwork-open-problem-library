## DESCRIPTION
##   Arrange statements for a proof in proper order
## ENDDESCRIPTION


## DBsubject(WeBWorK)
## DBchapter(Demos)
## DBsection(Problem)
## Date(Summer 2013)
## Institution(Mississippi College)
## Author(John Travis)
## MLT(OrderByInclusion)
## Level(3)
## MO(1)
## TitleText1('A Transition to Advanced Mathematics')
## AuthorText1('Smith, Eggen and St. Andre')
## EditionText1('7th')
## Section1('.')
## Problem1('')
## KEYWORDS('Foundations', 'Proof', 'Proposition')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGcourse.pl",
"draggableProof.pl",
"PGchoicemacros.pl"
);

TEXT(beginproblem());
@slice = NchooseK(26,10);
# You can comment out the debug message once things are  working and the red warning color will go away.

#DEBUG_MESSAGE("Slice contains 10 distinct numbers chosen from the 
#numbers 0 through 25:", join(" ", @slice));
@slice = num_sort(@slice);
# num_sort() sorts an array in numerical order, lex_sort() sorts array elements in lexical order

#DEBUG_MESSAGE("After sorting the slice is now in ascending order: ",join(" ",@slice));

# qw() stands for 'quote using whitespace' is a quick way to enter an array of words.

@sets = qw(A B C D E F G H I J K L O M N O P Q R S T U V W X Y Z);
@sets = reverse @sets;
@s=@sets[@slice];
#DEBUG_MESSAGE("After using the slice code we have these letters in 
#ascending lexigraphical order: ",join(" ", @s) );

# Can I use the bulgarian alphabet?  Apparently not yet. 
# That will be a project soon. -- there are a lot of requests from abroad.
#
#@s3=qw(ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ³ ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ½ ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ³ ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¶ ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¾ );
# lc() takes a character as its argument and returns the lower case version. A -> a, a-> a etc.
# the @s2 = map { function($_) } @sets; 
# construction applies function to each element in @sets and collects the result in a new array.

@s2 = map {lc($_)} @s;

$CorrectProof = DraggableProof([
"$s[0]",
"$s[1]",
"$s[2]",
"$s[3]",
],

[
#"$s[4]",
#"$s[5]",
#"$s[6]",
],

SourceLabel => "<br> Choose from these letters",
TargetLabel =>  "Letters in reverse alphabetical order",
);


#########################################
###
###  The goal is posted here. 
###


$CorrectProof2 = DraggableProof([
"$s2[0]",
"$s2[1]",
"$s2[2]",
"$s2[3]",
],

[
#"$s2[4]",
#"$s2[5]",
#"$s2[6]",
],

SourceLabel => "<br> Choose from these letters",
TargetLabel =>  "Letters in reverse alphabetical order",
);


#########################################
###
###  The goal is posted here. 
###

BEGIN_TEXT
First order \{ $CorrectProof->numNeeded \} of the following symbols so that they
are in reverse alphabetical order. 

$PAR
\{ $CorrectProof->Print \}

END_TEXT

ANS($CorrectProof->cmp);

#########################################
###
###  The second goal is posted here. 
###
BEGIN_TEXT
Next order \{ $CorrectProof2->numNeeded \} of the following symbols so that they
are in alphabetical order. 

$PAR
\{ $CorrectProof2->Print \}

END_TEXT

ANS($CorrectProof2->cmp);


ENDDOCUMENT();