## DESCRIPTION
##   Arrange statements for a proof in proper order
## ENDDESCRIPTION


## DBsubject(WeBWorK)
## DBchapter(Demos)
## DBsection(Problem)
## Date(Summer 2013)
## Institution(Mississippi College and U. of Rochester)
## Author(Mike Gage after John Travis)
## MLT(DraggableTutorialExamples)   # MLT means "more like this" and is used to group problems in the Library Browser
## Level(3)  # rates the difficulty
## MO(1)     # does it use MathObjects? (This does. The call is hidden inside draggableproofs.pl
## TitleText1('')
## AuthorText1('')
## EditionText1('')
## Section1('')
## Problem1('')
## KEYWORDS('Draggable','Author','Tutorial', 'Example')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGcourse.pl",
"draggableProof.pl",
"PGchoicemacros.pl"
);

TEXT(beginproblem());
@slice = NchooseK(26,10);
# You can comment out the debug message once things are  working and the red warning color will go away.

# DEBUG_MESSAGE("Slice contains 10 distinct numbers chosen from the  numbers 0 through 25:", join(" ", @slice));
@slice = num_sort(@slice);
# num_sort() sorts an array in numerical order, lex_sort() sorts array elements in lexical order

# DEBUG_MESSAGE("After sorting the slice is now in ascending order: ",join(" ",@slice));

# qw() stands for 'quote using whitespace' is a quick way to enter an array of words.

@letters = qw(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z);
@s=@letters[@slice];
# DEBUG_MESSAGE("After using the slice code we have these letters in ascending lexigraphical order: ",join(" ", @s) );

# Can I use the bulgarian alphabet?  Apparently not yet. 
# That will be a project soon. -- there are a lot of requests from abroad.
#
# @s3=qw(ÃÂÃÂÃÂÃÂ³ ÃÂÃÂÃÂÃÂ ÃÂÃÂÃÂÃÂ½ ÃÂÃÂÃÂÃÂ³ ÃÂÃÂÃÂÃÂ¶ ÃÂÃÂÃÂÃÂ¾ );
# lc() takes a character as its argument and returns the lower case version. A -> a, a-> a etc.
# the @s2 = map { function($_) } @sets; 
# construction applies function to each element in @sets and collects the result in a new array.

@s2 = map {lc($_)} @s;

$CorrectProof = DraggableProof([
"$s[0]",
"$s[1]",
"$s[2]",
"$s[3]",
],

[
"$s[4]",
"$s[5]",
"$s[6]",
],

SourceLabel => "<br> Choose from these letters",
TargetLabel =>  "Letters in alphabetical order",
);


#########################################
###
###  The goal is posted here. 
###


$CorrectProof2 = DraggableProof([
"$s2[0]",
"$s2[1]",
"$s2[2]",
"$s2[3]",
],

[
"$s2[4]",
"$s2[5]",
"$s2[6]",
],

SourceLabel => "<br> Choose from these letters",
TargetLabel =>  "Letters in alphabetical order",
);


#########################################
###
###  The goal is posted here. 
###

BEGIN_TEXT
Order \{ $CorrectProof->numNeeded \} of the following symbols so that they
are in the NEW ALPHABETICAL ORDER given by $PAR \{join(" ", @letters )\}.

$PAR
\{ $CorrectProof->Print \}

END_TEXT

ANS($CorrectProof->cmp);

#########################################
###
###  The second goal is posted here. 
###
BEGIN_TEXT
Next order \{ $CorrectProof2->numNeeded \} of the following symbols 
so that they are in the same alphabetical order. 

$PAR
\{ $CorrectProof2->Print \}

END_TEXT

ANS($CorrectProof2->cmp);


ENDDOCUMENT();