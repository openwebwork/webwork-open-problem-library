DOCUMENT();
loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"PGgraphmacros.pl",
"PGauxiliaryFunctions.pl", #for lcm, gcd,etc
);	

# make sure we're in the context we want
Context("Numeric");

($WIDTH,$HEIGHT,$TEXSIZE)=(500,100,150);
# now initialize the graph
$graph = init_graph(0,0, 5,1,size=>[$WIDTH,$HEIGHT]);

for ($x=0;$x<5;$x++)
{$y=$x+.5;
$graph->moveTo($y,.03);
$graph->lineTo($y ,.6 ,'black');
        $circle_object1 = closed_circle($y ,.6 ,'black' );
         $graph -> stamps($circle_object1);
}
$graph->moveTo(.5,.6);
$graph->lineTo(.2 ,.6 ,'red');
        $circle_object1 = closed_circle(.2 ,.6 ,'black' );
         $graph -> stamps($circle_object1);
$graph->moveTo(.5,.6);
$graph->lineTo(.3 ,.85 ,'red');
        $circle_object1 = closed_circle(.3 ,.85 ,'black' );
         $graph -> stamps($circle_object1);
$graph->moveTo(.5,.6);
$graph->lineTo(.5 ,.9 ,'red');
        $circle_object1 = closed_circle(.5 ,.9 ,'black' );
         $graph -> stamps($circle_object1);

$graph->moveTo(.5,.6);
$graph->lineTo(.7 ,.85 ,'red');
        $circle_object1 = closed_circle(.7 ,.85 ,'black' );
         $graph -> stamps($circle_object1);
$graph->moveTo(.5,.6);
$graph->lineTo(.8 ,.6 ,'red');
        $circle_object1 = closed_circle(.8 ,.6 ,'black' );
         $graph -> stamps($circle_object1);

        $circle_object1 = closed_circle(1.5 ,.6 ,'red' );
         $graph -> stamps($circle_object1);

$graph->moveTo(1.5,.6);
$graph->lineTo(1.2 ,.6 ,'red');
        $circle_object1 = closed_circle(1.2 ,.6 ,'green' );
         $graph -> stamps($circle_object1);
$graph->moveTo(1.5,.6);
$graph->lineTo(1.3 ,.85 ,'red');
        $circle_object1 = closed_circle(1.3 ,.85 ,'black' );
         $graph -> stamps($circle_object1);
$graph->moveTo(1.5,.6);
$graph->lineTo(1.5 ,.9 ,'red');
        $circle_object1 = closed_circle(1.5 ,.9 ,'black' );
         $graph -> stamps($circle_object1);

$graph->moveTo(1.5,.6);
$graph->lineTo(1.7 ,.85 ,'red');
        $circle_object1 = closed_circle(1.7 ,.85 ,'black' );
         $graph -> stamps($circle_object1);
$graph->moveTo(1.5,.6);
$graph->lineTo(1.8 ,.6 ,'red');
        $circle_object1 = closed_circle(1.8 ,.6 ,'black' );
         $graph -> stamps($circle_object1);

        $circle_object1 = closed_circle(2.5 ,.6 ,'black' );
         $graph -> stamps($circle_object1);

$graph->moveTo(2.5,.6);
$graph->lineTo(2.2 ,.6 ,'red');
        $circle_object1 = closed_circle(2.2 ,.6 ,'green' );
         $graph -> stamps($circle_object1);
$graph->moveTo(2.5,.6);
$graph->lineTo(2.3 ,.85 ,'red');
        $circle_object1 = closed_circle(2.3 ,.85 ,'green' );
         $graph -> stamps($circle_object1);
$graph->moveTo(2.5,.6);
$graph->lineTo(2.5 ,.9 ,'red');
        $circle_object1 = closed_circle(2.5 ,.9 ,'black' );
         $graph -> stamps($circle_object1);

$graph->moveTo(2.5,.6);
$graph->lineTo(2.7 ,.85 ,'red');
        $circle_object1 = closed_circle(2.7 ,.85 ,'black' );
         $graph -> stamps($circle_object1);
$graph->moveTo(2.5,.6);
$graph->lineTo(2.8 ,.6 ,'red');
        $circle_object1 = closed_circle(2.8 ,.6 ,'black' );
         $graph -> stamps($circle_object1);


        $circle_object1 = closed_circle(3.5 ,.6 ,'red' );
         $graph -> stamps($circle_object1);

$graph->moveTo(3.5,.6);
$graph->lineTo(3.2 ,.6 ,'red');
        $circle_object1 = closed_circle(3.2 ,.6 ,'green' );
         $graph -> stamps($circle_object1);
$graph->moveTo(3.5,.6);
$graph->lineTo(3.3 ,.85 ,'red');
        $circle_object1 = closed_circle(3.3 ,.85 ,'green' );
         $graph -> stamps($circle_object1);
$graph->moveTo(3.5,.6);
$graph->lineTo(3.5 ,.9 ,'red');
        $circle_object1 = closed_circle(3.5 ,.9 ,'green' );
         $graph -> stamps($circle_object1);

$graph->moveTo(3.5,.6);
$graph->lineTo(3.7 ,.85 ,'red');
        $circle_object1 = closed_circle(3.7 ,.85 ,'black' );
         $graph -> stamps($circle_object1);
$graph->moveTo(3.5,.6);
$graph->lineTo(3.8 ,.6 ,'red');
        $circle_object1 = closed_circle(3.8 ,.6 ,'black' );
         $graph -> stamps($circle_object1);


        $circle_object1 = closed_circle(4.5 ,.6 ,'black' );
         $graph -> stamps($circle_object1);

$graph->moveTo(4.5,.6);
$graph->lineTo(4.2 ,.6 ,'red');
        $circle_object1 = closed_circle(4.2 ,.6 ,'green' );
         $graph -> stamps($circle_object1);
$graph->moveTo(4.5,.6);
$graph->lineTo(4.3 ,.85 ,'red');
        $circle_object1 = closed_circle(4.3 ,.85 ,'green' );
         $graph -> stamps($circle_object1);
$graph->moveTo(4.5,.6);
$graph->lineTo(4.5 ,.9 ,'red');
        $circle_object1 = closed_circle(4.5 ,.9 ,'green' );
         $graph -> stamps($circle_object1);

$graph->moveTo(4.5,.6);
$graph->lineTo(4.7 ,.85 ,'red');
        $circle_object1 = closed_circle(4.7 ,.85 ,'green' );
         $graph -> stamps($circle_object1);
$graph->moveTo(4.5,.6);
$graph->lineTo(4.8 ,.6 ,'red');
        $circle_object1 = closed_circle(4.8 ,.6 ,'black' );
         $graph -> stamps($circle_object1);

($WID,$HEI)=(100,120);

$gra = init_graph(0,-.2, 1,1,size=>[$WID,$HEI]);
$gra->moveTo(.5,.03);
$gra->lineTo(.5 ,.6 ,'black');
        $circle_object1 = closed_circle(.5 ,.6 ,'black' );
         $gra -> stamps($circle_object1);

$gra->moveTo(.5,.6);
$gra->lineTo(.2 ,.6 ,'red');
        $circle_object1 = closed_circle(.2 ,.6 ,'green' );
         $gra -> stamps($circle_object1);
$gra->moveTo(.5,.6);
$gra->lineTo(.3 ,.85 ,'red');
        $circle_object1 = closed_circle(.3 ,.85 ,'green' );
         $gra -> stamps($circle_object1);
$gra->moveTo(.5,.6);
$gra->lineTo(.5 ,.9 ,'red');
        $circle_object1 = closed_circle(.5 ,.9 ,'green' );
         $gra -> stamps($circle_object1);

$gra->moveTo(.5,.6);
$gra->lineTo(.7 ,.85 ,'red');
        $circle_object1 = closed_circle(.7 ,.85 ,'green' );
         $gra -> stamps($circle_object1);
$gra->moveTo(.5,.6);
$gra->lineTo(.8 ,.6 ,'red');
        $circle_object1 = closed_circle(.8 ,.6 ,'green' );
         $gra -> stamps($circle_object1);

  
         $label1=  new Label(.5 ,-.01  , 'Diagram W ','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $gra -> lb($label1);

$grb = init_graph(0,-.2, 1,1,size=>[$WID,$HEI]);
$grb->moveTo(.5,.03);
$grb->lineTo(.5 ,.6 ,'black');
        $circle_object1 = closed_circle(.5 ,.6 ,'red' );
         $grb -> stamps($circle_object1);

$grb->moveTo(.5,.6);
$grb->lineTo(.2 ,.6 ,'red');
        $circle_object1 = closed_circle(.2 ,.6 ,'black' );
         $grb -> stamps($circle_object1);
$grb->moveTo(.5,.6);
$grb->lineTo(.3 ,.85 ,'red');
        $circle_object1 = closed_circle(.3 ,.85 ,'black' );
         $grb -> stamps($circle_object1);
$grb->moveTo(.5,.6);
$grb->lineTo(.5 ,.9 ,'red');
        $circle_object1 = closed_circle(.5 ,.9 ,'black' );
         $grb -> stamps($circle_object1);

$grb->moveTo(.5,.6);
$grb->lineTo(.7 ,.85 ,'red');
        $circle_object1 = closed_circle(.7 ,.85 ,'black' );
         $grb -> stamps($circle_object1);
$grb->moveTo(.5,.6);
$grb->lineTo(.8 ,.6 ,'red');
        $circle_object1 = closed_circle(.8 ,.6 ,'black' );
         $grb -> stamps($circle_object1);

  
         $label1=  new Label(.5 ,-.01  , 'Diagram X ','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $grb -> lb($label1);


$grc = init_graph(0,-.2, 1,1,size=>[$WID,$HEI]);
$grc->moveTo(.5,.03);
$grc->lineTo(.5 ,.6 ,'red');
        $circle_object1 = closed_circle(.5 ,.6 ,'red' );
         $grc -> stamps($circle_object1);

$grc->moveTo(.5,.6);
$grc->lineTo(.2 ,.6 ,'red');
        $circle_object1 = closed_circle(.2 ,.6 ,'green' );
         $grc -> stamps($circle_object1);
$grc->moveTo(.5,.6);
$grc->lineTo(.3 ,.85 ,'red');
        $circle_object1 = closed_circle(.3 ,.85 ,'green' );
         $grc -> stamps($circle_object1);
$grc->moveTo(.5,.6);
$grc->lineTo(.5 ,.9 ,'red');
        $circle_object1 = closed_circle(.5 ,.9 ,'green' );
         $grc -> stamps($circle_object1);

$grc->moveTo(.5,.6);
$grc->lineTo(.7 ,.85 ,'red');
        $circle_object1 = closed_circle(.7 ,.85 ,'green' );
         $grc -> stamps($circle_object1);
$grc->moveTo(.5,.6);
$grc->lineTo(.8 ,.6 ,'red');
        $circle_object1 = closed_circle(.8 ,.6 ,'green' );
         $grc -> stamps($circle_object1);

  
         $label1=  new Label(.5 ,-.01  , 'Diagram Y ','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $grc -> lb($label1);


$grd = init_graph(0,-.2, 1,1,size=>[$WID,$HEI]);
$grd->moveTo(.5,.03);
$grd->lineTo(.5 ,.6 ,'black');
        $circle_object1 = closed_circle(.5 ,.6 ,'black' );
         $grd -> stamps($circle_object1);

$grd->moveTo(.5,.6);
$grd->lineTo(.2 ,.6 ,'red');
        $circle_object1 = closed_circle(.2 ,.6 ,'black' );
         $grd -> stamps($circle_object1);
$grd->moveTo(.5,.6);
$grd->lineTo(.3 ,.85 ,'red');
        $circle_object1 = closed_circle(.3 ,.85 ,'green' );
         $grd -> stamps($circle_object1);
$grd->moveTo(.5,.6);
$grd->lineTo(.5 ,.9 ,'red');
        $circle_object1 = closed_circle(.5 ,.9 ,'green' );
         $grd -> stamps($circle_object1);

$grd->moveTo(.5,.6);
$grd->lineTo(.7 ,.85 ,'red');
        $circle_object1 = closed_circle(.7 ,.85 ,'green' );
         $grd -> stamps($circle_object1);
$grd->moveTo(.5,.6);
$grd->lineTo(.8 ,.6 ,'red');
        $circle_object1 = closed_circle(.8 ,.6 ,'green' );
         $grd -> stamps($circle_object1);

  
         $label1=  new Label(.5 ,-.01  , 'Diagram z ','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $grd -> lb($label1);




#NOTE  Actual size of box is in the image below
TEXT(beginproblem());
$radio=new_multiple_choice();
$radio->qa("Which diagram comes next in the pattern? ", "Diagram Y ");
#FIRST PAREN IS QUESTION, SECOND PAREN IS CORRECT ANSWER
$radio->extra("Diagram W", "Diagram X", " Diagram Z");
BEGIN_TEXT
Look at this pattern.
$BR
\{ image( insertGraph($graph), tex_size=>$TEXSIZE,
    height=>$HEIGHT, width=>$WIDTH
    ) \}
$PAR
\{$radio->print_q()\}
\{$radio->print_a()\}
$PAR
\{ image( insertGraph($gra), tex_size=>$TEXSIZE,
    height=>$HEI, width=>$WID
    ) \}

\{ image( insertGraph($grb), tex_size=>$TEXSIZE,
    height=>$HEI, width=>$WID
    ) \}
\{ image( insertGraph($grc), tex_size=>$TEXSIZE,
    height=>$HEI, width=>$WID
    ) \}
\{ image( insertGraph($grd), tex_size=>$TEXSIZE,
    height=>$HEI, width=>$WID
    ) \}


END_TEXT
ANS(radio_cmp($radio->correct_ans()));
BEGIN_SOLUTION
$PAR Solution $PAR
The pattern has two parts.$BR  The first part involves the center node which alternates between black and red.$BR  In the next pattern it should be red.$BR The second part involves the number of green nodes on the lines coming from$BR the center node.  In the five diagrams at the top this starts at 0 and increases$BR
by one as you go rightward.  Thus in the next diagram it should be 5.  $PAR
Thus the next diagram is Diagram Y 
END_SOLUTION

COMMENT('MathObject version');
ENDDOCUMENT();
## DBsubject('NECAP')
## DBchapter('Grade 4')
## DBsection('2009')

$graph->moveTo(,);
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');
$graph->lineTo( , ,'black');

$graph->moveTo(,);
$graph->lineTo( , ,'black');
$graph->arrowTo( , ,'black',2);
         $label1=  new Label( ,  , ' ','black',('center','center'));
         $label1->font(GD::Font->Giant);
         $graph -> lb($label1);
         $label2=  new Label( ,  , ' ','black',('center','center'));
         $label2->font(GD::Font->Giant);
         $graph -> lb($label2);
         $label3=  new Label( ,  , ' ','black',('center','center'));
         $label3->font(GD::Font->Giant);
         $graph -> lb($label3);
         $label4=  new Label( ,  , ' ','black',('center','center'));
         $label4->font(GD::Font->Giant);
         $graph -> lb($label4);
         $label5=  new Label( ,  , ' ','black',('center','center'));
         $label5->font(GD::Font->Giant);
         $graph -> lb($label5);
         $label6=  new Label( ,  , ' ','black',('center','center'));
         $label6->font(GD::Font->Giant);
         $graph-> lb($label6);
         $label7=  new Label( ,  , ' ','black',('center','center'));
         $label7->font(GD::Font->Giant);
         $graph -> lb($label7);
         $label8=  new Label( ,  , ' ','black',('center','center'));
         $label8->font(GD::Font->Giant);
         $graph -> lb($label8);
         $label9=  new Label( ,  , ' ','black',('center','center'));
         $label9->font(GD::Font->Giant);
         $graph -> lb($label9);
         $label10=  new Label( ,  , ' ','black',('center','center'));
         $label10->font(GD::Font->Giant);
         $graph -> lb($label10);
         $label11=  new Label( ,  , ' ','black',('center','center'));
         $label11->font(GD::Font->Giant);
         $graph -> lb($label11);
         $label12=  new Label( ,  , ' ','black',('center','center'));
         $label12->font(GD::Font->Giant);
        $graph -> lb($label12);
         $label13=  new Label( ,  , ' ','black',('center','center'));
         $label13->font(GD::Font->Giant);
         $graph -> lb($label13);
         $label14=  new Label( ,  , ' ','black',('center','center'));
         $label14->font(GD::Font->Giant);
         $graph -> lb($label14);
         $label15=  new Label( ,  , ' ','black',('center','center'));
         $label15->font(GD::Font->Giant);
         $graph -> lb($label15);
         $label16=  new Label( ,  , ' ','black',('center','center'));
         $label16->font(GD::Font->Giant);
         $graph -> lb($label16);
         $label17=  new Label( ,  , ' ','black',('center','center'));
         $label17->font(GD::Font->Giant);
         $graph -> lb($label17);
         $label18=  new Label( ,  , ' ','black',('center','center'));
         $label18->font(GD::Font->Giant);
         $graph -> lb($label18);
         $label19=  new Label( ,  , ' ','black',('center','center'));
         $label19->font(GD::Font->Giant);
         $graph -> lb($label19);
         $label20=  new Label( ,  , ' ','black',('center','center'));
         $label20->font(GD::Font->Giant);
         $graph -> lb($label20);

--More--(57%)

#TWO HALVES OF A CIRCLE
$func = Compute("2+sqrt{1-(x-3)**2}");
$fund = Compute("2-sqrt{1-(x-3)**2}");
plot_functions( $graph, "$func for x in " .
"<2,4> using color:blue " .
"and weight:3");
plot_functions( $graph, "$fund for x in " .
"<$2,4> using color:blue " .
"and weight:1");

         $circle_object1 = closed_circle( , ,'black' );
         $graph -> stamps($circle_object1);
 the domain is
$xmin = -2;
$xmax = $root2 + 1;
# and the number of gridlines we graph
$xgrid = $xmax + 2;
$ygrid = $ymax - int($ymin) + 2;

$graph = init_graph($xmin, int($ymin)-1, $xmax,
$ymax+1, axes=>[0,0], grid=>[$xgrid,$ygrid],
size=>[150,150]);
$scale=100;
$poly = new GD::Polygon;
foreach $pt ([3,5], [4,5], [5,4], [5,3], [4,2], [3,2], [2,3], [2,4])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$blue = $graph->im->colorAllocate(100,100,255);
$graph->im->filledPolygon($poly,$blue);
$graph->im->setThickness(3);
$graph->im->openPolygon($poly,$graph->{colors}{black});
$graph->im->setThickness(1);

#arrow
$poly2 = new GD::Polygon;
foreach $pt ([3.75,1.23], [3.7,1.20], [3.7,1.26])
   {$poly2->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$black = $graph->im->colorAllocate(0,0,00);
$graph->im->filledPolygon($poly2,$black);
$graph->im->setThickness(3);
$graph->im->openPolygon($poly2,$graph->{colors}{black});
$graph->im->setThickness(1);

IF YOU ARE PRACTICING FOR THE NECAP EXAMINATION, DO THIS WITHOUT$BR A CALCULATO
 THIS IS A NECAP PROBLEM FOR WHICH A  CALCULATOR $BR WOULD NOT BE ALLOWED.$PAR 
 

IN THIS PROBLEM ON THE NECAP EXAM YOU WERE EXPECTED $BR
 TO SHOW YOUR WORK.  SOMETHING SIMILAR TO THE SOLUTION $BR
 ABOVE WOULD BE APPROPRIATE.