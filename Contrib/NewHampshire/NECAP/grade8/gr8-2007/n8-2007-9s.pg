DOCUMENT();
loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
"PGgraphmacros.pl",
"PGauxiliaryFunctions.pl", #for lcm, gcd,etc
);	

# make sure we're in the context we want
Context("Numeric");
sub tetrahedron
{#scale factor, lower left x, lower left y, angle of lower edge,dashed edges (1 or 0,
$pi=atan2(1,1)*4;
my $cs=shift; #scaling
my @x;
 my @y;
$x[0] =shift; # lower left coordinates,
$y[0]=shift;
my $ang=shift; # Angle of bottom side from horizontal (in radians, < pi/2).
my $dash=shift; 
$xhunit=$cs*cos($ang);#these are changes when moving analogue of horizontal
$yhunit=$cs*sin($ang);
$x[1]=$x[0]+$xhunit;
$y[1]=$y[0]+$yhunit;
$xvunit=$cs*cos($pi/2+$ang);#these are changes when moving analogue of vertical
$yvunit=$cs*sin($pi/2+$ang);
$x[2]=$x[0] + .5*$xhunit + .866*$xvunit;
$y[2]=$y[0] + .5*$yhunit + .866*$yvunit;
$x[3]=$x[0] +1.1*$xhunit +  .5*$xvunit; 
$y[3]=$y[0] +1.1 *$yhunit +  .5*$yvunit; 
$graph->moveTo($x[1],$y[1]);
$graph->lineTo($x[0] ,$y[0] ,'black');
$graph->lineTo($x[2] ,$y[2] ,'black');
$graph->lineTo($x[1],$y[1],'black');
$graph->lineTo($x[3],$y[3],'black');
$graph->lineTo($x[2],$y[2],'black');
$graph->moveTo($x[3],$y[3]);
if($dash==1){$graph->lineTo($x[0] ,$y[0] ,'black',1,'dashed');}
#warn "ang=$ang, cs=$cs, xhunit=$xhunit,yhunit=$yhunit,xvunit=$xvunit,yvunit=$yvunit ";
#for(my $i=0;$i<4;$i++) {warn "for $i, ($x[$i],$y[$i]) ";}
}
sub cube
{#scale factor, lower left x, lower left y, angle of lower edge,dashed edges (1 or 0,
$pi=atan2(1,1)*4;
my $cs=shift; #scaling for cube
my @x;
 my @y;
$x[0] =shift; # lower left coordinates,
$y[0]=shift;
my $ang=shift; # Angle of bottom side from horizontal (in radians, < pi/2).
my $dash=shift; 
$xhunit=$cs*cos($ang);#these are changes when moving analogue of horizontal
$yhunit=$cs*sin($ang);
$x[1]=$x[0]+$xhunit;
$y[1]=$y[0]+$yhunit;
$xvunit=$cs*cos($pi/2+$ang);#these are changes when moving analogue of vertical
$yvunit=$cs*sin($pi/2+$ang);
$x[2]=$x[0]+$xvunit;
$y[2]=$y[0]+$yvunit;
$x[3]=$x[1]+$xvunit;
$y[3]=$y[1]+$yvunit;
$graph->moveTo($x[1],$y[1]);
$graph->lineTo($x[3] ,$y[3] ,'black');
$graph->lineTo($x[2] ,$y[2] ,'black');
$p=6;$a=6;$b=3;
$x[5]=$x[0]+.3*$xhunit+ .6*$xvunit; 
$y[5]=$y[0]+.3*$yhunit+ .6*$yvunit; 
$x[6]=$x[1]+.3*$xhunit+ .6*$xvunit;
$y[6]=$y[1]+.3*$yhunit+ .6*$yvunit;
$x[4]=$x[6]+.1*$xhunit+ .9*$xvunit;
$y[4]=$y[6]+.1*$yhunit+ .9*$yvunit;
$x[7]=$x[2]+.55*$xhunit+ .48*$xvunit;
$y[7]=$y[2]+.55*$yhunit+ .48*$yvunit;

$graph->moveTo($x[1],$y[1]);
$graph->lineTo($x[0] ,$y[0] ,'black');
$graph->lineTo($x[2] ,$y[2] ,'black');
$graph->moveTo($x[0],$y[0]);
if($dash==1){$graph->lineTo($x[5] ,$y[5] ,'black',1,'dashed');}
if($dash==1){$graph->lineTo($x[6] ,$y[6] ,'black',1,'dashed');}
$graph->moveTo($x[6],$y[6]);
$graph->lineTo($x[4] ,$y[4] ,'black');
$graph->lineTo($x[7] ,$y[7] ,'black');
$graph->moveTo($x[1],$y[1]);
$graph->lineTo($x[6] ,$y[6] ,'black');
$graph->moveTo($x[2],$y[2]);
$graph->lineTo($x[7] ,$y[7] ,'black');
$graph->moveTo($x[3],$y[3]);
$graph->lineTo($x[4] ,$y[4] ,'black');
$graph->moveTo($x[5],$y[5]);
if($dash==1){$graph->lineTo($x[7] ,$y[7] ,'black',1,'dashed');}
#for(my $i=0;$i<8;$i++) {warn "for $i, ($x[$i],$y[$i]) ";}
}
sub arrow
{#scale factor, angle of shaft, x coord of shaftpoint, y coord of shaftpoint
 #length of unscaled arrowhead =1, point at shaftpoint at (0,0)
my $cs=shift;
my $ang=shift; #0 is horizontal shaft pointed leftward
my $pi=atan2(1,1)*4;
my @x;
my @y;
 $x[0]=shift;
 $y[0]=shift;
 $x[1]=$x[0]+$cs*cos($ang);
 $y[1]=$y[0]+$cs*sin($ang);
 $x[2]=$x[0]+$cs*cos($ang+$pi/2)/2;
 $y[2]=$y[0]+$cs*sin($ang+$pi/2)/2;
 $x[3]=$x[0]-$cs*cos($ang+$pi/2)/2;
 $y[3]=$y[0]-$cs*sin($ang+$pi/2)/2;
#warn "ang=$ang,x[0]=$x[0], y[0]=$y[0],x[1]=$x[1], y[1]=$y[1],x[2]=$x[2], y[2]=$y[3],x[3]=$x[3], y[3]=$y[3]";
my $scale=100;
my $poly = new GD::Polygon;
foreach $pt ([$x[1],$y[1]], [$x[2],$y[2]], [$x[3],$y[3]])
   {$poly->addPt($pt->[0]*$scale,$pt->[1]*$scale)}
$black = $graph->im->colorAllocate(0,0,00);
$graph->im->filledPolygon($poly,$black);
$graph->im->setThickness(3);
$graph->im->openPolygon($poly,$graph->{colors}{black});
$graph->im->setThickness(1);
}

($WIDTH,$HEIGHT,$TEXSIZE)=(800,400,300);
$pi=atan2(1,1)*4;
# now initialize the graph
$graph = init_graph(0,0, 8,4,size=>[$WIDTH,$HEIGHT]);
$graph->moveTo(.1,3);
$graph->lineTo(3.8 ,3 ,'black',3);
$graph->moveTo(7.9,3);
$graph->lineTo(4.2 ,3 ,'black',3);
$graph->moveTo(1.9,3);
$graph->lineTo(1.9 ,2.9 ,'black',3);
$graph->lineTo(6.1 ,2.9 ,'black',3);
$graph->lineTo(6.1 ,3 ,'black',3);
$graph->moveTo(4,2.87);
$graph->lineTo(4 ,2.5 ,'black');
arrow(.1,$pi/2,4 ,1.4 );

$graph->moveTo(.1,1);
$graph->lineTo(3.8 ,1 ,'black',3);
$graph->moveTo(7.9,1);
$graph->lineTo(4.2 ,1 ,'black',3);
$graph->moveTo(1.9,1);
$graph->lineTo(1.9 ,.9 ,'black',3);
$graph->lineTo(6.1 ,.9 ,'black',3);
$graph->lineTo(6.1 ,1 ,'black',3);
$graph->moveTo(4,.87);
$graph->lineTo(4 ,.5 ,'black');
arrow(.1,$pi/2,4 ,3.4 );


tetrahedron(.3  ,1,3.03,0,0);
tetrahedron(.3  ,1.7,3.03,0,0);
tetrahedron(.3  ,2.4,3.03,0,0);

$xcen=5.35; #coordinates of center
$ycen=.865;# measure y from top
$xrad=.25; #x radius (semi-major or semi-minor axis)
$yrad=.25;
$arcbegin=0; #begin arc - in degrees
$arcend=360; #end of acr
$graph->im->setThickness(1);

$graph->im->arc(100*$xcen,100*$ycen,100*$xrad,100*$yrad,0,360,$graph->{colors}{black});
$xcen=6.35; #coordinates of center
$graph->im->arc(100*$xcen,100*$ycen,100*$xrad,100*$yrad,0,360,$graph->{colors}{black});
$xcen=5.25; #coordinates of center
$ycen=2.865;# measure y from top
$graph->im->arc(100*$xcen,100*$ycen,100*$xrad,100*$yrad,0,360,$graph->{colors}{black});
$xcen=6.15; #coordinates of center
$graph->im->arc(100*$xcen,100*$ycen,100*$xrad,100*$yrad,0,360,$graph->{colors}{black});
$xcen=6.60; #coordinates of center
$graph->im->arc(100*$xcen,100*$ycen,100*$xrad,100*$yrad,0,360,$graph->{colors}{black});
$xcen=7.05; #coordinates of center
$graph->im->arc(100*$xcen,100*$ycen,100*$xrad,100*$yrad,0,360,$graph->{colors}{black});
$xcen=5.7; #coordinates of center
$graph->im->arc(100*$xcen,100*$ycen,100*$xrad,100*$yrad,0,360,$graph->{colors}{black});
$xcen=7.5; #coordinates of center
$graph->im->arc(100*$xcen,100*$ycen,100*$xrad,100*$yrad,0,360,$graph->{colors}{black});
$xcen=2.6; #coordinates of center
$graph->im->arc(100*$xcen,100*$ycen,100*$xrad,100*$yrad,0,360,$graph->{colors}{black});
$xcen=3.05; #coordinates of center
$graph->im->arc(100*$xcen,100*$ycen,100*$xrad,100*$yrad,0,360,$graph->{colors}{black});
cube(.18,.5,1.03,0,0);
cube(.18,1,1.03,0,0);
cube(.18,1.5,1.03,0,0);
cube(.18,2,1.03,0,0);
cube(.18,4.2,1.03,0,0);
cube(.18,4.7,1.03,0,0);

$radio=new_multiple_choice();
$radio->qa("How many tetrahedrons weigh the same as one cube? ", "3 ");
#FIRST PAREN IS QUESTION, SECOND PAREN IS CORRECT ANSWER
$radio->extra("\(\frac{2}{3}\) ", "\(1\frac{1}{2}\) ", "2  ");
BEGIN_TEXT
These scales are balanced.
$BR
\{ image( insertGraph($graph), tex_size=>$TEXSIZE,
    height=>$HEIGHT, width=>$WIDTH
    ) \}
$PAR
Remember that tetrahedrons have four triangular faces.$BR
\{$radio->print_q()\}
\{$radio->print_a()\}

END_TEXT
ANS(radio_cmp($radio->correct_ans()));
BEGIN_SOLUTION
$PAR Solution $PAR
We will let \(t\) stand for the weight of a tetrahedron, \(c\) stand for the  weight $BR of a cube, and \(b\) stand for the weight of a ball. Then we have equattions $BR that we can get by looking at the balanced scales $PAR
\(3t=2b\) and $PAR \(4c+2b=2c+6b\).$PAR
We can subtract \( 2c+2b\) from each side of the second equation to get$PAR
\(2c=4b\) and now, if we divide both sides by 2, we get \(c=2b\)
$PAR
Now, using the equations   \(c=2b\) and \(3t=2b\) we get \(c=3t\)$BR so a cube weighs as much as three tetrahedrons.
END_SOLUTION

COMMENT('MathObject version');
ENDDOCUMENT();


## DBsubject('NECAP')
## DBchapter('Grade 8')
## DBsection('2007')

