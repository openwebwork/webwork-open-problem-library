%!PS-Adobe-2.0 EPSF-1.2
%%Creator: MiniCad+ 4.0
%%Title: hw6p7f.eps
%%CreationDate: 10/2/1994
%%Pages: 0
%%BoundingBox:147 488 463 606
%%EndCommentssave% Basic Definitions/gs {gsave} def/gr {grestore} def/t {translate} def/sc {scale} def/sg {setgray} def/srgb {setrgbcolor} def/ff {findfont} def/mf {makefont} def/sf {setfont} def/slw {setlinewidth} def/str {stroke} def/slc {setlinecap} def% Polyline operators/pl				% x y pl x y{transform0.25 sub round 0.25 add exch0.25 sub round 0.25 add exchitransform} def/setstrokeadjust where	{	pop true setstrokeadjust	/c				% x1 y1 x2 y2 x3 y3 c -	{curveto} def	/C /c load def	/v				% x2 y2 x3 y3 v -	{currentpoint 6 2 roll curveto} def	/V /v load def	/y				% x1 y1 x2 y2 y -	{2 copy curveto} def	/Y /y load def	/l				% x y l -	{lineto} def	/L /l load def	/m				% x y m -	{moveto} def	/dot	{currentpoint transform exch 1 add exch itransform lineto} def	}	{%else	/c	{pl curveto} def	/C /c load def	/v	{currentpoint 6 2 roll pl curveto} def	/V /v load def	/y	{pl 2 copy curveto} def	/Y /y load def	/l	{pl lineto} def	/L /l load def	/m	{pl moveto} def	/dot	{currentpoint transform exch 1 add exch itransform lineto} def}ifelse% Rectangle: left top right bottom R -/rectangleDict 4 dict def/R	{rectangleDict begin		/bottom exch def		/right exch def		/top exch def		/left exch def		right bottom m		right top L		left top L		left bottom L		right bottom L		closepath	end}bind def% Oval: left top right bottom OV -/ovalDict 10 dict def/OV	{ovalDict begin		/bottom exch def 		/right exch def		/top exch def		/left exch def		/yrad bottom top sub 2 div def		/xrad right left sub 2 div def		/y yrad top add def		/x xrad left add def		x y t xrad yrad sc		newpath 0 0 1 0 360 arc closepath		1 xrad div 1 yrad div sc	% Reverse scaling.	end}bind def% Rounded Rectangle: left top right bottom ovalwidth ovalheight RR -/rRectangleDict 10 dict def/RR {	rRectangleDict begin	2 div /hvy exch def	2 div /hvx exch def	/bottom exch def	/right exch def	/top exch def	/left exch def	/nleft hvx left add hvx div def	/ntop hvy top add hvy div def	/nright right hvx sub hvx div def	/nbottom bottom hvy sub hvy div def	hvx hvy sc	newpath	nright nbottom 1 90 0 arcn	nright ntop 1 360 270 arcn	nleft ntop 1 270 180 arcn	nleft nbottom 1 180 90 arcn	closepath	1 hvx div 1 hvy div sc	end}bind def% Arc: left top right bottom startangle endangle A -/arcDict 12 dict def/A {	arcDict begin	/endangle exch def	/startangle exch def	/bottom exch def	/right exch def	/top exch def	/left exch def	/yrad bottom top sub 2 div def	/y yrad top add def	/xrad right left sub 2 div def	/x xrad left add def	x y t xrad yrad neg sc	0 0 1 startangle endangle arc	1 xrad div 1 yrad neg div sc	% Reverse scaling.	end}bind def% Polygon: xn yn ... x1 y1 n-1 P -/polyDict 1 dict def/P {	polyDict begin	/numOfPoints exch def	m numOfPoints {L} repeat	end}bind def% Pattern fill: fR fG fB bR bG bB [p0 ... p7] patfill -/fillDict 11 dict def/patfill {	fillDict begin	gs	/fa exch def				% Grab pattern.	srgb						% Set background color.	17.3611 17.3611 sc		% Scale back to 72 dpi from 1250.	flattenpath pathbbox		% Get path bounding box.	/ury exch def	/urx exch def	/lly exch def	/llx exch def			% Get edges.	clip	newpath	llx lly m	llx ury L	urx ury L	urx lly L	closepath fill			% Fill in background color.	srgb						% Set foreground color.	/w urx llx sub ceiling cvi def	/h ury lly sub ceiling cvi def	/bytes w 8 div ceiling cvi def	/patstr bytes 8 mul string def	/row 0 def	/patproc {		0 1 7 {			/row exch def			row bytes mul 1 row 1 add bytes mul 1 sub			{patstr exch fa row 8 mod get put} for		} for		patstr	} def	llx lly t	w h sc	w h true [w 0 0 h 0 0] patproc imagemask	gr	end}bind def% Outline string show: string olshow -/outlinedict 1 dict def/olshow {	outlinedict begin	/cs 1 string def	{		cs 0 3 -1 roll put	% Stuff the char into the string cs.		gs 1 sg cs show gr	% Paint the char white and move back.		cs true charpath		currentpoint str m	% Draw char outline.	} forall	end}bind def% Shadow string show: string shadow-x shadow-y shshow -/shadowdict 3 dict def/shshow {	shadowdict begin	/shady exch def	/shadx exch def	/cs 1 string def	{		cs 0 3 -1 roll put	% Stuff the char into the string cs.		currentpoint		shadx shady rmoveto	% Draw shadow.		cs show m		gs 1 sg cs show gr	% Paint char white.		cs true charpath		currentpoint str m	% Draw char outline.		shadx 0 rmoveto		% Move to next char position.	} forall	end}bind def% Text Encoding Procedure/Z					% array literal literal direction Z -{popfindfont begincurrentdict dup length 1 add dict begin{1 index /FID ne {def} {pop pop} ifelse} forall/FontName exch def dup length 0 ne{	/Encoding Encoding 256 array copy def	0 exch	{		dup type /nametype eq		{Encoding 2 index 2 index put pop 1 add}		{exch pop} ifelse	} forall} if popcurrentdict dup end end/FontName get exch definefont pop} def%%EndProloggs0 792 t0.058 -0.058 sc2 slcgs5074 4412 5076 4387 5080 4366 5086 4346 5094 4327 5104 4308 5115 4290 5128 4274 5142 4259 5158 4245 5176 4233 5194 4222 5213 4213 5233 4206 5253 4202 5274 4198 5295 4198 5316 4198 5337 4202 5357 4206 5377 4213 5396 4222 5414 4233 5432 4245 5448 4259 5462 4274 5475 4290 5486 4308 5496 4327 5504 4346 5510 4366 5514 4387 5516 4408 5516 4429 5514 4450 5510 4471 5504 4491 5496 4510 5486 4529 5475 4547 5462 4563 5451 4575 5295 4419 42 P1 sg fillgrgs5074 4412 5076 4387 5080 4366 5086 4346 5094 4327 5104 4308 5115 4290 5128 4274 5142 4259 5158 4245 5176 4233 5194 4222 5213 4213 5233 4206 5253 4202 5274 4198 5295 4198 5316 4198 5337 4202 5357 4206 5377 4213 5396 4222 5414 4233 5432 4245 5448 4259 5462 4274 5475 4290 5486 4308 5496 4327 5504 4346 5510 4366 5514 4387 5516 4408 5516 4429 5514 4450 5510 4471 5504 4491 5496 4510 5486 4529 5475 4547 5462 4563 5451 4575 41 P1.25 slw 0 sg strgrgs0 slcnewpath5387.625 4198.625 5828.375 4639.375 315 225 A1.25 slw 0 sg strgrgs0 slcnewpath5699.625 4198.625 6141.375 4639.375 315 225 A1.25 slw 0 sg strgrgs0 slcnewpath6012.625 4198.625 6453.375 4639.375 315 225 A1.25 slw 0 sg strgrgs0 slcnewpath6324.625 4198.625 6766.375 4639.375 315 225 A1.25 slw 0 sg strgrgs6701 4575 6677 4547 6666 4529 6656 4510 6649 4491 6643 4471 6639 4450 6637 4429 6637 4408 6639 4387 6643 4366 6649 4346 6656 4327 6666 4308 6677 4290 6691 4274 6705 4259 6721 4245 6738 4233 6756 4222 6775 4213 6795 4206 6816 4202 6836 4198 6858 4198 6879 4198 6899 4202 6920 4206 6940 4213 6959 4222 6977 4233 6994 4245 7010 4259 7024 4274 7038 4290 7049 4308 7059 4327 7066 4346 7072 4366 7076 4387 7078 4408 7078 4412 41 P1.25 slw 0 sg strgrgs7078.625 4412.625 m7483.625 4412.625 L1.25 slw 0 sg strgrgs5074.625 4413.625 m4826.625 4412.625 L1.25 slw 0 sg strgrgs4825.75 4105.75 m4825.75 4730.75 L87.5 slw 0 sg strgrgs2795 4731 7483 4731 7483 3481 7795 3481 7795 5044 2795 5044 2795 4731 6 P closepath0 0 0 1 1 1 [76 210 83 45 150 89 70 179] patfillgrgs2795 4731 7483 4731 7483 3481 7795 3481 7795 5044 2795 5044 2795 4731 6 P closepath1.25 slw 0 sg strgrgs3420 4106 4045 4731 R0.93 sg fillgrgs3420.625 4106.625 4045.375 4731.375 R1.25 slw 0 sg strgrgs4514 4419 4356 4493 4356 4345 2 P0 sg fillgrgs3732.625 4419.625 m4514.625 4419.625 L1.25 slw 0 sg strgrgr%%Trailerrestore