%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: AppsoftDraw
%%CreationDate: Sun Oct  1 13:13:42 1995
%%For: teacher
%%DocumentFonts: (atend)
%%Pages: 0 0
%%BoundingBox: 0 0 219 496
%%NXNextStepVersion: 3.0
%%EndComments

%%BeginProcSet: /usr/lib/NextStep/printPackage.ps 3.0
%!
% NeXT Printing Package
% Version: 3.1
% Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
	exch dup 1 add dup UserObjects length gt{
		array dup 0 UserObjects putinterval
		/UserObjects exch def
	}{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
	1 index type /arraytype eq{
		exch 0 4 2 index length 1 sub{
			dup 3 add 1 exch{1 index exch get exch}for
			5 1 roll 5 index exec
		}for pop pop
	}{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
	gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
		{gsave __NXRectPath null concat stroke grestore}
		dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
	}{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/_NXLevel2 systemdict /languagelevel known {languagelevel 2 ge}{false}ifelse __NXdef
/xyshow{
	0 1 3 index length 1 sub{
		currentpoint 4 index 3 index 1 getinterval show
		3 index 3 index 2 mul 1 add get add exch
		3 index	3 index 2 mul get add exch moveto pop
	}for pop pop
}__NXbdef
/xshow{
	0 1 3 index length 1 sub{
		currentpoint 4 index 3 index 1 getinterval show
		exch 3 index 3 index get add exch moveto pop
	}for pop pop
}__NXbdef
/yshow{
	0 1 3 index length 1 sub{
		currentpoint 4 index 3 index 1 getinterval show
		3 index 3 index get add moveto pop
	}for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
	gsave newpath dup length 6 eq
	{exch uappend concat}{uappend}ifelse
	stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
	newpath dup length 6 eq{
		exch uappend __NXustrokepathMatrix currentmatrix exch concat
		strokepath setmatrix
	}{uappend strokepath}ifelse
} __NXbdef
/upath{
	[exch {/ucache cvx}if pathbbox /setbbox cvx
	 {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
	counttomark dup 2 add index dup length 3 -1 roll {
		2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
	}repeat pop pop pop
}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def
/_NXfstr 128 string dup 0 (_NX) putinterval def
/_NXfindfont /findfont load def
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {_NXfindfont}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {_NXfindfont dup /Encoding get StandardEncoding eq
   {	dup length dict exch
	{1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
	 dup /Encoding NextStepEncoding put definefont
	}{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXImageString {/__NXImageString where{pop}{/__NXImageString 4000 string __NXdef}ifelse __NXImageString}__NXbdef
/_NXDoImageOp{
	3 dict begin /parr 5 array def 1 index{dup}{1}ifelse /chans exch def
	chans 2 add 2 roll parr 0 chans getinterval astore pop
	5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
	4 index mul /totbytes exch def pop exch pop
	gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
	{0 1 chans 1 sub{parr exch get exec length totbytes exch sub /totbytes exch def}for totbytes 0 le{exit}if}loop end
}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
_NXLevel2{ 
	/NXCalibratedRGBColorSpace where{pop}{
		/NXCalibratedRGBColorSpace
		{mark /NXCalibratedRGB /ColorSpace findresource exch pop}stopped
		{cleartomark /NXCalibratedRGB[/CIEBasedABC 2 dict dup begin 
		/MatrixLMN[.4124 .2126 .0193 .3576 .7152 .1192 .1805 .0722 .9505]def
		/WhitePoint[.9505 1 1.089] def end] /ColorSpace defineresource}if def}ifelse
	/nxsetrgbcolor{NXCalibratedRGBColorSpace setcolorspace setcolor}__NXbdef
	/nxsetgray{dup dup nxsetrgbcolor}__NXbdef
	/_NXCalibratedImage{exch{array astore dup length true}{false}ifelse
		8 -1 roll{NXCalibratedRGBColorSpace setcolorspace}if
		8 dict dup 9 1 roll begin /ImageType 1 def /MultipleDataSources exch def
		currentcolorspace 0 get /Indexed eq{pop /Decode[0 2 6 index exp 1 sub]def}
		{2 mul dup array /Decode exch def 1 sub 0 1 3 -1 roll{Decode exch dup 2 mod put}for}ifelse
		/DataSource exch def /ImageMatrix exch def 
		/BitsPerComponent exch def /Height exch def /Width exch def end image}__NXbdef
} {
	/setcmykcolor{
		1.0 exch sub dup dup 6 -1 roll sub dup 0 lt{pop 0}if 5 1 roll
		4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll exch sub dup 0 lt{pop 0}if setrgbcolor}__NXbdef
	/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
	/colorimage{2 copy 3 ne or{_NXDoImageOp}{4 index dup 8 ne exch 4 ne and{_NXDoImageOp}{
		pop pop save 6 1 roll 12 dict begin/Proc exch def/Res 0 string def
		/Alloc{2 index length mul 2 add dup 2 index load length gt{1.2 mul round cvi string def}{pop pop}ifelse}def
		1 index 8 eq{/Unpack{.34 Alloc}def}{
			/Wid 4 index 3 mul def exch pop 8 exch/Str1 0 string def/Lim Wid def
			/Unpack{.67 Alloc/Str1 2 Alloc 0 exch Lim exch
				{dup -4 bitshift 17 mul Str1 exch 4 index exch put 15 and 17 mul Str1 exch 3 index 1 add exch put
				2 sub dup 0 le{0 lt Wid exch{exch 1 sub exch}if}if exch 2 add exch
				}forall/Lim exch def Str1 exch 0 exch getinterval
			}def
		}ifelse
		/Ops[{.3 mul add 1}{.59 mul add 2}{.11 mul add round cvi Res exch 2 index exch put 1 add 0.0 0}]def/Val 0.0 def/Phase 0 def
		{0 Val Phase Proc/Res Unpack{exch Ops exch get exec}forall/Phase exch def/Val exch def Res exch 0 exch getinterval}
		image end restore}ifelse}ifelse
	}__NXbdef
	/nxsetrgbcolor{setrgbcolor}__NXbdef /nxsetgray{setgray}__NXbdef
	/setpattern{pop .5 setgray}__NXbdef
	/_NXCalibratedImage{dup 1 eq {pop pop image}{colorimage}ifelse pop}__NXbdef
} ifelse
/_NXSetCMYKOrRGB where{pop}{
	mark{systemdict /currentwindow get exec}stopped
	{{pop pop pop setcmykcolor}}{{nxsetrgbcolor pop pop pop pop}}ifelse /_NXSetCMYKOrRGB exch def cleartomark
}ifelse
%%EndProcSet

_NXLevel2{/_NXsethsb where{pop}{/_NXsethsb /sethsbcolor load def}ifelse /sethsbcolor{_NXsethsb currentrgbcolor nxsetrgbcolor}def /setrgbcolor{nxsetrgbcolor}bind def /setgray{nxsetgray}bind def
}if
gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 250 dict def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /rpath {
    newpath moveto dup 0 exch rlineto exch 0 rlineto 0 exch neg rlineto closepath
} bind def /rfpath {
    /rad3 exch def /hh3 exch def /ww3 exch def /yy1 exch def /xx1 exch def /xx2 xx1 ww3 add def /yy2 yy1 hh3 add def newpath xx1 yy1 rad3 hh3 0 gt {
        add
    } {
        sub
    } ifelse moveto xx1 yy1 xx2 yy1 rad3 arcto 4 {
        pop
    } repeat xx2 yy1 xx2 yy2 rad3 arcto 4 {
        pop
    } repeat xx2 yy2 xx1 yy2 rad3 arcto 4 {
        pop
    } repeat xx1 yy2 xx1 yy1 rad3 arcto 4 {
        pop
    } repeat closepath
} bind def /rfill {
    gsave dodrawctm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        4 2 roll rpath crfilpat findfont exch filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        rectfill pop
    } ifelse grestore
} bind def /rstroke {
    gsave dodrawctm crlinalph setalpha crlinw setlinewidth crlincp setlinecap crlinjn setlinejoin crmtrlmt setmiterlimit usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse 4 2 roll rpath unpagectm concat strwpat {
        crstrpat findfont exch strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke pop
    } ifelse grestore
} bind def /rffill {
    gsave dodrawctm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse rfpath filwpat {
        crfilpat findfont exch filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill pop
    } ifelse grestore
} bind def /rfstroke {
    gsave dodrawctm crlinalph setalpha crlinw setlinewidth crlincp setlinecap crlinjn setlinejoin crmtrlmt setmiterlimit usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse rfpath unpagectm concat strwpat {
        crstrpat findfont exch strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke pop
    } ifelse grestore
} bind def /mkrpath {
    dodrawctm rpath unpagectm
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x 2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse crfrtarw {
        2 copy currentlinewidth exch p2x p2y p1x p1y arow
    } if crendarw {
        2 copy currentlinewidth exch p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont exch strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke pop
    } ifelse grestore
} bind def end
TopDrawDict begin /estroke {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont exch strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke pop
    } ifelse grestore
} bind def /efill {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont exch filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill pop
    } ifelse grestore
} bind def /apstroke {
    gsave dodrawctm /chord exch def /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc pie chord or {
        closepath
    } if crlinalph setalpha pie not chord not and {
        crfrtarw {
            2 copy crlinw exch gsave newpath angle1 1 add cos radius mul radius add angle1 1 add sin radius mul radius add moveto angle1 cos radius mul radius add angle1 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if crendarw {
            2 copy crlinw exch gsave newpath angle2 1 sub cos radius mul radius add angle2 1 sub sin radius mul radius add moveto angle2 cos radius mul radius add angle2 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if
    } if crlincp setlinecap crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont exch strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke pop
    } ifelse grestore
} bind def /apfill {
    gsave dodrawctm /chord exch def /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup 5 -2 roll arc pie chord or {
        closepath
    } if 1 xscale div 1 yscale div scale crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont exch filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill pop
    } ifelse grestore
} bind def /mkepath {
    dodrawctm /chord exch def /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or chord or {
        closepath
    } if unpagectm
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto 0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 218.59201 495.100006 rectclip
-125 -261.899994 translate
125 261.899994 218.59201 495.100006 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 2.6 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    3 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [4 4] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwpat false def
/txlnwittrans false def
/esave save def 1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc6mt astore 90 180 162 505 1.009346 1 53.5 false false 1 0 0 1 0 0 sc5mt astore apstroke esave restore
/esave save def 1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc6mt astore 90 180 270 505 -1.009346 1 53.5 false false 1 0 0 1 0 0 sc5mt astore apstroke esave restore
1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc5mt astore 0 -126 162 558 1 0 0 1 0 0 sc6mt astore ssl
1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc5mt astore 0 -216 270 558 1 0 0 1 0 0 sc6mt astore ssl
1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc5mt astore 126 432 72 -72 1 0 0 1 0 0 sc6mt astore rstroke
1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc5mt astore 234 342 72 -36 1 0 0 1 0 0 sc6mt astore rstroke
/crlinw 2.1 def
/crfilalph 0.5 def
/crfilred 0.5 def /crfilgrn 0.5 def /crfilblu 0.5 def /filinclr true def
0.97 0 0 0.97 14.601593 16.761597 sc6mt astore 45 1 -1 306 594 1.164 0 0 1.164 -192.529083 -81.007614 sc5mt astore efill
0.97 0 0 0.97 14.601593 16.761597 sc4mt astore 0.97 0 0 0.97 14.601593 16.761597 sc6mt astore 45 1 -1 306 594 1.164 0 0 1.164 -192.529083 -81.007614 sc5mt astore estroke
/crlinw 2.8 def
0.97 0 0 0.97 14.601593 16.761597 sc6mt astore 2.5 1 -1 486 307 0.97 0 0 0.97 -257.338409 262.1716 sc5mt astore efill
0.97 0 0 0.97 14.601593 16.761597 sc4mt astore 0.97 0 0 0.97 14.601593 16.761597 sc6mt astore 2.5 1 -1 486 307 0.97 0 0 0.97 -257.338409 262.1716 sc5mt astore estroke
/crlinw 2.6 def
1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc5mt astore 0 -180 216 738 1 0 0 1 0 0 sc6mt astore ssl
/txtdraw true def
/txlndraw true def
(M ) [29.988007 0 0 0] 416 478 /Helvetica [ 36 1 mul 0 0 36 0 0 ] [1 0 0 1 -272.395996 -95] dotx
(m ) [29.988007 0 0 0] 434 276 /Helvetica [ 36 1 mul 0 0 36 0 0 ] [1 0 0 1 -182.339996 38.631989] dotx
( ) [0 0] 302 271 /Helvetica [ 36 1 mul 0 0 36 0 0 ] [1 0 0 1 0 0] dotx
(T ) [21.996002 0 0 0] 425 580 /Helvetica [ 36 1 mul 0 0 36 0 0 ] [1 0 0 1 -200.492004 74.151978] dotx
(T ) [21.996002 0 0 0] 429 508 /Helvetica [ 36 1 mul 0 0 36 0 0 ] [1 0 0 1 -258 -46] dotx
(T) [0 0] 519 447 /Helvetica [ 36 1 mul 0 0 36 0 0 ] [1 0 0 1 -244 -53] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 540.995972 447 /Helvetica [ 24 1 mul 0 0 24 0 0 ] [1 0 0 1 -244 -53] dotx
(1 ) [13.343994 0 0 0] 372 714 /Helvetica [ 24 1 mul 0 0 24 0 0 ] [1 0 0 1 -92 -404] dotx
(2 ) [13.343994 0 0 0] 477 701 /Helvetica [ 24 1 mul 0 0 24 0 0 ] [1 0 0 1 -290 -248] dotx
(3 ) [13.343994 0 0 0] 496 660 /Helvetica [ 24 1 mul 0 0 24 0 0 ] [1 0 0 1 -253.528015 -13.544006] dotx
(2 ) [13.343994 0 0 0] 450 624 /Helvetica [ 24 1 mul 0 0 24 0 0 ] [1 0 0 1 -278 -248] dotx
(1 ) [13.343994 0 0 0] 442 524 /Helvetica [ 24 1 mul 0 0 24 0 0 ] [1 0 0 1 -152 -136] dotx
1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc5mt astore 72 0 396 684 1 0 0 1 -216 54 sc6mt astore ssl
/crlinw 1.8 def
1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc5mt astore -18 -18 414 702 1 0 0 1 -216 54 sc6mt astore ssl
1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc5mt astore -18 -18 450 702 1 0 0 1 -216 54 sc6mt astore ssl
1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc5mt astore -18 -18 432 702 1 0 0 1 -216 54 sc6mt astore ssl
1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc5mt astore -18 -18 468 702 1 0 0 1 -216 54 sc6mt astore ssl
1 0 0 1 0 0 sc4mt astore 1 0 0 1 0 0 sc5mt astore -18 -18 486 702 1 0 0 1 -216 54 sc6mt astore ssl
/txtdraw true def
/txlndraw true def
(M ) [29.988007 0 0 0] 416 478 /Helvetica [ 36 1 mul 0 0 36 0 0 ] [1 0 0 1 -123.395996 78] dotx
/txtdraw true def
/txlndraw true def
(p ) [13.343994 0 0 0] 450 624 /Helvetica [ 24 1 mul 0 0 24 0 0 ] [1 0 0 1 -127 -71] dotx
end
grestore
grestore
%%Trailer
%%DocumentFonts: Helvetica
