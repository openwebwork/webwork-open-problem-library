## DBsubject(Differential equations)
## DBchapter(Partial differential equations)
## DBsection(Separation of variables)
## Date(20/12/2015)
## Institution(METU-NCC)
## Author(Benjamin Walter)
## Level(5)
## TitleText1('Differential Equations')
## KEYWORDS('PDE', 'separation', 'variables')
########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",   
   "MathObjects.pl",
   "answerHints.pl",
   "parserMultiAnswer.pl",
   "unionLists.pl",
);

TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

###########
##
## Setup Contexts

Context("Numeric");
Context()->variables->{namePattern} = qr/[a-z][a-z0-9_]*'*/i;
Context()->variables->are(
  "X"=>"Real","X'"=>"Real","X''"=>"Real",
  "T"=>"Real","T'"=>"Real","T''"=>"Real",
  "x"=>"Real","t"=>"Real",
  "u"=>"Real", 
  "ux" =>["Real",TeX=>"u_x"],   "ut" =>["Real",TeX=>"u_t"],
  "uxx"=>["Real",TeX=>"u_{xx}"],"uxt"=>["Real",TeX=>"u_{xt}"],
  "utt"=>["Real",TeX=>"u_{tt}"],
  "lambda"=>["Real",TeX=>" \lambda "]);
$Default = Context()->copy;
Context()->variables->remove("u","ux","ut","uxx","utt","uxt");
$Default_nou = Context()->copy;
Context()->variables->remove("x","X","X'","X''");
$Default_nox = Context()->copy;
Context()->variables->remove("t","T","T'","T''");  
Context()->variables->add("x"=>"Real","X"=>"Real","X'"=>"Real","X''"=>"Real");
$Default_not = Context()->copy;

##########
##
## Setup  

my @c = (random(-1,1,2),  # Three possible terms
         random(-1,1,2),
         random(-1,1,2),0);

$c[random(0,3,1)] = 0;    # Randomly remove one term (or none)

my @n = (random(1,3,1),   # Three possible powers
         random(1,3,1),
         random(1,3,1));

if (random(0,1,1)==0) {              ### Setup pde and answers
  $PDE = Formula($Default,"t^$n[0]*uxx + 
                     $c[0]*x^$n[1]*uxt + 
                     $c[1]*x^$n[2]*ut + 
                     $c[2]*t^$n[0]*u")->reduce->reduce;
  $Xdiff1 = Formula($Default_nou,
           "(X'' + $c[2] X) / ($c[0] x^$n[1] X' + $c[1] x^$n[2] X)")->reduce;
  $Tdiff1 = Formula($Default_nou,
           "-T' / (t^$n[0] T)")->reduce;

  $Xdiff2 = Formula($Default_not,
           "X'' + $c[2] X + lambda*($c[0] x^$n[1] X' + $c[1] x^$n[2] X)")->reduce; 
  $Tdiff2 = Formula($Default_nox,
           "T' - lambda*(t^$n[0] T)")->reduce;
} else {                             ### Swap x and t
  $PDE = Formula($Default,"$c[1] t^$n[2] ux + 
                           $c[0] t^$n[1] uxt +
                                 x^$n[0] utt + 
                           $c[2] x^$n[0] u")->reduce;
  $Xdiff1 = Formula($Default_nou,
           "-X' / (x^$n[0] X)")->reduce;
  $Tdiff1 = Formula($Default_nou,
           "(T'' + $c[2] T) / ($c[0] t^$n[1] T' + $c[1] t^$n[2] T)")->reduce;

  $Xdiff2 = Formula($Default_not,
           "X' - lambda*(x^$n[0] X)")->reduce;
  $Tdiff2 = Formula($Default_nox,
           "T'' + $c[2] T + lambda*($c[0] t^$n[1] T' + $c[1] t^$n[2] T)")->reduce; 
}

$multians_Frac = MultiAnswer($Xdiff1, $Tdiff1)->with(
  singleResult => 1,
  checkTypes => 1,
  allowBlankAnswers => 0,
  format => "%s = %s = \(\lambda\)",
  tex_format => "%s = %s = \lambda",

  checker => sub {
      my ( $correct, $student, $ansHash ) = @_;
      my @c = @{$correct};
      my @s = @{$student};

      if (($s[0]== 1/$c[0]) || ($s[1]== 1/$c[1]) || # check if student entered
          ($s[0]==-1/$c[0]) || ($s[1]==-1/$c[1]) || #  answer upside-down
          ($s[0]== 1/$c[1]) || ($s[1]== 1/$c[0]) ||
          ($s[0]==-1/$c[1]) || ($s[1]==-1/$c[0])) {   
        Value::Error("Always simplify so that highest derivative is on top!");
      }

      if ((( $c[0]==$s[0]) && ( $c[1]==$s[1])) || # student could multiply
          ((-$c[0]==$s[0]) && (-$c[1]==$s[1])) || #   both by (-1) and be ok
          (( $c[1]==$s[0]) && ( $c[0]==$s[1])) || # student could enter in 
          ((-$c[1]==$s[0]) && (-$c[0]==$s[1]))) { #   reverse order 
        return 1;
      } else { 
        Value::Error("At least one answer is incorrect!");
      }
    }
);

$multians_DE = MultiAnswer($Xdiff2, $Tdiff2)->with(
  singleResult => 1,
  checkTypes => 1,
  allowBlankAnswers => 0,
  format => 
   "<table border='0' cellspacing='0' style='margin-left:auto;margin-right:auto;'>
     <tr><td>%s\( = 0\)</td></tr>
     <tr><td>%s\( = 0\)</td></tr>
    </table>",
  tex_format =>
   "\begin{array}{r} 
      %s = 0 \\ %s = 0 
    \end{array}",

  checker => sub {
      my ( $correct, $student, $ansHash ) = @_;
      my @c = @{$correct};
      my @s = @{$student};

      $c[2] = $c[0]->substitute("lambda"=>"-lambda");  # lambda vs -lambda
      $c[3] = $c[1]->substitute("lambda"=>"-lambda");  # doesn't matter
      if ((( $s[0]== $c[0] ) && ( $s[1]== $c[1] )) || 
          (( $s[0]== $c[2] ) && ( $s[1]== $c[3] ))) { 
        return 1;
      } else { 
         if ((( $s[0]==-$c[0] ) || ( $s[1]==-$c[1] )) ||
             (( $s[0]==-$c[2] ) || ( $s[1]==-$c[3] ))) {
           Value::Error("Highest derivative has \(-\) sign!$BR Multiply equation by \(-1\)!");
        }
        Value::Error("At least one answer is incorrect!");
      }
    }
);



##########
##
## Text

Context()->texStrings;
BEGIN_TEXT
${BITALIC}In your answers below, for the variable \(\lambda\) type the word
 ${EITALIC}${BBOLD}lambda${EBOLD}${BITALIC};
    for the derivative \(\frac{d}{dx} X(x)\) type
 ${EITALIC}${BBOLD}X' ${EBOLD}${BITALIC}; 
    for the double derivative  \(\frac{d^2}{dx^2} X(x)\) type
 ${EITALIC}${BBOLD}X''${EBOLD}${EITALIC}; 
    etc.${EITALIC}

$PAR
$HR
$PAR

Separate variables in the following partial differential equation
for \(u(x,t)\):

\[ $PDE = 0 \]

$BR

$SPACE $SPACE
\{ $multians_Frac->ans_rule(10) \} \( = \) 
\{ $multians_Frac->ans_rule(10) \} \( = \lambda \) $PAR

\{ BeginList('UL') \}

$ITEM
  DE for \(X(x)\): \{$multians_DE->ans_rule(20)\} \( = 0\)

$ITEMSEP

$ITEM
  DE for \(T(t)\,\): \{$multians_DE->ans_rule(20)\} \( = 0\)

\{ EndList('UL') \}

$SPACE $SPACE
(Simplify your answers so that the highest derivative in each equation is positive.)

END_TEXT
Context()->normalStrings;

###########
##
## Answers

ANS($multians_Frac->cmp());

ANS($multians_DE->cmp());

COMMENT("Slightly randomized");

ENDDOCUMENT();        
