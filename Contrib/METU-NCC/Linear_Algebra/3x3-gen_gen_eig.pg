## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Eigenvalues and eigenvectors)
## DBsection(Computing eigenvalues and eigenvectors)
## Date(21/11/2015)
## Institution(METU-NCC)
## Author(Benjamin Walter)
## Level(3)
## MO(1)
## Static(0)

#######################################
# Initialization

DOCUMENT();

loadMacros(
 "MatrixUnits.pl",              # Needed for GL3Z()
 "PGstandard.pl",
 "PGmatrixmacros.pl",
 "MathObjects.pl",
 "parserMultiAnswer.pl",
);


TEXT(beginproblem());

########################################
# Setup

Context('Matrix');

my $a, $e, $eig;

do {
 $a = GL3Z()*GL3Z();            # det = 1   Matrix of eigenvectors

 $eig = non_zero_random(-3,3,1); # eigenvalue

 $e = Matrix([
  [ $eig, non_zero_random(-2,2,1), non_zero_random(-2,2,1) ],
  [   0,             $eig,         non_zero_random(-2,2,1) ],
  [   0,               0,                      $eig        ]
 ]);
 
 $A = $a * $e *$a->inverse;      # matrix
} until (small_nonzero() );

sub small_nonzero {
  my $pass = 1;
  my $zeros = 0;
  for (my $i=1; $i<4; $i=$i+1) {
    for (my $j=1; $j<4; $j=$j+1) {
      if (abs($A->element($i,$j)) > 10) {
        $pass = 0;
      } if (($i != $j) && ($A->element($i,$j) == 0)) {
        $zeros = $zeros + 1;
      }
    }
  }
  return (($pass == 1) && ($zeros < 2));
}


#########################################
# v = eigenvector
# w = v-generalized
# u = w-generailzed v-generalized

my $v, $w, $u;
my $v1, $v2, $v3, $w1, $w2, $w3, $u1, $u2, $u3; 
my $A11, $A12, $A13, $A21, $A22, $A23, $A31, $A32, $A33; 

$v = $e->element(1,2)*$e->element(2,3)*$a->column(1); 
$w = $e->element(2,3)*$a->column(2) + $e->element(1,3)*$a->column(1); 
$u = $a->column(3); 

 $v1 = $v->element(1,1);  $w1 = $w->element(1,1);  $u1 = $u->element(1,1);
 $v2 = $v->element(2,1);  $w2 = $w->element(2,1);  $u2 = $u->element(2,1);
 $v3 = $v->element(3,1);  $w3 = $w->element(3,1);  $u3 = $u->element(3,1);

$A11 = $A->element(1,1); $A12 = $A->element(1,2); $A13 = $A->element(1,3);
$A21 = $A->element(2,1); $A22 = $A->element(2,2); $A23 = $A->element(2,3);
$A31 = $A->element(3,1); $A32 = $A->element(3,2); $A33 = $A->element(3,3);

##########################################
# Answer checker  
# Note Error::Value doesn't work in Matrix context

Context('Numeric');  

$multians = MultiAnswer($v1, $v2, $v3, $w1, $w2, $w3, $u1, $u2, $u3)->with(
    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>
    "<table border='0' cellspacing='0'>
    <tr>
      <td> \(\Biggl\lbrack\)</td>
      <td><table border='0' cellspacing='5'>
         <tr><td> %s </td></tr><tr><td> %s </td></tr><tr><td> %s </td></tr>
       </table></td>
      <td>\(\Biggr\rbrack\);&nbsp;&nbsp; \(\Biggl\lbrack\)</td>      
      <td><table border='0' cellspacing='5'>
         <tr><td> %s </td></tr><tr><td> %s </td></tr><tr><td> %s </td></tr>
       </table></td>
      <td>\(\Biggr\rbrack\);&nbsp;&nbsp; \(\Biggl\lbrack\)</td>
      <td><table border='0' cellspacing='5'>
         <tr><td> %s </td></tr><tr><td> %s </td></tr><tr><td> %s </td></tr>
       </table></td>
      <td>\(\Biggr\rbrack\)</td>
    </tr>
    </table>",
    tex_format =>
    "\left\lbrack \begin{array}{r} %s \\ %s \\ %s \end{array}\right\rbrack; \ \
     \left\lbrack \begin{array}{r} %s \\ %s \\ %s \end{array}\right\rbrack; \ \ 
     \left\lbrack \begin{array}{r} %s \\ %s \\ %s \end{array}\right\rbrack",

    checker => sub {
      my ($correct, $student, $answerHash ) = @_;
      my @c = @{$correct};
      my @s = @{$student};
      my $flag = 0;

      if ( $c[0]->typeMatch($s[0]) &&
           $c[1]->typeMatch($s[1]) &&
           $c[2]->typeMatch($s[2]) &&
           ( ($s[0] != 0) || ($s[1] != 0) || ($s[2] != 0) ) &&
           ($A11*$s[0]+$A12*$s[1]+$A13*$s[2] == $eig*$s[0]) &&
           ($A21*$s[0]+$A22*$s[1]+$A23*$s[2] == $eig*$s[1]) &&
           ($A31*$s[0]+$A32*$s[1]+$A33*$s[2] == $eig*$s[2]) ) { 
#           ( $A*Matrix([[$s[0]],[$s[1]],[$s[2]]]) == 
#                           $eig*Matrix([[$s[0]],[$s[1]],[$s[2]]]) ) )  {
        if ( $c[3]->typeMatch($s[3]) &&
             $c[4]->typeMatch($s[4]) &&
             $c[5]->typeMatch($s[5]) &&
             ( ($s[3] != 0) || ($s[4] != 0) || ($s[5] != 0) )  &&
             ($A11*$s[3]+$A12*$s[4]+$A13*$s[5] == $eig*$s[3] + $s[0]) &&
             ($A21*$s[3]+$A22*$s[4]+$A23*$s[5] == $eig*$s[4] + $s[1]) &&
             ($A31*$s[3]+$A32*$s[4]+$A33*$s[5] == $eig*$s[5] + $s[2]) ) { 
#             ( $A*Matrix([[$s[3]],[$s[4]],[$s[5]]]) == 
#                             $eig*Matrix([[$s[3]],[$s[4]],[$s[5]]])
#                                + Matrix([[$s[0]],[$s[1]],[$s[2]]]) ) )  {
          if ( $c[6]->typeMatch($s[6]) &&
               $c[7]->typeMatch($s[7]) &&
               $c[8]->typeMatch($s[8]) &&
               ( ($s[6] != 0) || ($s[7] != 0) || ($s[8] != 0) ) && 
               ($A11*$s[6]+$A12*$s[7]+$A13*$s[8] == $eig*$s[6] + $s[3]) &&
               ($A21*$s[6]+$A22*$s[7]+$A23*$s[8] == $eig*$s[7] + $s[4]) &&
               ($A31*$s[6]+$A32*$s[7]+$A33*$s[8] == $eig*$s[8] + $s[5]) ) { 
#               ( $A*Matrix([[$s[6]],[$s[7]],[$s[8]]]) == 
#                               $eig*Matrix([[$s[6]],[$s[7]],[$s[8]]])
#                                  + Matrix([[$s[3]],[$s[4]],[$s[5]]]) ) )  {
            $flag = 1;
          } else {
            Value::Error('\(\boldsymbol{\vec{v}}\) and \(\boldsymbol{\vec{w}}\) are okay; but \(\boldsymbol{\vec{u}}\) is incorrect: \(\mathrm{A}\boldsymbol{\vec{u}} \neq \lambda\boldsymbol{\vec{u}}  +  \boldsymbol{\vec{w}}\)');
          }
        } else {
          Value::Error('\(\boldsymbol{\vec{v}}\) is okay; but \(\boldsymbol{\vec{w}}\) is incorrect: \(\mathrm{A}\boldsymbol{\vec{w}} \neq \lambda\boldsymbol{\vec{w}}  +  \boldsymbol{\vec{v}}\)');
        }
      } else {
        Value::Error('\(\boldsymbol{\vec{v}}\) is incorrect: \(\mathrm{A}\boldsymbol{\vec{v}} \neq \lambda \boldsymbol{\vec{v}}\)');
      }

    return $flag;
    }
);

################################################
# Main Text

Context()->texStrings;
BEGIN_TEXT
The matrix \[A=$A\]
has eigenvalue \(\lambda = $eig\) repeated three times. 
$PAR
Find an \($eig\)-eigenvector for \(\mathrm{A}\):  
\{ mbox( [
"\(\qquad \boldsymbol{\vec{v}} = \)",
display_matrix([[$multians->ans_rule(5)],
                [$multians->ans_rule(5)],
                [$multians->ans_rule(5)]])
] ) \}
$PAR
Give a \(\boldsymbol{\vec{v}}\)-generalized \($eig\)-eigenvector:
\{ mbox( [
"\(\qquad \boldsymbol{\vec{w}} = \)",
display_matrix([[$multians->ans_rule(5)],
                [$multians->ans_rule(5)],
                [$multians->ans_rule(5)]])
] ) \}
$PAR
Give a \(\boldsymbol{\vec{w}}\)-generalized \(\boldsymbol{\vec{v}}\)-generalized 
\($eig\)-eigenvector:
\{ mbox( [
"\(\qquad \boldsymbol{\vec{u}} = \)",
display_matrix([[$multians->ans_rule(5)],
                [$multians->ans_rule(5)],
                [$multians->ans_rule(5)]])
] ) \}
$PAR

$BITALIC (To be counted correct, all three vectors must be entered and be 
consistent.) $EITALIC

END_TEXT
Context()->normalStrings;

########################################
# Answer evaluation


$showPartialCorrectAnswers = 1;

ANS( $multians->cmp() );

COMMENT('MathObject version. Uses GL3Z to generate eigenvector matrix with det=1 -- eigenvectors have entries <= 2. ');


;
ENDDOCUMENT();
