## DESCRIPTION
## Eigenvalues and eigenvectors of 4x4 matrix (distinct, real)
## ENDDESCRIPTION


## DBsubject(Linear algebra)
## DBchapter(Eigenvalues and eigenvectors)
## DBsection(Computing eigenvalues and eigenvectors)
## Date(11/12/2018)
## Institution(METU-NCC)
## Author(Benjamin Walter)
## Level(4)
## Static(0)
## MO(1)




##################################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGmatrixmacros.pl",
"MathObjects.pl",
"parserMultiAnswer.pl",
);


TEXT(beginproblem());

#####################################
#  Setup

# Construct random matrix with one known eigenvector/eigenvalue
#
# 1) pick eigenvectors [ x x x +-1]
#
# 2) extend to basis of eigenspace  S
#
# 3) pick random matrix  R  with eigenvalue in correct location
#
# 4) use "block diagonalization" to construct A = S M S^{-1}
#

Context("Numeric");

$v11=non_zero_random(-3,3,1);  $v21=non_zero_random(-3,3,1);
$v12=non_zero_random(-3,3,1);  $v22=non_zero_random(-3,3,1);
$v13=non_zero_random(-3,3,1);  $v23=non_zero_random(-3,3,1);
$v14=non_zero_random(-1,1,1);  $v24=non_zero_random(-1,1,1);


$l1=Real(non_zero_random(-3,3,1));   $l2=non_zero_random(-4,4,1);

Context("Matrix");

do {
 $S1 = Matrix([                          # eigenvect matrix
        [1,0,0,$v11],
        [0,1,0,$v12],
        [0,0,1,$v13],
        [0,0,0,$v14]
 ]);
 $R1 = Matrix([                          # block Jordan 
        [non_zero_random(-3,3,1),non_zero_random(-3,3,1),non_zero_random(-3,3,1),  0],
        [non_zero_random(-3,3,1),non_zero_random(-3,3,1),non_zero_random(-3,3,1),  0],
        [non_zero_random(-3,3,1),non_zero_random(-3,3,1),non_zero_random(-3,3,1),  0],
        [non_zero_random(-3,3,1),non_zero_random(-3,3,1),non_zero_random(-3,3,1),$l1]
 ]);
 $A = $S1*$R1*$S1->inverse;
} until (small_nonzero($A) );

do {
 $S2 = Matrix([                          # eigenvect matrix
        [1,0,0,$v21],
        [0,1,0,$v22],
        [0,0,1,$v23],
        [0,0,0,$v24]
 ]);
 $R2 = Matrix([                          # block Jordan 
        [non_zero_random(-3,3,1),non_zero_random(-3,3,1),non_zero_random(-3,3,1),  0],
        [non_zero_random(-3,3,1),non_zero_random(-3,3,1),non_zero_random(-3,3,1),  0],
        [non_zero_random(-3,3,1),non_zero_random(-3,3,1),non_zero_random(-3,3,1),  0],
        [non_zero_random(-3,3,1),non_zero_random(-3,3,1),non_zero_random(-3,3,1),$l1]
 ]);
 $B = $S2*$R2*$S2->inverse;
} until (small_nonzero($B) );

sub small_nonzero {
  my $M = shift; 

  if ($A->typeMatch($M)) {
    my $pass = 1;
    my $zeros = 0;
    for (my $i=1; $i<5; $i=$i+1) {
      for (my $j=1; $j<5; $j=$j+1) {
        if (abs($M->element($i,$j)) > 10) {
           $pass = 0;
        } if (($i != $j) && ($M->element($i,$j) == 0)) {
          $zeros = $zeros + 1;
        }
      }
    }
    return (($pass == 1) && ($zeros < 2));
  }
}

$A11=$A->element(1,1); $A12=$A->element(1,2); $A13=$A->element(1,3); $A14=$A->element(1,4);
$A21=$A->element(2,1); $A22=$A->element(2,2); $A23=$A->element(2,3); $A24=$A->element(2,4);
$A31=$A->element(3,1); $A32=$A->element(3,2); $A33=$A->element(3,3); $A34=$A->element(3,4);
$A41=$A->element(4,1); $A42=$A->element(4,2); $A43=$A->element(4,3); $A44=$A->element(4,4);

$B11=$B->element(1,1); $B12=$B->element(1,2); $B13=$B->element(1,3); $B14=$B->element(1,4);
$B21=$B->element(2,1); $B22=$B->element(2,2); $B23=$B->element(2,3); $B24=$B->element(2,4);
$B31=$B->element(3,1); $B32=$B->element(3,2); $B33=$B->element(3,3); $B34=$B->element(3,4);
$B41=$B->element(4,1); $B42=$B->element(4,2); $B43=$B->element(4,3); $B44=$B->element(4,4);

Context("Numeric");

$multians = MultiAnswer($v21,$v22,$v23,$v24)->with(
    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  
      "<table border='0' cellspacing='5'>
          <tr><td> %s </td></tr>
          <tr><td> %s </td></tr>
          <tr><td> %s </td></tr>
          <tr><td> %s </td></tr>
       </table>",
    tex_format =>  
      "\left\lbrack \begin{array}{r} %s \\ %s \\ %s\\ %s\end{array}\right\rbrack",  

    checker => sub {
        my ($correct, $student, $answerHash ) = @_;
        my @c = @{$correct};
	my @s = @{$student};

        my $flag  = 0;

        if (($s[0] == 0) && ($s[1] == 0) && ($s[2] == 0)&& ($s[3] == 0)) {
          Value::Error("Eigenvector cannot be all zero!"); 
        } else { 
          if ( $c[0]->typeMatch($s[0]) && 
               $c[1]->typeMatch($s[1]) && 
               $c[2]->typeMatch($s[2]) && 
               $c[3]->typeMatch($s[3]) ) 
          {
            if ( ( $B11*$s[0] + $B12*$s[1] + $B13*$s[2] + $B14*$s[3] == $l2*$s[0]) &&
                 ( $B21*$s[0] + $B22*$s[1] + $B23*$s[2] + $B24*$s[3] == $l2*$s[1]) &&
                 ( $B31*$s[0] + $B32*$s[1] + $B33*$s[2] + $B34*$s[3] == $l2*$s[2]) &&
                 ( $B41*$s[0] + $B42*$s[1] + $B43*$s[2] + $B44*$s[3] == $l2*$s[3]) ) 
            {
              $flag=1;
            }
          } else {
            Value::Error("Not a $l2-eigenvector!"); 
          }
        }
        return $flag; 
    }
);




#####################################
#  Main text

Context()->texStrings;
BEGIN_TEXT


The matrix 
\( 
\displaystyle
\mathrm{A} = $B
\)
has an eigenvalue
\( 
\displaystyle
\lambda = $l2.
\)
$BR
Find an eigenvector for this eigenvalue.
$BR
\{ mbox( [
'$SPACE $SPACE \( \boldsymbol{\vec{v}} =  \) ', 
display_matrix([[$multians->ans_rule(5)],
                [$multians->ans_rule(5)],
                [$multians->ans_rule(5)],
                [$multians->ans_rule(5)]]),
] ) \}


$PAR
$HR
$PAR

$BBOLD Note: $EBOLD You should solve the following problem $BBOLD WITHOUT $EBOLD computing all eigenvalues.
$PAR
The matrix 
\( 
\displaystyle
\mathrm{B} =  $B
\)
has an eigenvector 
\( 
\displaystyle
\boldsymbol{\vec{v}} = 
\left\lbrack
\begin{array}{r}
 $v11  \\
 $v12  \\
 $v13  \\
 $v14
\end{array}
\right\rbrack.
\)
$BR
Find the eigenvalue for this eigenvector.
$BR
\{ mbox( [ 
'$SPACE $SPACE \( \lambda = \) ',
$l1->ans_rule(5)
] ) \}


END_TEXT
Context()->normalStrings;

#####################################
#  Answer evaluation

$showPartialCorrectAnswers = 1;

Context("Numeric");

ANS( $multians->cmp() );
ANS( $l1->cmp );

COMMENT('MathObject version. Generates random 3x3 matrices with eigenvectors of form [ x x +-1 ].  Eigenvalues and eigenvectors between -4 and 4. ');

ENDDOCUMENT(); 
