## DESCRIPTION
## Eigenvalues and eigenvectors of 2x2 matrix (distinct, real) 
## ENDDESCRIPTION


## DBsubject(Linear algebra)
## DBchapter(Eigenvalues and eigenvectors)
## DBsection(Computing eigenvalues and eigenvectors)
## Date(11/06/2015)
## Institution(METU-NCC)
## Author(Benjamin Walter)
## Level(4)
## Static(0)
## MO(1)


##################################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGmatrixmacros.pl",
"MathObjects.pl",
"parserMultiAnswer.pl",
);


TEXT(beginproblem());

#####################################
#  Setup

Context("Numeric");

# 1) choose eigenvalues a,b for matrix of form
#    [ 0 -a  ]     [ 0    a  ]
#    [ b a+b ]  or [ -b  a+b ]
#
# 2) phase shift to get 
#    [ p   -a   ]
#    [ b  a+b+p ]
#
#  eigenvalues (a+p) and (b+p)
#  eigenvectors [1 -1] and [a -b]

$a = non_zero_random(-5,5,1);
do { $b = non_zero_random(-5,5,1); } until ($b != $a);

$neg = non_zero_random(-1,1,1);

$min = max(-9,-9-$a,-9-$b); $max = min(9,9-$a,9-$b);
do { $phase = non_zero_random($min,$max,1); } until ((abs($a+$b+$phase) < 10) and ($phase != -$a) and ($phase != -$b));


$A11 =  $phase;  $A12 =  -$neg*$a;
$A21 = $neg*$b;  $A22 =  $a+$b+$phase;

$lambda1 =  Real("$a+$phase");
$v11 = Real("1");
$v21 = Real("-$neg");

$lambda2 = Real("$b+$phase");
$v12 = Real("$a");
$v22 = Real("-$neg*$b");


$multians1 = MultiAnswer($lambda1, $v11, $v21, $lambda2, $v12, $v22)->with(
    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  
    "<table border='0' cellspacing='0'>
    <tr>
      <td> %s, \(\Bigl\lbrack\)</td>
      <td><table border='0' cellspacing='5'><tr><td> %s </td></tr><tr><td> %s </td></tr></table></td>
      <td>\(\Bigr\rbrack\);&nbsp;&nbsp; %s, \(\Bigl\lbrack\)</td>
      <td><table border='0' cellspacing='5'><tr><td> %s </td></tr><tr><td> %s </td></tr></table></td>
      <td>\(\Bigr\rbrack\)</td>
    </tr>
    </table>",
    tex_format =>  
    "%s, \left\lbrack \begin{array}{r} %s \\ %s \end{array}\right\rbrack; \ \ 
     %s, \left\lbrack \begin{array}{r} %s \\ %s \end{array}\right\rbrack",

    checker => sub {
        my ($correct, $student, $answerHash ) = @_;
        my @c = @{$correct};
	my @s = @{$student};

        my $flag1 = 0;
        my $flag2 = 0;
        my $flag  = 0;

        Value::Error("Your vectors are parallel") if
        $c[1]->typeMatch($s[1]) &&
        $c[2]->typeMatch($s[2]) &&
        $c[4]->typeMatch($s[4]) &&
        $c[5]->typeMatch($s[5]) &&
        ($s[1] * $s[5] == $s[2] * $s[4]);
        
        if ( $c[0]->typeMatch($s[0]) && 
             $c[1]->typeMatch($s[1]) && 
             $c[2]->typeMatch($s[2]) && 
             ($s[1] != 0 || $s[2] != 0) ) 
        {
          if ( ($A11 * $s[1] + $A12 * $s[2] == $s[0] * $s[1]) &&
               ($A21 * $s[1] + $A22 * $s[2] == $s[0] * $s[2]) 
          ){
                $flag1=1;
          }
        }

        if ( $c[3]->typeMatch($s[3]) && 
             $c[4]->typeMatch($s[4]) && 
             $c[5]->typeMatch($s[5]) && 
             ($s[4] != 0 || $s[5] != 0) ) 
        {
          if ( ($A11 * $s[4] + $A12 * $s[5] == $s[3] * $s[4]) &&
               ($A21 * $s[4] + $A22 * $s[5] == $s[3] * $s[5]) 
          ){
                $flag2=1;
          }
        }

        if($flag1==1 && $flag2 ==1){
           $flag=1;
        } else {
           if ($flag1 == 1) {
              my $msg = "\((\lambda_1, \boldsymbol{\vec{v}_1})\) is correct; "; 
              if (($c[3]->typeMatch($s[3])) && (($s[3] == $c[0]) || ($s[3] == $c[3])) && ($s[0] != $s[3])) {
                $msg = $msg . "and \(\lambda_2\) is correct but \(\boldsymbol{\vec{v}_2}\) is incorrect";
              } else {
                $msg = $msg . "but \(\lambda_2\) and \(\boldsymbol{\vec{v}_2}\) are incorrect";
              }
              Value::Error($msg);
           } elsif ($flag2 == 1) {
              my $msg = "\((\lambda_2, \boldsymbol{\vec{v}_2})\) is correct; "; 
              if (($c[0]->typeMatch($s[0])) && (($s[0] == $c[0]) || ($s[0] == $c[3])) && ($s[0] != $s[3])) {
                $msg = $msg . "and \(\lambda_1\) is correct but \(\boldsymbol{\vec{v}_1}\) is incorrect";
              } else {
                $msg = $msg . "but \(\lambda_1\) and \(\boldsymbol{\vec{v}_1}\) are incorrect";
              }
              Value::Error($msg);
            } else {
              my $msg = "";
              if (($c[0]->typeMatch($s[0])) && (($s[0] == $c[0]) || ($s[0] == $c[3]))) {
                $msg = $msg . "\(\lambda_1\) is correct; ";
              } if (($c[3]->typeMatch($s[3])) && (($s[3] == $c[0]) || ($s[3] == $c[3])) && ($s[0] != $s[3])) {
                $msg = $msg . "\(\lambda_2\) is correct; ";
              }
              Value::Error($msg . "both eigenvectors are wrong");

            }
        }
        return $flag; 
       
    }
);



#####################################
#  Main text

Context()->texStrings;
BEGIN_TEXT
Find the eigenvalues and eigenvectors of the matrix
\( 
\displaystyle
\mathrm{A} = 
\left\lbrack
\begin{array}{rr}
$A11 & $A12 \\
$A21 & $A22
\end{array}
\right\rbrack
\)
$BR
\{ mbox( [ 
'\( \lambda_1 = \) ',
$multians1->ans_rule(5),
', \( \boldsymbol{\vec{v}_1} =  \) ', 
display_matrix([[$multians1->ans_rule(5)],[$multians1->ans_rule(5)]])
] ) \}
$BR
$SPACE $SPACE and 
$BR
\{ mbox( [
'\( \lambda_2 = \) ',
$multians1->ans_rule(5),
', \( \boldsymbol{\vec{v}_2} =  \) ', 
display_matrix([[$multians1->ans_rule(5)],[$multians1->ans_rule(5)]]),
] ) \}
END_TEXT
Context()->normalStrings;

#####################################
#  Answer evaluation

$showPartialCorrectAnswers = 1;

ANS( $multians1->cmp() );

COMMENT('MathObject version.  Randomized with distinct nonzero real integer eigenvalues. One eigenvector is [1 +-1].');

ENDDOCUMENT(); 
