## DESCRIPTION
##  Extending basis of intersection to basis of full spaces in R^4 
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Abstract vector spaces)
## DBsection(Basis and dimension)
## Date(14/03/2020)
## Institution(METU-NCC)
## Author(Benjamin Walter & Satoshi Kondo)
## Level(2)
## MO(1)
## Static(0)

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"PGcourse.pl",
"MathObjects.pl",
"MatrixCheckers.pl",
);

TEXT(beginproblem());

sub pick {
  my ($k, @in) = @_;
  my @out = ();
  while (@out < $k) { push( @out, splice(@in, random(0,$#in), 1) ); }
  @out;
}


sub GCD {
  my $a = abs(shift); my $b = abs(shift);
  ($a,$b) = ($b,$a) if $a < $b;
  return $a if $b == 0;
  my $r = $a % $b;
  while ($r != 0) {
    ($a,$b) = ($b,$r);
    $r = $a % $b;
  }
  return $b;
}

Context('Vector');
Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real');
Context()->lists->set(Vector=>{open=>"(",close=>")"});
Context()->{cmpDefaults}{Vector} = {promotePoints=>1};
Context()->noreduce('(-x)-y');

@v = (0,0,0); @w = (0,0,0); my @c = (0,0); 

do { foreach my $i (0..2) { $v[$i] = non_zero_random(-2,2); } }
until ( ! Vector(map {abs($_)} @v)->isParallel(Vector(1,1,1))
     && ! Vector(@v)->isZero); 

do { foreach my $i (0..2) { $w[$i] = non_zero_random(-2,2); } }
until ( ! Vector(map {abs($_)} @w)->isParallel(Vector(1,1,1))
     && ! Vector(@w)->isZero
     && ($v[0]*$w[1] != $v[1]*$w[0]) ); 

my @vp = (-$v[2]*$w[2] , 0 , $v[2]*$w[0] , $w[2]*$v[0]);
my @wp = (0 , -$v[2]*$w[2] , $v[2]*$w[1] , $w[2]*$v[1]);

my @va = (0, 0, 1, 0);
my @wa = (0, 0, 0, 1);

$v[3] = $v[2];  $v[2] = 0;  $w[3] = 0;

do { @c = (non_zero_random(-3,3), non_zero_random(-3,3)); }
until ( ($c[0]*$v[0]+$c[1]*$w[0] != 0)
     && ($c[0]*$v[1]*$c[1]*$w[1] != 0) );

foreach (0..3) { 
  $w[$_]  = $c[0]*$v[$_]  + $c[1]*$w[$_]; 
  $wa[$_] = $c[0]*$va[$_] - $c[1]*$wa[$_]; 
}

my $gcd;
$gcd = $v[0];
foreach (1..$#v) { $gcd = GCD($v[$_],$gcd); }
foreach (0..$#v) { $v[$_] = $v[$_]/$gcd; }
$gcd = $w[0];
foreach (1..$#w) { $gcd = GCD($w[$_],$gcd); }
foreach (0..$#w) { $w[$_] = $w[$_]/$gcd; }
$gcd = $wa[0];
foreach (1..$#wa) { $gcd = GCD($wa[$_],$gcd); }
foreach (0..$#wa) { $wa[$_] = $wa[$_]/$gcd; }
$gcd = $vp[0];
foreach (1..$#vp) { $gcd = GCD($vp[$_],$gcd); }
foreach (0..$#vp) { $vp[$_] = $vp[$_]/$gcd; }
$gcd = $wp[0];
foreach (1..$#wp) { $gcd = GCD($wp[$_],$gcd); }
foreach (0..$#wp) { $wp[$_] = $wp[$_]/$gcd; }




my @i = pick(4,(0..3));
@v = @v[@i];  @vp = @vp[@i];  @va = @va[@i];
@w = @w[@i];  @wp = @wp[@i];  @wa = @wa[@i];

$span = List(Vector(@wp), Vector(@vp));
$v_add = List(Vector(@va));
$w_add = List(Vector(@wa));

@Tout = (Formula("0"),Formula("0"));
my @vars = (Formula("x"),
            Formula("y"),
	    Formula("z"),
	    Formula("t"));
foreach my $j (0..3) {
  $Tout[0] = $Tout[0] +
                Formula("$v[$j] $vars[$j]");
  $Tout[1] = $Tout[1] +   
                Formula("$w[$j] $vars[$j]");
}
$Tout[0] = $Tout[0]->reduce->TeX . " = 0";
$Tout[1] = $Tout[1]->reduce->TeX . " = 0";



Context()->texStrings;
BEGIN_TEXT
Let \(S\) and \(T\) be the following subspaces of \(\mathbb{R}^4\).
\[\begin{align}
S &= \left\lbrace (x,y,z,t) \Big|\  $Tout[0] \right\rbrace \\
T &= \left\lbrace (x,y,z,t) \Big|\  $Tout[1] \right\rbrace
 \end{align}
\]

$BBOLD (A) $EBOLD 
Find a basis for \(S\cap T\). 
$BR
\(\qquad \text{Basis}(S\cap T)  = \Bigl\lbrace\) 
  \{ ans_rule(20) \} 
\(\Bigr\rbrace\)

$PAR

$BBOLD (B) $EBOLD 
What is the dimension 
$BR
\(\qquad \text{dim}(S\cap T) = \) \{ ans_rule(2) \} 

$PAR

$BBOLD (C) $EBOLD
Extend your basis from $BBOLD(A)$EBOLD to be bases of \(S\) and \(T\). 
$BR
\(\qquad \text{Basis}(S) = \) $BBOLD(A)$EBOLD 
  \(\,\cup\ \ \Bigl\lbrace\) \{ ans_rule(10) \}  \(\Bigr\rbrace\)
$BR
\(\qquad \text{Basis}(T) = \) $BBOLD(A)$EBOLD
  \(\,\cup\ \ \Bigl\lbrace\) \{ ans_rule(10) \}  \(\Bigr\rbrace\)

$PAR

$BBOLD (D) $EBOLD
What is the dimension
$BR
\(\qquad \text{dim}(S+T) = \) \{ ans_rule(2) \} 

$PAR $SPACE $SPACE $BITALIC
Enter your bases as comma separated lists of vectors, for example $BR
\(\qquad \fbox{(1,2,3,4) , (5,6,7,8)} \)$EITALIC


END_TEXT

Context()->normalStrings;

#######
# This is a modified version of basis_checker_row
#
$listBasis = sub { 
  my ($c,$s,$ansHash,$value) = @_;
  my ($nc,$ns) = (scalar(@$c),scalar(@$s));
  
  my @cv, @sv;
  foreach my $i (0..$nc-1) {
    $cv[$i] = Matrix($c->[$i])->transpose;
  }
  my $len = ($cv[0]->dimensions)[0];
  foreach my $i (0..$ns-1) {
    $sv[$i] = Matrix($s->[$i])->transpose;
    if ($sv[$i]->isZero) {
      Value->Error("Dr. Benjamin says: $BR 'NO ZERO VECTORS IN BASIS!'  orz");
      return 0;
    }
    if (($sv[$i]->dimensions)[0] != $len) {
      Value->Error("Your vectors have wrong dimension!");
      return 0;
    }
  }

  my $Cm = concatenate_columns_into_matrix(@cv);
  my $Sm = concatenate_columns_into_matrix(@sv);

  my $CTC = ($Cm->transpose) * $Cm;
  warn "Correct answer is a linearly dependent set." if ($CTC->det == 0);

  if ( (($Sm->transpose) * $Sm)->det == 0) {
    Value->Error("Your vectors are not independent!");
    return 0;
  }

  return 0 if $nc != $ns;

  my $X = ($CTC->inverse) * (($Cm->transpose) * $Sm);

  return 0 if ($Sm != $Cm * $X);

  return ($nc,());
};

$addBasis = sub { 
  my ($c,$s,$ansHash,$value) = @_;
  my ($nc,$ns) = (scalar(@$c),scalar(@$s));
  my @cv, @sv;

  my $in  = $ansHash->{in}; 
  my $out = $ansHash->{out}; 
  my $vs = $ansHash->{vs};
  
  foreach my $i (0..$nc-1) {
    $cv[$i] = Matrix($c->[$i])->transpose;
  }

  my $len = ($cv[0]->dimensions)[0];
  foreach my $i (0..$ns-1) {
    $sv[$i] = Matrix($s->[$i])->transpose;
    if ($sv[$i]->isZero) {
      Value->Error("Dr. Benjamin says: $BR 'NO ZERO VECTORS IN BASIS!'  orz");
      return 0;
    }
    if (($sv[$i]->dimensions)[0] != $len) {
      Value->Error("Your vectors have wrong dimension!");
      return 0;
    }
    if (Vector($sv[$i]) . $in != 0) {
      Value->Error("Not in \( $vs \)");
      return 0;
    }
    if (Vector($sv[$i]) . $out == 0) {
      Value->Error("Not independent from (A)"); 
      return 0;
    }
  }

  if ($ns != $nc) {
    Value->Error("Not independent!");
    return 0;
  }

  return ($nc,());
};

ANS( $span->cmp(list_checker=>$listBasis) );

ANS( Real(2)->cmp() );

ANS( $v_add->cmp(list_checker=>$addBasis, 
  in=>Vector(@v), out=>Vector(@w), vs=>"S") );
ANS( $w_add->cmp(list_checker=>$addBasis, 
  in=>Vector(@w), out=>Vector(@v), vs=>"T") );

ANS( Real(4)->cmp() );

#  note to self: use checker => ~~&basis_checker_columns


ENDDOCUMENT();        # This should be the last executable line in the problem.
