## DBsubject(Combinatorics)
## DBchapter(Counting)
## DBsection(Inclusion/exclusion)
## Level(4)
## KEYWORDS('counting','stars and bars','combinations','multiple techniques','inclusion exclusion')
## TitleText1(Discrete Mathematics: an Open Introduction)
## EditionText1(3)
## AuthorText1(Oscar Levin)
## Section1(1.6)
## Problem1(4)
## Author(Oscar Levin)
## Institution(University of Northern Colorado)
## Language(en-US)

DOCUMENT();

####################
# Load Macros
####################
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",

  "contextIntegerFunctions.pl",
  "PGcourse.pl",
);

####################
# Header
####################
COMMENT('Authored in PreTeXt');
TEXT(beginproblem());

####################
# PG Setup
####################
Context("IntegerFunctions");
do {
$n = random(16,30);
$a = random(1,3);
$b = random(5,7);
} until ($n > 4*$a+1 && $n < 4*$b-1);


$ba = $b-$a; #upper limit for each variable in modified problem
$ba1 = $ba+1; #stars to distribute to make a variable go over max

$rs = $n-4*$a; #remaining stars when distributing minimum to all 4 variables
$bs = $rs + 3; #total bars and stars once first minimum are distributed
$new = 0;
for ($j = 1; $j <=int($rs/$ba1); $j++)
{
$new = $new +(-1)**($j+1)* C(4, $j)*C(($bs-$ba1*$j),3);
}

$ans = C($bs,$rs) - $new;

####################
# Body
####################
BEGIN_PGML
Consider the equation [`x_1 + x_2 + x_3 + x_4 = [$n]\text{.}`] How many solutions are there with [`[$a] \le x_i \le [$b]`] for all [`i \in \{1,2,3,4\}\text{?}`]

[__________]{$ans}


END_PGML

####################
# Solution
####################
BEGIN_PGML_SOLUTION
The easiest way to solve this is to first distribute the minimum number of units to each variable ([$a]), and then count the solutions to [`y_1 + y_2 + y_3 + y_4 = [$rs]`] with [`0 \le y_i \le [$ba]\text{.}`] By taking [`x_i = y_i+[$ba]\text{,}`] each solution to this new equation corresponds to exactly one solution to the original equation.

Now all the ways to distribute the [$rs] units to the four [`y_i`] variables can be found using stars and bars, specifically [$rs] stars and 3 bars, so [`{[$bs] \choose [$rs]}`] ways. But this includes the ways that one or more [`y_i`] variables can be assigned more than 3 units. So subtract using PIE to get
>>[``
                {[$bs] \choose 3} -\left( {4\choose 1} {[$bs-$ba1*1] \choose 3}-{4\choose 2} {[$bs-$ba1*2] \choose 3} + \dots \right)
              ``]<<



The [`{4 \choose 1}`] counts the number of ways to pick one variable to be over-assigned; the [`{[$bs-$ba1] \choose 3}`] is the number of ways to assign the remaining  units to the 4 variables, etc.


END_PGML_SOLUTION

####################
# End Problem
####################
ENDDOCUMENT();