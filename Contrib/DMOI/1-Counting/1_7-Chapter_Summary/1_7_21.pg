## DBsubject(Combinatorics)
## DBchapter(Counting)
## DBsection(Combinations)
## Level(4)
## KEYWORDS('counting','combinations', 'words')
## TitleText1(Discrete Mathematics: an Open Introduction)
## EditionText1(3)
## AuthorText1(Oscar Levin)
## Section1(1.7)
## Problem1(extra)
## Author(Oscar Levin)
## Institution(University of Northern Colorado)
## Language(en-US)

DOCUMENT();

####################
# Load Macros
####################
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",

  "contextIntegerFunctions.pl",
  "PGcourse.pl",
);

####################
# Header
####################
COMMENT('Authored in PreTeXt');
TEXT(beginproblem());

####################
# PG Setup
####################
Context("IntegerFunctions");
#choose a word; this list has word lengths 5 and 6; all letters unique
@bank = ("acidly", "ageist", "hanged", "nachos", "naive", "gizmo", "maths", "camel");
$tag = random(0,7,1);
$word = $bank[$tag];
if ($tag ==0 || $tag == 1 || $tag == 2 || $tag ==3)
{
$wl = 6;
}
else
{
$wl = 5;
}
# $wl=5;
#parta
$ans1 = Compute("[$wl]!");
#part b
$ans2 = Compute("C(12,3)*C(9,3)*C(6,2)*4!");
#part c
$w1 = $wl-1;
$w2 = $wl-2;
$next = 0;
for ($i = 1; $i <$wl; $i++)
{
$next = Compute("$next + P($wl,$i)");
}
$ans3 = Compute("$ans1 + $next");

####################
# Body
####################
BEGIN_PGML
An _anagram_ of a word is a rearrangement of its letters (each of the letters must be used exactly once).  We do not need the anagram to form an English word.
a.  How many anagrams are there of the word "[$word]"?

    [_____]{$ans1}


# a.  How many anagrams are there of the word "bizarrenesses"?  Note that you need to figure out how to deal with the repeated letters (starting with the first "r" and then the second "r" gives the same word as starting with the second "r" and then the first "r").

#     [__________]{$ans2}


a.  A _sub-anagram_ is just like an anagram except now you don't need to use all of the letters (but you could). For example, one sub-anagram of "magic" is "mac."  How many sub-anagrams are there of the word "[$word]"?   Hint: you might want to break this into cases.

    [__________]{$ans3}



END_PGML

####################
# Solution
####################
BEGIN_PGML_SOLUTION
a.  There are [` [$wl]! = [$ans1] `] anagrams.  We can pick any of the [$wl] distinct letters to put first, then any of the remaining [$w1], and so on.  We could also have written this [`P( [$wl] ,[$wl] ) \text{.}`]


# a.  We need to place 3 e's, 3 s's, 2 r's, and one each of b, i, a, and n.  First select 3 of the twelve slots for the e's, which can be done in [`{12 \choose 3}`] ways.  Then select 3 of the remaining 9 slots for s's, done in [`{9 \choose 3}`] ways.  Next pick 2 of the remaining 6 slots for r's, in [`{6 \choose 2}`] ways, one of the remaining 4 slots for the b ([`4 ways`]), one of the remaining 3 slots for the i, one of two slots for the a, and leave the last for the n.   All together, the number of anagrams is:
#     >> [``
#                   {12\choose 3}{9 \choose 3}{6 \choose 2}\cdot 4 \cdot 3 \cdot 2
# \cdot1 = [$ans2]
#                 ``] <<

#     (Note, if you pick a different letter to start with, you get a different looking answer, but the final product should be the same.)

#     Another approach: Think of all of the letters as different (so there are 3 s's, but maybe written in 3 different fonts, for example.)  In this case, there would be [`12!`] anagrams.  Now to correct for the repeated letters, group all the anagrams that just have different arrangements of the s's, e's and r's into groups.  Each group would have [`3!\cdot 3! \cdot 2!`] different anagrams (since there are [`3!`] ways to arrange the s's, [`3!`] ways to arrange the e's and [`2!`] ways to arrange the r's).  We just need to count groups, so the total is

#     >> [``
#                   \frac{12!}{3!3!2!} = [$ans2]
#                 ``] <<




a.  We already know there are [$ans1] [$wl]-letter sub-anagrams.  To find the [$w1]-letter sub-anagrams, we need to pick one of [$wl] letters first, then one of the remaining [$w1], then one of [$w2] after that, and so on.  So there are [`P([$wl],[$w1]) =[$ans1]`] of these as well (we could think of these as exactly the [$ans1] full anagrams with the last letter missing).  In total, there will be


    >> [``
                  P([$wl],[$wl]) + P([$wl],[$w1]) + P([$wl],[$w2]) + \dots + P([$wl],1) = [$ans3]
                ``] <<





END_PGML_SOLUTION

####################
# End Problem
####################
ENDDOCUMENT();