## DBsubject('Set theory and logic')
## DBchapter('Propositional logic')
## DBsection('Truth tables')
## Level(4)
## KEYWORDS('proposition','truth table','connectives','deduction rules')
## TitleText1(Discrete Mathematics: an Open Introduction)
## EditionText1(3)
## AuthorText1(Oscar Levin)
## Section1(3.1)
## Problem1(extra)
## Author(Oscar Levin)
## Institution(University of Northern Colorado)
## Language(en-US)

DOCUMENT();

############################################################
# Load Macros
############################################################
loadMacros(
  "PGstandard.pl",
  "contextTF.pl",
  "MathObjects.pl",
  "PGML.pl",
  "niceTables.pl",

  "PGcourse.pl",
  "PGchoicemacros.pl"
);

############################################################
# Header
############################################################
COMMENT('Not Randomized (other than multiple choice).');
TEXT(beginproblem());

############################################################
# PG Setup
############################################################
Context('TF');
$showPartialCorrectAnswers = 0;

$s1 = "P \rightarrow Q";
$s2 = "P \wedge \neg Q";
@ans = qw(
    T F
    T F
    F T
    F T
    T F
    T F
    T F
    T F
);
$mc = new_multiple_choice();
$mc ->qa(
    "Is the deduction rule valid?",
    "Yes, in every row where both premises are true, the conclusion is also true."
);
$mc->extra(
    "No, because the premises are never both true in the same row.",
    "No, because the columns for the two premises are not identical.",
    "Yes, because there is a row in which both premises are true.",
);
$mc ->makeLast(
    "Impossible to determine without more information."
);





############################################################
# Body
############################################################

BEGIN_TEXT

Determine if the following is a valid deduction rule:
$BCENTER
\{
DataTable(
  [
    ['','\($s1\)' ],
    [['', midrule => '1', rowcss  => 'border-bottom: 1px solid; '], '\($s2\)' ],
    ['\(\therefore\)', '\(R\)' ],
  ],
  align => 'cc',
  center => 0,
);
\}
$ECENTER


$PAR

First, make a truth table for the relevant statements.  (You might want to complete the truth table on paper so you can make columns for intermediate steps; just record the final columns here.)

$BCENTER
\{
DataTable(
  [
    [['\(P\)', headrow => 1, midrule => 1], '\(Q\)', '\(R\)', '\($s1\)', '\($s2\)'],

    ['T', 'T', 'T', ans_rule(1), ans_rule(1)],
    ['T', 'T', 'F', ans_rule(1), ans_rule(1)],
    ['T', 'F', 'T', ans_rule(1), ans_rule(1)],
    ['T', 'F', 'F', ans_rule(1), ans_rule(1)],
    ['F', 'T', 'T', ans_rule(1), ans_rule(1)],
    ['F', 'T', 'F', ans_rule(1), ans_rule(1)],
    ['F', 'F', 'T', ans_rule(1), ans_rule(1)],
    ['F', 'F', 'F', ans_rule(1), ans_rule(1)],
  ],
  align => 'c|c|c|c|c'
);

\}
$ECENTER

$BR
$PAR
\{$mc -> print_q() \}

\{$mc -> print_a() \}

END_TEXT

foreach my $i (@ans) {
  ANS(Compute($i)->cmp());
}

ANS( checkbox_cmp( $mc->correct_ans() ));


############################################################
# Solution
############################################################

BEGIN_SOLUTION

The complete truth table is:


$BCENTER
\{
DataTable(
  [
    [['\(P\)', headrow => 1, midrule => 1], '\(Q\)', '\(R\)', '\($s1\)', '\($s2\)'],

    ['T', 'T', 'T', $ans[0], $ans[1],],
    ['T', 'T', 'F', $ans[2], $ans[3],],
    ['T', 'F', 'T', $ans[4], $ans[5],],
    ['T', 'F', 'F', $ans[6], $ans[7], ],
    ['F', 'T', 'T', $ans[8], $ans[9], ],
    ['F', 'T', 'F', $ans[10], $ans[11], ],
    ['F', 'F', 'T', $ans[12], $ans[13], ],
    ['F', 'F', 'F', $ans[14], $ans[15], ],
  ],
  align => 'c|c|c|c|c'
);\}
$ECENTER

$BR

There is no row in which both premises are true (indeed, these are contradictory premises; the second is the negation of the first).  Thus for every row in which both premises are true (i.e., no row), the conclusion is also true.  Therefore the deduction rule is valid.  (This is an example of how everything follows from a contradiction.)

END_SOLUTION

############################################################
# End Problem
############################################################

ENDDOCUMENT();
