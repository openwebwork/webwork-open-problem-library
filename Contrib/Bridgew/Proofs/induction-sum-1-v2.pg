##DESCRIPTION
##  Problem Description
##ENDDESCRIPTION

##KEYWORDS('sample')

## DBsubject('Course')
## DBchapter('Section')
## DBsection('Subsection')
## Date('6/25/2018')
## Author('Stephen Flood')
## Institution('')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')



########################################################################



DOCUMENT();

# Load whatever macros you need for the problem
loadMacros(
        "PGstandard.pl",     # Standard macros for PG language
        "PGcourse.pl",       
	"PGML.pl",
	"MathObjects.pl",
    "bizarroArithmetic.pl",
    "unionLists.pl",
    "parserPopUp.pl",
        # "PGgraphmacros.pl",
    	# "parserMultiAnswer.pl",
    	# "contextInequalities.pl",
);


# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;


##############################################################
#  Setup

Context("Numeric");
# Context()->flags->set(tolerance => 0.01);
Context()->variables->add(sk => 'Real', k => 'Real', n => 'Real');
# See http://webwork.maa.org/wiki/Introduction_to_contexts for more options



#################################################
# Write Problem 

## See 

## Use bizarroArithmetic.pl to check the form of certain answers.
##      Redefines operations so, for example, 1+1 does not equal 2;
##      Useful for checking the form of an answer.
## See pg/macros/bizarroArithmetic.pl for usage 
##
## SHOULD THIS BE DISABLED?!  It might be *TOO* pedantic for this problem
Context()->operators->set(
'+' => {class => 'bizarro::BOP::add', isCommand => 1},
'-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
'*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
' *' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'* ' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'/' => {class => 'bizarro::BOP::divide', isCommand => 1},
' /' => {class => 'bizarro::BOP::divide', isCommand => 1},
'/ ' => {class => 'bizarro::BOP::divide', isCommand => 1},
'//' => {class => 'bizarro::BOP::divide', isCommand => 1},
'**' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
'^' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
);
## Uncomment the following lines to restric speci
#Context()->flags->set(bizarroAdd=>1);
#Context()->flags->set(bizarroSub=>1);
#Context()->flags->set(bizarroMul=>1);
Context()->flags->set(bizarroDiv=>1);
#Context()->flags->set(bizarroPow=>1);


$s1 = Compute("1");
#$closedForm1 = Compute("1");

$closedForm = Compute("n(n+1)/2");
$closedFormK = $closedForm->substitute(n=> "k");
$closedFormKplus1 = $closedForm->substitute(n=> "k+1");

$skplus1Defn = Compute("sk+k+1");
$skplus1Plugged = Compute("$closedFormK + (k+1)");


####
#  Be *CAREFUL* when using "drop down" lists in PGML problems.  
#  
#  the PopUp parser needs to be called by the Answer environment 
#  AND 
#  Answer environments need to be parsed in order 
#  so you'd need an END_PGML  ANS ( $popup->cmp() ) BEGIN_PGML
#  immediately after the popup list will be typeset

$supposeIHk = PopUp(["?","Suppose that ","Prove that "],"Suppose that "); 
$proveIHkplus1 =  PopUp(["?","Suppose that ","Prove that "],"Prove that ");

$stateIH = PopUp(["Select the Induction Hypothesis", "s_n = $closedForm", "n", "one", "s_n=s_{n-1}+n"], "s_n = $closedForm");

$applyIH = PopUp(["?", "s_k = $closedFormK", "s_{k+1} = $closedFormKplus1", "three"], "s_k = $closedFormK");

$nextIH = PopUp(["?",  "s_k = $closedFormK", "s_{k+1} = $closedFormKplus1", "three"], "s_{k+1} = $closedFormKplus1");


BEGIN_PGML

----  
Define a sequence [`\{s_n\}_{n=1}^{\infty}`] by 
[`` s_n = 1 + 2 + \ldots +n ``]. 

We wish to use induction to prove that [`` s_n = [$closedForm] ``] for each natural number [``n\geq 1``].


----  
## 1. Understand The Question

We begin by writing a *recursive* definition of the sequence.

First, [`s_1 = `] [______]{$s1}.

Now for each integer [`k\geq 1`], [`s_{k+1} =`] [______]{$skplus1Defn}.

(Note: To enter [`s_k`], type _sk_.)


----  
## 2. The Proof by Induction.


(a) *Base Case*

We first verify the claim for [`n=1`]. In this case,

[` s_n = `] [___________]{$s1},

[``[$closedForm] = ``][__________]{$s1}. 

(Note: Simplify your answer completely.)

[`\;`]


(b) *Inductive Step*

Now suppose that we _know_ that the inductive hypothesis holds for [`n=k`].  
 
>>In other words,[@ $supposeIHk->menu @]* [@ $applyIH->menu @]*<<
END_PGML
ANS($supposeIHk->cmp());# Answer checker for the popup list object.
ANS($applyIH->cmp());# Answer checker for the popup list object.
BEGIN_PGML

We must _show_ that the inductive hypothesis also holds for [`n=k+1`].

>>In other words, [@ $proveIHkplus1->menu @]* [@ $nextIH->menu @]*<<
END_PGML
ANS($proveIHkplus1->cmp());# Answer checker for the popup list object.
ANS($nextIH->cmp());# Answer checker for the popup list object.
BEGIN_PGML

In the first blank, enter the recursive *definition* of [`s_n`] (in terms of [`sk`] and [`k`]) for [`n=k+1`].  
In the second blank, show the result of applying the inductive hypothesis, but do *not* simplify the expression.  

[` s_{n} = `] [____________]{$skplus1Defn} = [____________]{$skplus1Plugged}

Then check that this completes the inductive step by computing the right-hand side of the claimed expression when [`n=k+1`].

[`` [$closedForm] = ``] [_____________]{$closedFormKplus1}

END_PGML

# Old Version (hardcoded)
#[` s_{n} = `] [____________]{sk + (k+1)} = [____________]{(k)*(k+1)/2 + (k+1)}
#[` \dfrac{n(n+1)}{2} = `] [_____________]{(k+1)*(k+1+1)/2}


BEGIN_PGML_HINT
The goal of this problem is to help you learn the details of a *proof* by induction. 

If you have answers that are being marked wrong, make sure you are not skipping any steps!  

In particular, the goal is to *prove* that [`s_{k+1} = \dfrac{(k+1)(k+1 + 1)}{2}`].  
You cannot *use* this when  proving  the induction hypothesis. 
END_PGML_HINT



ENDDOCUMENT();
