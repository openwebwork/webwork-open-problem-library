##DESCRIPTION
##  Problem Description
##ENDDESCRIPTION

##KEYWORDS('sample')

## DBsubject('Course')
## DBchapter('Section')
## DBsection('Subsection')
## Date('6/25/2018')
## Author('Stephen Flood')
## Institution('Bridgewater State University')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')



########################################################################



DOCUMENT();

# Load whatever macros you need for the problem
loadMacros(
        "PGstandard.pl",     # Standard macros for PG language
        "PGcourse.pl",       
	"PGML.pl",
	"MathObjects.pl",
    "bizarroArithmetic.pl",
    "unionLists.pl",
    "parserPopUp.pl",
    "answerHints.pl",
        # "PGgraphmacros.pl",
    	# "parserMultiAnswer.pl",
    	# "contextInequalities.pl",
);


# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;


##############################################################
#  Setup

Context("Numeric");
# Context()->flags->set(tolerance => 0.01);
Context()->variables->add(ak => 'Real', k => 'Real', n=> 'Real');
# See http://webwork.maa.org/wiki/Introduction_to_contexts for more options



#################################################
# Write Problem 

## See 

## Use bizarroArithmetic.pl to check the form of certain answers.
##      Redefines operations so, for example, 1+1 does not equal 2;
##      Useful for checking the form of an answer.
## See pg/macros/bizarroArithmetic.pl for usage 
##
## SHOULD THIS BE DISABLED?!  It might be *TOO* pedantic for this problem
Context()->operators->set(
'+' => {class => 'bizarro::BOP::add', isCommand => 1},
'-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
'*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
' *' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'* ' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'/' => {class => 'bizarro::BOP::divide', isCommand => 1},
' /' => {class => 'bizarro::BOP::divide', isCommand => 1},
'/ ' => {class => 'bizarro::BOP::divide', isCommand => 1},
'//' => {class => 'bizarro::BOP::divide', isCommand => 1},
'**' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
'^' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
);

#$closedForm1 = Compute("1");

## NOTE:
##   Make $a and $r relatively prime 
##   to avoid ambiguity in simplifying final formula.
$a = random(3,7,2);
$r = non_zero_random(2,6,2);

$a1 = Compute(" $a ");
$s1 = Compute(" $a ");
$a2 = Compute(" $a * $r^1");
$a3 = Compute(" $a * $r^2");
$a4 = Compute(" $a * $r^3");

## Uncomment the following lines to restric specific operations in answers
#Context()->flags->set(bizarroAdd=>1);
#Context()->flags->set(bizarroSub=>1);
#Context()->flags->set(bizarroMul=>1);
Context()->flags->set(bizarroDiv=>1);
Context()->flags->set(bizarroPow=>1);


$closedForm = Compute("$a * ($r)^( n-1 )");
$closedFormK = $closedForm->substitute(n=> "k");
$closedFormKplus1 = $closedForm->substitute(n=> "k+1");

$akplus1Defn = Compute("ak*$r");
$akplus1Plugged = Compute("$closedFormK * ($r)");


####
#  Be *CAREFUL* when using "drop down" lists in PGML problems.  
#  
#  the PopUp parser needs to be called by the Answer environment 
#  AND 
#  Answer environments need to be parsed in order 
#  so you'd need an END_PGML  ANS ( $popup->cmp() ) BEGIN_PGML
#  immediately after the popup list will be typeset

$completeBaseCase = PopUp(["?", "a_1 = $a1", "a_k = $closedFormK", "a_{k+1} = $closedFormKplus1", "three"], "a_1 = $a1");
$completeInductiveStep = PopUp(["?", "a_1 = $a1", "a_k = $closedFormK", "a_{k+1} = $closedFormKplus1", "three"], "a_{k+1} = $closedFormKplus1");



$supposeIHk = PopUp(["?","Suppose that ","Prove that "],"Suppose that "); 
$proveIHkplus1 =  PopUp(["?","Suppose that ","Prove that "],"Prove that ");


#$applyIH = PopUp(["?", "a_k = $closedFormK", "a_{k+1} = $closedFormKplus1", "three"], "a_k = $closedFormK");
#
#$nextIH = PopUp(["?",  "a_k = $closedFormK", "a_{k+1} = $closedFormKplus1", "three"], "a_{k+1} = $closedFormKplus1");
$applyIH = PopUp(["?", "a_k = $closedFormK", "a_{k+1}=$akplus1Defn", "a_{k+1} = $closedFormKplus1",  ], "a_k = $closedFormK");

$nextIH = PopUp(["?",  "a_k = $closedFormK", "a_{k+1}=$akplus1Defn", "a_{k+1} = $closedFormKplus1",  ], "a_{k+1} = $closedFormKplus1");


BEGIN_PGML

----  

Consider the geometric sequence

[``[$a1], [$a2], [$a3], [$a4], \dots ``]

A common K-12 problem asks students to find a formula [`a_n`] for the [`n`]th term, beginning with [`n\geq 1`].

We wish to prove by induction that [`` a_n = [$closedForm] ``] for each natural number [``n\geq 1``].


----  
## 1. Understand The Question

First, we must write a *recursive* definition of the sequence [`a_n`].

For the base case, [`a_1 = `] [______]{$s1}.

For each [`k`] such that [`a_k`] is defined, [`a_{k+1} =`] [______]{$akplus1Defn}.
*Note:* To enter [`a_k`], type _ak_ 


----  
## 2. The Proof by Induction.

We proceed by induction on [`n`] 


(a) *Base Case*

We first show that the induction hypothesis holds when [`n=1`].

[` a_1 = `] [___________]{$s1}.  

[``[$closedForm] = ``][__________]{$s1}. 
*Note:* Simplify your answer completely.

We have proved that [@ $completeBaseCase->menu @]*, so the base case holds.

END_PGML
ANS($completeBaseCase->cmp());# Answer checker for the popup list object.
BEGIN_PGML


END_PGML
## Do not allow students to use variable n in induction stage
Context()->variables->remove(n);
# Explain this to students
Context()->{error}{msg}{"Variable 'n' is not defined in this context"} 
   = "We have assumed that n = k+1, so enter your answer in terms of k";
Context()->{error}{msg}{"'an' is not defined in this context"}
   = "We have assumed that n = k+1, so enter your answer in terms of k and ak";
BEGIN_PGML

(b) *Inductive Step*

Suppose that we _know_ that the inductive hypothesis holds for [`n=k`].  
 
>>In other words,[@ $supposeIHk->menu @]* [@ $applyIH->menu @]*<<
END_PGML
ANS($supposeIHk->cmp());# Answer checker for the popup list object.
ANS($applyIH->cmp());# Answer checker for the popup list object.
BEGIN_PGML

We must _show_ that the inductive hypothesis also holds for [`n=k+1`].

>>In other words, [@ $proveIHkplus1->menu @]* [@ $nextIH->menu @]*<<
END_PGML
ANS($proveIHkplus1->cmp());# Answer checker for the popup list object.
ANS($nextIH->cmp());# Answer checker for the popup list object.
BEGIN_PGML

In the first blank, enter the recursive *definition* of [`a_n`] (in terms of [`ak`] and [`k`]).  In the second blank, use the inductive hypothesis to show the result of applying the inductive hypothesis, but do *not* simplify.  

[` a_{n} `]
= [____________]{$akplus1Defn->cmp()->withPostFilter(AnswerHints(
$akplus1Plugged => "Enter the recursive *definition* in terms of ak and k",
$closedFormKplus1 => "Enter the recursive *definition* in terms of ak and k"))} 
= [____________]{$akplus1Plugged->cmp()->withPostFilter(AnswerHints(
$closedFormKplus1 => "Use the induction hypothesis, but do not simplify"))}

Then check that the induction hypothesis will *continue* to hold for [`n=k+1`] by *completely* simplifying [`a_n`] until you get desired expression (in terms of [`k`]) .  Enter that into the blank.

[`` [$closedForm] = ``] [_____________]{$closedFormKplus1}

Having assumed the inductive hypothesis, we have now proved that [@ $completeInductiveStep->menu @]*.

Therefore, it follows by induction that [`a_n = [$closedForm]`] for *every* [`n\in\mathbb{N}`].

END_PGML
ANS($completeInductiveStep->cmp());# Answer checker for the popup list object.


BEGIN_PGML_HINT
The goal of this problem is to help you learn the details of a *proof* by induction.  *Hint:* read the directions carefully.  

If you have answers that are being marked wrong, make sure that you are not skipping any steps.  

Talk to your instructor if you are unsure of which steps are required!
END_PGML_HINT



ENDDOCUMENT();
