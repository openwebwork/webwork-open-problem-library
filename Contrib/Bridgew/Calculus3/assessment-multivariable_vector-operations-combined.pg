##DESCRIPTION
##  Problem Description
##ENDDESCRIPTION

##KEYWORDS('sample')

## DBsubject('Course')
## DBchapter('Section')
## DBsection('Subsection')
## Date('6/25/2018')
## Author('')
## Institution('')
## TitleText1('')
## EditionText1('')
## AuthorText1('Stephen Flood')
## Section1('')
## Problem1('')



########################################################################



DOCUMENT();

# Load whatever macros you need for the problem
loadMacros(
        "PGstandard.pl",     # Standard macros for PG language
        "PGcourse.pl",       
	"PGML.pl",
	"MathObjects.pl",
	# "PGchoicemacros.pl",	# For multiple select, multiple matching, and true/false questions
        # "PGgraphmacros.pl",	   # For dynamic graphs
    	"parserMultiAnswer.pl",  # For answer checkers that reference MULTIPLE answer blanks
    	# "parserPopUp.pl",	   # Create popup lists for selecting entries
    	# "contextInequalities.pl",
);


# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;


##############################################################
#  Setup

Context("Vector");
# Context()->flags->set(tolerance => 0.01);
# Context()->variables->add(t => 'Real');
# See http://webwork.maa.org/wiki/Introduction_to_contexts for more options



$a1   = random(1,2,1);
$a2   = non_zero_random(-2,2,1);
$a3   = random(1,3,1);
$b1   = non_zero_random(-2,2,1);
$b2   = random(1,3,1);
$b3   = non_zero_random(-2,2,1);

$vecA = Vector($a1,$a2,$a3);
$vecB = Vector($b1,$b2,$b3);

while(  ($vecA . $vecB == 0)  ||  (areParallel $vecA $vecB)  ) 
{
    $a1   = random(1,2,1);
    $a2   = non_zero_random(-2,2,1);
    $a3   = random(1,3,1);
    $vecA = Vector($a1,$a2,$a3);
    $b1   = non_zero_random(-2,2,1);
    $b2   = random(1,3,1);
    $b3   = non_zero_random(-2,2,1);
    $vecB = Vector($b1,$b2,$b3);
}

$aDotb = $vecA.$vecB;

$crossVec = $vecA x $vecB; 
$crossX = $crossVec . Vector(1,0,0);
$crossY = $crossVec . Vector(0,1,0);
$crossZ = $crossVec . Vector(0,0,1);
#$crossX = Compute("$a2*$b3 - $a3*$b2");
#$crossY = Compute("$a3*$b1 - $a1*$b3");
#$crossZ = Compute("$a1*$b2-$a2*$b1");

$magCross = Compute("sqrt( ($crossX)^2 + ($crossY)^2 + ($crossZ)^2 ) ");

$unitX = Compute("$crossX/$magCross");
$unitY = Compute("$crossY/$magCross");
$unitZ = Compute("$crossZ/$magCross");

$ONEunitvector = MultiAnswer($unitX, $unitY, $unitZ)->with(
  singleResult => 0,
  checker => sub {
      my ( $correct, $student, $self ) = @_;
      ## assign names to track the students answers
      my ( $f1stu, $f2stu ,$f3stu ) = @{$student};
      ## assign names to the "default" answers (passed through the call for MultiAnswer
      my ( $f1, $f2 , $f3 ) = @{$correct};
      if ( ($f1 == $f1stu && $f2 == $f2stu && $f3 == $f3stu)  || ($f1 == -$f1stu && $f2 == -$f2stu && $f3 == -$f3stu) )
          { return [1,1,1]; } 
      else {
          if ($f1 == $f1stu || $f1 == -$f1stu ) {
                if ($f2 == $f2stu || $f2 == -$f2stu){ return [1,1,0]; }
                elsif ($f3 == $f3stu || $f3 == -$f3stu){return[1,0,1]; }
                else { return[1,0,0]; }
          } elsif ( $f2 == $f2stu || $f2 == -$f2stu) {
                if ($f3 == $f3stu || $f3 == -$f3stu) { return [0,1,1]; }
                else{ return[0,1,0]; }
          } elsif ( $f3 == $f3stu || $f3 == -$f3stu) { 
            return [0,0,1]; 
          }
          else  
          {
            return[0,0,0];
          }
      }
   }
);


## Now find the projection of a in the direction of b. 
$magBsquared = $vecB.$vecB; 
$parProj = Compute("($aDotb)/($magBsquared) * $vecB");
$parProjX = $parProj . Vector(1,0,0);
$parProjY = $parProj . Vector(0,1,0);
$parProjZ = $parProj . Vector(0,0,1);

$perpProj = Compute("$vecA - $parProj");
$perpProjX = $perpProj . Vector(1,0,0);
$perpProjY = $perpProj . Vector(0,1,0);
$perpProjZ = $perpProj . Vector(0,0,1);

#################################################
# Write Problem 
#
# PGML syntax at 
# 	http://webwork.maa.org/wiki/Introduction_to_PGML#.V8CReFQko2w
# 	http://webwork.maa.org/wiki/Category:PGML_Syntax#.V8DHHVQko2w


BEGIN_TEXT

Let \(\vec{u} = \langle $a1,  $a2 ,  $a3 \rangle\) and \(\vec{v} = \langle  $b1 ,  $b2 ,  $b3 \rangle\) be vectors in \(\mathbb{R}^3\)

$BR
$BR
1. Compute \(\vec{u} \bullet \vec{v} =  \) \{ ans_rule(10) \} 

$BR
$BR
$PAR
2. Compute \(\vec{u} \times \vec{v} =  \Big\langle\) \{ ans_rule(10) \} , \{ ans_rule(10) \} , \{ ans_rule(10) \} \(\Big\rangle\) 

$BR
$BR
$PAR
3. Find a unit vector perpendicular to both \(\vec{u}\) and \(\vec{v}\)

$BR
\(\Big\langle\)
\{$ONEunitvector->ans_rule(10)\}, 
\{$ONEunitvector->ans_rule(10)\}, 
\{$ONEunitvector->ans_rule(10)\} 
\( \Big\rangle \)

$BR
$BR
$PAR
4. Find the vector projection \(\vec{u}_{\parallel \vec{v}}\) of \(\vec{u}\) in the direction of \(\vec{v}\) 
$BR$BR
\(\vec{u}_{\parallel \vec{v}} = \Big\langle\) \{ ans_rule(10) \} , \{ ans_rule(10) \} , \{ ans_rule(10) \} \(\Big\rangle\) 

$BR
$BR
$PAR 
5. Find \(\vec{u}_{\perp \vec{v}}\), the vector component of \(\vec{u}\) orthogonal to \(\vec{v}\).
$BR$BR
\(\vec{u}_{\perp \vec{v}} = \Big\langle\) \{ ans_rule(10) \} , \{ ans_rule(10) \} , \{ ans_rule(10) \} \(\Big\rangle\) 



END_TEXT

#1 dot product
ANS( $aDotb->cmp() );

#2 cross product
ANS($crossX->cmp());
ANS($crossY->cmp());
ANS($crossZ->cmp());

#3 one unit vector (multi-ans-checker)
ANS($ONEunitvector->cmp());

#4 Parallel Projection
ANS($parProjX->cmp());
ANS($parProjY->cmp());
ANS($parProjZ->cmp());


#4 Perpendicular Projection
ANS($perpProjX->cmp());
ANS($perpProjY->cmp());
ANS($perpProjZ->cmp());

ENDDOCUMENT();
