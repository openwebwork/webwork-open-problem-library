##DESCRIPTION
##
## Created by the UBC Faculty of Applied Science.  
## Project led by Agnes d'Entremont, Jonathan Verrett, and Negar M. Harandi, 
## with support from Paul Lucina and Joseph Yan.
##              
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from the UBC Department of
## Electrical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people.
##
##ENDDESCRIPTION

## DBsubject(Engineering Signals and Systems)
## DBchapter()
## DBsection()
## Date()
## Author()
## Level()
## KEYWORDS('')
## RESOURCES('UBC-SIG-18-065a.png', 'UBC-SIG-18-065b.png')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

#image scale
$imgScaleA = .2;
$imgScaleB = .2;

#image aspect ratio
$widthA = $imgScaleA*1758;
$heightA = $imgScaleA*827;
$widthB = $imgScaleB*1835;
$heightB = $imgScaleB*1563;

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"parserFunction.pl"
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

Context("Complex");
Context()->variables->add(n=>"Real");
Context()->variables->add(M=>"Real");
Context()->variables->add(A=>"Real");
Context()->variables->add(B=>"Real");
parserFunction("x(n)"=>"sin(8*n/pi/2.78132)+6.52*n^6");
parserFunction("x1(n)"=>"sin(2.71828*n/pi)+1.57*n^2");
parserFunction("x2(n)"=>"sin(4*2.71828*n/pi)+3.14*n^4");

#given
$alpha = random(11,33,1);

$mcYes = PopUp(["?","Yes","No"], "Yes");
$mcNo = PopUp(["?","Yes","No"], "No");

#computation 
$y2 = Formula("$alpha *x(M-n)");
$y1 = Formula("$alpha *x(-M-n)");
$y3 = Formula("$alpha *(A x1(-n) + B x2(-n))");
$y4 = Formula("$alpha *(A x1(-n) + B x2(-n))");

##############################################################
#
#  Text 
#
#

BEGIN_PGML

A discrete-time system is described by [`y[n]=[$alpha]x[-n]`].

*a)* Given that [`D_M`] is a system that delays the input by [`M`] samples, find the outputs [`y_1[n]`] and [`y_2[n]`] as shown in the figures below.

[@ image("UBC-SIG-18-065a.png", width=>[$widthA], height=>[$heightA], tex_size=>500) @]*

[`y_1[n]=`] [____________________]  
[`y_2[n]=`] [____________________]

*b)* Is the system time-invariant? [@ $mcNo->menu() @]*

*c)* Find the outputs [`y_3[n]`] and [`y_4[n]`] as shown in the figures below.

[@ image("UBC-SIG-18-065b.png", width=>[$widthB], height=>[$heightB], tex_size=>500) @]*

[`y_3[n]=`] [____________________]  
[`y_4[n]=`] [____________________]

*d)* Is the system linear? [@ $mcYes->menu() @]*

*e)* Is the system causal? [@ $mcNo->menu() @]*

*f)* Is the system memoryless? [@ $mcNo->menu() @]*

*g)* Is the system stable? [@ $mcYes->menu() @]*

_In your answers, enter [`z(n)`] for a discrete-time function [`z[n]`]. WebWork is unable to parse a function that uses square brackets. Also, enter "x1(n)" for [`x_1[n]`] and "x2(n)" for [`x_2[n]`]._

_Part *b* will only be marked correct if part *a* is correct. Part *d* will only be marked correct if part *c* is correct. Part *e* to *g* will only be marked correct if both *a* and *c* are correct._ 

END_PGML

ANS($y1->cmp);
ANS($y2->cmp);

$ans_hash1 = $y1->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(1)});
$a1Correct= $ans_hash1->{score};
$ans_hash2 = $y2->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(2)});
$a2Correct= $ans_hash2->{score};

ANS($mcNo->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $a1Correct==1 && $a2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

ANS($y3->cmp);
ANS($y4->cmp);

$ans_hash4 = $y3->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(4)});
$c1Correct= $ans_hash4->{score};
$ans_hash5 = $y4->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(5)});
$c2Correct= $ans_hash5->{score};

ANS($mcYes->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $c1Correct==1 && $c2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

ANS($mcNo->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $a1Correct==1 && $a2Correct==1 && $c1Correct==1 && $c2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

ANS($mcNo->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $a1Correct==1 && $a2Correct==1 && $c1Correct==1 && $c2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

ANS($mcYes->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $a1Correct==1 && $a2Correct==1 && $c1Correct==1 && $c2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

##############################################################

ENDDOCUMENT();