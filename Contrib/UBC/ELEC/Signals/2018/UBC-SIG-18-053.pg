##DESCRIPTION
##
## Created by the UBC Faculty of Applied Science.  
## Project led by Agnes d'Entremont, Jonathan Verrett, and Negar M. Harandi, 
## with support from Paul Lucina and Joseph Yan.
##              
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from the UBC Department of
## Electrical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people.
##
##ENDDESCRIPTION

## DBsubject(Engineering Signals and Systems)
## DBchapter()
## DBsection()
## Date()
## Author()
## Level()
## KEYWORDS('')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"parserFunction.pl",
	"parserOneOf.pl",
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

Context("Matrix");
Context()->variables->add(n=>"Real");
Context()->variables->add(t=>"Real");

#given
do{
    $a = random(2, 9, 1);
    $p = random(2, 9, 1);
    $q = random(2, 9, 1);
}while($p==$q);

$notB = $p*$q;
$b = -$p*$q/$a;
$c = $p+$q;
$matA =  Matrix("[[0,$a],[$b,$c]]");

#computation 
$a1 = Matrix("[[$p,0],[0,$q]]");
$a2 = Matrix("[[$q,0],[0,$p]]");
$ansA = OneOf($a1,$a2);

$ansB = Matrix("[[1,1],[$p/$a, $q/$a]]");

$ansC1 = $ansB * Matrix("[[$p^n,0],[0,$q^n]]")* ($ansB->inverse);
$ansC2 = $matA->inverse;

$ansD = $ansB * Matrix("[[e^($p t),0],[0,e^($q t)]]")* ($ansB->inverse);

$ansE1 = Formula("($q*$p^n - $p*$q^n)/($q - $p)");
$ansE2 = Formula("($q ^ n - $p ^ n)/($q - $p)");

##############################################################
#
#  Text 
#
#

BEGIN_PGML

Enter your matrices with nested square brackets or you will receive an error message (e.g., \[\[a,b\],\[c,d\]\] to represent [`\begin{bmatrix}a \hspace{0.1in} b \\c \hspace{0.1in} d\end{bmatrix}`] or \[\[a\],\[b\]\] to represent [`\begin{bmatrix}a \\b \end{bmatrix}`])

For the matrix [`A = \begin{bmatrix}0&[$a]\\ -\frac{[$notB]}{[$a]}&[$c]\end{bmatrix}`],

*a)* Diagonalize the matrix (ie. find matrices [`T`] and [`D`] such that [`A=TDT^{-1}`]) and enter the diagonal matrix below.

[`D=`] [___________________]

*b)* Enter the [`T`] matrix below.

[`T=`] [___________________]

_Part *b* will only be marked correct if part *a* is correct._

*c)* Use your answer from part a to find [`A^n`] and [`A^{-1}`].

[`A^n=`] [___________________]

[`A^{-1}=`] [___________________]

*d)* Use your answer from part a to find [`e^{At}`]. 

[`e^{At}=`] [___________________]

*e)* The Cayley-Hamilton Theorem (CHT) requires existence of coefficients [`\alpha_0`] and [`\alpha_1`] such that [`f(A)=\alpha_0 I + \alpha_1 A`]. Find [`\alpha_0`] and [`\alpha_1`] when [`f(A) = A^n`].

[`\alpha_0=`] [___________________]

[`\alpha_1=`] [___________________]

*Important:* Try using the coefficients you found in part *d* to redo parts *b* and *c* and verify that you get the same answer using both approaches. Note that you should be able to use both CHT and diagonalization technique in an exam.



END_PGML

ANS($ansA->cmp);

$ans_hash1 = $ansA->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(1)});
$aCorrect= $ans_hash1->{score};

ANS($ansB->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		$equal = 0;
		$matT = $student;
		$testMat1 = $matT * $a1 * ($matT->inverse);
		$testMat2 = $matT * $a2 * ($matT->inverse);

		if($matA == $testMat1 or $matA = $testmat2){
			$equal = 1;
		}

		if (($student == $correct or $equal == 1 ) && $aCorrect==1 ) {
			return 1;
		}else {
			return 0;
		}	
	}));

ANS($ansC1->cmp);
ANS($ansC2->cmp);

ANS($ansD->cmp);

ANS($ansE1->cmp);
ANS($ansE2->cmp);

##############################################################

ENDDOCUMENT();