##DESCRIPTION
##
## Created by the UBC Faculty of Applied Science.  
## Project led by Agnes d'Entremont, Jonathan Verrett, and Negar M. Harandi, 
## with support from Paul Lucina and Joseph Yan.
##              
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from the UBC Department of
## Electrical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people.
##
##ENDDESCRIPTION

## DBsubject(Engineering Signals and Systems)
## DBchapter()
## DBsection()
## Date()
## Author()
## Level()
## KEYWORDS('')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"niceTables.pl",
	"parserFunction.pl",
	"PGgraphmacros.pl",
	"PGauxiliaryFunctions.pl",
	"parserOneOf.pl",
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

Context("Numeric");
Context()->functions->add(
  H => {
    class => 'Parser::Legacy::Numeric',
    perl => 'Parser::Legacy::Numeric::do_step'
  },
);
Context()->variables->add(t=>"Real");
Context()->variables->remove("x");
Context()->{format}{number}="%.2f";
#given

$mcYes = PopUp(["?","Yes","No"], "Yes");
$mcNo = PopUp(["?","Yes","No"], "No");
$mcOne = PopUp(["?","1","2","3","4"], "1");
$mcTwo = PopUp(["?","1","2","3","4"], "2");
$mcThree = PopUp(["?","1","2","3","4"], "3");
$mcFour = PopUp(["?","1","2","3","4"], "4");
do{$a = random(1,10,1);}while($a%3 == 0 or $a == 7);
$alpha = random(1,8,1)*2;
parserFunction("u(t)"=>"sin(2.71828*t/pi)+1.57*t^2");

#computation 
@array = (1,2,3,4);
foreach my $i (0..$#array){
	$j = random($i,$#array,1);
	$temp = $array[$i];
	$array[$i] = $array[$j];
	$array[$j] = $temp;
}

$choice1 = $mcOne;
$choice2 = $mcFour;

$xt = Formula("$alpha *abs(sin($a pi t))*H(t)");
$xet1 = Formula(".5*$alpha ( abs(sin($a pi t)) * u(t) + abs(sin(-$a pi t)) * u(-t))");
$xet2 = Formula(".5*$alpha abs(sin($a pi t))");
$xet = OneOf($xet1, $xet2);
$xot = Formula(".5*$alpha ( abs(sin($a pi t)) * u(t) - abs(sin(-$a pi t)) * u(-t))");

$xmax = 2/$a * 2;
$xmin = -$xmax;

$ymax = $alpha * 2 * 1.25;
$ymin = -$ymax;


$fig1 = init_graph($xmin,$ymin,$xmax,$ymax,axes=>[0,0],size=>[300,200],grid=>[8,10]); #correct choice 1
$x1t = Formula(".5 * $alpha abs(sin($a pi t))H(t) + .5* $alpha abs(sin(-$a pi t))H(-t)");
$f_graph = new Fun($x1t->perlFunction,$fig1); $f_graph->steps(400);


$fig2 = init_graph($xmin,$ymin,$xmax,$ymax,axes=>[0,0],size=>[300,200],grid=>[8,10]);
$x2t = Formula("$alpha abs(sin($a pi t))H(t) + $alpha abs(sin(-$a pi t))H(-t)");
$f_graph = new Fun($x2t->perlFunction,$fig2); $f_graph->steps(400);


$fig3 = init_graph($xmin,$ymin,$xmax,$ymax,axes=>[0,0],size=>[300,200],grid=>[8,10]);
$x3t = Formula("2 * $alpha abs(sin($a pi t))H(t) - 2 * $alpha abs(sin(-$a pi t))H(-t)");
$f_graph = new Fun($x3t->perlFunction,$fig3); $f_graph->steps(400);


$fig4 = init_graph($xmin,$ymin,$xmax,$ymax,axes=>[0,0],size=>[300,200],grid=>[8,10]); #correct choice 2
$x4t = Formula(".5 * $alpha abs(sin($a pi t))H(t) - .5* $alpha abs(sin(-$a pi t))H(-t)");
$f_graph = new Fun($x4t->perlFunction,$fig4); $f_graph->steps(400);


foreach my $i (0..$#array)
{
	if(@array[$i]==1){
		@fig[$i] = $fig1;
		if($i == 0){
			$choice1 = $mcOne;
		}
		elsif($i == 1){
			$choice1 = $mcTwo;
		}
		elsif($i == 2){
			$choice1 = $mcThree;
		}
		elsif($i == 3){
			$choice1 = $mcFour;
		}
	}
	elsif(@array[$i]==2){
		@fig[$i] = $fig4;
		if($i == 0){
			$choice2 = $mcOne;
		}
		elsif($i == 1){
			$choice2 = $mcTwo;
		}
		elsif($i == 2){
			$choice2 = $mcThree;
		}
		elsif($i == 3){
			$choice2 = $mcFour;
		}
	}
	elsif(@array[$i]==3){
		@fig[$i] = $fig2;
	}
	elsif(@array[$i]==4){
		@fig[$i] = $fig3;
	}
}

##############################################################
#
#  PGML 
#
#

BEGIN_TEXT

The equation for a causal full-wave rectified signal is given by 
\( \displaystyle x(t) = $alpha | sin($a \pi t)| u(t)\)



$PAR
$BBOLD a)$EBOLD The even component of \(x(t)\) is shown by \(x_e(t)\). 

$PAR
$SPACE $SPACE $SPACE 1) Find the equation for \(x_e(t)\).$BR
$SPACE $SPACE $SPACE $SPACE $SPACE $SPACE \(x_e(t)=\)\{ans_rule(35)\} $BR

END_TEXT

ANS($xet->cmp);
$ans_hash1 = $xet->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(1)});
$aCorrect= $ans_hash1->{score};

BEGIN_TEXT

$PAR
$SPACE $SPACE $SPACE 2) From the figures 1 to 4 shown below, select the graph that matches \(x_e(t)\).$BR 
$SPACE $SPACE $SPACE $SPACE $SPACE $SPACE Figure:\{$choice1->menu()\} $BR

$PAR
$SPACE $SPACE $SPACE 3) Is \(x_e(t)\) causal?
\{$mcNo->menu()\} $BR

$PAR
$SPACE $SPACE $SPACE 4) Is \(x_e(t)\) periodic?
\{$mcYes->menu()\} $BR

END_TEXT

ANS($choice1->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $aCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));
ANS($mcNo->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $aCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));
ANS($mcYes->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $aCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

BEGIN_TEXT

$BR
$BBOLD b)$EBOLD The odd component of \(x(t)\) is shown by \(x_o(t)\).
$PAR
$SPACE $SPACE $SPACE 1) Find the equation for \(x_o(t)\).$BR
$SPACE $SPACE $SPACE $SPACE $SPACE $SPACE \(x_o(t)=\)\{ans_rule(35)\} $BR

END_TEXT

ANS($xot->cmp);
$ans_hash5 = $xot->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(5)});
$eCorrect= $ans_hash5->{score};

BEGIN_TEXT
$PAR
$SPACE $SPACE $SPACE 2) From the figures 1 to 4 shown below, select the graph that matches \(x_o(t)\).$BR
$SPACE $SPACE $SPACE $SPACE $SPACE $SPACE Figure: \{$choice2->menu()\} $BR

$PAR
$SPACE $SPACE $SPACE 3) Is \(x_o(t)\) causal?
\{$mcNo->menu()\} $BR

$PAR
$SPACE $SPACE $SPACE 4) Is \(x_o(t)\) periodic?
\{$mcNo->menu()\} $BR

$PAR
$BITALIC Parts $BBOLD b$EBOLD to $BBOLD d$EBOLD will only be marked correct if part $BBOLD a$EBOLD is correct. Parts $BBOLD f$EBOLD to $BBOLD h$EBOLD will only be marked correct if part $BBOLD e$EBOLD is correct. $EITALIC

$PAR
\{
	DataTable(
		[
			[image(insertGraph($fig[0]), width=>300, height=>200, tex_size=>500),image(insertGraph($fig[1]), width=>300, height=>200, tex_size=>500)],
			['Figure 1','Figure 2'],
			[image(insertGraph($fig[2]), width=>300, height=>200, tex_size=>500),image(insertGraph($fig[3]), width=>300, height=>200, tex_size=>500)],
			['Figure 3','Figure 4'], 
		],
		allcellcss=>'padding-left:20px; padding-right:20px; padding-top:0px;  margin:auto; font-weight:bold;',
		);

\}

END_TEXT

ANS($choice2->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $eCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));
ANS($mcNo->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $eCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));
ANS($mcNo->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $eCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));



##############################################################

ENDDOCUMENT();