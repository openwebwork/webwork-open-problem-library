##DESCRIPTION
##
## Created by the UBC Faculty of Applied Science.  
## Project led by Agnes d'Entremont, Jonathan Verrett, and Negar M. Harandi, 
## with support from Paul Lucina and Joseph Yan.
##              
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from the UBC Department of
## Electrical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people.
##
##ENDDESCRIPTION

## DBsubject(Engineering Signals and Systems)
## DBchapter()
## DBsection()
## Date()
## Author()
## Level()
## KEYWORDS('')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"parserFunction.pl"
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

Context("Complex");
Context()->variables->add(w=>"Real");
Context()->constants->add(j => i);
parserFunction("u(t)"=>"(t*t)");
parserFunction("sinc(w)"=>"sin(w)/w");

#given
$a = random(2, 6, 1);
$b = random(2, 6, 1);
$c = random(2, 12, 1);
$f = random(2, 9, 1);
$mcTimeShift = PopUp(["?","Modulation","Time-shift","Compression in time","Duality","Expansion in time","Frequency-shift"], "Time-shift");
$mcModulation = PopUp(["?","Modulation","Time-shift","Compression in time","Duality","Expansion in time","Frequency-shift"], "Modulation");
$mcCompressionInTime = PopUp(["?","Modulation","Time-shift","Compression in time","Duality","Expansion in time","Frequency-shift"], "Compression in time");

#computation 
$ans1 = Formula("2 sinc(w)(-[$a]e^(i w)+ [$b]e^(-iw))");
$ans2 = Formula("sinc(w + pi [$c])+ sinc(w - pi[$c])");
$ans3 = Formula("2 sinc(w/[$f])");

##############################################################
#
#  Text 
#
#

BEGIN_PGML

_Hint: [`sinc(t)=sin(t)/t`]_

Find the Fourier transform [`X_1(\omega)`], [`X_2(\omega)`], and [`X_3(\omega)`] of the signals [`x_1(t)`], [`x_2(t)`], and [`x_3(t)`], using the Fourier transform pair [`x(t)=u(t+1) - u(t-1)\longleftrightarrow X(\omega) = 2sinc(\omega)`]. Then select the Fourier transform property you used for each signal, from the corresponding drop-down menu.

_In your answers, enter "w" for \omega._

*a)* [`x_1(t) = -[$a]u(t+2) + [$a+$b]u(t) - [$b]u(t-2)`]  
[`X_1(\omega)=`] [____________________] [@ $mcTimeShift->menu() @]*  

*b)* [`x_2(t) = cos([$c]\pi t)[u(t+1) - u(t - 1)]`]  
[`X_2(\omega)=`] [____________________] [@ $mcModulation->menu() @]* 

*c)* [`x_3(t) = [$f][u(t + \frac{1}{[$f]}) - u(t - \frac{1}{[$f]})]`]  
[`X_3(\omega)=`] [____________________] [@ $mcCompressionInTime->menu() @]*

_Answers to the drop-downs will only be marked correct if their corresponding FT's are correct._

END_PGML

ANS($ans1->cmp);
$ans_hash1 = $ans1->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(1)});
$aCorrect= $ans_hash1->{score};

ANS($mcTimeShift->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $aCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

ANS($ans2->cmp);
$ans_hash2 = $ans2->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(3)});
$bCorrect= $ans_hash2->{score};

ANS($mcModulation->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $bCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

ANS($ans3->cmp);
$ans_hash3 = $ans3->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(5)});
$cCorrect= $ans_hash3->{score};

ANS($mcCompressionInTime->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $cCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));



##############################################################

ENDDOCUMENT();