##DESCRIPTION
##
## Created by the UBC Faculty of Applied Science.  
## Project led by Agnes d'Entremont, Jonathan Verrett, and Negar M. Harandi, 
## with support from Paul Lucina and Joseph Yan.
##              
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from the UBC Department of
## Electrical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people.
##
##ENDDESCRIPTION

## DBsubject(Engineering Signals and Systems)
## DBchapter()
## DBsection()
## Date()
## Author()
## Level()
## KEYWORDS('')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"niceTables.pl",
	"parserFunction.pl",
	"PGgraphmacros.pl",
	"niceTables.pl",
	"PGauxiliaryFunctions.pl",
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

Context("Complex");
Context()->constants->add(j => i);
Context()->variables->add(w=>"Real");
parserFunction("sinc(w)"=>"sin(w)/w");
Context()->functions->add(
  H => {
    class => 'Parser::Legacy::Numeric',
    perl => 'Parser::Legacy::Numeric::do_step'
  },
);
parserFunction("r(w)"=>"w H(w)");

#given
$a = random(2, 12, 1);
$alpha = random(2, 6, 1);
$b = random(2, 9, 1); 

$mc1 = PopUp(["?","1","2", "3","4"], "1");
$mc2 = PopUp(["?","1","2", "3","4"], "2");
$mc3 = PopUp(["?","1","2", "3","4"], "3");
$mc4 = PopUp(["?","1","2", "3","4"], "4");

#computation 
@array = (1,2,3,4);
foreach my $i (0..$#array){
	$j = random($i,$#array,1);
	$temp = $array[$i];
	$array[$i] = $array[$j];
	$array[$j] = $temp;
}

$f = Formula("e^(-$b w * w)");
$figSig1 = init_graph(-2,-1,2,2,axes=>[0,0],size=>[400,200],grid=>[8,6]);
$f_graph = new Fun($f->perlFunction,$figSig1); $f_graph->steps(400);

$f = Formula("$alpha (r(w - $a) - 2 r(w - 1 - $a) + r(w - 2 - $a))");
$figSig2 = init_graph(-1,-1,$a + 3,$alpha + 1,axes=>[0,0],size=>[400,200],grid=>[4 + $a,$alpha + 2]);;
$f_graph = new Fun($f->perlFunction,$figSig2); $f_graph->steps(400);

$sig1 = Formula("sqrt(pi/$b)e^(-w^2/(4*$b))");
$correctFig1 = init_graph(-6,-1,6,2,axes=>[0,0],size=>[400,200],grid=>[12,3]);
$f_graph = new Fun($sig1->perlFunction,$correctFig1); $f_graph->steps(400);

$sig2 = Formula("$alpha e^(-($a + 1)i w)(sin(w/2)/(w/2))^2");
$f = Formula("$alpha cos(w*(-$a - 1))(sin(w/2)/(w/2))^2");
$correctFig2 = init_graph(-6,-($alpha+1),6,$alpha+1,axes=>[0,0],size=>[400,200],grid=>[12,$alpha*2+2]);
add_functions($correctFig2, "$f for w in <.0001,6>"."using color:blue and weight:2"); ($correctFig2->fn)[0]->steps(800);
add_functions($correctFig2, "$f for w in <-6,-.0001>"."using color:blue and weight:2"); ($correctFig2->fn)[0]->steps(800);

$f = Formula("4*$alpha cos(w*(-$a - 1))(sin(w/2))^2/w");
$wrongFig1 = init_graph(-10,-$alpha*2,10,$alpha*2,axes=>[0,0],size=>[400,200],grid=>[20,$alpha*4]);
add_functions($wrongFig1, "$f for w in <.0001,10>"."using color:blue and weight:2"); ($wrongFig1->fn)[0]->steps(800);
add_functions($wrongFig1, "$f for w in <-10,-.0001>"."using color:blue and weight:2"); ($wrongFig1->fn)[0]->steps(800);

$f = Formula("sqrt(pi/$b)e^(-w/(4*$b))");
$wrongFig2 = init_graph(-10,-1,10,5,axes=>[0,0],size=>[400,200],grid=>[10,6]);
$f_graph = new Fun($f->perlFunction,$wrongFig2); $f_graph->steps(400);

foreach my $i (0..$#array)
{
	if(@array[$i]==1){
		@fig[$i] = $correctFig1;
		if($i == 0){
			$correct1 = $mc1;
		}
		elsif($i == 1){
			$correct1 = $mc2;
		}
		elsif($i == 2){
			$correct1 = $mc3;
		}
		elsif($i == 3){
			$correct1 = $mc4;
		}
	}
	elsif(@array[$i]==2){
		@fig[$i] = $correctFig2;
		if($i == 0){
			$correct2 = $mc1;
		}
		elsif($i == 1){
			$correct2 = $mc2;
		}
		elsif($i == 2){
			$correct2 = $mc3;
		}
		elsif($i == 3){
			$correct2 = $mc4;
		}
	}
	elsif(@array[$i]==3){
		@fig[$i] = $wrongFig1;
	}
	elsif(@array[$i]==4){
		@fig[$i] = $wrongFig2;
	}
}

##############################################################
#
#  Text 
#
#

BEGIN_PGML

For each of the signals given in the table below, first find the Fourier transform. Simplify your answer as much as possible and enter it as an expression consisting of a single term. Then, graph the Fourier transform, and from the figures 1 to 4 given at the bottom, find the one that best matches the Fourier transform that you have graphed. 

Note that in an exam, you will have to show the solution, and produce the graph of the Fourier transform of a function yourself.

END_PGML

BEGIN_TEXT
$PAR
\{
	DataTable(
		[
			['','$BBOLD Signal, \(x(t)\) $EBOLD','$BBOLD FT of signal, \(X(\omega)\) $EBOLD','$BBOLD Figure Number $EBOLD'],
			['A','\(e^{-$b t^2}\) $BR' . image(insertGraph($figSig1), width=>400, height=>200, tex_size=>500),ans_rule(10),$mc1->menu()],
			['B',image(insertGraph($figSig2), width=>400, height=>200, tex_size=>500),ans_rule(10),$mc2->menu()],
		],
		center => 1,
		allcellcss=>'padding-left:20px; padding-right:20px; border: solid thin #CCCCCC;',
		);
\}
$PAR

\{
	DataTable(
		[	
			[image(insertGraph(@fig[0]), width=>400, height=>200, tex_size=>500),image(insertGraph(@fig[1]), width=>400, height=>200, tex_size=>500)],
			['Figure 1','Figure 2'],
			[image(insertGraph(@fig[2]), width=>400, height=>200, tex_size=>500),image(insertGraph(@fig[3]), width=>400, height=>200, tex_size=>500)],
			['Figure 3','Figure 4'], 
		],
		center => 1,
		allcellcss=>'padding-left:20px; padding-right:20px; padding-top:0px;  margin:auto; font-weight:bold;',
		);
\} $BR
END_TEXT

ANS($sig1->cmp);
ANS($correct1->cmp);
ANS($sig2->cmp);
ANS($correct2->cmp);

##############################################################

ENDDOCUMENT();