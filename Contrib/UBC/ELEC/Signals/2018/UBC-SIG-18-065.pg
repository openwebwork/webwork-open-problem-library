##DESCRIPTION
##
## Created by the UBC Faculty of Applied Science.  
## Project led by Agnes d'Entremont, Jonathan Verrett, and Negar M. Harandi, 
## with support from Paul Lucina and Joseph Yan.
##              
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from the UBC Department of
## Electrical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people.
##
##ENDDESCRIPTION

## DBsubject(Engineering Signals and Systems)
## DBchapter()
## DBsection()
## Date()
## Author()
## Level()
## KEYWORDS('')
## RESOURCES('UBC-SIG-18-065a.png', 'UBC-SIG-18-065b.png')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

#image scale
$imgScaleA = .2;
$imgScaleB = .2;

#image aspect ratio
$widthA = $imgScaleA*1758;
$heightA = $imgScaleA*827;
$widthB = $imgScaleB*1835;
$heightB = $imgScaleB*1563;

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"parserFunction.pl",
	"PGgraphmacros.pl",
	"PGauxiliaryFunctions.pl",
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

Context("Complex");
Context()->variables->add(n=>"Real");
Context()->variables->add(M=>"Real");
Context()->variables->add(A=>"Real");
Context()->variables->add(B=>"Real");
parserFunction("x(n)"=>"sin(8*n/pi/2.78132)+6.52*n^6");
parserFunction("x1(n)"=>"sin(2.71828*n/pi)+1.57*n^2");
parserFunction("x2(n)"=>"sin(4*2.71828*n/pi)+3.14*n^4");

#given
$alpha = random(2,9,1);
$beta = random(2,9,1);
$n1 = random(1,9,1);
$n2 = random(1,9,1);
$n3 = random(1,9,1);
$n4 = random(1,9,1);
$n5 = random(1,9,1);
$n6 = random(1,9,1);
$n7 = random(1,9,1);

$mcYes = PopUp(["?","Yes","No"], "Yes");
$mcNo = PopUp(["?","Yes","No"], "No");

#computation 
$ymax = max($n1,$n2,$n3,$n4,$n5,$n6,$n7)+1;
$ymin = -1;
$xmax = 5;
$xmin = -3;

$xgrid = $xmax + abs($xmin);
$ygrid = $ymax + abs($ymin);

$fig = init_graph($xmin,$ymin,$xmax,$ymax,axes=>[0,0],size=>[400,300],grid=>[$xgrid,$ygrid]);

$fig->moveTo(-2,0);
$fig->lineTo(-2,$n1,'blue',2);
$fig->stamps(closed_circle(-2,$n1,'blue'));

$fig->moveTo(-1,0);
$fig->lineTo(-1,$n2,'blue',2);
$fig->stamps(closed_circle(-1,$n2,'blue'));

$fig->moveTo(0,0);
$fig->lineTo(0,$n3,'blue',2);
$fig->stamps(closed_circle(0,$n3,'blue'));

$fig->moveTo(1,0);
$fig->lineTo(1,$n4,'blue',2);
$fig->stamps(closed_circle(1,$n4,'blue'));

$fig->moveTo(2,0);
$fig->lineTo(2,$n5,'blue',2);
$fig->stamps(closed_circle(2,$n5,'blue'));

$fig->moveTo(3,0);
$fig->lineTo(3,$n6,'blue',2);
$fig->stamps(closed_circle(3,$n6,'blue'));

$fig->moveTo(4,0);
$fig->lineTo(4,$n7,'blue',2);
$fig->stamps(closed_circle(4,$n7,'blue'));

$a1 = $alpha*$n1 + $beta*$n2**2;
$a2 = $alpha*$n2 + $beta*$n3**2;
$a3 = $alpha*$n3 + $beta*$n4**2;
$a4 = $alpha*$n4 + $beta*$n5**2;
$a5 = $alpha*$n5 + $beta*$n6**2;
$a6 = $alpha*$n6 + $beta*$n7**2;

$a = List($a1,$a2,$a3,$a4,$a5,$a6);
$y1 = Formula("$alpha x(n-M) + $beta (x(n+1-M))^2");
$y2 = Formula("$alpha x(n-M) + $beta (x(n+1-M))^2");
$y3 = Formula("$alpha (A x1(n)+B x2(n)) + $beta (A x1(n+1) + B x2(n+1))^2");
$y4 = Formula("A($alpha x1(n)+ $beta (x1(n+1))^2) + B ($alpha x2(n) + $beta (x2(n+1))^2)");

##############################################################
#
#  Text 
#
#

BEGIN_PGML

A discrete-time system is described by [`y[n]=[$alpha]x[n]+[$beta](x[n+1])^2`]

*a)* Find the output of the system, [`y[n]`], for [`-2 \leq n \leq 3`], given the input signal shown in the figure below. Enter your answer as a list, separated by commas.

[@ image(insertGraph($fig), width=>400, height=>300, tex_size=>500) @]*

[`y[n]=`] [____________________]   

*b)* Given that [`D_M`] is a system that delays the input by [`M`] samples, find the outputs [`y_1[n]`] and [`y_2[n]`] as shown in the figures below.

[@ image("UBC-SIG-18-065a.png", width=>[$widthA], height=>[$heightA], tex_size=>500) @]*

[`y_1[n]=`] [____________________]  
[`y_2[n]=`] [____________________]

*c)* Is the system time-invariant? [@ $mcYes->menu() @]*

*d)* Find the outputs [`y_3[n]`] and [`y_4[n]`] as shown in the figures below.

[@ image("UBC-SIG-18-065b.png", width=>[$widthB], height=>[$heightB], tex_size=>500) @]*

[`y_3[n]=`] [____________________]  
[`y_4[n]=`] [____________________]

*e)* Is the system linear? [@ $mcNo->menu() @]*

*f)* Is the system causal? [@ $mcNo->menu() @]*

_In your answers, enter [`z(n)`] for a discrete-time function [`z[n]`]. WebWork is unable to parse a function that uses square brackets. Also, enter "x1(n)" for [`x_1[n]`] and "x2(n)" for [`x_2[n]`]._

_Part *c* will only be marked correct if part *b* is correct. Part *e* will only be marked correct if part *d* is correct. Part *f* will only be marked correct if part *b* and *d* are correct._

END_PGML

ANS($a->cmp(ordered=>1));

ANS($y1->cmp);
ANS($y2->cmp);

$ans_hash2 = $y1->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(2)});
$b1Correct= $ans_hash2->{score};
$ans_hash3 = $y2->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(3)});
$b2Correct= $ans_hash3->{score};

ANS($mcYes->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $b1Correct==1 && $b2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

ANS($y3->cmp);
ANS($y4->cmp);

$ans_hash5 = $y3->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(5)});
$d1Correct= $ans_hash5->{score};
$ans_hash6 = $y4->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(6)});
$d2Correct= $ans_hash6->{score};

ANS($mcNo->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $d1Correct==1 && $d2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));
ANS($mcNo->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $d1Correct==1 && $d2Correct==1 && $b1Correct==1 && $b2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));



##############################################################

ENDDOCUMENT();