##DESCRIPTION
##
## Created by the UBC Faculty of Applied Science.  
## Project led by Agnes d'Entremont, Jonathan Verrett, and Negar M. Harandi, 
## with support from Paul Lucina and Joseph Yan.
##              
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from the UBC Department of
## Electrical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people.
##
##ENDDESCRIPTION

## DBsubject(Engineering Signals and Systems)
## DBchapter()
## DBsection()
## Date()
## Author()
## Level()
## KEYWORDS('')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"PGgraphmacros.pl",
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

Context("Numeric");
Context()->functions->add(
  u => {
    class => 'Parser::Legacy::Numeric',
    perl => 'Parser::Legacy::Numeric::do_step'
  },
);
Context()->variables->add(t=>"Real");
Context()->variables->remove("x");

#given
do{$alpha = random(-2,2,1);}while($alpha == 0);
do{$beta = random(-2,2,1);}while($beta == 0);
do{$gamma = random(-2,2,1);}while($gamma == 0);
do{$nu = random(-2,2,1);}while($nu == 0);
$a = random(1, 4, 1);
$b = random(2, 3, 1);
$c = random(4, 6, 1);

#graph generation
$gr = init_graph(-5,-10,7,10,axes=>[0,0],size=>[700,400],grid=>[12,20]);

$f = Formula("u(t+$a)-$alpha u(t) + $beta u(t - 1) + $gamma u(t - $b) + $nu u(t - $c)");
$f->{test_at} = [[$a-0.01],[$a+0.01],[$b-0.01],[$b+0.01],[$c-0.01],[$c+0.01],[.99],[1.01],[-.01],[.01]];
$f_graph = new Fun($f->perlFunction,$gr);
$f_graph->steps(400); $f_graph->color("blue"); $f_graph->weight(2);

#set tolerance
Context()->flags->set(
tolerance=>.01,
tolType => 'absolute');

##############################################################
#
#  Text 
#
#

BEGIN_TEXT
Express the signal \(x(t)\) shown in the figure below in terms of the unit step function, \(u(t)\). 
$PAR

\{image(insertGraph($gr), width=>700, height=>400, tex_size=>500)\}

$PAR

\(x(t)=\)\{ans_rule(50)\}

END_TEXT

ANS($f->cmp());

##############################################################

ENDDOCUMENT();