##DESCRIPTION
##
## Created by the UBC Faculty of Applied Science.  
## Project led by Agnes d'Entremont, Jonathan Verrett, and Negar M. Harandi, 
## with support from Paul Lucina and Joseph Yan.
##              
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from the UBC Department of
## Electrical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people.
##
##ENDDESCRIPTION

## DBsubject(Engineering Signals and Systems)
## DBchapter()
## DBsection()
## Date()
## Author()
## Level()
## KEYWORDS('')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"parserFunction.pl",
	"niceTables.pl",
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

Context("Matrix");

#given
$q = random(2, 9, 1);
$rt = random(1, 5, 1);
$p = 1/$rt;
$r = $rt**2;

$alpha = 3*$r*$q*$q;
$beta = sqrt($alpha**2 - 2*$alpha + 1);
$t = -$beta/$q/$q;

$a = random(2, 9, 1);
$b = random(2, 9, 1);
$c = random(2, 9, 1);
$d = random(2, 9, 1);
$e = random(2, 9, 1);
$f = random(2, 9, 1);
$g = random(2, 9, 1);

$mcYes = PopUp(["?","Yes","No"], "Yes");
$mcNo = PopUp(["?","Yes","No"], "No");

$mcMarStable = PopUp(["?","Marginally stable","Asymptotically stable","Unstable"],"Marginally stable");
$mcAsyStable = PopUp(["?","Marginally stable","Asymptotically stable","Unstable"],"Asymptotically stable");
$mcUnstable = PopUp(["?","Marginally stable","Asymptotically stable","Unstable"],"Unstable");

#computation 
$a0 = Formula("0");
$a1 = Formula("1");
$a2 = Formula("-$beta");
$a3 = Formula("0");
$a4 = Formula("$beta - $alpha * $beta");
$a5 = Formula("-$beta * $beta");
$a6 = Formula("$alpha * $beta - $alpha *$alpha * $beta");
$a7 = Formula("-2 * $alpha * $beta * $beta + $beta * $beta");

$bc = Matrix("[[0,0,1],[0,1,0],[1,0,$alpha]]");
$bo = Matrix("[[-$alpha,-$beta,1],[$beta,0,-$beta],[-$beta * $beta,$beta * (1- $alpha),0]]");

$d1 = Formula("-$q / $p");
$d2 = Formula("-$q / $p");
$d3 = Formula("-$t / $r");

if($d1 <= 1 and $d3 < 1){
	$stability = $mcMarStable;
}
elsif($d1 < 1 and $d3 < 1){
	$stability = $mcAsyStable;
}
else{
	$stability = $mcUnstable;
}

$e0 = List("$a","$b","-$alpha * $a + $c","-$beta * $a - $alpha * $b","-$beta *$b - $alpha * $c","-$beta * $c");

$fc = Matrix("[[-$alpha,$beta,-$beta*$beta],[-$beta,0,$beta * (1- $alpha)],[1,-$beta,0]]");
$fo = Matrix("[[0,0,1],[0,1,0],[1,0,$alpha]]");

$h0 = Matrix("[[-$alpha * $d + $f + $beta * $g - $g],[$e - $g],[$d]]");

##############################################################
#
#  Text 
#
#

BEGIN_PGML

Note: Eigenvalues for this question are currently incorrect.

Enter your matrices with nested square brackets or you will receive an error message (e.g., \[\[a,b\],\[c,d\]\] to represent [`\begin{bmatrix}a \hspace{0.1in} b \\c \hspace{0.1in} d\end{bmatrix}`] or \[\[a\],\[b\]\] to represent [`\begin{bmatrix}a \\b \end{bmatrix}`])

Consider a discrete-time system whose input, [`x[n]`] and output [`y[n]`] are related by the difference equation below.
 
>>[``y[n] - [$alpha]y[n-2] - [$beta]y[n-3] = x[n-1] - [$beta]x[n-2] - [$alpha]x[n-3]``]<<

*a)* Compute the impulse response, [`h[n]`] of the system for [`0 \leq n \leq 7`] and enter it in the table below.

END_PGML

BEGIN_TEXT

$PAR
\{
	DataTable(
		[
			['\(n\)','\(0\)','\(1\)','\(2\)','\(3\)','\(4\)','\(5\)','\(6\)','\(7\)'],
			['\(h[n]\)',ans_rule(3),ans_rule(3),ans_rule(3),ans_rule(3),ans_rule(3),ans_rule(3),ans_rule(3),ans_rule(3)]
		],
		center => 0,
		allcellcss=>'padding-left:5px; padding-right:5px; border: solid thin #CCCCCC;',
		);

\}
$PAR
END_TEXT

BEGIN_PGML

*b)* Find the controllable canonical realization of this system, [`[A_c, B_c, C_c, D_c]`], and enter the controllability matrix, [`M_c`], and the observability matrix, [`M_o`] below.


[`M_c=`] [___________________]

[`M_o=`] [___________________]

*c)* Is the system controllable? [@ $mcYes->menu() @]*  
[`\quad`]Is the system observable? [@ $mcNo->menu() @]*  

*d)* Find and the eigenvalues of [`A_c`] and enter them in the table below. Then select if the system is stable, marginally stable or unstable.

END_PGML

BEGIN_TEXT

$PAR
\{
	DataTable(
		[
			['Eigenvalue of \(A_c\)','\(\lambda_1\)','\(\lambda_2\)','\(\lambda_3\)','Stability'],
			['',ans_rule(3),ans_rule(3),ans_rule(3),$stability->menu()]
		],
		center => 0,
		allcellcss=>'padding-left:5px; padding-right:5px; border: solid thin #CCCCCC;',
		);

\}
$PAR
END_TEXT

BEGIN_PGML

*e)* For the controllable realization of the system that you have found, find an input sequence to drive the state from [`v[0] = [000]^T`] to [`v[3]=[[$a][$b][$c]]^T`] and then back to [`v[6] = [000]^T`]. Enter your answer as an ordered list, separated by commas (e.g. [`x(0)`], [`x(1)`], [`x(2)`], [`x(3)`], [`x(4)`], [`x(5)`]). 

[`x(0) \cdots x(5) = `] [___________________]

*f)* Find the observable canonical realization of this system, [`[A_o, B_o, C_o, D_o]`], and enter the controllability matrix, [`M_c'`], and the observability matrix, [`M_o'`] below.

[`M_c'=`] [___________________]

[`M_o'=`] [___________________]

*g)* Is the system controllable? [@ $mcNo->menu() @]*  
[`\quad`]Is the system observable? [@ $mcYes->menu() @]* 

*h)* For the observable canonical realization of the system that you have found, determine the initial state [`v[0]`] given that you observe, with [`x[0]=x[1]=x[2]=[$g]`], [`y[0]=[$d]`], [`y[1]=[$e]`] and [`y[2]=[$f]`]. Enter the vector [`v[0]`] below:

[`v[0]=`] [___________________]

_Part *c* will only be marked correct if the answer to part *b* is correct. Part *g* will only be marked correct if the answer to part *f* is correct._

END_PGML

ANS($a0->cmp);
ANS($a1->cmp);
ANS($a2->cmp);
ANS($a3->cmp);
ANS($a4->cmp);
ANS($a5->cmp);
ANS($a6->cmp);
ANS($a7->cmp);

ANS($bc->cmp);
ANS($bo->cmp);

$ans_hash9 = $bc->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(9)});
$bcCorrect= $ans_hash9->{score};
$ans_hash10 = $bo->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(10)});
$boCorrect= $ans_hash10->{score};

ANS($mcYes->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $bcCorrect==1 && $boCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));
ANS($mcNo->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $bcCorrect==1 && $boCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

ANS($d1->cmp);
ANS($d2->cmp);
ANS($d3->cmp);
ANS($stability->cmp);

ANS($e0->cmp(ordered=>1));

ANS($fc->cmp);
ANS($fo->cmp);

$ans_hash18 = $fc->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(18)});
$fcCorrect= $ans_hash9->{score};
$ans_hash19 = $fo->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(19)});
$foCorrect= $ans_hash10->{score};

ANS($mcNo->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $fcCorrect==1 && $foCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));
ANS($mcYes->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $fcCorrect==1 && $foCorrect==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

ANS($h0->cmp);

##############################################################

ENDDOCUMENT();