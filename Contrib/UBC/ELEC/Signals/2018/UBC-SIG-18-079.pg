##DESCRIPTION
##
## Created by the UBC Faculty of Applied Science.  
## Project led by Agnes d'Entremont, Jonathan Verrett, and Negar M. Harandi, 
## with support from Paul Lucina and Joseph Yan.
##              
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from the UBC Department of
## Electrical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people.
##
##ENDDESCRIPTION

## DBsubject(Engineering Signals and Systems)
## DBchapter()
## DBsection()
## Date()
## Author()
## Level()
## KEYWORDS('')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"parserFunction.pl",
	"niceTables.pl",
	"PGgraphmacros.pl"
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

Context("Complex");
Context()->constants->add(j => i);
Context()->variables->add(O=>"Real");

#given
$N1 = random(2,9,1);
$p = 2*$N1;
$q = $N1;
$alpha = random(2,9,1);
$mc = PopUp(["?","Linearity","Time-shifting","Duality","Reflection","Modulation"], "Time-shifting");
$e=2.7182818284590452353602874713527;

#computation 
$ymax = $alpha + 1;
$ymin = -1;
$xmax1 = $p + 2;
$xmin1 = -3;
$xmax2 = $q + 2;
$xmin2 = -$q - 2;

$xgrid1 = $xmax1 + abs($xmin1);
$xgrid2 = $xmax2 + abs($xmin2);
$ygrid = $ymax + abs($ymin);

$#array1 = $xgrid1;
$#array2 = $xgrid2;

$fig1 = init_graph($xmin1,$ymin,$xmax1,$ymax,axes=>[0,0],size=>[700,300],grid=>[$xgrid1,$ygrid]);
$fig2 = init_graph($xmin2,$ymin,$xmax2,$ymax,axes=>[0,0],size=>[700,300],grid=>[$xgrid2,$ygrid]);

$start = $xmin1;

foreach my $i (0..$#array1) { 

	if($i<3 or $i>$#array1-2){
		$fig1->stamps(closed_circle($start,0,'blue'));
	}
	else{
		$fig1->moveTo($start,0);
		$fig1->lineTo($start,$alpha,'blue',2);
		$fig1->stamps(closed_circle($start,$alpha,'blue'));
	}
	$start++;
}

$start = $xmin2;

foreach my $i (0..$#array2) { 

	if($i<2 or $i>$#array2-2){
		$fig2->stamps(closed_circle($start,0,'blue'));
	}
	else{
		$fig2->moveTo($start,0);
		$fig2->lineTo($start,$alpha,'blue',2);
		$fig2->stamps(closed_circle($start,$alpha,'blue'));
	}
	$start++;
}

$x1 = Formula("$alpha*$e^(-i O*($N1))sin(O($N1+0.5))/sin(O/2)");
$x2 = Formula("$alpha sin(O(($N1)+0.5))/sin(O/2)");

##############################################################
#
#  Text 
#
#

BEGIN_PGML

JY Note: Apr 2, 2019: Issues with this question have been resolved. For part (b), ensure that your answer is purely real-valued. If the number of nonzero values in fig (a) is even, please report this to the instructor.

*a)* Find the Fourier transform of the rectangular pulse sequence, [`x_1[n]`], given in the figure below. _Enter [`\Omega`] as "O"._

[@ image(insertGraph($fig1), width=>700, height=>300, tex_size=>500) @]*

[`X_1(\Omega)=`] [_____]  

*b)* Use your answer from part *a* to find the Fourier transform of the rectangular pulse sequence, [`x_2[n]`], given in the figure below.

[@ image(insertGraph($fig2), width=>700, height=>300, tex_size=>500) @]*

[`X_2(\Omega)=`] [_____]  

[@ $mc->menu() @]*



_Part *c* will only be marked correct if part *b* is correct._

END_PGML

ANS($x1->cmp);
ANS($x2->cmp);

$ans_hash2 = $x2->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(2)});
$bCorrect= $ans_hash2->{score};

ANS($mc->cmp(checker=>sub{
	my ($correct,$student) = @_; 
	if (($student == $correct)&& $bCorrect==1) {
		return 1;
	}else {
		return 0;
	}	
}));

##############################################################

ENDDOCUMENT();