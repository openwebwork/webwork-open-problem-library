##DESCRIPTION
##
## Created by the UBC Faculty of Applied Science.  
## Project led by Agnes d'Entremont, Jonathan Verrett, and Negar M. Harandi, 
## with support from Paul Lucina and Joseph Yan.
##              
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from the UBC Department of
## Electrical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people.
##
##ENDDESCRIPTION

## DBsubject(Engineering Signals and Systems)
## DBchapter()
## DBsection()
## Date()
## Author()
## Level()
## KEYWORDS('')
## RESOURCES('UBC-SIG-18-052.png')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

#image scale
$imgScale = .18;

#image aspect ratio
$width = $imgScale*2219;
$height = $imgScale*1158;

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"parserFunction.pl"
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

Context("Matrix");
Context()->variables->add(s=>"Real");
Context()->variables->add(t=>"Real");

#given
$m = random(2, 9, 1);
do{$n = random(2, 9, 1)}while($m == $n);
$L = random(1, 9, 1);
$C = 1/($L*$m*$n);
$R = $L*($m+$n);
$alpha = random(2, 9, 1);
$beta= random(2, 9, 1);

$notC = $L * $m * $n;

#computation 
$aA = Matrix("[[0,-1/$C],[1/$L,-$R/$L]]");
$aB = Matrix("[[1/$C],[0]]");
$aC = Matrix("[[0,$R]]");
$aD = Matrix("[[0]]");

$hs = Formula("($R/($L*$C))/(s^2 + $R/$L s + 1/($L*$C))");

$phi = 1/($n - $m)*Matrix("[[($R/$L - $m)*e^(-$m t) - ($R/$L - $n)*e^(-$n t), -1/$C * (e^(-$m t) - e^(-$n t)) ],[1/$L * (e^(-$m t) - e^(-$n t)), -$m e^(-$m t) +$n e^(-$n t)]]");

$xt = $phi * Matrix("[[$alpha],[$beta]]");

##############################################################
#
#  Text 
#
#

BEGIN_PGML

Enter your matrices with nested square brackets or you will receive an error message (e.g., \[\[a,b\],\[c,d\]\] to represent [`\begin{bmatrix}a \hspace{0.1in} b \\c \hspace{0.1in} d\end{bmatrix}`] or \[\[a\],\[b\]\] to represent [`\begin{bmatrix}a \\b \end{bmatrix}`])

 Consider an RLC circuit shown in the figure below with[`R=[$R]`] [`\Omega`], [`L = [$L]`] [`H`], and [`C=\frac{1}{[$notC]}`] [`F`]. The state of this system can be described by a set of state variables ([`x_1`],[`x_2`]), where [`x_1`] is the capacitor voltage , [`v_c(t)`], and [`x_2s`] is the inductor current, [`i_L(t)`]. The input from is the current source, [`i(t)`], and the output is the voltage across the resistor, [`v_0(t)`]. 

 [@ image("UBC-SIG-18-052.png", width=>[$width], height=>[$height], tex_size=>500) @]*

*a)* Find the state-space representation of the system. Enter the corresponding [`[A,B,C,D]`] matrices below.

[`A=`] [___________________]

[`B=`] [___________________]

[`C=`] [___________________]

[`D=`] [___________________]

*b)* Find the transfer function, [`H(s)`], of this RLC circuit. 

[`H(s)=`] [___________________]

*c)* Find the state-transition matrix, [`\Phi(t)`].

[`\Phi(t)=`] [___________________]

*d)* Find the time-domain response, [`\begin{bmatrix}x_1(t)\\x_2(t)\end{bmatrix}`] of the circuit for zero input ([`i(t)=0`]) with initial conditions [`x_1(0)=[$alpha]`], [`x_2(0)=[$beta]`]. 

 [`\begin{bmatrix}x_1(t)\\x_2(t)\end{bmatrix}=`] [___________________]

END_PGML

ANS($aA->cmp);
ANS($aB->cmp);
ANS($aC->cmp);
ANS($aD->cmp);

ANS($hs->cmp);

ANS($phi->cmp);

ANS($xt->cmp);


##############################################################

ENDDOCUMENT();