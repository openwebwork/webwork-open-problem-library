##DESCRIPTION
##
## Created by the UBC Department of Mechanical Engineering. Project led by Agnes d'Entremont.
##
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this 
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from BCcampus, the UBC Department of
## Mechanical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people. 
##
##ENDDESCRIPTION

## DBsubject(Mining Engineering)
## DBchapter(Stripping Ratio and Pit Limits)
## DBsection(Stripping Ratio)
## Date()
## Author()
## Level()
## KEYWORDS('')
## RESOURCES('')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

$refreshCachedImages = 1; 

#image scale
$imgScale = .2;

#image aspect ratio
$width = $imgScale*3798;
$height = $imgScale*2027;

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"parserFunction.pl",
	"PGauxiliaryFunctions.pl",
    "compoundProblem5.pl",
    "niceTables.pl",
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);


Context("Numeric");

TEXT(beginproblem());

sub one_decimal_place
{
    # body of method or subroutine
    $count_increments = Real("0");
    $value_to_process = $_[0];
    while ($value_to_process > Real("0.1")){
      $value_to_process = $value_to_process - Real("0.1");
      $count_increments = $count_increments + Real("0.1");
    }

    if ($value_to_process < Real("0.05") ){
      $value_to_process= $count_increments;
    }
    else{
      $value_to_process = $count_increments + Real("0.1");
    }
    return $value_to_process
}

sub no_decimal_place
{
    # body of method or subroutine
    $count_increments = Real("0");
    $value_to_process = $_[0];
    while ($value_to_process > Real("1")){
      $value_to_process = $value_to_process - Real("1");
      $count_increments = $count_increments + Real("1");
    }

    
    if ($value_to_process < Real("0.5") ){
      $value_to_process= $count_increments;
    }
    else{
      $value_to_process = $count_increments + Real("1");
    }
    return $value_to_process
   
}

sub two_decimal_place
{
    # body of method or subroutine
    $count_increments = Real("0");
    $value_to_process = $_[0];
    while ($value_to_process > Real("0.01")){
      $value_to_process = $value_to_process - Real("0.01");
      $count_increments = $count_increments + Real("0.01");
    }

    if ($value_to_process < Real("0.005") ){
      $value_to_process= $count_increments;
    }
    else{
      $value_to_process = $count_increments + Real("0.01");
    }
    return $value_to_process
}




# variables are here:
Context("Numeric");

$ton_to_lb = 2000;
$operating_days_week = 5; # out of 7

$mining_cost = 1.80 ;#random(1.75, 1.8, 0.05);
$processing_cost = 1.75;
$G_A_cost = 0.72;

$Mill_recovery = 85;#random(85, 90, 1); # %

$selling_price_phase1 = 0.19;
$selling_price_phase2 = 0.21;
$selling_price_phase3 = 0.23;
$selling_price_phase4 = 0.26;
$selling_price_phase_final = 0.35;

$Li_metal = 0.06;

$total_cost_per_ton = $mining_cost+$processing_cost+$G_A_cost;
$revenue_final = (1/100)*$ton_to_lb*($Mill_recovery/100)*$selling_price_phase_final*$Li_metal;

$revenue1 = (1/100)*$ton_to_lb*($Mill_recovery/100)*$selling_price_phase1*$Li_metal;
$revenue2 = (1/100)*$ton_to_lb*($Mill_recovery/100)*$selling_price_phase2*$Li_metal;
$revenue3 = (1/100)*$ton_to_lb*($Mill_recovery/100)*$selling_price_phase3*$Li_metal;
$revenue4 = (1/100)*$ton_to_lb*($Mill_recovery/100)*$selling_price_phase4*$Li_metal;

$breakeven_grade_1 = $total_cost_per_ton/$revenue1;
$breakeven_grade_2 = $total_cost_per_ton/$revenue2;
$breakeven_grade_3 = $total_cost_per_ton/$revenue3;
$breakeven_grade_4 = $total_cost_per_ton/$revenue4;
$breakeven_grade_final = $total_cost_per_ton/$revenue_final;

# Mineral inventory for the Lithium Pit

# Grade 0 (overburden)
$grade_0_overburden_phase1 = 35496;
$grade_0_overburden_phase2 = 62630;
$grade_0_overburden_phase3 = 70030;
$grade_0_overburden_phase4 = 54240;
$grade_0_overburden_phase_final = 57870;
$grade_0_overburden_tons_summation = $grade_0_overburden_phase1 + $grade_0_overburden_phase2 + $grade_0_overburden_phase3 + $grade_0_overburden_phase4 + $grade_0_overburden_phase_final;

# 0 < grade < overall breakeven
$grade_0_breakeven_phase1 = 7659;
$grade_0_breakeven_phase2 = 9800;
$grade_0_breakeven_phase3 = 34080;
$grade_0_breakeven_phase4 = 36470;
$grade_0_breakeven_phase_final = 47760;
$grade_0_breakeven_tons_summation = $grade_0_breakeven_phase1 + $grade_0_breakeven_phase2 + $grade_0_breakeven_phase3 + $grade_0_breakeven_phase4 + $grade_0_breakeven_phase_final;

# overall breakeven < grade < 15.0
$grade_breakeven_15_phase1 = 1830;
$grade_breakeven_15_phase2 = 4157;
$grade_breakeven_15_phase3 = 15740;
$grade_breakeven_15_phase4 = 16840;
$grade_breakeven_15_phase_final = 15634;
$grade_breakeven_15_tons_summation = $grade_breakeven_15_phase1 + $grade_breakeven_15_phase2 + $grade_breakeven_15_phase3 + $grade_breakeven_15_phase4 + $grade_breakeven_15_phase_final;

# 15.0 < grade < 17.5
$grade_15_17_phase1 = 4110;
$grade_15_17_phase2 = 6852;
$grade_15_17_phase3 = 19500;
$grade_15_17_phase4 = 20870;
$grade_15_17_phase_final = 25867;
$grade_15_17_tons_summation = $grade_15_17_phase1 + $grade_15_17_phase2 + $grade_15_17_phase3 + $grade_15_17_phase4 + $grade_15_17_phase_final;

# 17.5 < grade < 20.0
$grade_17_20_phase1 = 7594;
$grade_17_20_phase2 = 8759;
$grade_17_20_phase3 = 11960;
$grade_17_20_phase4 = 12800;
$grade_17_20_phase_final = 11280;
$grade_17_20_tons_summation = $grade_17_20_phase1 + $grade_17_20_phase2 + $grade_17_20_phase3 + $grade_17_20_phase4 + $grade_17_20_phase_final;

# 20.0 < grade < 22.5
$grade_20_22_phase1 = 8754;
$grade_20_22_phase2 = 5487;
$grade_20_22_phase3 = 14980;
$grade_20_22_phase4 = 16030;
$grade_20_22_phase_final = 17568;
$grade_20_22_tons_summation = $grade_20_22_phase1 + $grade_20_22_phase2 + $grade_20_22_phase3 + $grade_20_22_phase4 + $grade_20_22_phase_final;

# 22.5 < grade < 27.5 (average)
$grade_22_average_phase1 = 16538;
$grade_22_average_phase2 = 7658;
$grade_22_average_phase3 = 7010;
$grade_22_average_phase4 = 7500;
$grade_22_average_phase_final = 4267;
$grade_22_average_tons_summation = $grade_22_average_phase1 + $grade_22_average_phase2 + $grade_22_average_phase3 + $grade_22_average_phase4 + $grade_22_average_phase_final;

$Total_tons_summations = $grade_0_overburden_tons_summation + $grade_0_breakeven_tons_summation + $grade_breakeven_15_tons_summation + $grade_15_17_tons_summation + $grade_17_20_tons_summation + $grade_20_22_tons_summation + $grade_22_average_tons_summation;


# Total Mined

$Total_mined_phase1 = $grade_0_overburden_phase1 + $grade_0_breakeven_phase1 + $grade_breakeven_15_phase1 + $grade_15_17_phase1 + $grade_17_20_phase1 + $grade_20_22_phase1 + $grade_22_average_phase1;
$Total_mined_phase2 = $grade_0_overburden_phase2 + $grade_0_breakeven_phase2 + $grade_breakeven_15_phase2 + $grade_15_17_phase2 + $grade_17_20_phase2 + $grade_20_22_phase2 + $grade_22_average_phase2;
$Total_mined_phase3 = $grade_0_overburden_phase3 + $grade_0_breakeven_phase3 + $grade_breakeven_15_phase3 + $grade_15_17_phase3 + $grade_17_20_phase3 + $grade_20_22_phase3 + $grade_22_average_phase3;
$Total_mined_phase4 = $grade_0_overburden_phase4 + $grade_0_breakeven_phase4 + $grade_breakeven_15_phase4 + $grade_15_17_phase4 + $grade_17_20_phase4 + $grade_20_22_phase4 + $grade_22_average_phase4;
$Total_mined_phase_final = $grade_0_overburden_phase_final + $grade_0_breakeven_phase_final + $grade_breakeven_15_phase_final + $grade_15_17_phase_final + $grade_17_20_phase_final + $grade_20_22_phase_final + $grade_22_average_phase_final;


# Total Milled
$Total_milled_phase1 =  $grade_breakeven_15_phase1 + $grade_15_17_phase1 + $grade_17_20_phase1 + $grade_20_22_phase1 + $grade_22_average_phase1;
$Total_milled_phase2 =  $grade_breakeven_15_phase2 + $grade_15_17_phase2 + $grade_17_20_phase2 + $grade_20_22_phase2 + $grade_22_average_phase2;
$Total_milled_phase3 =  $grade_breakeven_15_phase3 + $grade_15_17_phase3 + $grade_17_20_phase3 + $grade_20_22_phase3 + $grade_22_average_phase3;
$Total_milled_phase4 =  $grade_breakeven_15_phase4 + $grade_15_17_phase4 + $grade_17_20_phase4 + $grade_20_22_phase4 + $grade_22_average_phase4;
$Total_milled_phase_final = $grade_breakeven_15_phase_final + $grade_15_17_phase_final + $grade_17_20_phase_final + $grade_20_22_phase_final + $grade_22_average_phase_final;

#Averge Grades:
$average_breakeven_15 = (15.0 + $breakeven_grade_final)/2;
$average_15_17 = (15.0 + 17.5)/2;
$average_17_20 = (17.5 + 20.0)/2;
$average_20_22 = (20.0 + 22.5)/2;
$average_22_27 = 27.5;


# Average grades per phase: 
$Average_grade_phase1 = (($grade_breakeven_15_phase1 * $average_breakeven_15) + ($grade_15_17_phase1 * $average_15_17) + ($grade_17_20_phase1 * $average_17_20) + ($grade_20_22_phase1 * $average_20_22) + ($grade_22_average_phase1 * $average_22_27))/$Total_milled_phase1;
$Average_grade_phase2 = (($grade_breakeven_15_phase2 * $average_breakeven_15) + ($grade_15_17_phase2 * $average_15_17) + ($grade_17_20_phase2 * $average_17_20) + ($grade_20_22_phase2 * $average_20_22) + ($grade_22_average_phase2 * $average_22_27))/$Total_milled_phase2;
$Average_grade_phase3 = (($grade_breakeven_15_phase3 * $average_breakeven_15) + ($grade_15_17_phase3 * $average_15_17) + ($grade_17_20_phase3 * $average_17_20) + ($grade_20_22_phase3 * $average_20_22) + ($grade_22_average_phase3 * $average_22_27))/$Total_milled_phase3;
$Average_grade_phase4 = (($grade_breakeven_15_phase4 * $average_breakeven_15) + ($grade_15_17_phase4 * $average_15_17) + ($grade_17_20_phase4 * $average_17_20) + ($grade_20_22_phase4 * $average_20_22) + ($grade_22_average_phase4 * $average_22_27))/$Total_milled_phase4;
$Average_grade_phase_final = (($grade_breakeven_15_phase_final * $average_breakeven_15) + ($grade_15_17_phase_final * $average_15_17) + ($grade_17_20_phase_final * $average_17_20) + ($grade_20_22_phase_final * $average_20_22) + ($grade_22_average_phase_final * $average_22_27))/$Total_milled_phase_final;


$initial_mining_years = 55; # to be randomized later random(40,60,1);
$Total_tons_mined = ($grade_0_overburden_tons_summation + $grade_0_breakeven_tons_summation + $grade_breakeven_15_tons_summation + $grade_15_17_tons_summation + $grade_17_20_tons_summation + $grade_20_22_tons_summation + $grade_22_average_tons_summation) * 1000;
$Total_tons_milled = ($grade_breakeven_15_tons_summation + $grade_15_17_tons_summation + $grade_17_20_tons_summation + $grade_20_22_tons_summation + $grade_22_average_tons_summation) * 1000;

#Rates:

$Mill_rate_year = $Total_tons_milled/$initial_mining_years;
$Mill_rate_day = $Mill_rate_year/(52*$operating_days_week);
$Mine_rate_year = $Total_tons_mined/$initial_mining_years;
$Mine_rate_day = $Mine_rate_year/(52*$operating_days_week);

#Years per phases: 

#Milling: 
$milling_years_phase1 = ($Total_milled_phase1*1000)/$Mill_rate_year;
$milling_years_phase2 = ($Total_milled_phase2*1000)/$Mill_rate_year;
$milling_years_phase3 = ($Total_milled_phase3*1000)/$Mill_rate_year;
$milling_years_phase4 = ($Total_milled_phase4*1000)/$Mill_rate_year;
$milling_years_phase_final = ($Total_milled_phase_final*1000)/$Mill_rate_year;
#Mining: 
$mining_years_phase1 = ($Total_mined_phase1*1000)/$Mine_rate_year;
$mining_years_phase2 = ($Total_mined_phase2*1000)/$Mine_rate_year;
$mining_years_phase3 = ($Total_mined_phase3*1000)/$Mine_rate_year;
$mining_years_phase4 = ($Total_mined_phase4*1000)/$Mine_rate_year;
$mining_years_phase_final = ($Total_mined_phase_final*1000)/$Mine_rate_year;




#formatting the answers
$breakeven_grade_1 = one_decimal_place($breakeven_grade_1);
$breakeven_grade_2 = one_decimal_place($breakeven_grade_2);
$breakeven_grade_3 = one_decimal_place($breakeven_grade_3);
$breakeven_grade_4 = one_decimal_place($breakeven_grade_4);
$breakeven_grade_final = one_decimal_place($breakeven_grade_final);

$Average_grade_phase1 = one_decimal_place($Average_grade_phase1);
$Average_grade_phase2 = one_decimal_place($Average_grade_phase2);
$Average_grade_phase3 = one_decimal_place($Average_grade_phase3);
$Average_grade_phase4 = one_decimal_place($Average_grade_phase4);
$Average_grade_phase_final = one_decimal_place($Average_grade_phase_final);

$milling_years_phase1 = one_decimal_place($milling_years_phase1);
$milling_years_phase2 = one_decimal_place($milling_years_phase2);
$milling_years_phase3 = one_decimal_place($milling_years_phase3);
$milling_years_phase4 = one_decimal_place($milling_years_phase4);
$milling_years_phase_final = one_decimal_place($milling_years_phase_final);

#This step is required due to a tricky module in some perl isntallations, Safe.pm
$breakeven_grade_1 = Real("$breakeven_grade_1");
$breakeven_grade_2 = Real("$breakeven_grade_2");
$breakeven_grade_3 = Real("$breakeven_grade_3");
$breakeven_grade_4 = Real("$breakeven_grade_4");
$breakeven_grade_final = Real("$breakeven_grade_final");

$Total_mined_phase1 = Real("$Total_mined_phase1");
$Total_mined_phase2 = Real("$Total_mined_phase2");
$Total_mined_phase3 = Real("$Total_mined_phase3");
$Total_mined_phase4 = Real("$Total_mined_phase4");
$Total_mined_phase_final = Real("$Total_mined_phase_final");

$Total_milled_phase1 = Real("$Total_milled_phase1");
$Total_milled_phase2 = Real("$Total_milled_phase2");
$Total_milled_phase3 = Real("$Total_milled_phase3");
$Total_milled_phase4 = Real("$Total_milled_phase4");
$Total_milled_phase_final = Real("$Total_milled_phase_final");

$Average_grade_phase1 = Real("$Average_grade_phase1");
$Average_grade_phase2 = Real("$Average_grade_phase2");
$Average_grade_phase3 = Real("$Average_grade_phase3");
$Average_grade_phase4 = Real("$Average_grade_phase4");
$Average_grade_phase_final = Real("$Average_grade_phase_final");

$milling_years_phase1 = Real("$milling_years_phase1");
$milling_years_phase2 = Real("$milling_years_phase2");
$milling_years_phase3 = Real("$milling_years_phase3");
$milling_years_phase4 = Real("$milling_years_phase4");
$milling_years_phase_final = Real("$milling_years_phase_final");

# Display starts here
BEGIN_PGML

*Nested Pits*  

revenue1 = [`[$revenue1]`]  
revenue2 = [`[$revenue2]`]  
revenue3 = [`[$revenue3]`]  
revenue4 = [`[$revenue4]`]  
revenue_final = [`[$revenue_final]`]  

breakeven_grade_1 = [`[$breakeven_grade_1]`]  
breakeven_grade_2 = [`[$breakeven_grade_2]`]  
breakeven_grade_3 = [`[$breakeven_grade_3]`]  
breakeven_grade_4 = [`[$breakeven_grade_4]`]  
breakeven_grade_final = [`[$breakeven_grade_final]`]  

[@
  DataTable(
    [
      ["Mining Cost",[$mining_cost],"`\$` `per` `t o n`"],
      ["Processing Cost",[$processing_cost],"`\$` `per` `t o n` `o r e`"],
      ["G&A",[$G_A_cost],"`\$` `per` `t o n` `o r e`"],
      ["Mill Recovery",[$Mill_recovery],"`%`"],
      ["Selling Price",[$selling_price_phase_final],"`\$` per lb contained `Li_2 O`"],
      ["Contained Lithium Oxide, `Li_2 O`",[$Li_metal],"lb of `Li_2 O` per lb of Spodumene, `LiAl` `[Si_2 O_6]`"],
      ["Operating Days",[$operating_days_week],"days/week"],
      ["Mine Life", [$initial_mining_years],"years"],
    ],
    center => 1,
    midrules=>1,
    align => '|p{1.5in}|p{1.0in}|p{1.5in}|p{1.5in}|p{1.5in}|p{1.7in}|p{1.5in}|p{1.5in}|',
	tablecss => "border:solid thin; border-spacing:5px; border-radius: 5px; border-collapse:collapse;",
  )
@]***    

Target Pit Phase Selling Prices : `\$` [`[$selling_price_phase1]`],  `\$` [`[$selling_price_phase2]`],  `\$` [`[$selling_price_phase3]`],  `\$` [`[$selling_price_phase4]`].  


*Note:* Mill is operating at capacity i.e. operation is mill constrained.  



[@
  DataTable(
    [
      ["Grade (`% LiAl` `[Si_2 O_6]`)", "Phase 1 ( `10^3` `t o ns` )", "Phase 2 ( `10^3` `t o ns` )", "Phase 3 ( `10^3` `t o ns` )", "Phase 4 ( `10^3` ` t o ns` )", "Final Phase ( `10^3` `t o ns` )"],
      ["Grade 0 (overburden)", [$grade_0_overburden_phase1], [$grade_0_overburden_phase2], [$grade_0_overburden_phase3], [$grade_0_overburden_phase4], [$grade_0_overburden_phase_final]],
      ["0 < grade < overall breakeven", [$grade_0_breakeven_phase1], [$grade_0_breakeven_phase2], [$grade_0_breakeven_phase3], [$grade_0_breakeven_phase4], [$grade_0_breakeven_phase_final]],
      ["overall breakeven < grade < 15.0", [$grade_breakeven_15_phase1], [$grade_breakeven_15_phase2], [$grade_breakeven_15_phase3], [$grade_breakeven_15_phase4], [$grade_breakeven_15_phase_final]], 
      ["15.0 < grade < 17.5", [$grade_15_17_phase1], [$grade_15_17_phase2], [$grade_15_17_phase3], [$grade_15_17_phase4], [$grade_15_17_phase_final]],
      ["17.5 < grade < 20.0", [$grade_17_20_phase1], [$grade_17_20_phase2], [$grade_17_20_phase3], [$grade_17_20_phase4], [$grade_17_20_phase_final]],
      ["20.0 < grade < 22.5", [$grade_20_22_phase1], [$grade_20_22_phase2], [$grade_20_22_phase3], [$grade_20_22_phase4], [$grade_20_22_phase_final]],
      ["22.5 < grade < 27.5 (average)", [$grade_22_average_phase1], [$grade_22_average_phase2], [$grade_22_average_phase3], [$grade_22_average_phase4], [$grade_22_average_phase_final]]
    ],
    center => 1,
    midrules=>1,
    align => '|p{2.2in}|p{1.5in}|p{1.5in}|p{1.5in}|p{1.5in}|p{1.7in}|p{1.5in}|p{1.5in}|',
	tablecss => "border:solid thin; border-spacing:5px; border-radius: 5px; border-collapse:collapse;",
  )
@]***    


Total_tons_summations = [`[$Total_tons_summations]`]  

Total_mined_phase1 = [`[$Total_mined_phase1]`]  
Total_mined_phase2 = [`[$Total_mined_phase2]`]  
Total_mined_phase3 = [`[$Total_mined_phase3]`]  
Total_mined_phase4 = [`[$Total_mined_phase4]`]  
Total_mined_phase_final = [`[$Total_mined_phase_final]`]  

Total_milled_phase1 = [`[$Total_milled_phase1]`]  
Total_milled_phase2 = [`[$Total_milled_phase2]`]  
Total_milled_phase3 = [`[$Total_milled_phase3]`]  
Total_milled_phase4 = [`[$Total_milled_phase4]`]  
Total_milled_phase_final = [`[$Total_milled_phase_final]`]  

average_breakeven_15 = [`[$average_breakeven_15]`]  
average_15_17 = [`[$average_15_17]`]  
average_17_20 = [`[$average_17_20]`]  
average_20_22 = [`[$average_20_22]`]  
average_22_27 = [`[$average_22_27]`]  

Average_grade_phase1 = [`[$Average_grade_phase1]`]  
Average_grade_phase2 = [`[$Average_grade_phase2]`]  
Average_grade_phase3 = [`[$Average_grade_phase3]`]  
Average_grade_phase4 = [`[$Average_grade_phase4]`]  
Average_grade_phase_final = [`[$Average_grade_phase_final]`]  

Total_tons_mined = [`[$Total_tons_mined]`]  
Total_tons_milled = [`[$Total_tons_milled]`]  

Mill_rate_year = [`[$Mill_rate_year]`]  
Mill_rate_day = [`[$Mill_rate_day]`]  
Mine_rate_year = [`[$Mine_rate_year]`]  
Mine_rate_day = [`[$Mine_rate_day]`]  


milling_years_phase1 = [`[$milling_years_phase1]`]  
milling_years_phase2 = [`[$milling_years_phase2]`]  
milling_years_phase3 = [`[$milling_years_phase3]`]  
milling_years_phase4 = [`[$milling_years_phase4]`]  
milling_years_phase_final = [`[$milling_years_phase_final]`]  

mining_years_phase1 = [`[$mining_years_phase1]`]  
mining_years_phase2 = [`[$mining_years_phase2]`]  
mining_years_phase3 = [`[$mining_years_phase3]`]  
mining_years_phase4 = [`[$mining_years_phase4]`]  
mining_years_phase_final = [`[$mining_years_phase_final]`]  

Given the data above, complete the following:  

[@
  DataTable(
    [
      [" ", "Phase 1 ", "Phase 2 ", "Phase 3 ", "Phase 4 ", "Final Phase ", " "],
      ["Cutoff grade at Phase selling price", ans_rule(7), ans_rule(7), ans_rule(7), ans_rule(7), ans_rule(7),"`% LiAl``[Si_2 O_6` (`1` `decimal` `place`)"],
      ["Tons Mined (`10^3`)", ans_rule(7), ans_rule(7), ans_rule(7), ans_rule(7), ans_rule(7),"`t o ns`"],
      ["Tons Milled (`10^3`)", ans_rule(7), ans_rule(7), ans_rule(7), ans_rule(7), ans_rule(7),"`t o ns`"], 
      ["Average grade of material above overall cutoff grade", ans_rule(7), ans_rule(7), ans_rule(7), ans_rule(7), ans_rule(7),"`%` (`1` `decimal` `place`)"],
      ["Years per phase", ans_rule(7), ans_rule(7), ans_rule(7), ans_rule(7), ans_rule(7),"`years` (`1` `decimal` `place`)"]
    ],
    center => 1,
    midrules=>1,
    align => '|p{2.2in}|p{1.5in}|p{1.5in}|p{1.5in}|p{1.5in}|p{1.7in}|p{1.8in}|p{1.5in}|',
	tablecss => "border:solid thin; border-spacing:5px; border-radius: 5px; border-collapse:collapse;",
  )
@]***    


END_PGML

Context("Numeric");

ANS($breakeven_grade_1->cmp);
ANS($breakeven_grade_2->cmp);
ANS($breakeven_grade_3->cmp);
ANS($breakeven_grade_4->cmp);
ANS($breakeven_grade_final->cmp);

ANS($Total_mined_phase1->cmp);
ANS($Total_mined_phase2->cmp);
ANS($Total_mined_phase3->cmp);
ANS($Total_mined_phase4->cmp);
ANS($Total_mined_phase_final->cmp);

ANS($Total_milled_phase1->cmp);
ANS($Total_milled_phase2->cmp);
ANS($Total_milled_phase3->cmp);
ANS($Total_milled_phase4->cmp);
ANS($Total_milled_phase_final->cmp);

ANS($Average_grade_phase1->cmp);
ANS($Average_grade_phase2->cmp);
ANS($Average_grade_phase3->cmp);
ANS($Average_grade_phase4->cmp);
ANS($Average_grade_phase_final->cmp);

ANS($milling_years_phase1->cmp);
ANS($milling_years_phase2->cmp);
ANS($milling_years_phase3->cmp);
ANS($milling_years_phase4->cmp);
ANS($milling_years_phase_final->cmp);



ENDDOCUMENT();      

#trying without the rounding off in the beginning  RESULTS SEEM MORE ACCURATE
