##DESCRIPTION
##
## Created by the UBC Department of Mechanical Engineering. Project led by Agnes d'Entremont.
##
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this 
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from BCcampus, the UBC Department of
## Mechanical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people. 
##
##ENDDESCRIPTION

## DBsubject(Mining Engineering)
## DBchapter(Stripping Ratio and Pit Limits)
## DBsection(Stripping Ratio)
## Date()
## Author()
## Level()
## KEYWORDS('')
## RESOURCES('')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

#image scale
$imgScale = .6;

#image aspect ratio
$width = $imgScale*1154;
$height = $imgScale*517;

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"parserFunction.pl",
	"PGauxiliaryFunctions.pl",
    "niceTables.pl",
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

#given
$left_var = random(-2,5,1);
$mid_var = random(-2,5,1);
$right_var = random(-2,5,1);

$Value_Matrix = Matrix([-1, -1, 1, $left_var, 2, $right_var, -1, -5],
                       [-1, -5, 2, 2, $mid_var, 1, -12, -3], 
                       [-1, -1, 1, 5, 7, 5, 0, -2], 
                       [-1, -1, 0, 0, 10, 1, 0, -2], 
                       [-1, -1, -1, 1, -1, -2, -1, -2] );

# computation: 

# first part: adding vertically to find the M matrix 
# not computed: 
$A_1_1 = $Value_Matrix->element(1,1);
$A_2_1 = $Value_Matrix->element(2,1) + $Value_Matrix->element(1,1);
$A_3_1 = $Value_Matrix->element(3,1) + $Value_Matrix->element(2,1) + $Value_Matrix->element(1,1);
$A_4_1 = $Value_Matrix->element(4,1) + $Value_Matrix->element(3,1) + $Value_Matrix->element(2,1) + $Value_Matrix->element(1,1);
$A_5_1 = $Value_Matrix->element(5,1) + $Value_Matrix->element(4,1) + $Value_Matrix->element(3,1) + $Value_Matrix->element(2,1) + $Value_Matrix->element(1,1);

$A_1_2 = $Value_Matrix->element(1,2);
$A_2_2 = $Value_Matrix->element(2,2) + $Value_Matrix->element(1,2);
$A_3_2 = $Value_Matrix->element(3,2) + $Value_Matrix->element(2,2) + $Value_Matrix->element(1,2);
$A_4_2 = $Value_Matrix->element(4,2) + $Value_Matrix->element(3,2) + $Value_Matrix->element(2,2) + $Value_Matrix->element(1,2);
$A_5_2 = $Value_Matrix->element(5,2) + $Value_Matrix->element(4,2) + $Value_Matrix->element(3,2) + $Value_Matrix->element(2,2) + $Value_Matrix->element(1,2);



# row one: 
$A_1_3 = $Value_Matrix->element(1,3);
$A_1_4 = $Value_Matrix->element(1,4);
$A_1_5 = $Value_Matrix->element(1,5);
$A_1_6 = $Value_Matrix->element(1,6);
$A_1_7 = $Value_Matrix->element(1,7);
$A_1_8 = $Value_Matrix->element(1,8);

# row two:
$A_2_3 = $Value_Matrix->element(1,3) + $Value_Matrix->element(2,3);
$A_2_4 = $Value_Matrix->element(1,4) + $Value_Matrix->element(2,4);
$A_2_5 = $Value_Matrix->element(1,5) + $Value_Matrix->element(2,5);
$A_2_6 = $Value_Matrix->element(1,6) + $Value_Matrix->element(2,6);
$A_2_7 = $Value_Matrix->element(1,7) + $Value_Matrix->element(2,7);
$A_2_8 = $Value_Matrix->element(1,8) + $Value_Matrix->element(2,8);

# row three: 
$A_3_3 = $Value_Matrix->element(1,3) + $Value_Matrix->element(2,3) + $Value_Matrix->element(3,3);
$A_3_4 = $Value_Matrix->element(1,4) + $Value_Matrix->element(2,4) + $Value_Matrix->element(3,4);
$A_3_5 = $Value_Matrix->element(1,5) + $Value_Matrix->element(2,5) + $Value_Matrix->element(3,5);
$A_3_6 = $Value_Matrix->element(1,6) + $Value_Matrix->element(2,6) + $Value_Matrix->element(3,6);
$A_3_7 = $Value_Matrix->element(1,7) + $Value_Matrix->element(2,7) + $Value_Matrix->element(3,7);
$A_3_8 = $Value_Matrix->element(1,8) + $Value_Matrix->element(2,8) + $Value_Matrix->element(3,8);

# row four: 
$A_4_3 = $Value_Matrix->element(1,3) + $Value_Matrix->element(2,3) + $Value_Matrix->element(3,3) + $Value_Matrix->element(4,3);
$A_4_4 = $Value_Matrix->element(1,4) + $Value_Matrix->element(2,4) + $Value_Matrix->element(3,4) + $Value_Matrix->element(4,4);
$A_4_5 = $Value_Matrix->element(1,5) + $Value_Matrix->element(2,5) + $Value_Matrix->element(3,5) + $Value_Matrix->element(4,5);
$A_4_6 = $Value_Matrix->element(1,6) + $Value_Matrix->element(2,6) + $Value_Matrix->element(3,6) + $Value_Matrix->element(4,6);
$A_4_7 = $Value_Matrix->element(1,7) + $Value_Matrix->element(2,7) + $Value_Matrix->element(3,7) + $Value_Matrix->element(4,7);
$A_4_8 = $Value_Matrix->element(1,8) + $Value_Matrix->element(2,8) + $Value_Matrix->element(3,8) + $Value_Matrix->element(4,8);

#row five: 
$A_5_3 = $Value_Matrix->element(1,3) + $Value_Matrix->element(2,3) + $Value_Matrix->element(3,3) + $Value_Matrix->element(4,3) + $Value_Matrix->element(5,3);
$A_5_4 = $Value_Matrix->element(1,4) + $Value_Matrix->element(2,4) + $Value_Matrix->element(3,4) + $Value_Matrix->element(4,4) + $Value_Matrix->element(5,4);
$A_5_5 = $Value_Matrix->element(1,5) + $Value_Matrix->element(2,5) + $Value_Matrix->element(3,5) + $Value_Matrix->element(4,5) + $Value_Matrix->element(5,5);
$A_5_6 = $Value_Matrix->element(1,6) + $Value_Matrix->element(2,6) + $Value_Matrix->element(3,6) + $Value_Matrix->element(4,6) + $Value_Matrix->element(5,6);
$A_5_7 = $Value_Matrix->element(1,7) + $Value_Matrix->element(2,7) + $Value_Matrix->element(3,7) + $Value_Matrix->element(4,7) + $Value_Matrix->element(5,7);
$A_5_8 = $Value_Matrix->element(1,8) + $Value_Matrix->element(2,8) + $Value_Matrix->element(3,8) + $Value_Matrix->element(4,8) + $Value_Matrix->element(5,8);


# second part: finding the P matrix: 
# Already computed: 
# leftmost (unseen column)

$P_0_0 = 0;
$P_1_0 = 0;
$P_2_0 = 0;
$P_3_0 = 0;
$P_4_0 = 0;
$P_5_0 = 0;

#first column
$P_0_1 = 0;
$P_1_1 = $A_1_1 + max($P_1_0, $P_2_0);
$P_2_1 = $A_2_1 + max($P_1_0, $P_2_0, $P_3_0);
$P_3_1 = $A_3_1 + max($P_2_0, $P_3_0, $P_4_0);
$P_4_1 = $A_4_1 + max($P_3_0, $P_4_0, $P_5_0);
$P_5_1 = $A_5_1 + max($P_4_0, $P_5_0);

#second column: 
$P_0_2 = 0;
$P_1_2 = $A_1_2 + max($P_1_1, $P_2_1);
$P_2_2 = $A_2_2 + max($P_1_1, $P_2_1, $P_3_1);
$P_3_2 = $A_3_2 + max($P_2_1, $P_3_1, $P_4_1);
$P_4_2 = $A_4_2 + max($P_3_1, $P_4_1, $P_5_1);
$P_5_2 = $A_5_2 + max($P_4_1, $P_5_1);


#third column: 
$P_0_3 = 0;
$P_1_3 = $A_1_3 + max($P_1_2, $P_2_2);
$P_2_3 = $A_2_3 + max($P_1_2, $P_2_2, $P_3_2);
$P_3_3 = $A_3_3 + max($P_2_2, $P_3_2, $P_4_2);
$P_4_3 = $A_4_3 + max($P_3_2, $P_4_2, $P_5_2);
$P_5_3 = $A_5_3 + max($P_4_2, $P_5_2);


#fourth column: 
$P_0_4 = 0;
$P_1_4 = $A_1_4 + max($P_1_3, $P_2_3);
$P_2_4 = $A_2_4 + max($P_1_3, $P_2_3, $P_3_3);
$P_3_4 = $A_3_4 + max($P_2_3, $P_3_3, $P_4_3);
$P_4_4 = $A_4_4 + max($P_3_3, $P_4_3, $P_5_3);
$P_5_4 = $A_5_4 + max($P_4_3, $P_5_3);

$example1 = max($P_1_3, $P_2_3, $P_3_3);
$example2 = max($P_3_3, $P_4_3, $P_5_3);

#fifth column:
$P_0_5 = 0;
$P_1_5 = $A_1_5 + max($P_1_4, $P_2_4);
$P_2_5 = $A_2_5 + max($P_1_4, $P_2_4, $P_3_4);
$P_3_5 = $A_3_5 + max($P_2_4, $P_3_4, $P_4_4);
$P_4_5 = $A_4_5 + max($P_3_4, $P_4_4, $P_5_4);
$P_5_5 = $A_5_5 + max($P_4_4, $P_5_4);

#sixth column: 
$P_0_6 = 0;
$P_1_6 = $A_1_6 + max($P_1_5, $P_2_5);
$P_2_6 = $A_2_6 + max($P_1_5, $P_2_5, $P_3_5);
$P_3_6 = $A_3_6 + max($P_2_5, $P_3_5, $P_4_5);
$P_4_6 = $A_4_6 + max($P_3_5, $P_4_5, $P_5_5);
$P_5_6 = $A_5_6 + max($P_4_5, $P_5_5);


#seventh column: 
$P_0_7 = 0;
$P_1_7 = $A_1_7 + max($P_1_6, $P_2_6);
$P_2_7 = $A_2_7 + max($P_1_6, $P_2_6, $P_3_6);
$P_3_7 = $A_3_7 + max($P_2_6, $P_3_6, $P_4_6);
$P_4_7 = $A_4_7 + max($P_3_6, $P_4_6, $P_5_6);
$P_5_7 = $A_5_7 + max($P_4_6, $P_5_6);


#eigth column: 
$P_0_8 = 0;
$P_1_8 = $A_1_8 + max($P_1_7, $P_2_7);
$P_2_8 = $A_2_8 + max($P_1_7, $P_2_7, $P_3_7);
$P_3_8 = $A_3_8 + max($P_2_7, $P_3_7, $P_4_7);
$P_4_8 = $A_4_8 + max($P_3_7, $P_4_7, $P_5_7);
$P_5_8 = $A_5_8 + max($P_4_7, $P_5_7);





# third part: starting location
$max_first_row = max($P_1_1, $P_1_2, $P_1_3, $P_1_4, $P_1_5, $P_1_6, $P_1_7, $P_1_8);
$position_row = Real("1");
$position_column = Real("0");

if($max_first_row == $P_1_1 ){
  $position_column = Real("1");
}
elsif($max_first_row == $P_1_2 ){
  $position_column = Real("2");
}
elsif($max_first_row == $P_1_3 ){
  $position_column = Real("3");
}
elsif($max_first_row == $P_1_4 ){
  $position_column = Real("4");
}
elsif($max_first_row == $P_1_5 ){
  $position_column = Real("5");
}
elsif($max_first_row == $P_1_6 ){
  $position_column = Real("6");
}
elsif($max_first_row == $P_1_7 ){
  $position_column = Real("7");
}
else{
  $position_column = Real("8");
}

# fourth part: 

$mcPit = PopUp(["?","Pit","Not Pit"], "Pit");
$mcNotPit = PopUp(["?","Pit","Not Pit"], "Not Pit");


$number_blocks = Real(12);

# second part: finding the P matrix: 
# Already computed: 
# leftmost (unseen column)

$D_0_0 = 0;
$D_1_0 = 0;
$D_2_0 = 0;
$D_3_0 = 0;
$D_4_0 = 0;
$D_5_0 = 0;

#first column
$D_0_1 = 0;
$D_1_1 = $A_1_1 + max($D_1_0, $D_2_0);
$D_2_1 = $A_2_1 + max($D_1_0, $D_2_0, $D_3_0);
$D_3_1 = $A_3_1 + max($D_2_0, $D_3_0, $D_4_0);
$D_4_1 = $A_4_1 + max($D_3_0, $D_4_0, $D_5_0);
$D_5_1 = $A_5_1 + max($D_4_0, $D_5_0);

#second column: 
$D_0_2 = 0;
$D_1_2 = $A_1_2 + max($D_1_1, $D_2_1, $D_3_1);
$D_2_2 = $A_2_2 + max($D_1_1, $D_2_1, $D_3_1, $D_4_1);
$D_3_2 = $A_3_2 + max($D_1_1, $D_2_1, $D_3_1, $D_4_1, $D_5_1);
$D_4_2 = $A_4_2 + max($D_2_1, $D_3_1, $D_4_1, $D_5_1);
$D_5_2 = $A_5_2 + max($D_3_1, $D_4_1, $D_5_1);


#third column: 
$D_0_3 = 0;
$D_1_3 = $A_1_3 + max($D_1_2, $D_2_2, $D_3_2);
$D_2_3 = $A_2_3 + max($D_1_2, $D_2_2, $D_3_2, $D_4_2);
$D_3_3 = $A_3_3 + max($D_1_2, $D_2_2, $D_3_2, $D_4_2, $D_5_2);
$D_4_3 = $A_4_3 + max($D_2_2, $D_3_2, $D_4_2, $D_5_2);
$D_5_3 = $A_5_3 + max($D_3_2, $D_4_2, $D_5_2);


#fourth column: 
$D_0_4 = 0;
$D_1_4 = $A_1_4 + max($D_1_3, $D_2_3, $D_3_3);
$D_2_4 = $A_2_4 + max($D_1_3, $D_2_3, $D_3_3, $D_4_3);
$D_3_4 = $A_3_4 + max($D_1_3, $D_2_3, $D_3_3, $D_4_3, $D_5_3);
$D_4_4 = $A_4_4 + max($D_2_3, $D_3_3, $D_4_3, $D_5_3);
$D_5_4 = $A_5_4 + max($D_3_3, $D_4_3, $D_5_3);

#fifth column:
$D_0_5 = 0;
$D_1_5 = $A_1_5 + max($D_1_4, $D_2_4, $D_3_4);
$D_2_5 = $A_2_5 + max($D_1_4, $D_2_4, $D_3_4, $D_4_4);
$D_3_5 = $A_3_5 + max($D_1_4, $D_2_4, $D_3_4, $D_4_4, $D_5_4);
$D_4_5 = $A_4_5 + max($D_2_4, $D_3_4, $D_4_4, $D_5_4);
$D_5_5 = $A_5_5 + max($D_3_4, $D_4_4, $D_5_4);

#sixth column: 
$D_0_6 = 0;
$D_1_6 = $A_1_6 + max($D_1_5, $D_2_5, $D_3_5);
$D_2_6 = $A_2_6 + max($D_1_5, $D_2_5, $D_3_5, $D_4_5);
$D_3_6 = $A_3_6 + max($D_1_5, $D_2_5, $D_3_5, $D_4_5, $D_5_5);
$D_4_6 = $A_4_6 + max($D_2_5, $D_3_5, $D_4_5, $D_5_5);
$D_5_6 = $A_5_6 + max($D_3_5, $D_4_5, $D_5_5);

#seventh column: 
$D_0_7 = 0;
$D_1_7 = $A_1_7 + max($D_1_6, $D_2_6, $D_3_6);
$D_2_7 = $A_2_7 + max($D_1_6, $D_2_6, $D_3_6, $D_4_6);
$D_3_7 = $A_3_7 + max($D_1_6, $D_2_6, $D_3_6, $D_4_6, $D_5_6);
$D_4_7 = $A_4_7 + max($D_2_6, $D_3_6, $D_4_6, $D_5_6);
$D_5_7 = $A_5_7 + max($D_3_6, $D_4_6, $D_5_6);


#eigth column: 
$D_0_8 = 0;
$D_1_8 = $A_1_8 + max($D_1_7, $D_2_7);
$D_2_8 = $A_2_8 + max($D_1_7, $D_2_7, $D_3_7);
$D_3_8 = $A_3_8 + max($D_2_7, $D_3_7, $D_4_7);
$D_4_8 = $A_4_8 + max($D_3_7, $D_4_7, $D_5_7);
$D_5_8 = $A_5_8 + max($D_4_7, $D_5_7);

$D_0_8 = 0;
$D_1_8 = $A_1_8 + max($D_1_7, $D_2_7, $D_3_7);
$D_2_8 = $A_2_8 + max($D_1_7, $D_2_7, $D_3_7, $D_4_7);
$D_3_8 = $A_3_8 + max($D_1_7, $D_2_7, $D_3_7, $D_4_7, $D_5_7);
$D_4_8 = $A_4_8 + max($D_2_7, $D_3_7, $D_4_7, $D_5_7);
$D_5_8 = $A_5_8 + max($D_3_7, $D_4_7, $D_5_7);


# $mc_last_part = RadioButtons(["A cheaper underground mining method would result in a more shallow maximum depth of the open pit", "Dummy", "Dummy2", "Dummy3"], "A cheape underground mining method would result in a more shallow maximum depth of the open pit",);

#set tolerance
Context()->flags->set(
tolerance=>.01);

##############################################################
#
#  Text 
#mining_depth
#

BEGIN_PGML
*Pit limits*  


*Values matrix*  

>>[`[$Value_Matrix]`]<<  


*Part A.*  
Using the Lerchs-Grossman Algorithm, solve the *M matrix* by adding the values down the column cumulatively. Columns 1 and 2 have been completed for you.  

[@
  DataTable(
    [
      [" ", "A","B","C","D","E","F","G","H"],
      ["a",[$Value_Matrix->element(1,1)], [$Value_Matrix->element(1,2)],ans_rule(5), ans_rule(5),ans_rule(5),ans_rule(5), ans_rule(5), ans_rule(5)],
      ["b",[$Value_Matrix->element(2,1) + $Value_Matrix->element(1,1)], [$Value_Matrix->element(2,2) + $Value_Matrix->element(1,2)],ans_rule(5),ans_rule(5),ans_rule(5),ans_rule(5), ans_rule(5), ans_rule(5)], 
      ["c",[$Value_Matrix->element(3,1) + $Value_Matrix->element(2,1) + $Value_Matrix->element(1,1)], [$Value_Matrix->element(3,2) + $Value_Matrix->element(2,2) + $Value_Matrix->element(1,2)],ans_rule(5),ans_rule(5),ans_rule(5),ans_rule(5),ans_rule(5), ans_rule(5)], 
      ["d",[$Value_Matrix->element(4,1) + $Value_Matrix->element(3,1) + $Value_Matrix->element(2,1) + $Value_Matrix->element(1,1)], [$Value_Matrix->element(4,2) + $Value_Matrix->element(3,2) + $Value_Matrix->element(2,2) + $Value_Matrix->element(1,2)],ans_rule(5),ans_rule(5), ans_rule(5),ans_rule(5),ans_rule(5), ans_rule(5)],
      ["e",[$Value_Matrix->element(5,1) + $Value_Matrix->element(4,1) + $Value_Matrix->element(3,1) + $Value_Matrix->element(2,1) + $Value_Matrix->element(1,1)], [$Value_Matrix->element(5,2) + $Value_Matrix->element(4,2) + $Value_Matrix->element(3,2) + $Value_Matrix->element(2,2) + $Value_Matrix->element(1,2)], ans_rule(5),ans_rule(5), ans_rule(5), ans_rule(5), ans_rule(5), ans_rule(5)]
    ],
    center => 1,
    midrules=>1,
    align => '|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|',
	tablecss => "border:solid thin; border-spacing:5px; border-radius: 5px; border-collapse:collapse;",
  )
@]***  



*Part B.*  

Solve the *P Matrix*.  
This is done by adding values from the *M Matrix* to the maximum arced value (in this case 45[`^{\circ}`] slope) on the left-hand side of the already completed *P Matrix*.  

For example in column D, row b of this particular problem:  
P value = Mvalue + Pleftmax = [`[$A_2_4]`] + [`[$example1]`] = [`[$P_2_4]`]  

For example in column D, row d of this particular problem:  
P value = Mvalue + Pleftmax = [`[$A_4_4]`] + [`[$example2]`] = [`[$P_4_4]`]  

The first 3 columns have already been completed  

[@
  DataTable(
    [
      [" ", "A","B","C","D","E","F","G","H"],
      ["a",[$P_1_1], [$P_1_2], [$P_1_3], ans_rule(5) , ans_rule(5), ans_rule(5), ans_rule(5), ans_rule(5)],
      ["b",[$P_2_1], [$P_2_2], [$P_2_3], ans_rule(5) , ans_rule(5), ans_rule(5), ans_rule(5), ans_rule(5)],
      ["c",[$P_3_1], [$P_3_2], [$P_3_3], ans_rule(5) , ans_rule(5), ans_rule(5), ans_rule(5), ans_rule(5)],
      ["d",[$P_4_1], [$P_4_2], [$P_4_3], ans_rule(5) , ans_rule(5), ans_rule(5), ans_rule(5), ans_rule(5)],
      ["e",[$P_5_1], [$P_5_2], [$P_5_3], ans_rule(5) , ans_rule(5), ans_rule(5), ans_rule(5), ans_rule(5)]
    ],
    center => 1,
    midrules=>1,
    align => '|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|',
	tablecss => "border:solid thin; border-spacing:5px; border-radius: 5px; border-collapse:collapse;",
  )
@]***  






*Part C.*  
  
At what starting location (column and row) results in the pit with the highest value? What is the value of this pit?  

Value =  [@ ans_rule(5) @]***  

Row = [@ ans_rule(5) @]***  

Column = [@ ans_rule(5) @]***  

Draw the outline of the pit in the table below, which represents the matrix:  


[@
  DataTable(
    [
      [ $mcNotPit->menu, $mcPit->menu, $mcPit->menu, $mcPit->menu , $mcPit->menu, $mcPit->menu, $mcPit->menu, $mcNotPit->menu],
      [ $mcNotPit->menu, $mcNotPit->menu, $mcPit->menu, $mcPit->menu , $mcPit->menu, $mcPit->menu, $mcNotPit->menu, $mcNotPit->menu],
      [ $mcNotPit->menu, $mcNotPit->menu, $mcNotPit->menu, $mcPit->menu , $mcPit->menu, $mcNotPit->menu, $mcNotPit->menu, $mcNotPit->menu],
      [ $mcNotPit->menu, $mcNotPit->menu, $mcNotPit->menu, $mcNotPit->menu , $mcNotPit->menu, $mcNotPit->menu, $mcNotPit->menu, $mcNotPit->menu],
      [ $mcNotPit->menu, $mcNotPit->menu, $mcNotPit->menu, $mcNotPit->menu , $mcNotPit->menu, $mcNotPit->menu, $mcNotPit->menu, $mcNotPit->menu]
    ],
    center => 1,
    midrules=>1,
    align => '|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|',
	tablecss => "border:solid thin; border-spacing:5px; border-radius: 5px; border-collapse:collapse;",
  )
@]***  

 


*Part D*  
How would the pit limits change if you could use single and double benches?

[@
  DataTable(
    [
      [" ", "A","B","C","D","E","F","G","H"],
      ["a",[$D_1_1], [$D_1_2], [$D_1_3], ans_rule(5) , ans_rule(5), ans_rule(5), ans_rule(5), ans_rule(5)],
      ["b",[$D_2_1], [$D_2_2], [$D_2_3], ans_rule(5) , ans_rule(5), ans_rule(5), ans_rule(5), ans_rule(5)],
      ["c",[$D_3_1], [$D_3_2], [$D_3_3], ans_rule(5) , ans_rule(5), ans_rule(5), ans_rule(5), ans_rule(5)],
      ["d",[$D_4_1], [$D_4_2], [$D_4_3], ans_rule(5) , ans_rule(5), ans_rule(5), ans_rule(5), ans_rule(5)],
      ["e",[$D_5_1], [$D_5_2], [$D_5_3], ans_rule(5) , ans_rule(5), ans_rule(5), ans_rule(5), ans_rule(5)]
    ],
    center => 1,
    midrules=>1,
    align => '|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|',
	tablecss => "border:solid thin; border-spacing:5px; border-radius: 5px; border-collapse:collapse;",
  )
@]***  

END_PGML


ANS($A_1_3->cmp);
ANS($A_1_4->cmp);
ANS($A_1_5->cmp);
ANS($A_1_6->cmp);
ANS($A_1_7->cmp);
ANS($A_1_8->cmp);

# row two:
ANS($A_2_3->cmp);
ANS($A_2_4->cmp);
ANS($A_2_5->cmp);
ANS($A_2_6->cmp);
ANS($A_2_7->cmp);
ANS($A_2_8->cmp);

# row three: 
ANS($A_3_3->cmp);
ANS($A_3_4->cmp);
ANS($A_3_5->cmp);
ANS($A_3_6->cmp);
ANS($A_3_7->cmp);
ANS($A_3_8->cmp);

# row four: 
ANS($A_4_3->cmp);
ANS($A_4_4->cmp);
ANS($A_4_5->cmp);
ANS($A_4_6->cmp);
ANS($A_4_7->cmp);
ANS($A_4_8->cmp);

#row five: 
ANS($A_5_3->cmp);
ANS($A_5_4->cmp);
ANS($A_5_5->cmp);
ANS($A_5_6->cmp);
ANS($A_5_7->cmp);
ANS($A_5_8->cmp);

#part 2

ANS($P_1_4->cmp);
ANS($P_1_5->cmp);
ANS($P_1_6->cmp);
ANS($P_1_7->cmp);
ANS($P_1_8->cmp);

ANS($P_2_4->cmp);
ANS($P_2_5->cmp);
ANS($P_2_6->cmp);
ANS($P_2_7->cmp);
ANS($P_2_8->cmp);

ANS($P_3_4->cmp);
ANS($P_3_5->cmp);
ANS($P_3_6->cmp);
ANS($P_3_7->cmp);
ANS($P_3_8->cmp);

ANS($P_4_4->cmp);
ANS($P_4_5->cmp);
ANS($P_4_6->cmp);
ANS($P_4_7->cmp);
ANS($P_4_8->cmp);

ANS($P_5_4->cmp);
ANS($P_5_5->cmp);
ANS($P_5_6->cmp);
ANS($P_5_7->cmp);
ANS($P_5_8->cmp);



# #fourth column: 
# ANS($P_1_4->cmp);
# ANS($P_2_4->cmp);
# ANS($P_3_4->cmp);
# ANS($P_4_4->cmp);
# ANS($P_5_4->cmp);

# #fifth column:
# ANS($P_1_5->cmp);
# ANS($P_2_5->cmp);
# ANS($P_3_5->cmp);
# ANS($P_4_5->cmp);
# ANS($P_5_5->cmp);

# #sixth column: 
# ANS($P_1_6->cmp);
# ANS($P_2_6->cmp);
# ANS($P_3_6->cmp);
# ANS($P_4_6->cmp);
# ANS($P_5_6->cmp);


# #seventh column: 
# ANS($P_1_7->cmp);
# ANS($P_2_7->cmp);
# ANS($P_3_7->cmp);
# ANS($P_4_7->cmp);
# ANS($P_5_7->cmp);


# #eigth column: 
# ANS($P_1_8->cmp);
# ANS($P_2_8->cmp);
# ANS($P_3_8->cmp);
# ANS($P_4_8->cmp);
# ANS($P_5_8->cmp);



#third part
ANS($max_first_row->cmp);
ANS($position_row->cmp);
ANS($position_column->cmp);


ANS(($mcNotPit)->cmp);
ANS(($mcPit)->cmp);
ANS(($mcPit)->cmp);
ANS(($mcPit)->cmp);
ANS(($mcPit)->cmp);
ANS(($mcPit)->cmp);
ANS(($mcPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcPit)->cmp);
ANS(($mcPit)->cmp);
ANS(($mcPit)->cmp);
ANS(($mcPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcPit)->cmp);
ANS(($mcPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);
ANS(($mcNotPit)->cmp);

##############################################################


ANS($D_1_4->cmp);
ANS($D_1_5->cmp);
ANS($D_1_6->cmp);
ANS($D_1_7->cmp);
ANS($D_1_8->cmp);

ANS($D_2_4->cmp);
ANS($D_2_5->cmp);
ANS($D_2_6->cmp);
ANS($D_2_7->cmp);
ANS($D_2_8->cmp);

ANS($D_3_4->cmp);
ANS($D_3_5->cmp);
ANS($D_3_6->cmp);
ANS($D_3_7->cmp);
ANS($D_3_8->cmp);

ANS($D_4_4->cmp);
ANS($D_4_5->cmp);
ANS($D_4_6->cmp);
ANS($D_4_7->cmp);
ANS($D_4_8->cmp);

ANS($D_5_4->cmp);
ANS($D_5_5->cmp);
ANS($D_5_6->cmp);
ANS($D_5_7->cmp);
ANS($D_5_8->cmp);


ENDDOCUMENT();


# Debugging: 


# [@
#   DataTable(
#     [
#       [[$P_1_1], [$P_1_2], [$P_1_3], [$P_1_4] , [$P_1_5], [$P_1_6], [$P_1_7], [$P_1_8]],
#       [[$P_2_1], [$P_2_2], [$P_2_3], [$P_2_4] , [$P_2_5], [$P_2_6], [$P_2_7], [$P_2_8]],
#       [[$P_3_1], [$P_3_2], [$P_3_3], [$P_3_4] , [$P_3_5], [$P_3_6], [$P_3_7], [$P_3_8]],
#       [[$P_4_1], [$P_4_2], [$P_4_3], [$P_4_4] , [$P_4_5], [$P_4_6], [$P_4_7], [$P_4_8]],
#       [[$P_5_1], [$P_5_2], [$P_5_3], [$P_5_4] , [$P_5_5], [$P_5_6], [$P_5_7], [$P_5_8]]
#     ],
#     center => 1,
#     midrules=>1,
#     align => '|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|',
# 	tablecss => "border:solid thin; border-spacing:5px; border-radius: 5px; border-collapse:collapse;",
#   )
# @]***  
