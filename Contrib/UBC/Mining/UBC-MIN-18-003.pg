##DESCRIPTION
##
## Created by the UBC Department of Mechanical Engineering. Project led by Agnes d'Entremont.
##
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this 
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from BCcampus, the UBC Department of
## Mechanical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people. 
##
##ENDDESCRIPTION

## DBsubject(Mining Engineering)
## DBchapter(Stripping Ratio and Pit Limits)
## DBsection(Stripping Ratio)
## Date()
## Author()
## Level()
## KEYWORDS('')
## RESOURCES('')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();
#image scale
$imgScale = 1;

#image aspect ratio
$width = $imgScale*605;
$height = $imgScale*788;



loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"parserFunction.pl",
	"PGauxiliaryFunctions.pl",
    "niceTables.pl",
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

Context("Numeric");
#set tolerance
Context()->flags->set(
tolerance=>.05,
tolType => "relative");


sub one_decimal_place
{
    # body of method or subroutine
    $count_increments = Real("0");
    $value_to_process = $_[0];
    while ($value_to_process > Real("0.1")){
      $value_to_process = $value_to_process - Real("0.1");
      $count_increments = $count_increments + Real("0.1");
    }

    if ($value_to_process < Real("0.05") ){
      $value_to_process= $count_increments;
    }
    else{
      $value_to_process = $count_increments + Real("0.1");
    }
    return $value_to_process
}

sub no_decimal_place
{
    # body of method or subroutine
    $count_increments = Real("0");
    $value_to_process = $_[0];
    while ($value_to_process > Real("1")){
      $value_to_process = $value_to_process - Real("1");
      $count_increments = $count_increments + Real("1");
    }

    
    if ($value_to_process < Real("0.5") ){
      $value_to_process= $count_increments;
    }
    else{
      $value_to_process = $count_increments + Real("1");
    }
    return $value_to_process
   
}


$tonne_to_pound = Real("2000");             # 2000 lbs in one ton

#given
# $commodity_price = Real("1.50");            # dollars per pound
# $mining_cost_ore = Real("1.50");            # dollars per ton
# $mining_cost_waste = Real("1.50");          # dollars per ton

$commodity_price = random(1.5,5.0, 0.1);
$mining_cost_ore = random(1.2,2.5,0.1);
$mining_cost_waste = random(1.2,2.5,0.1);

$yearly_product_mix = Real("6500");         #tons of copper material
$milling_cost = Real("3.80");               # dollars per ton
$G_A_mining = Real("0.20");                 # dollars per ton
$G_A_milling = Real("0.45");                # dollars per ton ore
$smelting_refining_sales = Real("0.33");    # dollars per pount of copper
$overall_metal_recovery = Real("0.82");     # note that this is a percentage
$overall_metal_recovery_display = $overall_metal_recovery*100;
$mill_recovery = Real("0.86");              # note that this is a percentage
$mill_recovery_display = $mill_recovery*100;
$smelter_refinery_recovery = Real("0.95");  # note that this is a percentage
$smelter_refinery_recovery_display = $smelter_refinery_recovery*100;

$mine_operating_days = Real("300");         # days per year
$mill_operating_days = Real("330");         # days per year

$tonnage_mined = Real("30700000");

# computation: 
$percentage_copper_cutoff_grade = ($mining_cost_ore + $milling_cost + $G_A_mining + $G_A_milling) / ($overall_metal_recovery*($commodity_price-$smelting_refining_sales)*($tonne_to_pound/100));
# $percentage_copper_cutoff_grade = Real(0.4);
#Look-up information: 



if($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 0.05){
  $Tons = Real("18020000");
  $Average = Real("0.3");
  $Tons_above_cutoff = Real("30700000");
}
elsif($percentage_copper_cutoff_grade >= 0.05 && $percentage_copper_cutoff_grade< 0.15){
  $Tons = Real("2700000");
  $Average = Real("0.65");
  $Tons_above_cutoff = Real("12680000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 0.25){
  $Tons = Real("1300000");
  $Average = Real("0.78");
  $Tons_above_cutoff = Real("9980000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 0.35){
  $Tons = Real("1050000");
  $Average = Real("0.86");
  $Tons_above_cutoff = Real("8680000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 0.45){
  $Tons = Real("1200000");
  $Average = Real("0.94");
  $Tons_above_cutoff = Real("7630000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 0.55){
  $Tons = Real("830000");
  $Average = Real("1.04");
  $Tons_above_cutoff = Real("6430000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 0.65){
  $Tons = Real("980000");
  $Average = Real("1.11");
  $Tons_above_cutoff = Real("5600000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 0.75){
  $Tons = Real("950000");
  $Average = Real("1.21");
  $Tons_above_cutoff = Real("4620000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 0.85){
  $Tons = Real("420000");
  $Average = Real("1.32");
  $Tons_above_cutoff = Real("3670000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 0.95){
  $Tons = Real("550000");
  $Average = Real("1.38");
  $Tons_above_cutoff = Real("3250000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 1.05){
  $Tons = Real("460000");
  $Average = Real("1.47");
  $Tons_above_cutoff = Real("2700000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 1.15){
  $Tons = Real("570000");
  $Average = Real("1.56");
  $Tons_above_cutoff = Real("2240000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 1.25){
  $Tons = Real("320000");
  $Average = Real("1.7");
  $Tons_above_cutoff = Real("1670");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 1.35){
  $Tons = Real("270000");
  $Average = Real("1.81");
  $Tons_above_cutoff = Real("1350000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 1.45){
  $Tons = Real("130000");
  $Average = Real("1.92");
  $Tons_above_cutoff = Real("1080000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 1.55){
  $Tons = Real("205000");
  $Average = Real("1.99");
  $Tons_above_cutoff = Real("950000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 1.65){
  $Tons = Real("170000");
  $Average = Real("2.11");
  $Tons_above_cutoff = Real("745000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 1.75){
  $Tons = Real("150000");
  $Average = Real("2.24");
  $Tons_above_cutoff = Real("575000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 1.85){
  $Tons = Real("60000");
  $Average = Real("2.41");
  $Tons_above_cutoff = Real("425000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 1.95){
  $Tons = Real("75000");
  $Average = Real("2.51");
  $Tons_above_cutoff = Real("365000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 2.05){
  $Tons = Real("50000");
  $Average = Real("2.65");
  $Tons_above_cutoff = Real("290000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 2.15){
  $Tons = Real("30000");
  $Average = Real("2.78");
  $Tons_above_cutoff = Real("240000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 2.25){
  $Tons = Real("30000");
  $Average = Real("2.87");
  $Tons_above_cutoff = Real("210000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 2.35){
  $Tons = Real("25000");
  $Average = Real("2.97");
  $Tons_above_cutoff = Real("180000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 2.45){
  $Tons = Real("15000");
  $Average = Real("3.07");
  $Tons_above_cutoff = Real("155000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 2.55){
  $Tons = Real("40000");
  $Average = Real("3.13");
  $Tons_above_cutoff = Real("140000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 2.65){
  $Tons = Real("33000");
  $Average = Real("3.37");
  $Tons_above_cutoff = Real("100000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 2.75){
  $Tons = Real("10000");
  $Average = Real("3.72");
  $Tons_above_cutoff = Real("67000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 2.85){
  $Tons = Real("5000");
  $Average = Real("3.89");
  $Tons_above_cutoff = Real("57000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 2.95){
  $Tons = Real("5000");
  $Average = Real("3.99");
  $Tons_above_cutoff = Real("52000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 3.05){
  $Tons = Real("15000");
  $Average = Real("4.1");
  $Tons_above_cutoff = Real("47000");
}
elsif($percentage_copper_cutoff_grade >= 0.0 && $percentage_copper_cutoff_grade< 3.15){
  $Tons = Real("7000");
  $Average = Real("4.6");
  $Tons_above_cutoff = Real("32000");
}
else{
  $Tons = Real("25000");
  $Average = Real("5");
  $Tons_above_cutoff = Real("25000");
}


#Calculate yearly and daily production rates: 
$rate_milling_year = ($yearly_product_mix)/(($Average/100)*$mill_recovery*$smelter_refinery_recovery);
$rate_milling_day = $rate_milling_year / $mill_operating_days;


# Can now calculate mill/mine life: 
$mine_life = $Tons_above_cutoff / $rate_milling_year;
$mine_production_rate_year = $tonnage_mined / $mine_life;
$mine_production_rate_day = $mine_production_rate_year/$mine_operating_days;

# Total copper recovered: 
$copper_metal_recovered = $yearly_product_mix*$mine_life;

$dummy = ($Tons_above_cutoff*$Average/100)*$overall_metal_recovery;

$Overall_stripping_ratio = ($tonnage_mined-$Tons_above_cutoff)/$Tons_above_cutoff;
$Tonnage_waste = $tonnage_mined - $Tons_above_cutoff;

# making the answers to the proper decimal place or significant figure: 

$Overall_stripping_ratio_backup = $Overall_stripping_ratio;
$Overall_stripping_ratio = one_decimal_place($Overall_stripping_ratio);


$mine_life_backup = $mine_life;
$mine_life = one_decimal_place($mine_life);

$percentage_copper_cutoff_grade_answer = one_decimal_place($percentage_copper_cutoff_grade);

$copper_metal_recovered_backup = $copper_metal_recovered;
$copper_metal_recovered = no_decimal_place($copper_metal_recovered);

$rate_milling_day_backup = $rate_milling_day;
$rate_milling_day = no_decimal_place($rate_milling_day);

$mine_production_rate_day_backup = $mine_production_rate_day;
$mine_production_rate_day = no_decimal_place($mine_production_rate_day);

# # # for the significant figures now
# #$rate_milling_day = Real("3094");
# $rate_milling_day_string = "$rate_milling_day" ;

# $limit = length($rate_milling_day_string);


# $index_start = Real("0");
# while($index_start < $limit){
#   if (substr($rate_milling_day_string, $index_start-1, 1) != "0"){
#     if(substr($rate_milling_day_string, $index_start-1, 1) != "."){
#       last;
#     }    
#   }
#   $index_start = $index_start + Real("1");
# }


# $i = Real("0");
# $answer_string = "0";
# while($i < $index_start){
#   if(substr($rate_milling_day_string, $i, 1) != "."){
#     $concatenate_string = "0";
#   }
#   else{
#     $concatenate_string = ".";
#   }
#   $answer_string .= $concatenate_string;
#   $i = $i + 1;
# }

# $count_places = Real("0");

# $test_string = substr($rate_milling_day_string, $index_start, 1);

# while($index_start < $limit){
#   # while($count_places < Real("3")){
#   if ($count_places < Real("2")){
#     $concatenate_string = substr($rate_milling_day_string, $index_start, 1);
#     $answer_string .= $concatenate_string;

#     if(substr($rate_milling_day_string, $index_start, 1) != "."){
#       $count_places = $count_places + Real("1");
#     }
    
#   }
#   else{
#     $test_string = substr($rate_milling_day_string, $index_start, 1);
    
#     if($test_string eq "."){
#       $concatenate_string = ".";
#       $answer_string .= $concatenate_string;
#       $test_string = substr($rate_milling_day_string, $index_start, 1);
#       last;
      
      
#     }
#     else{
#       $test_string = substr($rate_milling_day_string, $index_start, 1);
#       $concatenate_string = "0";
#       $answer_string .= $concatenate_string;
#       last;
#     }
  
#   }
  
#   $index_start = $index_start + Real("1");
# }

# $rate_milling_day_answer = $answer_string * Real("1.0");

# $test_string = $rate_milling_day_string[0];
# for the multiple choice, simply display the graphs, each with an associated letter and then have a multiple choice at the bottom to choose the correct one

#set tolerance
Context()->flags->set(
tolerance=>.001,
tolType => "relative");

##############################################################
#
#  Text 
#mining_depth
#

BEGIN_PGML
*Plant Size - Mine Life*  

Given the following information:  

Mining Cost (ore) = [`\$`][`[$mining_cost_ore]`] per ton  
Mining Cost (waste) = [`\$`][`[$mining_cost_waste]`] per ton  
Milling cost = [`\$`][`[$milling_cost]`] per ton  
G&A cost (mining) = [`\$`][`[$G_A_mining]`] per ton  
G&A cost (milling) = [`\$`][`[$G_A_milling]`] per ton  
Smelting/Refining/sales cost = [`\$`][`[$smelting_refining_sales]`] per ton  

Overall Metal Recovery = [`[$overall_metal_recovery_display]`][`\%`]  
Operating Days Mine = [`[$mine_operating_days]`]  
Operating Days Mill = [`[$mill_operating_days]`]  
Market Demand = [`[$yearly_product_mix]`] tons Cu per year  
Cu market selling price = [`\$`][`[$commodity_price]`] per lb  


>> [@ image("UBC-MIN-18-003-1.png", width=>[$width], height=>[$height]) @]* <<  



Complete the table below:  

*NOTE:* Do not interpolate values off of the table. Use `%Cu` cut off to the nearest `1` decimal place.  


[@
  DataTable(
    [
      ["Pit Limit/Mill cutoff grade", ans_rule(7), "`%Cu` (`1` `decimal` `place`)"],
      ["Tonnage Mined", ans_rule(7), "`t o ns`"],
      ["Tonnage Milled", ans_rule(7), "`t o ns`"],
      ["Tonnage of Waste", ans_rule(7), "`t o ns`"], 
      ["Average Ore Grade Milled", ans_rule(7), "`%Cu` (Take value from table, do not interpolate)"],
      ["Milling Rate", ans_rule(7), "`tpd` (input your answer as a whole number)"],
      ["Mining Rate", ans_rule(7), "`tpd` (input your answer as a whole number)"],
      ["Mine Life", ans_rule(7), "`yrs` (`1` `decimal` `place`)"],
      ["Overall Stripping Ratio", ans_rule(7), "(`1` `decimal` `place`)"],
      ["Recovered Copper", ans_rule(7), "`t o ns`"],
    ],
    center => 1,
    midrules=>1,
    align => '|p{2.5in}|p{0.5in}|p{4in}|p{2in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|',
	tablecss => "border:solid thin; border-spacing:5px; border-radius: 5px; border-collapse:collapse;",
  )
@]***  

END_PGML


ANS($percentage_copper_cutoff_grade_answer->cmp(
  tolType => 'relative',
  tolerance => 0.001,
));
ANS($tonnage_mined->cmp);
ANS($Tons_above_cutoff->cmp);
ANS($Tonnage_waste->cmp);
ANS($Average->cmp);
ANS($rate_milling_day->cmp(
  tolType => 'absolute',
  tolerance => 10,
));
ANS($mine_production_rate_day->cmp(
  tolType => 'absolute',
  tolerance => 10,
));
# ANS($rate_milling_day->cmp);
# ANS($mine_production_rate_day->cmp);
ANS($mine_life->cmp);
ANS($Overall_stripping_ratio->cmp);
ANS($copper_metal_recovered->cmp);


ENDDOCUMENT();

# [@
#   DataTable(
#     [
#       ["Mining Cost (ore) ", [$mining_cost_ore], "`\$` `per` `t o ns`"],
#       ["Mining Cost (waste)", [$mining_cost_waste], "`\$` `per` `t o ns`"],
#       ["Milling cost", [$milling_cost], "`\$` `per` `t o ns`"],
#       ["`G&A` cost (mining)", [$G_A_mining], "`\$` `per` `t o ns`"],
#       ["`G&A` cost (milling)", [$G_A_milling], "`\$` `per` `t o ns`"],
#       ["Smelting/Refining/sales cost", [$smelting_refining_sales], "`\$` `per` `t o ns`"],
#       ["Overall Metal Recovery", [$overall_metal_recovery_display], "`\%`"],
#       ["Mill Recovery", [$mill_recovery_display], "`\%`"],
#       ["Combined Smelter/refinery", [$smelter_refinery_recovery_display], "`\%`"],
#       ["Operating Days Mine", [$mine_operating_days], " "],
#       ["Operating Days Mill", [$mill_operating_days], " "],
#       ["Market Demand", [$yearly_product_mix], "`t o ns` `Cu` `per` `year`"],
#       ["`Cu` market selling price", [$commodity_price], "`\$` `per` `t o ns`"],
#     ],
#     center => 1,
#     midrules=>1,
#     align => '|p{2.5in}|p{0.5in}|p{1.4in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|p{0.5in}|',
# 	tablecss => "border:solid thin; border-spacing:5px; border-radius: 5px; border-collapse:collapse;",
#   )
# @]***  



# Debugging:  

# Overall stripping ratio: [`[$Overall_stripping_ratio]`]    

# percentage_copper_cutoff_grade = [`[$percentage_copper_cutoff_grade]`]  
# Tonnage mined = [`[$tonnage_mined]`]  
# Tons above cutoff = [`[$Tons_above_cutoff]`]  
# Tonnage waste = [`[$Tonnage_waste]`]  
# Average ore grade milled = [`[$Average]`]  
# Rate milling day = [`[$rate_milling_day]`]  
# mine production rate day = [`[$mine_production_rate_day]`]  
# mine life = [`[$mine_life_backup]`]  
# overall stripping ratio = [`[$Overall_stripping_ratio_backup]`]  
# copper metal recovered = [`[$copper_metal_recovered]`]  
