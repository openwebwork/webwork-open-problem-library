# This problem is a good template for questions with Taylor Polynomials

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
);


TEXT(beginproblem());


$showPartialCorrectAnswers = 1;


Context("Numeric");
Context()->strings->add(over=>{},under=>{});

#Number of decimals to use in the approximation
$dec = 2;

$smallDec = 10**{-$dec};


# What degree Taylor Polynomial do you want
$n = 3;
$n1 = $n+1; # This is so that you can calculate a remainder

# Around which value are you centering the approximation
$a = 1;

# For which value of x would you like to evaluate the function
$x = 2;

# The formula you would like to approximate
$f[0] = Formula("x*ln(x)");

# The zero degree approximation
$tn[0] = $f[0]->eval(x=>"$a");

# code to compute the nth degree approximation 
$nfact = 1;
for my $i (1..$n)
{
$f[$i] = $f[$i-1]->D;
$fa = $f[$i]->eval(x=>"$a");
$tn[$i] = $tn[$i-1]+$fa*($x-$a)**($i)/$nfact;
$nfact = $nfact*($i+1);
}

# computing the error
$f[$n1] = $f[$n]->D;
$upF = $f[$n1]->eval(x=>"$a");
$error = $upF*($x-$a)**($n1)/$nfact;
$sError= sprintf("%0.3f",$error);
if ($sError < 0) {$sError = $error*-1;}
$ans = Compute("$sError")->with(
  tolType=>'absolute',
  tolerance=>'.005');

# is the nth polynomial an over or under estimate
# by default strings are case insensitive
$size = Compute("under");


#decreasing the number of decimal places
for my $i (1..$n)
{
$sTn[$i] = sprintf("%0.3f",$tn[$i]);
}

Context()->texStrings;
BEGIN_TEXT
Consider the function \(f(x) = x \ln(x)\). 
$BR Let \(T_n\) be the \(n^{th}\) degree Taylor approximation of \(f($x)\) about \(x = $a\).

$BR
Find:
$BR
END_TEXT

Context()->normalStrings;

for $j (1..$n)
{
Context()->texStrings;
BEGIN_TEXT
\(T_{$j} = \) \{ans_rule(20)\}
END_TEXT
Context()->normalStrings;
}

Context()->texStrings;
BEGIN_TEXT
$BR $BBOLD Use 3 decimal places in your answer, but make sure you carry all decimals when performing calculations $EBOLD
$PAR

\(T_{$n}\) is an \{ans_rule(10)\} (over/under) estimate of \(f($x)\).
$PAR

If \(R_{$n}\) is the remainder given by the Lagrange Remainder Formula:
$BR \(\left|R_{n}\right| \le \) \{ans_rule(10)\}
$PAR

END_TEXT
Context()->normalStrings;

for my $i (1..$n)
{
ANS(Compute("$sTn[$i]")->cmp() );
}

ANS($size->cmp(tolType=>'absolute',
               tolerance=>.0005) );
ANS($ans->cmp() );


# You will have to change most of the solution to fit the question
Context()->texStrings;
BEGIN_SOLUTION
$PAR SOLUTION $PAR
The \(n^{th}\) degree approximation of \(f($x)\) about \(x=$a\) is given by:
$BR \(T_n = f($a) + f'($a)($x-$a) + \cdots + \frac{f^n($a)}{n!}($x-$a)^n\)

$PAR
\(f'(x) = 1+\ln(x)\),
$PAR \(f''(x) = \frac{1}{x}\),
$PAR \(f'''(x) = -\frac{1}{x^2}\),
$PAR \(f^{iv}(x) = 2\frac{1}{x^3}\).

$PAR
Therefore,
$BR \(T_1 = $sTn[1]\),
$BR \(T_2 = $sTn[2]\),
$BR \(T_3 = $sTn[3]\),

$PAR
\(f'''(x)\) is always negative in the interval [$a,$x] so \(T_{$n}\) is a underestimate of \(f($x)\).

$PAR
By the Legrange Remainder Theorem we know we can find an M such that:
$BR \(\left|R_{$n}\right| \le \frac{M}{$n1 !}\left|$x-$a\right|^{$n1}\), where \(M \ge \left|f^{$n1}(t)\right|\) for all \(t\) in the interval [$x,$a].

$PAR 
By examining \(f'''(x)\) we find that it is biggest when \(t=$a\).   Therefore, a suitable choice is \(M=f'''($a)\).

$PAR
By calculation we find:
\(\left|R_$n\right| \le $sError\).

END_SOLUTION
Context()->normalStrings;

ENDDOCUMENT();        
