##DESCRIPTION
## 
## Created by the UBC Faculty of Applied Science.  
## Project led by Agnes d'Entremont, Jonathan Verrett, and Negar M. Harandi. 
##
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this 
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from BCcampus, the UBC Department of
## Mechanical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people. 
##
##ENDDESCRIPTION

## DBsubject(Engineering Electric Circuit Analysis)
## DBchapter()
## DBsection()
## Institution('University of British Columbia')
## Author(UBC Engineering)
## Date()
## Level()
## KEYWORDS('')
## RESOURCES('UBC-CIR-18-016.png')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
## Beginner


DOCUMENT();

#image scale
$imgScale = .18;

#image aspect ratio
$width = $imgScale*2704;
$height = $imgScale*1543;

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"PGauxiliaryFunctions.pl",
	"niceTables.pl",
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

TEXT(beginproblem());

##############################################################
#
#  Setup
#
#

Context("Numeric");
Context()->variables->add(t=>"Real");
Context()->variables->remove("x");

do{
	#given
	$resistance = random(50, 100, 5);
	$inductance_shown = random(20, 100, 10);
	$inductance = $inductance_shown/1000;

	#computation 
	$a = $inductance*(10**(-7));
	$b = 15*(10**(-7))+$inductance/$resistance;
	$c = 1+15/$resistance;
}while($b**2-4*$a*$c <= 0);

$exponent_1 = (-$b+sqrt($b**2-4*$a*$c))/(2*$a);
$exponent_2 = (-$b-sqrt($b**2-4*$a*$c))/(2*$a);
$coefficient_1 = -1.14285714286*$exponent_2/($exponent_1-$exponent_2);
$coefficient_2 = 1.14285714286-$coefficient_1;

$current = Formula("$coefficient_1*e^($exponent_1*t)+$coefficient_2*e^($exponent_2*t)");

$voltage = Formula("$coefficient_1*(15+$inductance*$exponent_1)*e^($exponent_1*t)+$coefficient_2*(15+$inductance*$exponent_2)e^($exponent_2*t)");

if(abs($exponent_1) < abs($exponent_2)){
	$k1 = $coefficient_1;
	$k2 = $exponent_1;
	$k3 = $coefficient_2;
	$k4 = $exponent_2;

	$c1 = $coefficient_1*(15+$inductance*$exponent_1);
	$c2 = $exponent_1;
	$c3 = $coefficient_2*(15+$inductance*$exponent_2);
	$c4 = $exponent_2;
}
else{
	$k3 = $coefficient_1;
	$k4 = $exponent_1;
	$k1 = $coefficient_2;
	$k2 = $exponent_2;

	$c3 = $coefficient_1*(15+$inductance*$exponent_1);
	$c4 = $exponent_1;
	$c1 = $coefficient_2*(15+$inductance*$exponent_2);
	$c2 = $exponent_2;
}

#casting variables to a formula math object so method cmp can be called to check answers
$k1 = Formula("$k1");
$k2 = Formula("$k2");
$k3 = Formula("$k3");
$k4 = Formula("$k4");

$c1 = Formula("$c1");
$c2 = Formula("$c2");
$c3 = Formula("$c3");
$c4 = Formula("$c4");

#set tolerance
Context()->flags->set(
tolerance=>.02,
);

##############################################################
#
#  Text 
#
#

BEGIN_PGML

[@ image("UBC-CIR-18-016.png", width=>[$width], height=>[$height]) @]*

Given that [`I_S = 2`] [`A`], [`R_1 = 20`] [`\Omega`], [`R_2 = 15`] [`\Omega`], [`R_3 = [$resistance]`] [`\Omega`], [`C = 100`] [`nF`], and [`L = [$inductance_shown]`] [`mH`], solve for [`i(t)`] and [`v(t)`] for [`t > 0`]. 


[`i(t)=K_1e^{(K_2t)}+K_3e^{(K_4t)}`]

[`K_1=`] [_____]  
[`K_2=`] [_____]  
[`K_3=`] [_____]  
[`K_4=`] [_____]  

[`v(t)=C_1e^{(C_2t)}+C_3e^{(C_4t)}`]

[`C_1=`] [_____]  
[`C_2=`] [_____]  
[`C_3=`] [_____]  
[`C_4=`] [_____]  

For answers to be accepted, kindly ensure that the absolute value of the first coefficient of [`t`] is smaller than the absolute value of second: [`|K_2| < |K_4|`] and [`|C_2| < |C_4|`].

END_PGML


$ans_hash_k1 = $k1->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(1)});
$k1Correct= $ans_hash_k1->{score};
$ans_hash_k2 = $k2->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(2)});
$k2Correct= $ans_hash_k2->{score};
ANS($k1->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $k1Correct==1 && $k2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));
ANS($k2->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $k1Correct==1 && $k2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

$ans_hash_k3 = $k3->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(3)});
$k3Correct= $ans_hash_k3->{score};
$ans_hash_k4 = $k4->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(4)});
$k4Correct= $ans_hash_k4->{score};
ANS($k3->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $k3Correct==1 && $k4Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));
ANS($k4->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $k3Correct==1 && $k4Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

$ans_hash_c1 = $c1->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(5)});
$c1Correct= $ans_hash_c1->{score};
$ans_hash_c2 = $c2->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(6)});
$c2Correct= $ans_hash_c2->{score};
ANS($c1->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $c1Correct==1 && $c2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));
ANS($c2->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $c1Correct==1 && $c2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

$ans_hash_c3 = $c3->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(7)});
$c3Correct= $ans_hash_c3->{score};
$ans_hash_c4 = $c4->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(8)});
$c4Correct= $ans_hash_c4->{score};
ANS($c3->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $c3Correct==1 && $c4Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));
ANS($c4->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct) && $c3Correct==1 && $c4Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));
##############################################################

ENDDOCUMENT();