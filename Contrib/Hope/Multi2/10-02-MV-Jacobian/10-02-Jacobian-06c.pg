## DESCRIPTION
## Jacobian matrix
## ENDDESCRIPTION

## KEYWORDS('Jacobian','Jacobian matrix')

## DBsubject('Calculus')
## DBchapter('Partial Derivatives')
## DBsection('Functions of Several Variables')
## Date('08/24/2012')
## Author('Paul Pearson')
## Institution('Hope College')
## TitleText1('Multivariable Mathematics')
## EditionText1('Version 3.0')
## AuthorText1('Darin Stephenson')
## Section1('10.2')
## Problem1('6c')


##############################
#  Initialization

DOCUMENT(); 

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGmatrixmacros.pl",
"parserMultiAnswer.pl",
);

TEXT(beginproblem());

SRAND($psvn);


#############################
#  Setup

Context("Numeric")->variables->are(
x=>'Real',
y=>'Real',
z=>'Real',
);

# construct the function
$a = random(2,7,1);
do { $b = random(2,7,1); } until ($b != $a);
do { $c = random(2,7,1); } until ($c != $a && $c != $b);

$f1 = Formula("$a e^(x y z^2) + $b y");
$f2 = Formula("$c x^2 + x z");

# construct the Jacobian
$f1x = $f1->D('x');   $f1y = $f1->D('y');   $f1z = $f1->D('z');
$f2x = $f2->D('x');   $f2y = $f2->D('y');   $f2z = $f2->D('z');

# coordinates of the point P = a
$Px = non_zero_random(-1,1,1);
$Py = 0;
$Pz = -1 * $Px;

# values of the function f at the point P
$f1P = $f1->eval(x=>$Px,y=>$Py,z=>$Pz);
$f2P = $f2->eval(x=>$Px,y=>$Py,z=>$Pz);

# entries of Jacobian at the point P
$f1Px = $f1x->eval(x=>$Px,y=>$Py,z=>$Pz);   $f1Py = $f1y->eval(x=>$Px,y=>$Py,z=>$Pz);   $f1Pz = $f1z->eval(x=>$Px,y=>$Py,z=>$Pz);
$f2Px = $f2x->eval(x=>$Px,y=>$Py,z=>$Pz);   $f2Py = $f2y->eval(x=>$Px,y=>$Py,z=>$Pz);   $f2Pz = $f2z->eval(x=>$Px,y=>$Py,z=>$Pz);

# nearby point Q
$Qx = $Px - list_random(0.01,0.02,0.03,0.04,0.05);
$Qy = $Py + list_random(0.01,0.02,0.03,0.04,0.05);
$Qz = $Pz - list_random(0.01,0.02,0.03,0.04,0.05);

# linear approximation L
$L1 = Formula("$f1P + $f1Px (x - $Px) + $f1Py (y - $Py) + $f1Pz (z - $Pz)");
$L2 = Formula("$f2P + $f2Px (x - $Px) + $f2Py (y - $Py) + $f2Pz (z - $Pz)");

# linear approximation L at the point Q
$L1Q = $L1->eval(x=>$Qx,y=>$Qy,z=>$Qz);
$L2Q = $L2->eval(x=>$Qx,y=>$Qy,z=>$Qz);

# function at the point Q
$f1Q = $f1->eval(x=>$Qx,y=>$Qy,z=>$Qz);
$f2Q = $f2->eval(x=>$Qx,y=>$Qy,z=>$Qz);


$multians1 = MultiAnswer($L1, $L2)->with(

  singleResult => 1,
  allowBlankAnswers => 1,
  checkTypes => 0,
  format =>  "<table border='0' cellspacing='10'>
  <tr><td> %s </td></tr>
  <tr><td> %s </td></tr>
  </table>",
  tex_format =>  "\left\lbrack\begin{array}{r} %s \\ %s \end{array}\right\rbrack",

  checker => sub {
      my ( $correct, $student, $answerHash ) = @_;
      my @c = @{$correct};
      my @s = @{$student};
      my @score = ();
      foreach my $j (0..1) {
        $score[$j] = 0;
        if ($c[$j]->typeMatch($s[$j]) && $c[$j] == $s[$j]) { $score[$j] = 1; }
      }
      return [ @score ];
  }

);



$multians2 = MultiAnswer($f1Q, $f2Q)->with(

  singleResult => 1,
  allowBlankAnswers => 1,
  checkTypes => 0,
  format =>  "<table border='0' cellspacing='10'>
  <tr><td> %s </td></tr>
  <tr><td> %s </td></tr>
  </table>",
  tex_format =>  "\left\lbrack\begin{array}{r} %s \\ %s \end{array}\right\rbrack",

  checker => sub {
      my ( $correct, $student, $answerHash ) = @_;
      my @c = @{$correct};
      my @s = @{$student};
      my @score = ();
      foreach my $j (0..1) {
        $score[$j] = 0;
        if ($c[$j]->typeMatch($s[$j]) && $c[$j] == $s[$j]) { $score[$j] = 1; }
      }
      return [ @score ];
  }

);


$multians3 = MultiAnswer($L1Q, $L2Q)->with(

  singleResult => 1,
  allowBlankAnswers => 1,
  checkTypes => 0,
  format =>  "<table border='0' cellspacing='10'>
  <tr><td> %s </td></tr>
  <tr><td> %s </td></tr>
  </table>",
  tex_format =>  "\left\lbrack\begin{array}{r} %s \\ %s \end{array}\right\rbrack",

  checker => sub {
      my ( $correct, $student, $answerHash ) = @_;
      my @c = @{$correct};
      my @s = @{$student};
      my @score = ();
      foreach my $j (0..1) {
        $score[$j] = 0;
        if ($c[$j]->typeMatch($s[$j]) && $c[$j] == $s[$j]) { $score[$j] = 1; }
      }
      return [ @score ];
  }

);





######################
#  Main text

Context()->texStrings;
BEGIN_TEXT
Consider the function
$PAR
\[
f(x,y,z) = \left( \begin{array}{c} $f1 \\ $f2 \end{array} \right).
\]
$BR
(a) Use the Jacobian \( Jf(\boldsymbol{\vec{a}}) \) to 
construct a linear (or affine) approximation
\( L(\boldsymbol{\vec{x}}) \) to \( f \) near the point 
\( \boldsymbol{\vec{a}} = \left( \begin{array}{r} $Px \\ $Py \\ $Pz \end{array} \right). \)
$BR
\{ 
mbox(
  "\( L(\boldsymbol{\vec{x}}) = \)",
  display_matrix([ [$multians1->ans_rule(40)], [$multians1->ans_rule(40)] ], align=>'c')
);
\}
$BR
(b) Find the values of the function \( f \) and the linear approximation 
\( L \) at the nearby point \( \boldsymbol{\vec{b}} = \left( \begin{array}{r} $Qx \\ $Qy \\ $Qz \end{array} \right). \)
$BR
\{ 
mbox(
  "\( f(\boldsymbol{\vec{b}}) = \)",
  display_matrix([ [$multians2->ans_rule(40)], [$multians2->ans_rule(40)] ], align=>'c')
);
\}
$BR
\{ 
mbox(
  "\( L(\boldsymbol{\vec{b}}) = \)",
  display_matrix([ [$multians3->ans_rule(40)], [$multians3->ans_rule(40)] ], align=>'c')
);
\}
END_TEXT
Context()->normalStrings;

########################
#  Answer evaluation

#install_problem_grader(~~&std_problem_grader);

$showPartialCorrectAnswers = 1;

ANS( $multians1->cmp() );
ANS( $multians2->cmp() );
ANS( $multians3->cmp() );


COMMENT("MathObject version.  (Uses the same randomization as 10-02-Jacobian-03c.pg)");

ENDDOCUMENT();


