## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION


## DBsubject(Linear algebra)
## DBchapter(Abstract vector spaces)
## DBsection(Basis and dimension)
## Date(July 2013)
## Institution(Hope College)
## Author(Paul Pearson)
## KEYWORDS('linear algebra','vector space','subspaces')

DOCUMENT();
loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"MatrixUnits.pl",
"MatrixReduce.pl",
"MatrixCheckers.pl",
"parserPopUp.pl",
"unionLists.pl",
"PGcourse.pl",
);
install_problem_grader(~~&std_problem_grader);
$showPartialCorrectAnswers = 0;
$refreshCachedImages = 1;
TEXT(beginproblem()); 

Context('Numeric');

do {

$U = GL3Z();
$V = GL3Z();

$A = Matrix([
[1,1,-3],
[2,1,-2],
[-1,0,-1], # row 3 = row1 - row 2
]);
$A = $U * $V * $A;


foreach my $i (1..3) {
  foreach my $j (1..3) {
    $a[$i][$j] = $A->element($i,$j);
  }
}

$p1 = Formula("$a[1][1] * x^2 + $a[2][1] * x + $a[3][1]")->reduce;
$p2 = Formula("$a[1][2] * x^2 + $a[2][2] * x + $a[3][2]")->reduce;
$p3 = Formula("$a[1][3] * x^2 + $a[2][3] * x + $a[3][3]")->reduce;

} until (
  (($A->element(3,1) != 0) or ($A->element(3,3) != 0))
);


$Adim = Real(2);
$Abasis = PopUp(['choose',"basis for P_2","not a basis for P_2"],"not a basis for P_2");


Context()->texStrings;
BEGIN_TEXT
Let \( \mathcal{P}_2 \) be the vector space of all polynomials of degree 2 or less, 
and let \( H \) be the subspace spanned by \( $p1, \ $p2 \) and \( $p3 \).
$BR
$BR
\{ BeginList('OL',type=>'a') \}
$ITEM The dimension of the subspace \( H \) is \{ ans_rule(10) \}.
$ITEMSEP

$ITEM Is \( \lbrace $p1, $p2, $p3 \rbrace \) a basis for \( \mathcal{P}_2 \)? \{ $Abasis->menu \}  Be sure you can explain and justify your answer.
$ITEMSEP
END_TEXT
Context()->normalStrings;

ANS($Adim->cmp);
ANS($Abasis->cmp);

########################################

$Abasisvects = List($p1,$p3);

Context()->texStrings;
BEGIN_TEXT
$ITEM A basis for the subspace \( H \) is 
\( \big\lbrace \) 
\{ ans_rule(40) \} 
\( \big\rbrace \).
Enter a polynomial or a comma separated list of polynomials.
\{ EndList('OL') \}
END_TEXT
Context()->normalStrings;

sub mycheck {

	my ($correct, $student, $ansHash, $value) = @_;
	my @c = @{$correct};  
	my @s = @{$student};
	my $nc = scalar(@c);
	my $ns = scalar(@s);
	my $score = 0;
	my @errors = ();

	return ($score,@errors) if $nc != $ns;

		# Most of the answer checking is done on integers 
		# or on decimals like 0.24381729, so we will set the
		# tolerance accordingly in a local context.
		my $context = Context()->copy;
		$context->flags->set(
			tolerance => 0.001,
			tolType => "absolute",
		);

		# put the correct vectors into the columns of a matrix $C
        my $C = Matrix([
        [$c[0]->eval(x=>pi),$c[1]->eval(x=>pi)],
        [$c[0]->D('x')->eval(x=>pi),$c[1]->D('x')->eval(x=>pi)],
        [$c[0]->D('x','x')->eval(x=>pi),$c[1]->D('x','x')->eval(x=>pi)],
        ]);
#warn $C;

		# put the student vectors into the columns of a matrix $S
        my $S = Matrix([
        [$s[0]->eval(x=>pi),$s[1]->eval(x=>pi)],
        [$s[0]->D('x')->eval(x=>pi),$s[1]->D('x')->eval(x=>pi)],
        [$s[0]->D('x','x')->eval(x=>pi),$s[1]->D('x','x')->eval(x=>pi)],
        ]);
#warn $S;


		# Put $C and $S into the local context so that
		# all of the computations that follow will also be in
		# the local context.
		$C = Matrix($context,$C);
		$S = Matrix($context,$S);

		#  Theorem: A^T A is invertible if and only if A has linearly independent columns.

		#  Check that the professor's vectors are, in fact, linearly independent.
		$CTC = ($C->transpose) * $C;
		warn "Correct answer is a linearly dependent set." if ($CTC->det == 0);

		#  Check that the student's vectors are linearly independent
		if ( (($S->transpose) * $S)->det == 0) {
			Value->Error("Your vectors are linearly dependent");
			return 0;
		}

		# S = student, C = correct, X = change of basis matrix
		# Solve S = CX for X using (C^T C)^{-1} C^T S = X.
		$X = ($CTC->inverse) * (($C->transpose) * $S);
		if ( $S == $C * $X ) { $score = $nc; };
    
		return ($score,@errors);



}




ANS($Abasisvects->cmp(list_checker=>~~&mycheck) );

COMMENT('MathObject version.  Answer is always dimension 2.');
ENDDOCUMENT();