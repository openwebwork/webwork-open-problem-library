## DESCRIPTION
## The geometry of vectors in R^n
## ENDDESCRIPTION

## KEYWORDS('vectors','vector operations')

## DBsubject('Linear Algebra')
## DBchapter('Geometry of Real n-Space')
## DBsection('Points and Vectors')
## Date('December 2015')
## Author('Paul Pearson')
## Institution('Hope College')
## MO(1)

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGgraphmacros.pl",
  "contextLimitedVector.pl",

  "parserPopUp.pl",
  "parserMultiAnswer.pl",
  "parserOneOf.pl",
  "PGML.pl",
  "scaffold.pl",
  "PGcourse.pl"
);
TEXT(beginproblem());
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;

Context("LimitedVector-coordinate")->variables->are(x=>'Real',y=>'Real');
Context()->flags->set( ijk=>0 );

#  construct graph canvases
$pixels = 301;
($xmin,$xmax) = (-7,7);
($ymin,$ymax) = (-7,7);

$a11 = random(-2,4,1);  $a12 = random(-3,-2,1);
$a21 = random(1,2,1);   $a22 = random(2,3,1);

# point P = (a11, a12)
# direction vector v = (a12, a22)

$P = OneOf(Vector("<$a11, $a21>"),Point("($a11,$a21)"));
$v = OneOf(Vector("<$a12, $a22>"),Point("($a12,$a22)"));

foreach my $i (0) {
    $gr[$i] = init_graph($xmin,$ymin,$xmax,$ymax, axes=>[0,0], size=>[$pixels,$pixels]);
    $gr[$i] -> lb('reset');

    #  manually draw the grid
    foreach my $x ($xmin..$xmax) {
      $gr[$i] -> moveTo($x,$ymin);
      $gr[$i] -> lineTo($x,$ymax,'gray',1);
    }
    foreach my $y ($ymin..$ymax) {
      $gr[$i] -> moveTo($xmin,$y);
      $gr[$i] -> lineTo($xmax,$y,'gray',1);
    }

    # manually label the axes
    foreach my $x (($xmin+1)..-1,1..($xmax-1)) {
      $gr[$i] -> lb(new Label ( $x,$ymin+0.75,$x,'black','center','top'));
    }
    foreach my $y (($ymin+1)..-1,1..($ymax-1)) {
      $gr[$i] -> lb(new Label ( $xmin+0.75,$y,$y,'black','right','middle'));
    }


   $gr[$i]->stamps(closed_circle($a11, $a21, 'blue'));
   $gr[$i] -> lb(new Label ( $a11,$a21+0.25,'P','blue','center','bottom'));

   $gr[$i] -> moveTo(0,0);
   $gr[$i] -> arrowTo($a12,$a22,'blue',2); # second basis vector
   $gr[$i] -> lb(new Label ( $a12,$a22+0.25,'v','blue','center','bottom'));

} # end constructing graph canvas

@t = (-2,-1,0,1,2);

@ans1 = ();
@ans2 = ();
foreach my $i (0..$#t) {
    $ans1[$i] = OneOf( Vector("<$t[$i] * $a12, $t[$i] * $a22>"), Point("($t[$i] * $a12, $t[$i] * $a22)"));
    $ans2[$i] = OneOf( Vector("<$a11 + $t[$i] * $a12, $a21 + $t[$i] * $a22>"), Point("($a11 + $t[$i] * $a12, $a21 + $t[$i] * $a22)"));
}


@popup1 = ();
@popup2 = ();

$a12abs = abs($a12);

$popup1[0] = PopUp(["choose","line $a12 x + $a22 y = 0", "line $a22 x - $a12abs y = 0"],"line $a22 x - $a12abs y = 0");
$popup1[1] = PopUp(["choose","left to right","right to left"],"right to left");
$popup1[2] = PopUp(["choose","the x-coordinates are increasing","the x-coordinates are decreasing","the y-coordinates are increasing","the y-coordinates are decreasing"],"the x-coordinates are decreasing");
$popup1[3] = PopUp(["choose","low to high","high to low"],"low to high");
$popup1[4] = PopUp(["choose","the x-coordinates are increasing","the x-coordinates are decreasing","the y-coordinates are increasing","the y-coordinates are decreasing"],"the y-coordinates are increasing");

$c = $a11 * $a22 + $a12 * $a21;
$popup2[0] = PopUp(["choose","line $a12 x + $a22 y = $c", "line $a22 x - $a12abs y = $c"],"line $a22 x - $a12abs y = $c");
$popup2[1] = PopUp(["choose","left to right","right to left"],"right to left");
$popup2[2] = PopUp(["choose","the x-coordinates are increasing","the x-coordinates are decreasing","the y-coordinates are increasing","the y-coordinates are decreasing"],"the x-coordinates are decreasing");
$popup2[3] = PopUp(["choose","low to high","high to low"],"low to high");
$popup2[4] = PopUp(["choose","the x-coordinates are increasing","the x-coordinates are decreasing","the y-coordinates are increasing","the y-coordinates are decreasing"],"the y-coordinates are increasing");
$popup2[5] = PopUp(["choose","parallel","perpendicular","skew"],"parallel");


Scaffold::Begin(
    can_open => "always",
    is_open  => "incorrect",
    hardcopy_is_open => "always",
);

BEGIN_PGML
The figure below shows a named point [`P`] and a vector [`\mathbf{v}`] in [`\mathbb{R}^2`].

>> [@ image(insertGraph($gr[0]), width=>$pixels, height=>$pixels, tex_size=>900).$PAR @]* <<
END_PGML

Section::Begin("Part 1");
BEGIN_PGML
a. Find the coordinate vector for [`\mathbf{v}`].

    + [`\mathbf{v}=`] [____________]{$v}

b. Find and draw the vector [`t \mathbf{v}`] for the following values of [`t`].

    + When [`t = [$t[0]]`], [` t \mathbf{v} = `] [______________]{$ans1[0]}

    + When [`t = [$t[1]]`], [` t \mathbf{v} = `] [______________]{$ans1[1]}

    + When [`t = [$t[2]]`], [` t \mathbf{v} = `] [______________]{$ans1[2]}

    + When [`t = [$t[3]]`], [` t \mathbf{v} = `] [______________]{$ans1[3]}

    + When [`t = [$t[4]]`], [` t \mathbf{v} = `] [______________]{$ans1[4]}

c. As [`t`] increases, the tips of the position vectors [`t \mathbf{v}`] trace the [_]{$popup1[0]} from [_]{$popup1[1]} because [_]{$popup1[2]} and from [_]{$popup1[3]} because [_]{$popup1[4]}.
END_PGML
Section::End();

Section::Begin("Part 2");
BEGIN_PGML
a. Find the coordinates of the point [`P`].

    + [`P =`] [____________]{$P}

b. Find and draw the vector [`P + t \mathbf{v}`] for the following values of [`t`].

    + When [`t = [$t[0]]`], [` P + t \mathbf{v} = `] [______________]{$ans2[0]}

    + When [`t = [$t[1]]`], [` P + t \mathbf{v} = `] [______________]{$ans2[1]}

    + When [`t = [$t[2]]`], [` P + t \mathbf{v} = `] [______________]{$ans2[2]}

    + When [`t = [$t[3]]`], [` P + t \mathbf{v} = `] [______________]{$ans2[3]}

    + When [`t = [$t[4]]`], [` P + t \mathbf{v} = `] [______________]{$ans2[4]}

c. As [`t`] increases, the tips of the position vectors [`P + t \mathbf{v}`] trace the [_]{$popup2[0]} from [_]{$popup2[1]} because [_]{$popup2[2]} and from [_]{$popup2[3]} because [_]{$popup2[4]}.  Notice that the set of points traced out by [`t \mathbf{v}`] is [_]{$popup2[5]} to the set of points traced out by [`P + t \mathbf{v}`].
END_PGML
Section::End();

Scaffold::End();
ENDDOCUMENT();
