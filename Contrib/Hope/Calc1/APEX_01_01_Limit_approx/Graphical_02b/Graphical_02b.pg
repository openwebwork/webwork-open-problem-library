## DBsubject(Calculus - single variable)
## DBchapter(Limits and continuity)
## DBsection(Motivational applications (estimation))
## Institution(Hope College)
## Author(Paul Pearson)
## Level(3)
## MO(1)
## TitleText1('APEX Calculus')
## AuthorText1('Hartman')
## EditionText1('3.0')
## Section1('1.1')
## Problem1('')

DOCUMENT();
loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGML.pl",
"parserOneOf.pl",
"PGcourse.pl",
);
TEXT(beginproblem());

Context("Numeric");
Context()->flags->set(
  tolerance => 0.001,
  tolType => "absolute",
);


$k = random(1.25,3,0.01);
$f = Formula("$k * x*(x-1)*(x+1)");

$f->perlFunction("F");            # subroutine named F

$i = random(110,190,1); # index for point of tangency

@x = map( ($_)/100, (-200..200) );
$xstring = join(',' , @x);

$c = $x[$i];

@y = map( F($_), @x );
$ystring = join(',' , @y);

$ans1 = Real("($y[$i+1] - $y[$i]) / ($x[$i+1] - $x[$i])");
$ans2 = Real("($y[$i] - $y[$i-1]) / ($x[$i] - $x[$i-1])");
$ans = ($ans1 + $ans2) / 2;

$plotdivname = "plotDivDifferenceQuotient002b";
$plotdiv = MODES(TeX=>image("cubic.png",tex_size=>900),HTML=>qq(
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<div id="$plotdivname" style="width: 640px; height: 480px;"><!-- Plotly chart will be drawn inside this DIV --></div>
  <script>
var trace1 = {
  x: [$xstring],
  y: [$ystring],
  //fill: 'tozeroy',
  type: 'scatter'
};
var data = [trace1];

Plotly.newPlot("$plotdivname", data);
  </script>
));


BEGIN_PGML
The graph of a function [`y=f(x)`] is shown below.  You do not know a formula for this function, but the graph is interactive and shows [`x`]- and [`y`]-coordinates of points when the pointer is over the graph.  Note: you can use the pop-up tools on the graph to zoom in, if necessary.

>> [$plotdiv]* <<

Find a *reasonable approximate value* for the limit of the difference quotient as [`h`] approaches zero.  (Your answer must be correct to three decimal places.)

    [``\lim_{h \to 0} \frac{f([$c]+h)-f([$c])}{h} \approx``] [_____________]
END_PGML

sub mycheck {
  my ($correct, $student, $ansHash) = @_;
  if ($ans1 < $ans2) {
    return ( ($ans1 < $student) && ($ans2 > $student) );
  } else {
    return ( ($ans2 < $student) && ($ans1 > $student) );
  }
}

ANS( $ans->cmp( checker=>~~&mycheck ) );

ENDDOCUMENT();