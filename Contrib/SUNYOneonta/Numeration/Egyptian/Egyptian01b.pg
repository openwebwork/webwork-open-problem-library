#Description
#Math for Elementary Education
#End Description

# DBsubject(Historical Systems)
# DBchapter(Arithmetic)
# DBsection(Converting)
# Date(2/28/22)
# Institution(SUNY Oneonta)
# Level(2)
# KEYWORDS('Egyptian', 'Numeration')
# RESOURCES('egyptian1_01b.png', 'egyptian10_01b.png', 'egyptian100_01b.png', 'egyptian1000_01b.png')

###################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",

  "PGcourse.pl",
  "niceTables.pl",
  "answerHints.pl",
  "contextArbitraryString.pl",
);

TEXT(beginproblem());

###########################
#  Setup

Context("ArbitraryString");
#Context()->strings->add(True=>{},False=>{});

#	Presents student with number value that must be converted to Egypt numeral string for answer

$EgyptValue = list_random(1000, 2000, 3000, 4000); #Randomly generated integer value for Egypt numeral, answer guaranteed in hundreds
$EgyptValue += list_random(0, 100, 200, 300, 400); # 100s place will have a value in it guaranteed
$EgyptValue += list_random(0, 10, 20, 30, 40); # 10s place will have a value in it guaranteed
$EgyptValue += list_random(0, 1, 2, 3, 4); # 1s place will have a value in it guaranteed
$ShownValue = $EgyptValue; #Shown in the question
$strAns = (' ');  # Creates a string for storing variables in
chop $strAns;

while ($EgyptValue > 999) {
  $strAns = join '', $strAns, 'f'; # push X value into front of array, 1000s value
  $EgyptValue -= 1000;
}

while ($EgyptValue > 99) {
  $strAns = join '', $strAns, 's'; # push X value into front of array, 100s value
  $EgyptValue -= 100;
}

while ($EgyptValue > 9) {
  $strAns = join '', $strAns, 'h'; # push X value into front of array, 10s value
  $EgyptValue -= 10;
}

while ($EgyptValue > 0) {
  $strAns = join '', $strAns, 'i'; # push function allows you to add content after
  $EgyptValue -= 1;
}

#Context()->strings->add(True=>{},False=>{});


###########################
#  Main text

Context()->texStrings;
BEGIN_TEXT
$PAR
 Write $ShownValue as an Egyptian numeral. Use the following key to input
your answer:
 $BR
 $BR
 \{
DataTable(
  [
    [['Egyptian Symbol', headerrow => 1],'Keyboard Input'],
    [image("egyptian1_01b.png",width=>23,height=>32,tex_size=>40, extra_html_tags=>'alt="Egyptian Numeral 1."'),'i'],
	[image("egyptian10_01b.png",width=>23,height=>32,tex_size=>40, extra_html_tags=>'alt="Egyptian Numeral 10."'),'h'],
	[image("egyptian100_01b.png",width=>23,height=>32,tex_size=>40, extra_html_tags=>'alt="Egyptian Numeral 100."'),'s'],
    [image("egyptian1000_01b.png",width=>23,height=>32,tex_size=>40, extra_html_tags=>'alt="Egyptian Numeral 1000."'),'f']
  ],
  caption => ' ',
);
\}
$BR
$BCENTER
$ShownValue = \{ ans_rule(20) \}
$ECENTER

END_TEXT
Context()->normalStrings;
#\{ helpLink("numbers") \} Use this in texStrings to allows students to see formulas

############################
#  Answer evaluation

$showPartialCorrectAnswers = 1;

# ANS( Compute($strAns)->cmp());

ANS(Compute($strAns)->cmp(checker => sub{
	my ($correct, $student, $ansHash) = @_;

	$student =~ s/ //g; # Removes spaces from student answer!

	@resultA = split('', $student, length($student));
	@resultB = split('', $correct, length($correct));

    if($resultA[0] eq 'i' && $resultA[length($student)-1] eq 'f' && $resultB[0] eq 'f' && $resultB[length($correct) - 1] eq 'i')
    {
        Value->Error("Symbols must be in decreasing order!"); # 'f' is 1st character
    }

    if($resultA[0] eq 'i' && $resultA[length($student)-1] eq 's' && $resultB[0] eq 's' && $resultB[length($correct) - 1] eq 'i')
    {
        Value->Error("Symbols must be in decreasing order!"); # 's' is 1st character
    }

    if($resultA[0] eq 'i' && $resultA[length($student)-1] eq 'h' && $resultB[0] eq 'h' && $resultB[length($correct) - 1] eq 'i')
    {
        Value->Error("Symbols must be in decreasing order!"); # 'h' is 1st character
    }

	for($var01 = 0; $var01 < length($student); $var01++) #Check for any symbols in incorrect order
    {

        if($var01 < (length($student) - 1)) #Check to see if there's a minor typo, compares current char with next char
        {
			if($resultA[$var01] eq 'i' && $resultA[$var01+1] eq 'h')
			{
				Value->Error("Symbols must be in decreasing order."); # 'i' and 'h' are mixed up
			}

			if($resultA[$var01] eq 'h' && $resultA[$var01+1] eq 's')
			{
				Value->Error("Symbols must be in decreasing order."); # 'h' and 's' are mixed up
			}

            if($resultA[$var01] eq 's' && $resultA[$var01+1] eq 'f')
            {
                Value->Error("Symbols must be in decreasing order."); # 's' and 'f' are mixed up
            }

        }

    } # End of For loop

    if(length($student) != length($correct))
    {
        Value->Error(); # Length of value must be correct to proceed
    }

	if($student ne $correct) # If all other checks fail, directly check strings
	{
		Value->Error();
	}

	return 1;
}));


############################
#  Solution

Context()->texStrings;
#BEGIN_SOLUTION

#$strAns , f = 1000, s = 100, h = 10, i = 1
#END_SOLUTION
Context()->normalStrings;
ENDDOCUMENT();