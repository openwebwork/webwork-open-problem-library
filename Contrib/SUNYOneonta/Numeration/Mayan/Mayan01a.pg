#Description
#Math for Elementary Education
#End Description

# DBsubject(Historical Systems)
# DBchapter(Arithmetic)
# DBsection(Converting)
# Date(2/28/22)
# Institution(SUNY Oneonta)
# Level(2)
# KEYWORDS('Mayan', 'Numeration')
# RESOURCES('mayan0_01a.png', 'mayan1_01a.png', 'mayan5_01a.png')

###################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",

  "PGcourse.pl",
    "niceTables.pl",
  "contextArbitraryString.pl",
);

TEXT(beginproblem());


###########################
#  Setup

Context("ArbitraryString");
#Context()->strings->add(True=>{},False=>{});

#	Presents student with number value that must be converted to Mayan symbol string for answer

$val01 = 0;
$flag01 = 0; # Used in error checker to see if * is used
$val02 = random(1, 17);
$flag02 = 0; # Used in error checker to see if * is used
$val03 = random(0, 19);
$flag03 = 0; # Used in error checker to see if * is used
$ShownValue = ($val01*360) + ($val02*20) + $val03;  #Shown in the question

$Ans01 = (' ');  # Creates a string for storing variables in, 360s value
chop $Ans01;
$Ans02 = (' ');  # Creates a string for storing variables in
chop $Ans02;
$Ans03 = (' ');  # Creates a string for storing variables in, 20s value
chop $Ans03;

#Begin First String

if ($val01 == 0)
{
	$Ans01 = join '', $Ans01, 'none'; # 1/20 chance this happens
}

if (($val01 == 9) || ($val01 == 14) || ($val01 == 19)) {
  $Ans01 = join '', $Ans01, '****'; # if 4 dots are needed, very top row
  $val01 -= 4;
  $flag01 = 1;
}

if (($val01 == 8) || ($val01 == 13) || ($val01 == 18)) {
  $Ans01 = join '', $Ans01, '***'; # if 3 dots are needed, very top row
    $val01 -= 3;
    $flag01 = 1;
}

if (($val01 == 7) || ($val01 == 12) || ($val01 == 17)){
  $Ans01 = join '', $Ans01, '**'; # if 2 dots are needed, very top row
    $val01 -= 2;
    $flag01 = 1;
}

if (($val01 == 6) || ($val01 == 11) || ($val01 == 16)) {
  $Ans01 = join '', $Ans01, '*'; # if 1 dot is needed, very top row
    $val01 -= 1;
    $flag01 = 1;
}

while($val01 > 4)
{
	$Ans01 = join '', $Ans01, '-';
	$val01 -= 5;
}

while($val01 > 0)
{
	$Ans01 = join '', $Ans01, '*';
	$val01 -= 1;
}

# Begin Second String

if ($val02 == 0) # 1/20 chance this happens
{
	if($val01 > 0) # Top Row is actually in use
		{$Ans02 = join '', $Ans02, '0';}
	else
		{$Ans02 = join '', $Ans02, 'none';}
}

if (($val02 == 9) || ($val02 == 14) || ($val02 == 19)) {
  $Ans02 = join '', $strAns, '****'; # if 4 dots are needed, very top row
  $val02 -= 4;
  $flag02 = 1;
}

if (($val02 == 8) || ($val02 == 13) || ($val02 == 18)) {
  $Ans02 = join '', $strAns, '***'; # if 3 dots are needed, very top row
    $val02 -= 3;
    $flag02 = 1;
}

if (($val02 == 7) || ($val02 == 12) || ($val02 == 17)){
  $Ans02 = join '', $strAns, '**'; # if 2 dots are needed, very top row
    $val02 -= 2;
    $flag02 = 1;
}

if (($val02 == 6) || ($val02 == 11) || ($val02 == 16)) {
  $Ans02 = join '', $strAns, '*'; # if 1 dot is needed, very top row
    $val02 -= 1;
    $flag02 = 1;
}

while($val02 > 4)
{
	$Ans02 = join '', $Ans02, '-';
	$val02 -= 5;
}

while($val02 > 0)
{
	$Ans02 = join '', $Ans02, '*';
	$val02 -= 1;
}

# Begin Final String, ALWAYS in use

if ($val03 == 0)
{
	$Ans03 = join '', $Ans03, '0'; # 1/20 chance this happens
}

if (($val03 == 9) || ($val03 == 14) || ($val03 == 19)) {
  $Ans03 = join '', $strAns, '****'; # if 4 dots are needed, very top row
  $val03 -= 4;
  $flag03 = 1;
}

if (($val03 == 8) || ($val03 == 13) || ($val03 == 18)) {
  $Ans03 = join '', $strAns, '***'; # if 3 dots are needed, very top row
    $val03 -= 3;
    $flag03 = 1;
}

if (($val03 == 7) || ($val03 == 12) || ($val03 == 17)){
  $Ans03 = join '', $strAns, '**'; # if 2 dots are needed, very top row
    $val03 -= 2;
    $flag03 = 1;
}

if (($val03 == 6) || ($val03 == 11) || ($val03 == 16)) {
  $Ans03 = join '', $strAns, '*'; # if 1 dot is needed, very top row
    $val03 -= 1;
    $flag03 = 1;
}

while($val03 > 4)
{
	$Ans03 = join '', $Ans03, '-';
	$val03 -= 5;
}

while($val03 > 0)
{
	$Ans03 = join '', $Ans03, '*';
	$val03 -= 1;
}

#The value of each answer field is ascending, with the bottom
# field being the 1s power, the middle field being the 20s power, and so forth.
#(Note: The 1s value is an asterisk)
#
###########################
#  Main text

Context()->texStrings;
BEGIN_TEXT
$PAR
Write $ShownValue as a Mayan numeral. If an answer blank is not needed,
enter ‘none’. Use the following key to input your answer:
\{
DataTable(
  [
    [['Mayan Value', headerrow => 1],'Keyboard Input'],
    [image("mayan1_01a.png",width=>50,height=>20, extra_html_tags=>'alt="Mayan Numeral 1."'),'*'],
    [image("mayan5_01a.png",width=>30,height=>20, extra_html_tags=>'alt="Mayan Numeral 5."'),'-'],
	[image("mayan0_01a.png",width=>30,height=>20, extra_html_tags=>'alt="Mayan Numeral 0."'),'0']
  ],
  caption => ' ',
);
\}
$BCENTER
 $BR
$BR
\{ ans_rule(20) \}
$BR
$BR
\{ ans_rule(20) \}
$BR
$BR
\{ ans_rule(20) \}
$BR
$BR
$ECENTER

END_TEXT
Context()->normalStrings;
#\{ helpLink("numbers") \} Use this in texStrings to allows students to see formulas

############################
#  Answer evaluation

$showPartialCorrectAnswers = 1;

#ANS( Compute($Ans01)->cmp());

ANS(Compute($Ans01)->cmp(checker => sub{
	my ($correct, $student, $ansHash) = @_;

	@resultA = split('', $student, length($student));
	@resultB = split('', $correct, length($correct));
    $check = length($student) - 1;

    $student =~ s/ //g; # Removes spaces from student answer!

    if($student eq $Ans03 && $Ans01 ne $Ans03) # Make sure student understands direction of Mayan numerals
	{
		Value->Error("Symbols must be placed in increasing order.");
	}

    if(length($student) != length($correct))
	{
		Value->Error(); # Check length of student input first
	}

	if($flag01 == 1) # First symbol is * , last symbol is -
    {
        if($resultA[$check] eq '*' && $resultA[0] eq '-') # User put '*' in last spot, and '-' in first spot
        {
            Value->Error("Symbols must be placed in increasing order.");
        }

    #}else{ # Value is 1-5, 10, or 15

     #   if($resultA[0] ne $resultA[$check] || $resultA[0] ne $resultB[0])
      #  {
       #     Value->Error("Double check your input; ' * ' isn't equal to ' - '.");
       # }

    }

	if($student ne $correct)
	{
		Value->Error(); # If all other checks fail, directly check strings
	}

	return 1;

}));

#ANS( Compute($Ans02)->cmp());

ANS(Compute($Ans02)->cmp(checker => sub{
	my ($correct, $student, $ansHash) = @_;

	@resultA = split('', $student, length($student));
	@resultB = split('', $correct, length($correct));
    $check = length($student) - 1;

    if(length($student) != length($correct))
	{
		Value->Error(); # Check length of student input first
	}

	if($flag02 == 1) # First symbol is *, last symbol is -
    {
        if($resultA[$check] eq '*' && $resultA[0] eq '-') # User put '*' in last spot, and '-' in first spot
        {
            Value->Error("Symbols must be placed in increasing order..");
        }

    #}else{ # Value is 1-5, 10, or 15

     #   if($resultA[0] ne $resultA[$check] || $resultA[0] ne $resultB[0])
      #  {
       #     Value->Error("Double check your input; ' * ' isn't equal to ' - '.");
       # }

    }

	if($student ne $correct)
	{
		Value->Error(); # If all other checks fail, directly check strings
	}

	return 1;

}));

#ANS( Compute($Ans03)->cmp());

ANS(Compute($Ans03)->cmp(checker => sub{
	my ($correct, $student, $ansHash) = @_;

	@resultA = split('', $student, length($student));
	@resultB = split('', $correct, length($correct));
    $check = length($student) - 1;

    if($student eq $Ans01 && $Ans01 ne $Ans03) # Make sure student understands direction of Mayan numerals
	{
		Value->Error("Symbols must be placed in increasing order...");
	}

    if(length($student) != length($correct))
	{
		Value->Error(); # Check length of student input first
	}

	if($flag03 == 1) # First symbol is *, last symbol is -
    {
        if($resultA[$check] eq '*' && $resultA[0] eq '-') # User put '*' in last spot, and '-' in first spot
        {
            Value->Error("Symbols must be placed in increasing order...");
        }

    #}else{ # Value is 1-5, 10, or 15

     #   if($resultA[0] ne $resultA[$check] || $resultA[0] ne $resultB[0])
      #  {
        #    Value->Error("Double check your input; ' * ' isn't equal to ' - '.");
       # }

    }

	if($student ne $correct)
	{
		Value->Error(); # If all other checks fail, directly check strings
	}

	return 1;

}));

############################
#  Solution

Context()->texStrings;
#BEGIN_SOLUTION

#First Num: $Ans01 Second Num: $Ans02  Third Num: $Ans03
#END_SOLUTION
Context()->normalStrings;

ENDDOCUMENT();