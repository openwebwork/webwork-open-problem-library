# DESCRIPTION
# WeBWorK problem written by Carl Yao
# Portland Community College
#
# ENDDESCRIPTION

## DBsubject('')
## DBchapter('')
## DBsection('')
## KEYWORDS('')
## DBCCSS('')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Carl Yao')
## Institution('PCC')

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "extraAnswerEvaluators.pl",
  "PGgraphmacros.pl",
  "MathObjects.pl",
  "PGchoicemacros.pl",
  "contextLimitedRadical.pl",
  "PCCmacros.pl",
  "unionTables.pl",
  "niceTables.pl",
  "AnswerFormatHelp.pl",
  "PGML.pl",
  "contextFraction.pl",
  "PGcourse.pl"
);
sub PF {PGML::Format(@_)};

TEXT(beginproblem());
$refreshCachedImages=1;

#Input is a prime. Output is the next prime number.
sub nextPrime {
   my $p = shift;
   while (1) {
      $p++;
      if ($p%2==0) {next;}
      $isPrime = 1;
      for (my $i=3; $i<=sqrt($p); $i=$i+2) {
         if ($p%$i==0) {
            $isPrime=0;
            last;
         }
      }
      if ($isPrime==1) {return $p;}
   }
}
   
# Input is a number n. Output is ($out, $in) 
# in the simplified form of $out*sqrt($in).
sub radSimplify {
   my $n = shift;
   my $out = 1;
   my $in = $n;
   my $prime = 2;
   my $lastPrime = -1;
   while (1) {
      while ($n%$prime==0) {
         if ($prime == $lastPrime) {
            $out *= $prime;
            $lastPrime = -1;
            $in = $in/$prime**2;
         } else {
            $lastPrime = $prime;
         }
         $n=$n/$prime;
      }
      if ($n==1) {return ($out, $in);}
      $prime = &nextPrime($prime);
   }
}

#Input is $outT*sqrt($inT) / $outB*sqrt($inB)
#output is rationalized $num*sqrt($in1)/$den
sub rationalize {
  my ($outT, $inT, $outB, $inB) = @_;
  my ($out1, $in1) = &radSimplify($inT*$inB);
  Context("Fraction");
  my ($num,$den) = Fraction($outT*$out1,$outB*$inB)->reduce->value;
  Context("LimitedRadical");
  if ($den==1) {
    if ($num==1) {
      return ($in1==1) ? Formula("1") : Formula("sqrt($in1)");
    } elsif ($num==-1) {
      return ($in1==1) ? Formula("-1") : Formula("-sqrt($in1)");
    } else {
      return ($in1==1) ? Formula("$num") : Formula("$num*sqrt($in1)");
    }
  } else {
    if ($num==1) {
      return ($in1==1) ? Formula("1/$den") : Formula("sqrt($in1)/$den");
    } elsif ($num==-1) {
      return ($in1==1) ? Formula("-1/$den") : Formula("-sqrt($in1)/$den");
    } else {
      return ($in1==1) ? Formula("$num/$den") : Formula("$num*sqrt($in1)/$den");
    }
  }
}

Context("LimitedRadical");

  do {
    $baseOut = random(1,5,1)*random(-1,1,2);
    $baseIn = list_random(1,2,3,5);
    $heightOut = random(1,5,1)*random(-1,1,2);
    $heightIn = list_random(1,2,3,5);
    ($hypotenuseOut,$hypotenuseIn) = &radSimplify($baseOut**2*$baseIn+$heightOut**2*$heightIn);
  } until (!($baseIn==1 && $heightIn==1 && $hypotenuseIn==1)) && (($baseOut==1) || ($heightOut==1)) && ($hypotenuseIn<30) && !($baseOut>0 && $heightOut>0);

  if ($baseIn==1) {
    $base = $baseOut;
  } elsif (abs($baseOut)==1) {
    $base = ($baseOut>0) ? Formula("sqrt($baseIn)") : Formula("-sqrt($baseIn)");
  } else {
    $base = Formula("$baseOut*sqrt($baseIn)");
  }

  if ($heightIn==1) {
    $height = $heightOut;
  } elsif (abs($heightOut)==1) {
    $height = ($heightOut>0) ? Formula("sqrt($heightIn)") : Formula("-sqrt($heightIn)");
  } else {
    $height = Formula("$heightOut*sqrt($heightIn)");
  }

  if ($hypotenuseIn==1) {
    $hypotenuse = $hypotenuseOut;
  } elsif ($hypotenuseOut==1) {
    $hypotenuse = Formula("sqrt($hypotenuseIn)");
  } else {
    $hypotenuse = Formula("$hypotenuseOut*sqrt($hypotenuseIn)");
  }

  $sine = &rationalize($heightOut,$heightIn,$hypotenuseOut,$hypotenuseIn);
  $cosine = &rationalize($baseOut,$baseIn,$hypotenuseOut,$hypotenuseIn);
  $tangent = &rationalize($heightOut,$heightIn,$baseOut,$baseIn);
  $cosecant = &rationalize($hypotenuseOut,$hypotenuseIn,$heightOut,$heightIn);
  $secant = &rationalize($hypotenuseOut,$hypotenuseIn,$baseOut,$baseIn);
  $cotangent = &rationalize($baseOut,$baseIn,$heightOut,$heightIn);

  @ans = ($sine,$cosine,$tangent,$cosecant,$secant,$cotangent);


Context("Numeric");

$r = 5;
$Px = $r*$baseOut*sqrt($baseIn)/($hypotenuseOut*sqrt($hypotenuseIn));
$Py = $r*$heightOut*sqrt($heightIn)/($hypotenuseOut*sqrt($hypotenuseIn));

@graph = ();
$graph[0] = init_graph(-8,-8,8,8,'axes'=>[0,0],'grid'=>[1,1]);
$graph[0]->lb('reset');

$xfuncAlpha = sub { my $t = shift();
  return $r*cos($t); };
$yfuncAlpha = sub { my $t = shift();
  return $r*sin($t); };
$fnAlpha = new Fun( $xfuncAlpha, $yfuncAlpha, $graph[0] );
$fnAlpha->domain(0,2*pi);

$graph[0]->stamps(closed_circle( $Px, $Py, red ));
$graph[0]->moveTo(0,0);
$graph[0]->lineTo($Px,$Py,red,2);
$graph[0]->lineTo($Px,0,red,2);
$graph[0]->lineTo(0,0,red,2);

$xShift = ($Px>0) ? -0.4 : 0.4;
$yShift = ($Py>0) ? 0.4 : -0.4;
$graph[0]->moveTo($Px,$yShift);
$graph[0]->lineTo($Px+$xShift,$yShift,red,2);
$graph[0]->lineTo($Px+$xShift,0,red,2);

$LORHeight = ($Px>0) ? "left" : "right";
$TOBBase = ($Py>0) ? "top" : "bottom";
$LORHyp = ($Px>0) ? "right" : "left";
$TOBHyp = ($Py>0) ? "bottom" : "top";
$LORShift = ($Px>0) ? 0.2 : -0.2;
$graph[0]->lb(new Label($Px+$LORShift,$Py/2,"$height",'red',$LORHeight,'middle',large));
$graph[0]->lb(new Label($Px/2,0,"$base",'red','center',$TOBBase,large));
$graph[0]->lb(new Label($Px/2,$Py/2,"$hypotenuse",'red',$LORHyp,$TOBHyp,large));
$graph[0]->lb(new Label($Px,$Py,"P",'red',$LORHeight,$TOBHyp,large));


$alt[0] = "This is the graph of a circle with point P on the circle. A right triangle is formed at vertices (0,0), P($base,$height) and ($base,0). The base is marked as $base, height marked as $height and hypotenuse marked as $hypotenuse.";

$fig0 = image(insertGraph($graph[0]),'width'=>400,'height'=>400,'tex_size'=>700, extra_html_tags => "alt = '$alt[0]' title = '$alt[0]' ");



##############################################################

BEGIN_PGML

If an angle [`\theta`] corresponds to the end point [`P([$base],[$height])`] on a non-unit circle, find the following values. 

[@KeyboardInstructions(
"\n"
.'* Use [|sqrt()|]* for the square root symbol. For example: [`\sqrt{2}=`][|sqrt(2)|]*.'
."\n"
.'* Rationalize the denominator if needed.'
)@]**

[@DataTable(
  [
    [
     [PF('[`P([$base],[$height])`]'),
      rowcss  => 'border-bottom: 1px solid; ',
      cellcss => 'border-right: 0px solid; ',],
    ],
    [
     [PF('[`\sin(\theta)=`][_____]{$ans[0]}'),
        cellcss => 'border-right: 1px solid; '],
     [PF('[`\csc(\theta)=`][_____]{$ans[3]}')],
    ],
    [
     [PF('[`\cos(\theta)=`][_____]{$ans[1]}'),
        cellcss => 'border-right: 1px solid; '],
     [PF('[`\sec(\theta)=`][_____]{$ans[4]}')],
    ],
    [
     [PF('[`\tan(\theta)=`][_____]{$ans[2]}'),
        cellcss => 'border-right: 1px solid; '],
     [PF('[`\cot(\theta)=`][_____]{$ans[5]}')],
    ],
  ],
  align => 'c c',
  columnscss =>
    ['border-bottom: 1px solid;',
     'border-bottom: 1px solid;',],
);@]*



END_PGML

##############################################################

$showPartialCorrectAnswers = 1;


##############################################################

BEGIN_PGML_SOLUTION

Graph [`P([$base],[$height])`] on the non-unit circle, we have:

>>[@ $fig0 @]*<<

>> (To enlarge, click on graph, then press Ctrl+ or Command+) <<

The hypotenuse is calculated by [`\sqrt{([$base])^2+([$height])^2}=[$hypotenuse]`].

Next, we can write the angle's trigonometry values by definition:

    [``\begin{aligned}
  \sin(\theta) &= \frac{\text{opposite}}{\text{hypotenuse}} = \frac{[$height]}{[$hypotenuse]} = [$ans[0]] \\
  \cos(\theta) &= \frac{\text{adjacent}}{\text{hypotenuse}} = \frac{[$base]}{[$hypotenuse]} = [$ans[1]] \\
  \tan(\theta) &= \frac{\sin(\theta)}{\cos(\theta)} = \frac{[$ans[0]]}{[$ans[1]]} = [$ans[2]] \\
  \csc(\theta) &= \frac{1}{\sin(\theta)} = \frac{1}{[$ans[0]]} = [$ans[3]] \\
  \sec(\theta) &= \frac{1}{\cos(\theta)} = \frac{1}{[$ans[1]]} = [$ans[4]] \\
  \cot(\theta) &= \frac{\cos(\theta)}{\sin(\theta)} = \frac{[$ans[1]]}{[$ans[0]]} = [$ans[5]] \\
    \end{aligned}``]

END_PGML_SOLUTION

ENDDOCUMENT();
