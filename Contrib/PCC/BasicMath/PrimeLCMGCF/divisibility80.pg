# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Decide whether 2, 3, 5, 9, 10 go into a number.
# At least two of the above numbers will go into the number.
#
# Last edited: Carl Yao 10/2/13
#
# ENDDESCRIPTION

## DBsubject('Elementary School')
## DBchapter('')
## DBsection('')
## KEYWORDS('factor','divisibility')
## DBCCSS('4.OA')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Carl Yao')
## Institution('PCC')


##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGchoicemacros.pl",
  "PGML.pl",
  "PGcourse.pl"
);

##############################################

#This subroutine returns 1 if a number belongs to an array.
sub isInArray {
   my ($num,@array) = @_;
   foreach my $item (@array) {
      if ($item==$num) {return 1;}
   }
   return 0;
} 

#This subroutine takes a number as an argument. If the input is 324, the output is a string "3+2+4", and a number $sum=9.

sub breakDigits {
   my $num = shift;
   my @digits=();
   my $sum = 0;
   do {
      $sum += $num-10*int($num/10);
      push(@digits,$num-10*int($num/10));
      $num = int($num/10);
   } while ($num!=0);
   $returnString = "";
   do {
      $returnString .= (pop @digits).'+';
   } while ((scalar @digits)!=0);
   chop $returnString;
   
   return ($returnString,$sum);
}      

##############################################
TEXT(beginproblem());

Context("Numeric");

@factors = (2, 3, 5, 9, 10);
@given = ();

#Create the number. Make sure at least 2 factors go into the number.
do {
   $flag = 0;
   $num = random(100,900,100)+random(10,90,10)+random(1,9,1);
   foreach my $item (@factors) {
      if ($num%$item==0) {$flag++;}
   }
} until ($flag>=2);

@canGoInto = ();

$mc = new_checkbox_multiple_choice();

Context()->texStrings;
$i=0;
foreach my $item (@factors) {
   if ($num%$item==0) {
      $canGoInto[$i++]="does";
      $mc -> qa (
      "Mark all numbers which divide into $num.$BR",
      "\($item\)$BR",
      );
   } else {
      $canGoInto[$i++]="does not";
   }
}

$mc->makeLast(
   "\($factors[0]\)$BR",
   "\($factors[1]\)$BR",
   "\($factors[2]\)$BR",
   "\($factors[3]\)$BR",
   "\($factors[4]\)$BR"
);
Context()->normalStrings;
#$mc->qa("question","Yes"); $mc->makeLast("Yes","No","Maybe");

##############################################

BEGIN_TEXT

\{ $mc -> print_q() \}

$SPACE $SPACE $SPACE    \{ $mc -> print_a() \}

END_TEXT


##############################################
install_problem_grader(~~&std_problem_grader);

$showPartialCorrectAnswers = 0;

ANS( checkbox_cmp( $mc->correct_ans() ) );

($output,$sum) = breakDigits($num);


##############################################

BEGIN_PGML_SOLUTION

###Does [`2`] divide [`[$num]`]?  

[`2`] divides all even numbers, so [`2`] [@$canGoInto[0]@]* divide [`[$num]`].

###Does [`3`] divide [`[$num]`]?  

Add up all digits of [`[$num]`]: [`[$output]=[$sum]`]. Since [`3`] [@$canGoInto[1]@]* divide [`[$sum]`], [`3`] [@$canGoInto[1]@]* divide [`[$num]`].

###Does [`5`] divide [`[$num]`]?  

[`5`] only divides numbers which end with [`5`] or [`0`], so [`5`] [@$canGoInto[2]@]* divide [`[$num]`].

###Does [`9`] divide [`[$num]`]?  

Add up all digits of [`[$num]`]: [`[$output]=[$sum]`]. Since [`9`] [@$canGoInto[3]@]* divide [`[$sum]`], [`9`] [@$canGoInto[3]@]* divide [`[$num]`].

###Does [`10`] divide [`[$num]`]?  

[`10`] only divides numbers which end with [`0`], so [`10`] [@$canGoInto[4]@]* divide [`[$num]`].

####Solution:  

So the correct answers are [@$mc->correct_ans()@].

END_PGML_SOLUTION

ENDDOCUMENT();
