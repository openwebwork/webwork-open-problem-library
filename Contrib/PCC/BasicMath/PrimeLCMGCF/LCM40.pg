# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Find the LCM of three numbers. Numbers are in the range [2,15]
#
# Last edited: Yao 9/26/13
#
# ENDDESCRIPTION

## DBsubject('Elementary School')
## DBchapter('')
## DBsection('')
## KEYWORDS('least common multiple')
## DBCCSS('6.NS.4')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Carl Yao')
## Institution('PCC')


##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl",

);

##############################################

#Input is a prime. Output is the next prime number.
sub nextPrime {
   my $p = shift;
   while (1) {
      $p++;
      if ($p%2==0) {next;}
      $isPrime = 1;
      for (my $i=3; $i<=sqrt($p); $i=$i+2) {
         if ($p%$i==0) {
            $isPrime=0;
            last;
         }
      }
      if ($isPrime==1) {return $p;}
   }
}

# Input is a number and reference to an array saving the number's 
# prime factorization.

sub primeFactor {
   my ($n,$ar_primeFactor) = @_;
   my $prime=2;
   while (1) {
      while ($n%$prime==0) {
         ${$ar_primeFactor}[scalar @{$ar_primeFactor}] = $prime;
         $n=$n/$prime;
      }
      if ($n==1) {return;}
      $prime = &nextPrime($prime);
   }
}

# Input is a reference to an array of numbers.
# Output is all numbers connected by ' \cdot '.

sub cdotNumbers {
   my $ra_factors = shift;
   $line1Output = "";
   foreach $item ( @$ra_factors ) {$line1Output .= "$item".' \cdot ';}
   $line1Output =~ s/ \cdot $//;
   return $line1Output;
}

#This subroutine returns 1 if the number is prime.
sub isPrime {
   my $num = shift;
   if ($num%2==0) {return 0;}
   for (my $i=3; $i<=int(sqrt($num)); $i=$i+2) {
      if ($num%$i==0) {return 0;}
   }
   return 1;
}

################################################

Context("Numeric");

do {
   $num1 = random(2,15,1);
   do {$num2 = random(2,15,1);} until ($num2!=$num1);
   do {$num3 = random(2,15,1);} until (($num3!=num1)&&($num3!=$num2));
} until ( (!(isPrime($num1))) && (!(isPrime($num2))) & (!(isPrime($num3))) );

$ans = lcm(lcm($num1,$num2),$num3);

@num1Factor = ();
primeFactor($num1,~~@num1Factor);
$num1Output = cdotNumbers(~~@num1Factor);

@num2Factor = ();
primeFactor($num2,~~@num2Factor);
$num2Output = cdotNumbers(~~@num2Factor);

@num3Factor = ();
primeFactor($num3,~~@num3Factor);
$num3Output = cdotNumbers(~~@num3Factor);

@ansFactor = ();
primeFactor($ans,~~@ansFactor);
$ansFactorList = cdotNumbers(~~@ansFactor);

##############################################

TEXT(beginproblem());

BEGIN_PGML

Find the Least Common Multiple (LCM) of [`[$num1]`], [`[$num2]`] and [`[$num3]`].

Their LCM is [_______]{$ans}.

END_PGML

#############################################

$biggest = max($num1,$num2,$num3);

$output="";
$i = 1;
do {
   $temp = $i*$biggest;
   $output .= "$temp,";
   $i++;
} until ( ($temp%$num1==0) && ($temp%$num2==0) && ($temp%$num3==0) );
$output .= "...";

###############################################

BEGIN_PGML_SOLUTION

####Method 1  

To find the Least Common Multiple of some numbers, one method is to prime factor each number:

    [`` [$num1] = [$num1Output] ``]

    [`` [$num2] = [$num2Output] ``]

    [`` [$num3] = [$num3Output] ``]

The Least Common Multiple of these numbers will "cover" all numbers' prime factors:

    LCM = [`` [$ansFactorList] = [$ans] ``]

So the Least Common Multiple of [`[$num1]`], [`[$num2]`] and [`[$num3]`] is [`[$ans]`].

####Method 2  

Another method is to find multiples of the biggest number until all numbers divide into the multiple. This method only works when all numbers are small.

Let's list the first few multiples of the biggest number:

    [`` [$output] ``]

Notice that all numbers divide [`[$ans]`] in the list, so the LCM of these numbers is [`[$ans]`].

END_PGML_SOLUTION

ENDDOCUMENT();


