# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Decide whether 9 goes into a certain number.
#
# Last edited: Carl Yao 9/25/13
#
# ENDDESCRIPTION

## DBsubject('Elementary School')
## DBchapter('')
## DBsection('')
## KEYWORDS('factor','divisibility')
## DBCCSS('4.OA')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Carl Yao')
## Institution('PCC')


##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGchoicemacros.pl",
  "PGML.pl",
  "PGcourse.pl",
);

##############################################

#This subroutine returns 1 if a number belongs to an array.
sub isInArray {
   my ($num,@array) = @_;
   foreach my $item (@array) {
      if ($item==$num) {return 1;}
   }
   return 0;
}

#This subroutine takes a number as an argument. If the input is 324, the output is a string "3+2+4", and a number $sum=9.

sub breakDigits {
   my $num = shift;
   my @digits=();
   my $sum = 0;
   do {
      $sum += $num-10*int($num/10);
      push(@digits,$num-10*int($num/10));
      $num = int($num/10);
   } while ($num!=0);
   $returnString = "";
   do {
      $returnString .= (pop @digits).'+';
   } while ((scalar @digits)!=0);
   chop $returnString;
   
   return ($returnString,$sum);
}      


##############################################
TEXT(beginproblem());

Context("Numeric");

@given = ();
$factor = 9;
$numCorrect = 2;
$lowerBound = 10;
$upperBound = 999;

#Push numbers which $factor goes into into the array.
for my $i (0..$numCorrect-1) {
   do {$num=random($lowerBound,$upperBound,1);} until ($num%$factor==0);
   if (!(isInArray($num,@given))) {
      push(@given,$num);
   } else {
      redo;
   }
}

#Push numbers which $factor does not go into into the array.
for my $i (0..$numCorrect-1) {
   do {$num=random($lowerBound,$upperBound,1);} until ($num%$factor!=0);
   if (!(isInArray($num,@given))) {
      push(@given,$num);
   } else {
      redo;
   }
}

Context()->texStrings;
$mc = new_checkbox_multiple_choice();

$mc -> qa (
"Mark all numbers which $factor divides into.$BR",
"\($given[0]\) $BR",
"\($given[1]\) $BR",
);

$mc -> extra( 
"\($given[2]\) $BR",
"\($given[3]\) $BR",
);

Context()->normalStrings;


##############################################

BEGIN_TEXT

\{ $mc -> print_q() \}

$SPACE $SPACE $SPACE    \{ $mc -> print_a() \}

END_TEXT




##############################################
install_problem_grader(~~&std_problem_grader);

$showPartialCorrectAnswers = 0;

ANS( checkbox_cmp( $mc->correct_ans() ) );

@sum = ();
@output = ();

for my $i (0..$numCorrect*2-1) {
   ($output[$i],$sum[$i]) = breakDigits($given[$i]);
}

##############################################

BEGIN_PGML_SOLUTION

Let's see how to tell whether [`9`] divides into a number with an example. Suppose the number is [` 7236 `]. We add up all its digits, and have [` 7+2+3+6 = 18 `]. Since [`9`] divides into [`18`], [`9`] must divide [` 7236 `] too.

Note that this rule only works for [`3`] and [`9`]. It doesn't work for the other numbers!

For [`[@ $given[0] @]`], the sum of its digits is [`[@ $output[0] @] = [@ $sum[0] @]`]. Since [`9`] divides [`[@ $sum[0] @]`], [`9`] must divide [`[@ $given[0] @]`].

For [`[@ $given[1] @]`], the sum of its digits is [`[@ $output[1] @] = [@ $sum[1] @]`]. Since [`9`] divides [`[@ $sum[1] @]`], [`9`] must divide [`[@ $given[1] @]`].

For [`[@ $given[2] @]`], the sum of its digits is [`[@ $output[2] @] = [@ $sum[2] @]`]. Since [`9`] does not divide [`[@ $sum[2] @]`], [`9`] does not divide [`[@ $given[2] @]`].

For [`[@ $given[3] @]`], the sum of its digits is [`[@ $output[3] @] = [@ $sum[3] @]`]. Since [`9`] does not divide [`[@ $sum[3] @]`], [`9`] does not divide [`[@ $given[3] @]`].

So the correct answers are [@$mc->correct_ans()@].

END_PGML_SOLUTION



ENDDOCUMENT();
