# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Find the perimeter and area of a shape.
#
# Last edited by Carl Yao on 3.27/2017
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Problem Solving with Equations')
## KEYWORDS('area','perimeter','rectangle')
## DBCCSS('4.MD.3')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "parserNumberWithUnits.pl",
  "PCCmacros.pl",
  "PGcourse.pl",
);

##############################################

Context("Numeric");

$base = random(13,18,1);
$height = random(5,12,1);
$baseCut = random(2,$base-2,1);
$heightCut = random(2,$height-2,1);

$xmin = 0;         #The viewing window
$xmax = $base*240/210;
$ymin = 0;
$ymax = (210*$height/$base+30)*$height/(210*$height/$base);

$unit = "m";
$baseU = NumberWithUnits("$base $unit");
$heightU = NumberWithUnits("$height $unit");
$baseCutU = NumberWithUnits("$baseCut $unit");
$heightCutU = NumberWithUnits("$heightCut $unit");

$missingBase = $base-$baseCut;
$missingHeight = $height-$heightCut;
$missingBaseU = NumberWithUnits("$missingBase $unit");
$missingHeightU = NumberWithUnits("$missingHeight $unit");

$perimeter = 2*($base+$height);
$area = $base*$height-$baseCut*$heightCut;
$perimeterU = NumberWithUnits("$perimeter $unit");
$areaU = NumberWithUnits("$area $unit^2");

@x = (($xmax-$base)/2,($xmax+$base)/2);
@y = (($ymax-$height)/2,($ymax+$height)/2);

#the value of $corner (0,1,2,3) decides which piece is cut off,
#bottom left, top left, top right, bottom right
$corner = list_random(0,3,1,2);
@xCut = ( 
   [$x[0], $x[0],$x[0]+$baseCut,$x[0]+$baseCut],
   [$x[0],$x[0],$x[0]+$baseCut,$x[0]+$baseCut],
   [$x[1]-$baseCut,$x[1]-$baseCut,$x[1],$x[1]],
   [$x[1]-$baseCut,$x[1]-$baseCut,$x[1],$x[1]]
);

@yCut = (
   [$y[0],$y[0]+$heightCut,$y[0]+$heightCut,$y[0]],
   [$y[1]-$heightCut,$y[1],$y[1],$y[1]-$heightCut],
   [$y[1]-$heightCut,$y[1],$y[1],$y[1]-$heightCut],
   [$y[0],$y[0]+$heightCut,$y[0]+$heightCut,$y[0]]
);

$labelAdjust = 0.5;
$cornersize = $xmax*10/240;

@pictures = ();
@color = (
   [white,darkblue,darkblue,white],
   [white,white,darkblue,darkblue],
   [darkblue,white,white,darkblue],
   [darkblue,darkblue,white,white],
);

for my $i (0..2) {
   $picture[$i] = init_graph($xmin,$ymin,$xmax,$ymax,
      pixels=>[240,240*$ymax/$xmax]);

   if ( ($corner==0) || ($corner==3) ) {
      $picture[$i]->lb( new Label(($x[0]+$x[1])/2, $y[1],"$baseU",'black','center','bottom','large'));
      $picture[$i]->lb( new Label(($xCut[$corner][1]+$xCut[$corner][2])/2, $yCut[$corner][1],"$baseCutU",'black','center','bottom','large'));
   } else {
      $picture[$i]->lb( new Label(($x[0]+$x[1])/2, $y[0],"$baseU",'black','center','top','large'));
      $picture[$i]->lb( new Label(($xCut[$corner][1]+$xCut[$corner][2])/2, $yCut[$corner][0],"$baseCutU",'black','center','top','large'));
   }

   if ( ($corner==0) || ($corner==1) ) {
      $picture[$i]->lb( new Label($x[1],($y[0]+$y[1])/2,"$heightU",'black','center','top','large','vertical'));
      $picture[$i]->lb( new Label($xCut[$corner][2],($yCut[$corner][0]+$yCut[$corner][1])/2,"$heightCutU",'black','center','top','large','vertical'));
   } else {
      $picture[$i]->lb( new Label($x[0],($y[0]+$y[1])/2,"$heightU",'black','center','bottom','large','vertical'));
      $picture[$i]->lb( new Label($xCut[$corner][0],($yCut[$corner][0]+$yCut[$corner][1])/2,"$heightCutU",'black','center','bottom','large','vertical'));
   }

   $picture[$i]->new_color("lightblue", 200,200,255); # RGB
   $picture[$i]->new_color("darkblue",  100,100,255); 

   $picture[$i]->moveTo($x[0],$y[0]);
   $picture[$i]->lineTo($x[1],$y[0], darkblue,3);
   $picture[$i]->lineTo($x[1],$y[1], darkblue,3); 
   $picture[$i]->lineTo($x[0],$y[1], darkblue,3);
   $picture[$i]->lineTo($x[0],$y[0], darkblue,3);

   $picture[$i]->moveTo($xCut[$corner][($corner+3)%4],$yCut[$corner][($corner+3)%4]);
   $picture[$i]->lineTo($xCut[$corner][($corner+4)%4],$yCut[$corner][($corner+4)%4], $color[$corner][($corner+3)%4],3);
   $picture[$i]->lineTo($xCut[$corner][($corner+5)%4],$yCut[$corner][($corner+5)%4], $color[$corner][($corner+4)%4],3);
   $picture[$i]->lineTo($xCut[$corner][($corner+6)%4],$yCut[$corner][($corner+6)%4], $color[$corner][($corner+5)%4],3);
   $picture[$i]->lineTo($xCut[$corner][($corner+7)%4],$yCut[$corner][($corner+7)%4], $color[$corner][($corner+6)%4],3);


   if ($corner!=0) {
      $picture[$i]->moveTo($x[0]+$cornersize,$y[0]);
      $picture[$i]->lineTo($x[0]+$cornersize,$y[0]+$cornersize, darkblue,1);
      $picture[$i]->lineTo($x[0],$y[0]+$cornersize, darkblue,1);
   }
   if ($corner!=1) {
      $picture[$i]->moveTo($x[0]+$cornersize,$y[1]);
      $picture[$i]->lineTo($x[0]+$cornersize,$y[1]-$cornersize, darkblue,1);
      $picture[$i]->lineTo($x[0],$y[1]-$cornersize, darkblue,1);
   }
   if ($corner!=2) {
      $picture[$i]->moveTo($x[1]-$cornersize,$y[1]);
      $picture[$i]->lineTo($x[1]-$cornersize,$y[1]-$cornersize, darkblue,1);
      $picture[$i]->lineTo($x[1],$y[1]-$cornersize, darkblue,1);
   }
   if ($corner!=3) {
      $picture[$i]->moveTo($x[1]-$cornersize,$y[0]);
      $picture[$i]->lineTo($x[1]-$cornersize,$y[0]+$cornersize, darkblue,1);
      $picture[$i]->lineTo($x[1],$y[0]+$cornersize, darkblue,1);
   }
}

@missingHeightLabelY = (
   ($yCut[$corner][1]+$y[1])/2,
   ($yCut[$corner][3]+$y[0])/2,
   ($yCut[$corner][3]+$y[0])/2,
   ($yCut[$corner][1]+$y[1])/2
);
$picture[1]->lb( new Label($xCut[$corner][$corner],$missingHeightLabelY[$corner],"$height-$heightCut = $missingHeightU",'red','center','middle','large'));

@missingBaseLabelX = (
   ($xCut[$corner][2]+$x[1])/2,
   ($xCut[$corner][3]+$x[1])/2,
   ($xCut[$corner][0]+$x[0])/2,
   ($xCut[$corner][1]+$x[0])/2
);
@missingBaseLabelY = (
   $y[0]-$labelAdjust,
   $y[1]+$labelAdjust,
   $y[1]+$labelAdjust,
   $y[0]-$labelAdjust
);
$picture[1]->lb( new Label($missingBaseLabelX[$corner],$missingBaseLabelY[$corner],"$base-$baseCut = $missingBaseU",'red','center','middle','large'));

@missingPosition = ("bottom left", "top left", "top right", "bottom right");
@height1Direction = ("down", "up", "up", "down");
@base1Direction = ("left", "left", "right", "right");

@alt = ();
$alt[0] = "The picture shows a rectangle with a rectangular piece missing at its $missingPosition[$corner] corner. Starting the $missingPosition[($corner+2)%4] corner, a vertical side with the length $heightU goes $height1Direction[$corner]; it turns $base1Direction[$corner] for an unknown length, and then goes $height1Direction[($corner+2)%4] for $heightCutU; it turns $base1Direction[$corner] for $baseCutU, and then goes $height1Direction[($corner+2)%4] for an unknown length; finally, it turns $base1Direction[($corner+2)%4] for $baseU and reaches the starting point at the $missingPosition[($corner+2)%4] corner.";

$alt[1] = "The picture shows a rectangle with a rectangular piece missing at its $missingPosition[$corner] corner. Starting the $missingPosition[($corner+2)%4] corner, a vertical side with the length $heightU goes $height1Direction[$corner]; it turns $base1Direction[$corner] for a distance marked as $base-$baseCut = $missingBaseU, and then goes $height1Direction[($corner+2)%4] for $heightCutU; it turns $base1Direction[$corner] for $baseCutU, and then goes $height1Direction[($corner+2)%4] for a distance marked as $height-$heightCut = $missingHeightU; finally, it turns $base1Direction[($corner+2)%4] for $baseU and reaches the starting point at the $missingPosition[($corner+2)%4] corner.";

$alt[2] = $alt[0]." At the $missingPosition[$corner] corner, two dashed lines were drawn to make up the missing piece to clearly show the big rectangle with a smaller  rectangle missing.";

@connectLineX = (
   [$x[0]+$baseCut,$x[0],$x[0]],
   [$x[0]+$baseCut,$x[0],$x[0]],
   [$x[1]-$baseCut,$x[1],$x[1]],
   [$x[1]-$baseCut,$x[1],$x[1]]
);

@connectLineY = (
   [$y[0],$y[0],$y[0]+$heightCut],
   [$y[1],$y[1],$y[1]-$heightCut],
   [$y[1],$y[1],$y[1]-$heightCut],
   [$y[0],$y[0],$y[0]+$heightCut]
);

$picture[2]->moveTo($connectLineX[$corner][0],$connectLineY[$corner][0]);
$picture[2]->lineTo($connectLineX[$corner][1],$connectLineY[$corner][1], red,1,'dashed');
$picture[2]->lineTo($connectLineX[$corner][2],$connectLineY[$corner][2], red,1,'dashed');


##############################################

TEXT(beginproblem());

BEGIN_PGML

Find the perimeter and area of this shape.

>>[@ image(insertGraph( $picture[0]  ),  width=>240, extra_html_tags => "alt = '$alt[0]' title = '$alt[0]' ") @]*<<

    Its perimeter is [_]{$perimeterU}{5} and its area is [_]{$areaU}{5}. 

[@KeyboardInstructions(q!(Use [|m|]* for meters and [|m^2|]* for square meters.)!)@]**

END_PGML

##############################################



BEGIN_PGML_SOLUTION

To find this shape's perimeter, we need to find the lengths of missing sides in the following graph:

>>[@ image(insertGraph( $picture[1]  ),  width=>240, extra_html_tags => "alt = '$alt[1]' title = '$alt[1]' ") @]*<<

To find the shape's perimeter, we start from any corner of the shape, travel around it, and calculate the sum of all sides in the travel. If we start from the [$missingPosition[($corner+2)%4]] corner and travel [$height1Direction[$corner]], we have:

    [``
\begin{aligned}
   \text{perimeter} &= [$height]+[$missingBase]+[$heightCut]+[$baseCut]+[$missingHeight]+[$base] \\
   &= [$perimeter]
\end{aligned}
    ``]

The shape's perimeter is [`[$perimeterU]`].

>>[@ image(insertGraph( $picture[2]  ),  width=>240, extra_html_tags => "alt = '$alt[2]' title = '$alt[2]' ") @]*<<

To find the shape's area, we will find the big rectangle's area, and then subtract the missing piece:

    [``
\begin{aligned}
   \text{area} &= \text{big rectangle's area} - \text{small rectangle's area} \\
   &= [$base]\cdot[$height] - [$baseCut]\cdot[$heightCut] \\
   &= [$base*$height] - [$baseCut*$heightCut] \\
   &= [$area]
\end{aligned}
    ``]

The shape's area is [`[$areaU]`].

END_PGML_SOLUTION

ENDDOCUMENT();
