# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Right triangle trig application problem with tangent.
#
# Last edited by Carl Yao on 3/17/2017
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Problem Solving with Equations')
## KEYWORDS('trigonometry','sine','cosine','tangent','right triangle')
## DBCCSS('4.MD.3')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PCCgraphMacros.pl",
  "contextFraction.pl",
  "parserNumberWithUnits.pl",
  "PGcourse.pl",
);

##############################################

Context("Numeric");
Context()->flags->set(
  tolerance => 0.005,
  tolType => "absolute",
);

do {
   $base = random(7,12,0.1);
   $alpha2 = random(20,40,1);
   $alpha2Radian = $alpha2*pi/180;
   $height2 = $base/tan($alpha2Radian);
   $baseU = NumberWithUnits("$base km");
   $height2U = NumberWithUnits("$height2 km");

   $alpha1 = random($alpha2+5,$alpha2+20,1);
   $alpha1Radian = $alpha1*pi/180;
   $height1 = $base/tan($alpha1Radian);
   $height1U = NumberWithUnits("$height1 km");

   $ans = $height2-$height1;
   $ansU = NumberWithUnits("$ans km");
} until ($ans>5);

$longer = max($base,$height2);

$xmin = 0;         #The viewing window
$xmax = 1.5*$longer;
$ymin = 0;
$ymax = 1.5*$longer;

#$corner's value decides the location of the right angle. 
#(0,1,2,3) implies (bottom left,top left,top right,bottom right). 
$corner = 3;

   @x = (($xmax-$height2)/2,($xmax+$height2)/2);
   @y = (($ymax-$base)/2,($ymax+$base)/2);

$picture = init_graph($xmin,$ymin,$xmax,$ymax,
      pixels=>[400,400]);

$labelAdjust = $longer/15;

@labelAx = ($x[0],$x[1],$x[1],$x[0]);
@labelAy = ($y[1],$y[1],$y[0],$y[0]);
@alpha1CurveStart = (3*pi/2,pi,pi/2,0);
@alpha1CurveEnd = (3*pi/2+$alpha1Radian,pi+$alpha1Radian,pi/2+$alpha1Radian,$alpha1Radian);
@alpha2CurveStart = (3*pi/2,pi,pi/2,0);
@alpha2CurveEnd = (3*pi/2+$alpha2Radian,pi+$alpha2Radian,pi/2+$alpha2Radian,$alpha2Radian);


@labelCx = ($x[0],$x[0],$x[1],$x[1]);
@labelCy = ($y[0],$y[1],$y[1],$y[0]);

$xfuncAlpha2 = sub { my $t = shift();
    return $x[0]+$labelAdjust*cos($t); };
$yfuncAlpha2 = sub { my $t = shift();
    return $y[0]+$labelAdjust*sin($t); };
$fnAlpha2 = new Fun( $xfuncAlpha2, $yfuncAlpha2, $picture );
$fnAlpha2->domain(0,$alpha2Radian);
$theta = $alpha2Radian/2;
$picture->lb( new Label($x[0]+2*$labelAdjust*cos($theta), $y[0]+2*$labelAdjust*sin($theta),$alpha2,'black','center','middle'));

$xfuncAlpha3 = sub { my $t = shift();
    return $x[1]+$labelAdjust*cos($t); };
$yfuncAlpha3 = sub { my $t = shift();
    return $y[1]+$labelAdjust*sin($t); };
$fnAlpha3 = new Fun( $xfuncAlpha3, $yfuncAlpha3, $picture );
$fnAlpha3->domain(pi,pi+$alpha2Radian);
$theta = pi+$alpha2Radian/2;
$picture->lb( new Label($x[1]+2*$labelAdjust*cos($theta), $y[1]+2*$labelAdjust*sin($theta),$alpha2,'black','center','middle'));

$xD = $x[0]+$ans;
$yD = $y[0];

$xfuncAlpha1 = sub { my $t = shift();
    return $xD+$labelAdjust*cos($t); };
$yfuncAlpha1 = sub { my $t = shift();
    return $yD+$labelAdjust*sin($t); };
$fnAlpha1 = new Fun( $xfuncAlpha1, $yfuncAlpha1, $picture );
$fnAlpha1->domain(0,$alpha1Radian);
$theta = $alpha1Radian/2;
$picture->lb( new Label($xD+2*$labelAdjust*cos($theta), $yD+2*$labelAdjust*sin($theta),$alpha1,'black','center','middle'));

$xfuncAlpha4 = sub { my $t = shift();
    return $x[1]+3*$labelAdjust*cos($t); };
$yfuncAlpha4 = sub { my $t = shift();
    return $y[1]+3*$labelAdjust*sin($t); };
$fnAlpha4 = new Fun( $xfuncAlpha4, $yfuncAlpha4, $picture );
$fnAlpha4->domain(pi,pi+$alpha1Radian);
$theta = pi+$alpha1Radian/2;
$picture->lb( new Label($x[1]+4*$labelAdjust*cos($theta), $y[1]+4*$labelAdjust*sin($theta),$alpha1,'black','center','middle'));


@labelBaseX=(($x[0]+$x[1])/2,$x[0]-$labelAdjust,($x[0]+$x[1])/2,$x[1]+$labelAdjust);
@labelBaseY=($y[0]-$labelAdjust,($y[0]+$y[1])/2,$y[1]+$labelAdjust,($y[0]+$y[1])/2);
@labelHeightX=($x[0]-$labelAdjust,($x[0]+$x[1])/2,$x[1]+$labelAdjust,($x[0]+$x[1])/2);
@labelHeightY=(($y[0]+$y[1])/2,$y[1]+$labelAdjust,($y[0]+$y[1])/2,$y[0]-$labelAdjust);
@labelHypotenuseX=(($x[0]+$x[1])/2+$labelAdjust,($x[0]+$x[1])/2+$labelAdjust,($x[0]+$x[1])/2-$labelAdjust,($x[0]+$x[1])/2-$labelAdjust);
@labelHypotenuseY=(($y[0]+$y[1])/2+$labelAdjust,($y[0]+$y[1])/2-$labelAdjust,($y[0]+$y[1])/2-$labelAdjust,($y[0]+$y[1])/2+$labelAdjust);


#airplane
$picture->stamps( closed_circle($x[1],$y[1],'red') );
$picture->lb( new Label($x[1]+0.7*$labelAdjust,$y[1],'A','red','center','middle'));
$picture->lb( new Label($x[1],$y[1]+$labelAdjust,'airplane','red','center','middle'));

#corner of triangle
$picture->stamps( closed_circle($x[1],$y[0],'red') );
$picture->lb( new Label($x[1]+0.5*$labelAdjust,$y[0]-0.5*$labelAdjust,'B','red','center','middle'));


#City 2
$picture->stamps( closed_circle($x[0],$y[0],'red') );
$picture->lb( new Label($x[0],$y[0]+0.8*$labelAdjust,'C','red','center','middle'));
$picture->lb( new Label($x[0]-$labelAdjust/7,$y[0]-0.6*$labelAdjust,'City 2','red','right','middle'));

#City 1
$picture->stamps( closed_circle($x[0]+$ans,$y[0],'red') );
$picture->lb( new Label($x[0]+$ans-0.6*$labelAdjust,$y[0]+0.6*$labelAdjust,'D','red','center','middle'));
$picture->lb( new Label($x[0]+$ans,$y[0]-0.6*$labelAdjust,'City 1','red','left','middle'));

#x
$picture->lb( new Label(($x[0]+$xD)/2,$y[0]-0.6*$labelAdjust,'x','black','center','middle'));

#height
$picture->lb( new Label($x[1]+1.5*$labelAdjust,($y[0]+$y[1])/2,$baseU,'black','center','middle'));

#horizontal line
$picture->moveTo($x[1],$y[1]);
$picture->lineTo($x[0],$y[1], blue,1,'dashed');


$picture->new_color("lightblue", 200,200,255); # RGB
$picture->new_color("darkblue",  100,100,255); 

@ax=(0,1,1,0);
@ay=(1,1,0,0);
@bx=(1,0,0,1);
@by=(0,0,1,1);
@cx=(0,0,1,1);
@cy=(0,1,1,0);


$picture->moveTo($x[$ax[$corner]],$y[$ay[$corner]]);
$picture->lineTo($x[$bx[$corner]],$y[$by[$corner]], darkblue,3);
$picture->lineTo($x[$cx[$corner]],$y[$cy[$corner]], darkblue,3);
$picture->lineTo($x[$ax[$corner]],$y[$ay[$corner]], darkblue,3);
$picture->moveTo($x[$bx[$corner]],$y[$by[$corner]]);
$picture->lineTo($xD,$yD, darkblue,3);


$cornersize = $labelAdjust/2;

@rightSymbol1x=($x[0],$x[0]+$cornersize,$x[1]-$cornersize,$x[1]);
@rightSymbol1y=($y[0]+$cornersize,$y[1],$y[1],$y[0]+$cornersize);
@rightSymbol2x=($x[0]+$cornersize,$x[0]+$cornersize,$x[1]-$cornersize,$x[1]-$cornersize);
@rightSymbol2y=($y[0]+$cornersize,$y[1]-$cornersize,$y[1]-$cornersize,$y[0]+$cornersize);
@rightSymbol3x=($x[0]+$cornersize,$x[0],$x[1],$x[1]-$cornersize);
@rightSymbol3y=($y[0],$y[1]-$cornersize,$y[1]-$cornersize,$y[0]);

$picture->moveTo($rightSymbol1x[$corner],$rightSymbol1y[$corner]);
$picture->lineTo($rightSymbol2x[$corner],$rightSymbol2y[$corner], darkblue,3);
$picture->lineTo($rightSymbol3x[$corner],$rightSymbol3y[$corner], darkblue,3);


@positions=('bottom left','top left','top right','bottom right');
if ($corner==0) {
   $aPosition = $positions[1];
   $bPosition = $positions[3];
   $cPosition = $positions[0];
} elsif ($corner==1) {
   $aPosition = $positions[2];
   $bPosition = $positions[0];
   $cPosition = $positions[1];
} elsif ($corner==2) {
   $aPosition = $positions[3];
   $bPosition = $positions[1];
   $cPosition = $positions[2];
} else {
   $aPosition = $positions[0];
   $bPosition = $positions[2];
   $cPosition = $positions[3];
}

$text = "The graph shows an airplane (represented by point A) looking over City 1 (point D) and City 2 (point C). A vertical line is drawn from point A down to the ground, crossing the ground at point B. Angle ACB is $alpha2 degrees, while Angle ADB is $alpha1 degrees. A horizontal dashed line is draw from the airplane toward those two cities. The horizontal line forms a $alpha2 degree angle with segment AC, and forms a $alpha1 degree angle with segment AD. Segment AB is labeled as $baseU. The segment between those two cities (segment CD) is labeled as x (unknown).";

##############################################

TEXT(beginproblem());

BEGIN_PGML

An airplane is flying at the height of [`[$baseU]`]. The airplane can see both City 1 and City 2 straight ahead of it. The angle of depression to City 1 is [`[$alpha1]`] degrees, and the angle of depression to City 2 is [`[$alpha2]`] degrees. Find the distance between those two cities.

Round your answer to two decimal places if needed.

The distance between those two cities is [___________]{$ansU}.

END_PGML

##############################################

BEGIN_PGML_SOLUTION

Assume the distance between those two cities is [`x`] km. The following graph can represent this situation:

[@EnlargeImageStatementPGML()@]**

>>[@image(insertGraph($picture), width=>xScreen(), height=>yScreen(), tex_size=>TeXscalar(), extra_html_tags=>"alt = '$text' title = '$text'") @]*<<

Note that the horizontal line must be drawn, because the angle of depression is defined as the degree between a direction and the horizontal line.

We need to find BC's length, and then BD's length. Then, we can do [`x=BC-BD`] to find the value of [`x`].

To find BC's length, look at the bigger triangle [`\Delta ABC`]. With [`\angle ACB=[$alpha2]`], and its opposite leg [`AB=[$base]`], we can find [`BC`]'s length:

    [``
\begin{aligned}
   \tan{[$alpha2]} &= \frac{AB}{BC} \\
   \tan{[$alpha2]} &= \frac{[$base]}{BC} \\
   \mathbf{BC \cdot} \tan{[$alpha2]} &= \mathbf{BC \cdot} \frac{[$base]}{BC}  \\
   BC\cdot \tan{[$alpha2]} &= [$base] \\
   \frac{BC\cdot \tan{[$alpha2]}}{\tan{[$alpha2]}} &= \frac{[$base]}{\tan{[$alpha2]}} \\
   BC &\approx [$height2]
\end{aligned}
    ``]

Next, to find BD's length, look at the smaller triangle [`\Delta ADB`]. With [`\angle ADB=[$alpha1]`], and its opposite leg [`AB=[$base]`], we can find [`BD`]'s length:

    [``
\begin{aligned}
   \tan{[$alpha1]} &= \frac{AB}{BD} \\
   \tan{[$alpha1]} &= \frac{[$base]}{BD} \\
   \mathbf{BD \cdot} \tan{[$alpha1]} &= \mathbf{BD \cdot} \frac{[$base]}{BD}  \\
   BD\cdot \tan{[$alpha1]} &= [$base] \\
   \frac{BD\cdot \tan{[$alpha1]}}{\tan{[$alpha1]}} &= \frac{[$base]}{\tan{[$alpha1]}} \\
   BC &\approx [$height1]
\end{aligned}
    ``]

Now we can calculate the distance between those two cities:

    [``
\begin{aligned}
   x &= BC-BD \\
   x &= [$height2]-[$height1] \\
   x &\approx [$ans]
\end{aligned}
    ``]

The distance between those two cities is approximately [`[$ansU]`].

END_PGML_SOLUTION

ENDDOCUMENT();
