# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Give a function's graph, find values of f(a); find f(   )=b.
#
# Last update: Carl Yao 04/14/2014
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Function')
## DBsection()
## KEYWORDS('function','graph')
## DBCCSS('8.F','F-IF')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PCCgraphMacros.pl",
  "parserAssignment.pl",
  "answerHints.pl",
  "PCCmacros.pl",
  "contextFiniteSolutionSets.pl",
  "PGcourse.pl",
);


##############################################
TEXT(beginproblem());

Context("Numeric");
$var = "x";

$refreshCachedImages=1;
Context()->flags->set(reduceConstants=>0, reduceConstantFunctions=>0, formatStudentAnswer=>parsed);

parser::Assignment->Allow;

Context()->operators->redefine(',',using=>',',from=>'Numeric');
    Context()->operators->redefine('or',using=>',',from=>'Numeric');
    Context()->operators->set(
      ','=>{string=>' or ',TeX=>'\hbox{ or }'},
      'or'=>{string=>' or ',TeX=>'\hbox{ or }'}
    );
    Context()->lists->set(List => {separator => " or "});

# add solution strings to context- this means that if
# students enter these (and they are not correct), then 
# WW will not give a Context warning
Context()->strings->add("no real solutions"=>{},
  "no real solution"=>{alias=>'no real solutions'}, 
  "none"=>{alias=>'no real solutions'}, 
  );


#Decide the number of points in the graph.
$numPoints = 3;

#Create ordered pairs with no duplicate values in x, no duplicate values in y.

#Loop to ensure good relative separation between any two points
do {

@px=();
@py=();
@xArray = (-5..5);
@yArray = (-5..5);
for my $i (0..$numPoints-1) {
   $px[$i] = splice @xArray,random(0,$#xArray,1),1;
   $py[$i] = splice @yArray,random(0,$#yArray,1),1;
}

#Intentionally create a duplicate y value in two points.
$dup0 = random(0,$numPoints-1);
do {$dup1=random(0,$numPoints-1);} until ($dup0!=$dup1);
$py[$dup0]=$py[$dup1];

#End loop
} until ((abs($px[0]-$px[1]) + abs($py[0]-$py[1]) > 3.5) and (abs($px[0]-$px[2]) + abs($py[0]-$py[2]) > 3.5) and (abs($px[2]-$px[1]) + abs($py[2]-$py[1]) > 3.5));

#Decide the correct answers

@ansXDups=();
$j = 0;

$ansYDup = $py[$dup0];

for my $i (0..$numPoints-1) {
   if ($py[$i]!=$py[$dup0]) {
      $ansXNoDup = $px[$i];
      $ansYNoDup = $py[$i];
   } else {
      $ansXDups[$j++] = $px[$i];
   }
}
$ansXDupList = List($ansXDups[0],$ansXDups[1]);
$ansXDup0 = $ansXDups[0];
$ansXDup1 = $ansXDups[1];

($min[0], $max[0], $min[1], $max[1], $ticknum[0], $ticknum[1], $xticks_ref, $yticks_ref, $marksep[0], $marksep[1]) = NiceGraphParameters([-5,5],[-5,5],centerOrigin=>1);

@xticks = @$xticks_ref;
@yticks = @$yticks_ref;

$ALTPoints="";
for my $i (0..0) {
  $gr[$i] = init_graph($min[0],$min[1],$max[0],$max[1],
   axes=>[0,0],
   grid=>[$ticknum[0],$ticknum[1]],
   size=>[xPixels(),yPixels()]
  );
  $gr[$i]->lb('reset');
  for my $j (@xticks) {
    if (abs($j)<10**(-10)) {next;}
    $gr[$i]->lb( new Label($j, 0, $j,'black','center','top','large'));
  }

  for my $j (@yticks) {
    if (abs($j)<10**(-10)) {next;}
    $gr[$i]->lb( new Label(0, $j, $j,'black','right','middle','large'));
  }

  for my $j (0..$numPoints-1) {
    $gr[$i]->stamps( closed_circle($px[$j],$py[$j],'blue') );
    $gr[$i]->lb( new Label($px[$j],$py[$j]-$sign*$marksep[1]/8, "($px[$j],$py[$j])", 'blue','center','top','large'));
    $ALTPoints .= "($px[$j],$py[$j]), ";
  }

  $gr[$i]->lb(new Label($max[0],0,'x','black','right','bottom','large'));
  $gr[$i]->lb(new Label(0,$max[1],'y','black','left','top','large'));

}

$ALTPoints =~ s/, $//;
$ALTPoints =~ s|(.+), |$1 and |;
$ALT0 = "This is the graph of a function consisting of the following points: $ALTPoints.";
$ALTPoints =~ s/ and /, /;



Context("Numeric");
Context()->flags->set(showMixedNumbers=>0);

parser::Assignment->Allow;
Context()->operators->redefine('or',using=>',',from=>'Numeric');
Context()->operators->set(","=>{string=>"or",TeX=>"or ",perl=>","});

($ansXDups0, $ansXDups1) = ($ansXDups[0], $ansXDups[1]);

Context("FiniteSolutionSets");
$ansXDupList = Formula("{$ansXDups0,$ansXDups1}");

##############################################
Context("LimitedNumeric");
BEGIN_PGML

Function [`f`] is graphed.

[@EnlargeImageStatementPGML()@]**

>>[@image(insertGraph($gr[0]), width=>xScreen(), height=>yScreen(), tex_size=>TeXscalar(), extra_html_tags=>"alt = '$ALT0' title = '$ALT0'") @]*<<

a. Find [``f([$ansXNoDup])``].  
   [_]{Compute($ansYNoDup)}{10}

a. Solve [``f(x)=[$ansYDup]``].  
   [_]{$ansXDupList}{20}

END_PGML

$showPartialCorrectAnswers = 1;


##############################################



BEGIN_PGML_SOLUTION

The function [`f(x)`] has [`3`] ordered pairs:

    [`` ([$ansXNoDup],[$ansYNoDup]), ([$ansXDup0],[$ansYDup]), ([$ansXDup1],[$ansYDup]) ``]

In function notation, we have:

    [``\begin{aligned}
f([$ansXNoDup])
&=[$ansYNoDup]\\
f([$ansXDup0])
&=[$ansYDup]\\
f([$ansXDup1])&=[$ansYDup]
\end{aligned}``]

So the answers are 

    a.  [``f([$ansXNoDup])=[$ansYNoDup]``]

    b. [``[$ansXDupList]``]

END_PGML_SOLUTION


ENDDOCUMENT();
