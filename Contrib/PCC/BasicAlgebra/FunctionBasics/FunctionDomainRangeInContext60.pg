# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Use quadratic equation to model the height of flying objects.
# Find domain and range in context.
#
# Last edit by: Carl Yao 07/08/14
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Coordinates and Graphs')
## DBsection('Graphs of Equations')
## KEYWORDS('quadratic','function','parabola','application','domain','range')
## DBCCSS('F.IF.7.a','F.IF.4','A-CED.1')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "PGgraphmacros.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PCCgraphMacros.pl",
  "parserNumberWithUnits.pl",
  "PGcourse.pl"
);

##############################################

TEXT(beginproblem());
$refreshCachedImages=1;
Context("Numeric");
Context()->variables->add(t => 'Real');
Context()->flags->set(showExtraParens=>0, reduceConstants=>0);
Context()->noreduce("(-x)-y","(-x)+y");


$a = -4.9;
$xInt1 = random(-5,-1,1);
$xInt2 = random(20,30,0.1);
$b = -$a*$xInt1-$a*$xInt2;
$c = $a*$xInt1*$xInt2;

$func = Compute("$a*t**2+$b*t+$c")->reduce;
$funcX = Compute("$a*x**2+$b*x+$c")->reduce;

#for alternative display and title purposes

   $xVertex = Real(-$b/(2*$a));
   $yVertex = Real($func->eval(t=>$xVertex));
   $vertex=Point($xVertex,$yVertex);
   $yIntercept=Point(0,$c);

   @temp = $vertex->value;
   $extraPointX = $temp[0]+1;
   $extraPointY = Real($func->eval(t=>$extraPointX));
   $extraPoint = Point($extraPointX,$extraPointY);

$tMax = $xVertex;
$hMax = $yVertex;
$tBack = $xInt2;
$t1 = random(1,int($tBack-1),1);
$h1 = $func->eval(t=>$t1);
do {$t2 = random(1,int($tMax-1),1);} until ($t2!=$t1);
$t3 = 2*$tMax-$t2;
$h2 = $func->eval(t=>$t2);

$tMaxU = NumberWithUnits("$tMax s");
$hMaxU = NumberWithUnits("$hMax m");
$tBackU = NumberWithUnits("$tBack s");
$cU = NumberWithUnits("$c m");
$bU = NumberWithUnits("$b m/s");
$t1U = NumberWithUnits("$t1 s");
$h1U = NumberWithUnits("$h1 m");
$t2U = NumberWithUnits("$t2 s");
$t3U = NumberWithUnits("$t3 s");
$h2U = NumberWithUnits("$h2 m");

Context("Interval");
$domain = Compute("[0,$xInt2]");
$range = Compute("[0,$hMax]");
Context("Numeric");
Context()->variables->add(t => 'Real');
Context()->flags->set(showExtraParens=>0, reduceConstants=>0);
Context()->noreduce("(-x)-y","(-x)+y");

# to show alternative text for graphs
@alt=();

   $alt="This picture shows the graph of a parabola. Its vertex is at $vertex, and it passes through the points (0,$c) and ($xInt2,0)";

($min[0], $max[0], $min[1], $max[1], $ticknum[0], $ticknum[1], $xticks_ref, $yticks_ref, $marksep[0], $marksep[1]) = NiceGraphParameters([$xVertex,$xInt1-5,$xInt2],[$yVertex,0,0]);

@xticks = @$xticks_ref;
@yticks = @$yticks_ref;

for my $i (0,0) {
  $gr = init_graph($min[0],$min[1],$max[0],$max[1],
   axes=>[0,0],
   grid=>[$ticknum[0],$ticknum[1]],
   size=>[xPixels(),yPixels()]
  );
  $gr->lb('reset');
  for my $j (@xticks) {
    if (abs($j)<10**(-10)) {next;}
    $gr->lb( new Label($j, -$marksep[1]/8, $j,'black','center','top'));
    $gr->lb( new Label($max[0]-$marksep[0]/2, -$marksep[1]/8, t,'black','center','top'));
    $gr->lb( new Label($marksep[0]/8, $max[1]-$marksep[1]/2, h,'black','left','middle'));

  }

  for my $j (@yticks) {
    if (Real($j) == 0) {next;}
    $gr->lb( new Label($marksep[0]/8, $j, $j,'black','left','middle'));
  }

add_functions($gr, "$funcX for x in <$min[0],$max[0]> using color:red and weight:1");
}

##############################################

BEGIN_PGML

From a clifftop over the ocean [`[$cU]`] above sea level, an object was shot straight up into the air with an initial vertical speed of [`[$bU]`]. On its way down it missed the cliff and fell into the ocean. Its height (above sea level) as time passes can be modeled by the quadratic function [`f`], where [`f(t)=[$func]`]. Here [`t`] represents the number of seconds since the object's release, and [`f(t)`] represents the object's height (above sea level) in meters.

Find the function's domain and range in this context.

    The function's domain in this context is [__________]{$domain}.

    The function's range in this context is [__________]{$range}.

END_PGML

##############################################

$func1 = $func;
$func1 =~ s/t/($xVertex)/g;
$func1 =~ s/~~*//g;

$func4 = $func;
$func4 =~ s/t/($t1)/g;
$func4 =~ s/~~*//g;

$s1 = -$h2;
$s2 = -$b;
$s4 = 2*$a;

$s03 = $b**2-4*$a*$c;
$s05 = Real(sqrt($s03));

$s6 = $c-$h2;
$func5 = Compute("$a*t**2+$b*t+$s6")->reduce;
$s7 = $b**2-4*$a*$s6;
$s8 = Real(sqrt($s7));

$gr->stamps( closed_circle($xVertex,$yVertex,'blue') );
$gr->lb( new Label($xVertex,$yVertex,"($xVertex,$yVertex)", 'blue','left','bottom'));

$gr->stamps( closed_circle(0,$c,'blue') );
$gr->lb( new Label(0,$c,"(0,$c)", 'blue','right','bottom'));

#$gr->moveTo( $xVertex,$min[1] );
#$gr->lineTo( $xVertex,$max[1],'red',1,'dashed');

$gr->stamps( closed_circle($tBack,0,'blue') );
$gr->lb( new Label($tBack,0,"($tBack,0)", 'blue','left','bottom'));

#$gr->stamps( closed_circle($t1,$h1,'blue') );
#$gr->lb( new Label($t1,$h1,"($t1,$h1)", 'blue','right','top'));

#$gr->moveTo( $min[0], $h2 );
#$gr->lineTo( $max[0],$h2,'red',1,'dashed');

#$gr->stamps( closed_circle($t2,$h2,'blue') );
#$gr->lb( new Label($t2,$h2,"($t2,$h2)", 'blue','right','top'));

#$gr->stamps( closed_circle($t3,$h2,'blue') );
#$gr->lb( new Label($t3,$h2,"($t3,$h2)", 'blue','left','top'));

BEGIN_PGML_SOLUTION

##Find the function's domain

The function [`f`] given by the rule [`f(t)=[$func]`] is quadratic. Identify that [`a=[$a], b=[$b], c=[$c]`].

In this context, the value of [`t`] makes sense since the object was thrown into the air, until the object landed. 

The parabola's [`y`]-intercept represents the moment when the object was thrown into the air. At that moment, [`t=0`].

The parabola's right-side [`x`]-intercept represents the moment the object landed on the ground. We will solve the equation [`f(t)=0`] to find its [`x`]-intercepts. We have:

    [`
\begin{aligned}
   f(t) &= [$func] \\
   0    &= [$func] \\
   t &= \frac{-b \pm \sqrt{b^{2}-4ac}}{2a} \\
   t &= \frac{-([$b]) \pm \sqrt{([$b])^{2}-4([$a])([$c])}}{2([$a])} \\
   t &= \frac{[$s2] \pm \sqrt{[$s03]}}{[$s4]} \\
   t &= \frac{[$s2] \pm [$s05]}{[$s4]} \\
   t &= \frac{[$s2] + [$s05]}{[$s4]} & \text{or} && t &= \frac{[$s2] - [$s05]}{[$s4]} \\
   t &= [$xInt1] & \text{or} && t &= [$xInt2]
\end{aligned}
`]

This parabola has two [`x`]-intercepts: [`([$xInt1],0)`] and [`([$xInt2],0)`]. The point [`([$xInt1],0)`] represents an imaginary moment before the object was released, as if it had shot up from the ocean to the clifftop before its journey upward. The point [`([$xInt2],0)`] implies the object fell into the ocean after [`[$tBackU]`].

Thus, the function's domain is [`[$domain]`].

##Find the function's range

The function's value represents the object's height. Its minimum value is [`0`], when the object landed on the ground. We need to find the object's maximum height.

Since [`a<0`], this parabola opens down. Its vertex represents the maximum height the object can go and when it got there.

To find the vertex, we first find the parabola's axis of symmetry by the axis formula:

    [`
\begin{aligned}
  t &= -\frac{b}{2a} \\
  t &= -\frac{[$b]}{2([$a])} \\
  t &=  [$xVertex]
\end{aligned}
`]

Next, we substitute [`t= [$xVertex]`] into [`f`]'s formula, and we have:

    [`
\begin{aligned}
  f(t) &=  [$func]  \\
  f([$xVertex]) &=  [$func1]  \\
  f([$xVertex]) &=  [$yVertex] 
\end{aligned}
`]

The parabola's vertex is at [`[$vertex]`]. This implies that [`[$tMaxU]`] after the release, the object reached its maximum height of [`[$hMaxU]`].

Thus, the function's range is [`[$range]`].

The function's graph helps understanding.

>>[@ image( insertGraph($gr), width=>xScreen(), height=>yScreen(), tex_size=>TeXscalar(), extra_html_tags=>"alt = '$alt' title = '$alt'"  )@]*<<

END_PGML_SOLUTION

ENDDOCUMENT();


