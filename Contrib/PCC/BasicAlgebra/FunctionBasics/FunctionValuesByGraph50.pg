# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Give a function's graph, find values of f(a).
# Find the function's domain and range.
# Graph is a piecewise function with a break.
#
# Last update: Carl Yao 06/10/2014
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Function')
## DBsection()
## KEYWORDS('function','graph','piecewise')
## DBCCSS('8.F','F-IF')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "PGgraphmacros.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PCCgraphMacros.pl",
  "PGcourse.pl"
);

##############################################
TEXT(beginproblem());

Context("Numeric");
Context()->noreduce('(-x)-y','(-x)+y');
$refreshCachedImages=1;

$x0 = non_zero_random(-3,3,1);
$y0 = non_zero_random(-3,3,1);

$x1 = $x0;
$y1 = -$y0;

$m0 = $y0>0 ? -1 : 1;
$func0 = Compute("$m0*(x-$x0)+$y0");
$x2 = random($x0-3,$x0-1,1);
$y2 = $func0->eval(x=>$x2);

$m1 = $m0;
$func1 = Compute("$m1*(x-$x1)+$y1");
$x3 = random($x1+1,$x1+3,1);
$y3 = $func1->eval(x=>$x3);


$border = max(abs($x2),abs(y2),abs($x3),abs($y3))+2;

($min[0], $max[0], $min[1], $max[1], $ticknum[0], $ticknum[1], $xticks_ref, $yticks_ref, $marksep[0], $marksep[1]) = NiceGraphParameters([-$border,$border],[-$border,$border],centerOrigin=>1);

@xticks = @$xticks_ref;
@yticks = @$yticks_ref;

Context("Point");

#Decide whether (x0,y0) or (x1,y1) is included or excluded.
if (random(-1,1,2)>0) {
   $x0Included = 0; $x0Text = "open";
   $x1Included = 1; $x1Text = "closed";
   $ans = $y1;
   $openPoint = Point("($x0,$y0)");
   $closedPoint = Point("($x1,$y1)");
} else {
   $x0Included = 1; $x0Text = "closed";
   $x1Included = 0; $x1Text = "open";
   $ans = $y0;
   $openPoint = Point("($x1,$y1)");
   $closedPoint = Point("($x0,$y0)");
}

Context("Interval");

#Decide the domain's endpoints are open/closed
if (random(-1,1,2)>0) {
   $x2Included = 0; $x2Text = "open";
   $x3Included = 1; $x3Text = "closed";
   $domain = Compute("($x2,$x3]");
} else {
   $x2Included = 1; $x2Text = "closed";
   $x3Included = 0; $x3Text = "open";
   $domain = Compute("[$x2,$x3)");
}

#Decide the range of the left piece
if ($x2Included==1) {
   if ($x0Included==1) {
      $range0 = $m0>0 ? Compute("[$y2,$y0]") : Compute("[$y0,$y2]");
   } else {
      $range0 = $m0>0 ? Compute("[$y2,$y0)") : Compute("($y0,$y2]");
   }
} else {
   if ($x0Included==1) {
      $range0 = $m0>0 ? Compute("($y2,$y0]") : Compute("[$y0,$y2)");
   } else {
      $range0 = $m0>0 ? Compute("($y2,$y0)") : Compute("($y0,$y2)");
   }
}

#Decide the range of the right piece
if ($x3Included==1) {
   if ($x1Included==1) {
      $range1 = $m1>0 ? Compute("[$y1,$y3]") : Compute("[$y3,$y1]");
   } else {
      $range1 = $m1>0 ? Compute("($y1,$y3]") : Compute("[$y3,$y1)");
   }
} else {
   if ($x1Included==1) {
      $range1 = $m1>0 ? Compute("[$y1,$y3)") : Compute("($y3,$y1]");
   } else {
      $range1 = $m1>0 ? Compute("($y1,$y3)") : Compute("($y3,$y1)");
   }
}

$range = Union($range0,$range1);

Context("Numeric");

for my $i (0..0) {
  $gr[$i] = init_graph($min[0],$min[1],$max[0],$max[1],
   axes=>[0,0],
   grid=>[$ticknum[0],$ticknum[1]],
   size=>[xPixels(),yPixels()]
  );
  $gr[$i]->lb('reset');
  for my $j (@xticks) {
    if (abs($j)<10**(-10)) {next;}
    $gr[$i]->lb( new Label($j, -$marksep[1]/8, $j,'black','center','top'));
  }

  for my $j (@yticks) {
    if (abs($j)<10**(-10)) {next;}
    $gr[$i]->lb( new Label($marksep[0]/8, $j, $j,'black','left','middle'));
  }

   add_functions($gr[$i], "$func0 for x in [$x2,$x0] using color:blue and weight:2");
   add_functions($gr[$i], "$func1 for x in [$x1,$x3] using color:blue and weight:2");

   if ($x0Included==1) {
      $gr[$i]->stamps( closed_circle($x0,$y0,'blue') );
   } else {
      $gr[$i]->stamps( open_circle($x0,$y0) );
   }

   if ($x1Included==1) {
      $gr[$i]->stamps( closed_circle($x1,$y1,'blue') );
   } else {
      $gr[$i]->stamps( open_circle($x1,$y1) );
   }

   if ($x2Included==1) {
      $gr[$i]->stamps( closed_circle($x2,$y2,'blue') );
   } else {
      $gr[$i]->stamps( open_circle($x2,$y2) );
   }

   if ($x3Included==1) {
      $gr[$i]->stamps( closed_circle($x3,$y3,'blue') );
   } else {
      $gr[$i]->stamps( open_circle($x3,$y3) );
   }

}

$ALT0 = "This is the graph of a piecewise function with two line segments. The first segment starts from the $x2Text point ($x2,$y2), and ends at the $x0Text point ($x0,$y0). The second segment starts from the $x1Text point ($x1,$y1), and ends at the $x3Text point ($x3,$y3).";


##############################################
Context("LimitedNumeric");
BEGIN_PGML

The graph of function [`f(x)`] is shown below.

[@EnlargeImageStatementPGML()@]**


>>[@image(insertGraph($gr[0]), width=>xScreen(), height=>yScreen(), tex_size=>TeXscalar(), extra_html_tags=>"alt = '$ALT0' title = '$ALT0'") @]*<<

Based on the given graph of [`f(x)`], fill in the blanks.

    [`f([$x0])`]=[_________]{$ans}

The function's domain, in interval notation, is [_____________]{$domain}.

The function's range, in interval notation, is [_____________]{$range}. Use the upper case letter U to represent the "union" symbol, if needed.

END_PGML
##############################################

BEGIN_PGML_SOLUTION

By the graph, [`f([$x0])=[$ans]`], which is shown by the closed point [`[$closedPoint] `]. Notice that the point [`[$openPoint]`] is open, implying this point is not on the function's graph. 

By the graph, the function's minimum [`x`]-value is [`[$x2]`], and the maximum [`x`]-value is [`[$x3]`]. The function's domain is [`[$domain]`]. Although the point [`[$openPoint]`] is open, the value [`[$x0]`] is included in the domain by the closed point [`[$closedPoint]`].

By the graph, the function's [`y`]-value has two separate segments. The left segment's [`y`]-value covers [`[$range0]`], and the right segment's [`y`]-value covers [`[$range]`]. The function's range is the union of these two intervals: [`[$range]`].

END_PGML_SOLUTION


ENDDOCUMENT();
