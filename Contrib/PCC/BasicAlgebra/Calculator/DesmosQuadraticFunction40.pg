# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Use graphing technology to solve quadratic function problems.
#
# Last edited: Yao 11/11/2017
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Algebraic Expressions')
## KEYWORDS('calculator','graphing','intersection')
## DBCCSS('')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Carl Yao')
## Institution('PCC')


##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "parserNumberWithUnits.pl",
  "PGcourse.pl",
);

##############################################

TEXT(beginproblem());

Context("Point");
Context()->variables->add(t => 'Real');
Context()->flags->set(showExtraParens=>0, reduceConstants=>0);
Context()->noreduce("(-x)-y","(-x)+y");
Context()->flags->set(
  tolerance => 0.005,
  tolType => "absolute",
);

$a = -4.9;
$b = abs($a)*2*random(10,30,1);
$c = random(100,200,10);

$func = Compute("$a*t**2+$b*t+$c")->reduce;
$funcX = Compute("$a*x**2+$b*x+$c")->reduce;

#for alternative display and title purposes

   $xVertex = Real(-$b/(2*$a));
   $yVertex = Real($func->eval(t=>$xVertex));
   $vertex=Point($xVertex,$yVertex);
   $yIntercept=Point(0,$c);

   @temp = $vertex->value;
   $extraPointX = $temp[0]+1;
   $extraPointY = Real($func->eval(t=>$extraPointX));
   $extraPoint = Point($extraPointX,$extraPointY);

$xInt1 = Real((-$b+sqrt($b**2-4*$a*$c))/(2*$a));
$xInt2 = Real((-$b-sqrt($b**2-4*$a*$c))/(2*$a));
$xInt1Show = sprintf("%.2f",$xInt1);
$xInt2Show = sprintf("%.2f",$xInt2);
$xIntercept1 = Point("($xInt1Show,0)");
$xIntercept2 = Point("($xInt2Show,0)");

$spaceLR = 15;
$spaceUD = 50;
$top = (int(($yVertex+$spaceUD)/100)+1)*100;
$bottom = int(-$spaceUD);
$left = int(($xInt1-$spaceLR)/10)*10;
$right = (int(($xInt2+$spaceLR)/10))*10;

$tMax = $xVertex;
$hMax = $yVertex;
$tBack = $xInt2;
$tBackShow = sprintf("%.2f",$xInt2);
$t1 = random(1,int($tBack-1),1);
$h1 = $func->eval(t=>$t1);
do {$t2 = random(1,int($tMax-1),1);} until ($t2!=$t1);
$t3 = 2*$tMax-$t2;
$h2 = $func->eval(t=>$t2);
$leftIntersect = Point("($t2,$h2)");
$rightIntersect = Point("($t3,$h2)");

$tMaxU = NumberWithUnits("$tMax s");
$hMaxU = NumberWithUnits("$hMax m");
$tBackU = NumberWithUnits("$tBack s");
$tBackUShow = NumberWithUnits("$tBackShow s");
$cU = NumberWithUnits("$c m");
$bU = NumberWithUnits("$b m/s");
$t1U = NumberWithUnits("$t1 s");
$h1U = NumberWithUnits("$h1 m");
$t2U = NumberWithUnits("$t2 s");
$t3U = NumberWithUnits("$t3 s");
$h2U = NumberWithUnits("$h2 m");

##############################################

BEGIN_PGML

Use graphing technology to answer the following questions. Round to two decimal places when needed.

From a clifftop over the ocean [`[$cU]`] above sea level, an object was shot straight up into the air with an initial vertical speed of [`[$bU]`]. On its way down it missed the cliff and fell into the ocean. Its height (above sea level) as time passes can be modeled by the quadratic function [`f`], where [`f(t)=[$func]`]. Here [`t`] represents the number of seconds since the object's release, and [`f(t)`] represents the object's height (above sea level) in meters.

    1) After [____________]{$tMaxU}, this object reached its maximum height of [___________]{$hMaxU}.

    2) This object flew for [____________]{$tBackU} before it landed in the ocean.

    3) This object was [____________]{$h1U} above sea level [`[$t1U]`] after its release.

    4) This object was [`[$h2U]`] above sea level twice: once [____________]{$t2U} after its release, and again later [____________]{$t3U} after its release.

(Use *m* for meters, and *s* for seconds.)

END_PGML

##############################################

BEGIN_PGML_SOLUTION

We will use desmos.com to answer the question.

Step 1: Go to desmos.com, click on Start Graphing.

Step 2: In the first textbox, enter [` f(x)=[$func] `].

###Question 1

We need to find the function's maximum value (the upside-down parabola's vertex).

Step 3: Zoom out on the window until you can see the parabola's vertex. Alternatively, click on the Graph Settings icon (looking like a tool) and define the ranges of [`x`]-axis and [`y`]-axis. Only use the following recommended settings if you are stuck: xmin=[`[$left]`], xmax=[`[$right]`], ymin=[`[$bottom]`], ymax=[`[$top]`].

Step 4: Click on the vertex, and desmos shows [`[$vertex]`]. This implies: After [`[$tMaxU]`], this object reached its maximum height of [`[$hMaxU]`].

###Question 2

We need to find the x-intercept on the right side. (The left side x-intercept is a negative number, which makes no sense in this situation.)

Step 3: Zoom out on the window until you can see the parabola's [`x`]-intercept on the right side. Alternatively, click on the Graph Settings icon (looking like a tool) and define the ranges of [`x`]-axis and [`y`]-axis.

Step 4: Click on the [`x`]-intercept on the right side, and desmos shows [`[$xIntercept2]`]. This implies: The object flew for [`[$tBackUShow]`] before it landed in the ocean.

###Question 3

We need to substitute the function's [`x`] value with [`[$t1]`] to get the corresponding [`y`] value.

Step 3: In the second textbox, enter [` f([$t1]) `]. Desmos shows [`[$h1]`]. This implies: The object was [`[$h1U]`] above sea level [`[$t1U]`] after its release.

###Question 4

We need to create a second function [`y=[$h2]`], and then let desmos find the intersection between those two functions.

Step 3: In the second textbox, enter [`y=[$h2]`].

Step 4: Zoom out on the window, if needed, until you can see the intersection of [`f(x)`] and [`y=[$h2]`]. Alternatively, click on the Graph Settings icon (looking like a tool) and define the ranges of [`x`]-axis and [`y`]-axis.

Step 5: Click on the intersections of [`f(x)`] and [`y=[$h2]`]. Desmos shows [`[$leftIntersect]`] and [`[$rightIntersect]`]. This implies: The object was [`[$h2U]`] above sea level twice: once [`[$t2U]`] after its release, and again later [`[$t3U]`] after its release.

END_PGML_SOLUTION

ENDDOCUMENT();


