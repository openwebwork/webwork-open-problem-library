# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Given two points, find a line's equation in point-slope form.
# Slope is a positive fraction.
# 
# Last updated: Jordan 8/30/13; Carl Yao, 7/9/13
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Lines')
## KEYWORDS('linear','equation','slope','point-slope','fraction')
## DBCCSS('F-LE.2','8.F.3','A-CED')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "parserImplicitPlane.pl",
  "contextFraction.pl",
  "PGcourse.pl",
);

##############################################

Context("Fraction");
Context()->variables->add(y=>'Real');
Context()->noreduce('(-x)-y','(-x)+y');
Context()->flags->set(showExtraParens=>0);

$num=random(1,9,1);
$den=random(2,9,1);
while (gcd($num,$den)!=1) {$den=random(2,9,1);}

$m=Fraction($num,$den);
$b=non_zero_random(-10,10,1);

$x1=$den*random(-3,3,1);
$y1=$m*$x1+$b;
$x2=$den*random(-3,3,1);
while ($x2==$x1) {$x2=$den*random(-3,3,1);}
$y2=$m*$x2+$b;

$left1 = Formula("y-$y1")->reduce;
$right1 = Formula("$m*(x-$x1)")->reduce;
$left2 = Formula("y-$y2")->reduce;
$right2 = Formula("$m*(x-$x2)")->reduce;

Context()->texStrings;
$ansPSstringTeX1 = "y-$y1=$m(x-$x1)"; 
Context()->normalStrings;
$ansPSstring1 = "y-$y1=$m(x-$x1)";

Context()->texStrings;
$ansPSstringTeX2 = "y-$y2=$m(x-$x2)"; 
Context()->normalStrings;
$ansPSstring2 = "y-$y2=$m(x-$x2)";


Context("ImplicitPlane");
Context()->variables->are(x=>'Real',y=>'Real');
Context()->flags->set(showExtraParens=>0);
Context()->flags->set(showExtraParens=>0);
$ansPS1 = ImplicitPlane("$ansPSstring1");
$ansPS2 = ImplicitPlane("$ansPSstring2");

##############################################

TEXT(beginproblem());

BEGIN_PGML

A line passes through the points [`([$x1],[$y1])`] and [`([$x2],[$y2])`]. Find this line's equation in point-slope form.

    Using the point [`([$x1],[$y1])`], this line's point-slope form equation is [___________________].

    Using the point [`([$x2],[$y2])`], this line's point-slope form equation is [___________________].

END_PGML

##############################################


Context()->flags->set(reduceConstants=>0);
Context()->flags->set(reduceConstantFormulas=>0);

ANS($ansPS1->cmp(correct_ans_latex_string => $ansPSstringTeX1
   ) -> withPostFilter(sub {
      my $ansHash = shift;
        my $student = $ansHash->{original_student_ans};
        my @sides = split('=',"$student");

      #if it's an implicit plane object, reset how student's answer is displayed:
      if ($ansHash->{student_formula}->cmp_class eq "an Implicit line") {
        $ansHash->{preview_text_string} = "$sides[0]=$sides[1]";
        my $leftTex = Formula("$sides[0]")->TeX;
        my $rightTex = Formula("$sides[1]")->TeX;
        $ansHash->{preview_latex_string} = "$leftTex=$rightTex";
        $ansHash->{student_ans} = $ansHash->{original_student_ans};
      }

      #if they have the line correct, then check each side to see if the sides are correct
      if ($ansHash->{score}) {
         if (Formula("y-$y1") != Formula("$sides[0]") and Formula("y-$y1") != Formula("$sides[1]")) {
         $ansHash->{score} = 0;                 
         $ansHash->{ans_message} = "This is an equation for the line, but it is not the point-slope equation that uses the given point"; 
         }  
      }
      return $ansHash;
    }));



ANS($ansPS2->cmp(correct_ans_latex_string => $ansPSstringTeX2
   ) -> withPostFilter(sub {
      my $ansHash = shift;
        my $student = $ansHash->{original_student_ans};
        my @sides = split('=',"$student");

      #if it's an implicit plane object, reset how student's answer is displayed:
      if ($ansHash->{student_formula}->cmp_class eq "an Implicit line") {
        $ansHash->{preview_text_string} = "$sides[0]=$sides[1]";
        my $leftTex = Formula("$sides[0]")->TeX;
        my $rightTex = Formula("$sides[1]")->TeX;
        $ansHash->{preview_latex_string} = "$leftTex=$rightTex";
        $ansHash->{student_ans} = $ansHash->{original_student_ans};
      }

      #if they have the line correct, then check each side to see if the sides are correct
      if ($ansHash->{score}) {
         if (Formula("y-$y2") != Formula("$sides[0]") and Formula("y-$y2") != Formula("$sides[1]")) {
         $ansHash->{score} = 0;                 
         $ansHash->{ans_message} = "This is an equation for the line, but it is not the point-slope equation that uses the given point"; 
         }  
      }
      return $ansHash;
    }));


$s1=$y2-$y1;
$s2=$x2-$x1;
$s3=$m*$x1;
$s4=-$s3;

$outputy1 = $y1<0 ? "($y1)" : $y1;
$outputx1 = $x1<0 ? "($x1)" : $x1;

BEGIN_PGML_SOLUTION

A line's equation in point-slope form looks like [` y-y_{1}=m(x-x_{1}) `] where [`m`] is the slope of the line and [`(x_{1},y_{1})`] is a point that the line passes through. We first need to find the line's slope.

To find a line's slope, we can use the slope formula:

    [`` \text{slope}=\frac{y_{2}-y_{1}}{x_{2}-x_{1}} ``]

We mark which number corresponds to which variable in the formula:

    [`` ([$x1],[$y1]) \longrightarrow (x_{1},y_{1}) ``]

    [`` ([$x2],[$y2]) \longrightarrow (x_{2},y_{2}) ``]

Now we substitute these values into the corresponding variables in the slope formula:

    [`` \begin{aligned}\text{slope}&=\frac{y_{2}-y_{1}}{x_{2}-x_{1}}\\&=\frac{[$y2]-[$outputy1]}{[$x2]-[$outputx1]}\\&=\frac{[$s1]}{[$s2]}\\&=[$m]\end{aligned} ``]

Now we have [` y-y_{1}=[$m](x-x_{1}) `]. The next step is to use a point that we know the line passes through.

If we choose to use the point [`([$x1],[$y1])`], we have:

     [`
\begin{aligned}
  y-y_{1} &= m(x-x_{1}) \\
  [$left1] &= [$m](x-[$x1])
\end{aligned}
`]

If we choose to use the point [`([$x2],[$y2])`], we have:

     [`
\begin{aligned}
  y-y_{1} &= m(x-x_{1}) \\
  [$left2] &= [$m](x-[$x2])
\end{aligned}
`]

Note that these two equations are equivalent. You will see why once you change both equations to slope-intercept form. This is left as an exercise.

END_PGML_SOLUTION

ENDDOCUMENT();


