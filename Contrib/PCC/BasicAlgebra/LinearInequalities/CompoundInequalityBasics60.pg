# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Solve basic compound inequalities. Problem is like: x>=4 or x>1.
#
# Last edited by Carl Yao 07/10/2014
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Inequalities')
## KEYWORDS('linear','inequality', 'number line','set notation','interval notation')
## DBCCSS('7.EE.4')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "PGgraphmacros.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl"
);

##############################################
TEXT(beginproblem());
$refreshCachedImages = 1;

Context("Numeric");
#$reach is the maximum value shown on the graph.
$reach = 7;

# $direction decides whether the problem is x>1 or x>2 
# or x<1 or x<2
$direction = (random(-1,1,2)==1) ? 'left' : 'right';

$left0 = Compute("x");
if ($direction eq 'left') {
   $symbol0 = random(-1,1,2)>0 ? "<" : "\leq";
   $symbol1 = random(-1,1,2)>0 ? "<" : "\leq";
   $aEndType = ($symbol0 eq '<') ? "open" : "closed";
   $bEndType = ($symbol1 eq '<') ? "open" : "closed";
} else {
   $symbol0 = random(-1,1,2)>0 ? ">" : "\geq";
   $symbol1 = random(-1,1,2)>0 ? ">" : "\geq";
   $aEndType = ($symbol0 eq '>') ? "open" : "closed";
   $bEndType = ($symbol1 eq '>') ? "open" : "closed";
}
$a = random(-$reach+3,2,1);
$right0 = Compute("$a");

$left1 = Compute("x");
$b = random($a+1,$reach-3,1);
$right1 = Compute("$b");



#These are needed to show inequality symbols in dynamic images.
if ($direction eq 'left') {
   $symbol0Show = $symbol0 eq '<' ? '<' : '<=';
   $symbol1Show = $symbol1 eq '<' ? '<' : '<=';
} else {
   $symbol0Show = $symbol0 eq '>' ? '>' : '>=';
   $symbol1Show = $symbol1 eq '>' ? '>' : '>=';
}

Context("Interval");
Context()->flags->set("formatStudentAnswer"=>'parsed');

if ($direction eq 'left') {
   $endpoint = ($symbol1 eq '<') ? ')' : ']';
   $numberLineEndType = ($symbol1 eq '<') ? 'open' : 'closed';
   $ans = Compute("(-inf, $b $endpoint");
} else {
   $endpoint = ($symbol0 eq '>') ? '(' : '[';
   $numberLineEndType = ($symbol0 eq '>') ? 'open' : 'closed';
   $ans = Compute("$endpoint $a, inf)");
}

Context("Numeric");

$aspectRatio = 1/8;
$horPixel = 400;
$verPixel = $horPixel*$aspectRatio*3;
$screenXSize = $horPixel;
$screenYSize = $screenXSize*$aspectRatio*3;
$aboveSpace = $reach*$aspectRatio*3;
$belowSpace = $reach*$aspectRatio;
$hardCopyPercent = 400; #meaning 40%

$line0Height = $reach*$aspectRatio;
$line1Height = $reach*$aspectRatio*2;

$gr = init_graph(-$reach,-$belowSpace,$reach,$aboveSpace,
      axes=>[$reach+1,0],
      size=>[$horPixel,$verPixel]
);
@ticks = ();
 for my $j ((-$reach)..($reach)) {push(@ticks,$j);};

$gr->h_ticks(0,"black",@ticks);
$gr->lb( new Label(0,-$belowSpace/4,0,'black','center','top'));
$gr->lb( new Label($a,-$belowSpace/4,$a,'blue','center','top'));
$gr->lb( new Label($b,-$belowSpace/4,$b,'blue','center','top'));


if ($direction eq 'left') {
   if ($symbol1 eq '<') {
      $gr->stamps( open_circle($b,$line1Height,'black') );
      $gr->stamps( open_circle($b,0,'blue') );
   } else {
      $gr->stamps( closed_circle($b,$line1Height,'black') );
      $gr->stamps( closed_circle($b,0,'blue') );
   }
   $gr->moveTo($b,$line1Height);
   $gr->arrowTo(-0.99*$reach,$line1Height,'black',3);
   $gr->lb( new Label($b+$reach/20,$line1Height,"x $symbol1Show $b",'black','left','middle'));

   if ($symbol0 eq '<') {
      $gr->stamps( open_circle($a,$line0Height,'red') );
   } else {
      $gr->stamps( closed_circle($a,$line0Height,'red') );
   }
   $gr->moveTo($a,$line0Height);
   $gr->arrowTo(-0.99*$reach,$line0Height,'red',3);
   $gr->lb( new Label($a+$reach/20,$line0Height,"x $symbol0Show $a",'red','left','middle'));

   $gr->moveTo($b,0);
   $gr->arrowTo(-0.99*$reach,0,'blue',3);

   $ALT = "Graph of an interval on a number line. The segment from $b to negative infinity is shaded. The endpoint $b is $bEndType. Above the number line, there are two arrowed lines. The first arrow starts from $a and goes toward negative infinity, while the endpoint $a is $aEndType. The second arrow starts from $b and goes toward negative infinity, while the endpoint $b is $bEndType.";

}  else {

   if ($symbol0 eq '>') {
      $gr->stamps( open_circle($a,$line0Height,'red') );
      $gr->stamps( open_circle($a,0,'blue') );
   } else {
      $gr->stamps( closed_circle($a,$line0Height,'red') );
      $gr->stamps( closed_circle($a,0,'blue') );
   }
   $gr->moveTo($a,$line0Height);
   $gr->arrowTo(0.99*$reach,$line0Height,'red',3);
   $gr->lb( new Label($a-$reach/20,$line0Height,"x $symbol0Show $a",'red','right','middle'));

   if ($symbol1 eq '>') {
      $gr->stamps( open_circle($b,$line1Height,'black') );
   } else {
      $gr->stamps( closed_circle($b,$line1Height,'black') );
   }
   $gr->moveTo($b,$line1Height);
   $gr->arrowTo(0.99*$reach,$line1Height,'black',3);
   $gr->lb( new Label($b-$reach/20,$line1Height,"x $symbol1Show $b",'black','right','middle'));

   $gr->moveTo($a,0);
   $gr->arrowTo(0.99*$reach,0,'blue',3);

   $ALT = "Graph of an interval on a number line. The segment from $a to positive infinity is shaded. The endpoint $a is $aEndType. Above the number line, there are two arrowed lines. The first arrow starts from $a and goes toward positive infinity, while the endpoint $a is $aEndType. The second arrow starts from $b and goes toward positive infinity, while the endpoint $b is $bEndType.";
}



##############################################



BEGIN_PGML

Solve this compound inequality, and write your answer in *interval notation*.

Please type:  

* *inf* for [`\infty`],
* *DNE* for "no solution"
* *U* for the union symbol [`\cup`]

    [`` [$left0] [$symbol0] [$right0] \text{ or } [$left1] [$symbol1] [$right1] ``]

Solution: [___________]{$ans}

END_PGML



##############################################



BEGIN_PGML_SOLUTION

When there are two inequalities, it's helpful to graph them on a number line.

>>[@ image( insertGraph($gr), width=>$screenXSize, height=>$screenYSize, tex_size=>$hardCopyPercent, extra_html_tags=>"alt = '$ALT' title = '$ALT' ") @]*<<

Since the operation connecting both inequalities is "or", numbers in the solution set need to meet the conditions of either inequality. In other words, we are look for the union of both given sets. The blue segment on the number line represents the solutions.

We need to pay special attention to the endpoints. Notice that, in the solution set, the right endpoint is [$numberLineEndType]. So the solution set in interval notation is [`[$ans]`].

END_PGML_SOLUTION

ENDDOCUMENT();

