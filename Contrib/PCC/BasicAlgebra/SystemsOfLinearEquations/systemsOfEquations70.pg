# WeBWorK problem written by Chris Hughes, 2013
# Portland Community College
#
# Solve the system of linear equations
#     a x + b y = e
#     c x + d y = f
# where a, b, c, d are integer values on the interval [1,5]
#
# The solution is (x,y) where x and y are both fractions with numerators
# and denominators on the interval [-10,10].
#
# Last updated: Hughes 7/30/13
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Lines', 'Equations')
## KEYWORDS('linear','equation','solve','system','fraction')
## DBCCSS('8.EE.8','A-REI.3','A-REI.5')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "answerHints.pl",
  "contextFraction.pl",
  "PGcourse.pl"
);

##############################################

Context("Fraction-NoDecimals");
    Context()->{precedence}{Fraction} = 2.5;
    Context()->parens->set('(' => {type => "Point"} );
    Context()->flags->set(reduceFractions=>0,allowMixedNumbers=>1,requirePureFractions=>1);
Context()->{error}{msg}{"Mixed numbers are not allowed; you must use a pure fraction"} 
  = "Mixed numbers are not allowed; you must use a pure fraction, for example you should enter 5/4 and not 1 1/4";

# globally set the reductions one time
# so that we can then merely call ->reduce;
Context()->noreduce('(-x)-y','(-x)+y');
Context()->variables->are(x=>'Real',y=>'Real');

# add solution strings to context- this means that if
# students enter these (and they are not correct), then 
# WW will not give a Context warning
Context()->strings->add("no solution"=>{},
  "no solutions"=>{alias=>'no solution'}, 
  "none"=>{alias=>'no solution'}, 
  "infinite number of solutions"=>{}, 
  "infinite"=>{alias=>'infinite number of solutions'},
  "infinite solutions"=>{alias=>'infinite number of solutions'});

# the solution
$xnumerator = random(2,10,2);   # even number
$xdenominator = random(3,11,2); # odd number
$ynumerator = random(3,11,2);   # odd number
$ydenominator = random(2,10,2); # even number

$x = Fraction($xnumerator,$xdenominator)->reduce;
$y = Fraction($ynumerator,$ydenominator)->reduce;
$ans = List("($x,$y)");

# set up the system
#     a x + b y =e
#     c x + d y = f
# need to make sure that
#     ad - bc != 0

# initialize the variables
$a=1;
$b=1;
$c=1;
$d=1;

# set up $a, $b, $c, $d
while($a*$d -$c*$b == 0){
$a=random(1,5,1)*random(-1,1,2);
$b=random(1,5,1)*random(-1,1,2);;
$c=random(1,5,1)*random(-1,1,2);;
$d=random(1,5,1)*random(-1,1,2);;
}

$topLeft = Formula("$a*x+$b*y")->reduce;
$e = $topLeft->eval(x=>$x,y=>$y)->reduce;

$botLeft = Formula("$c*x+$d*y")->reduce;
$f = $botLeft->eval(x=>$x,y=>$y)->reduce;


##############################################
TEXT(beginproblem());
BEGIN_PGML
Solve the following system of equations, using whichever method you wish.

    [`\left\{\begin{aligned}
  [$topLeft] & =  [$e] \\
  [$botLeft] & =  [$f] 
\end{aligned}\right.`]

* If there is one solution, enter it as an ordered pair.
* If there is no solution, enter *no solution*. Spelling counts.
* If there is an infinite number of solutions, enter *infinite number of solutions*. Spelling counts.

[_________________________________]

END_PGML

$showPartialCorrectAnswers = 1;
ANS($ans->cmp(
      checker => sub {
        my ($correct, $student, $ans, $nth, $value) = @_;
        $student->context->setError("Your $nth $value contains an unreduced fraction","",undef,undef,$Value::CMP_WARNING)
          if $student->{notReduced};
        return 0 unless $correct == $student;
        my $reduced = 1;
        foreach $x ($student->value) {
          if (Value::classMatch($x,'Fraction') && !$x->isReduced) {
            $reduced = 0;
            break;
          }
        }
        $student->{notReduced} = 1 unless $reduced || $ans->{isPreview};
        return $reduced;
      }
    )->withPostFilter(AnswerHints(
  ["infinity"] => ["Infinity doesn't make sense here- do you mean infinite number of solutions?",replaceMessage=>1],
)));

$commonConclusion = "The solution to the system is [`$ans`]. It is left as an exercise to check. Please also note that you may have solved this problem a different way.";

if($a==-$c)
{
  #  ax + by = e
  # -ax + dy = f
  # should be solved by addition
  $lhs=Formula("$b*y+$d*y")->reduce;
  $lhs1=Formula("$a*x+$b*$y")->reduce;
BEGIN_PGML_SOLUTION
* Let's add the two equations, which will cancel the terms involving [`x`] and give [`[$lhs]=[$e]+[$f]`].
* This gives [`y=[$y]`].
* We find [`x`] using either equation - let's use the first one: [`[$lhs1]=[$e]`], so [`x=[$x]`].
* [$commonConclusion]**
END_PGML_SOLUTION
}
elsif($b==-$d)
{
  #  ax +  by = e
  #  cx + -by = f
  # should be solved by addition
  $lhs=Formula("$a*x+$c*x")->reduce;
  $lhs1=Formula("$a*($x)+($b)*(y)")->reduce;
BEGIN_PGML_SOLUTION
* Let's add the two equations, which will cancel the terms involving [`y`] and give [`[$lhs]=[$e]+([$f])`].
* This gives [`x=[$x]`].
* We find [`y`] using either equation - let's use the first one: [`[$lhs1]=[$e]`], so [`y=[$y]`].
* [$commonConclusion]**
END_PGML_SOLUTION
}
elsif($a==1 and $a!=$c and $b!=$d)
{
      # x + by = e should be solved for x
      # provided that $a and $c are not equal- in this case we should use subtraction.
      $rhs=Formula("$e-$b*y")->reduce;
      $lhs=Formula("$c*$e-$c*$b*y+$d*y")->reduce;

BEGIN_PGML_SOLUTION 
* From the first equation we see that [`x=[$rhs]`], which we substitute into the _second_ 
equation and solve for [`y`].
* This gives [`[$lhs]=[$f]`] so [`y=[$y]`].
* Now that we have [`y`], we find [`x`] using the _first_ equation: 

      [`\begin{aligned}
        x&=[$e]-([$b])\cdot([$y])\\
         &=[$x]
        \end{aligned}`]
* [$commonConclusion]**
END_PGML_SOLUTION 
}
elsif($b==1 and $b!=$d and $a!=$c)
{
      # ax + y = e should be solved for y
      # provided that $b and $d are not equal- in this case we should use subtraction.
      $lhs=Formula("$c*x+$d*$e-$d*$a*x")->reduce;
      $rhs=Formula("$e-$a*x")->reduce;

BEGIN_PGML_SOLUTION 
* From the first equation we see that [`y=[$rhs]`], which we substitute into the _second_ equation and solve for [`x`].
* This gives [`[$lhs]=[$f]`] so [`x=[$x]`]
* Now that we have [`x`], we find [`y`] using the first equation: 

      [`
       \begin{aligned}
        y&=[$e]-([$a])\cdot([$x])\\
         &=[$y]
        \end{aligned}`]
* [$commonConclusion]**
END_PGML_SOLUTION 
}
elsif($c==1 and $a!=$c and $b!=$d)
{
      # x + dy = f should be solved for x
      # provided that $a and $c are not equal- in this case we should use subtraction.
      $rhs=Formula("$f-$d*y")->reduce;
      $lhs=Formula("$a*$f-$a*$d*y+$b*y")->reduce;
BEGIN_PGML_SOLUTION 
* From the second equation we see that [`x=[$rhs]`], which we substitute into the _first_ equation and solve for [`y`].
* This gives [`[$lhs]=[$e]`] so [`y=[$y]`].
* Now that we have [`y`], we find [`x`] using the _second_ equation: 

       [`
        \begin{aligned}
          x&=[$f]-([$d])\cdot([$y])\\
           &=[$x]
         \end{aligned}`]
* [$commonConclusion]**
END_PGML_SOLUTION 
}
elsif($d==1 and $d!=$b and $a!=$c)
{      
      # cx + y = f should be solved for y
      $rhs=Formula("$f-$c*x")->reduce;
      $lhs=Formula("$a*x+$b*$f-$b*$c*x")->reduce;

BEGIN_PGML_SOLUTION 
* From the second equation we see that [`y=[$rhs]`], which we substitute into the _first_ equation and solve for [`x`].
* This gives [`[$lhs]=[$e]`] so [`x=[$x]`].
* Now that we have [`x`], we find [`y`] using the _second_ equation: 

      [`
       \begin{aligned}
        y&=[$f]-([$c])\cdot([$x])\\
         &=[$y]
        \end{aligned}`]
* [$commonConclusion]**
END_PGML_SOLUTION 
}
elsif($a==-1 and $a != $c and $b!=$d)
{
      # - x + by = e should be solved for x
      # unless $a and $c are the same, in which case
      # subtraction should be used
      $rhs=Formula("$b*y-$e")->reduce;
      $lhs=Formula("$c*$b*y-$c*$e+$d*y")->reduce;

BEGIN_PGML_SOLUTION
* From the first equation we see that [`x=[$rhs]`], which we substitute into the _second_ 
equation and solve for [`y`].
* This gives [`[$lhs]=[$f]`] so [`y=[$y]`].
* We find [`x`] using the _first_ equation: 

      [`\begin{aligned}
           x&=([$b])\cdot([$y])-([$e])\\
            &=[$x]
         \end{aligned}`]
* [$commonConclusion]**
END_PGML_SOLUTION
}
elsif($b==-1 and $b!=$d and $a!=$c)
{
      # ax - y = e should be solved for y
      # unless $b and $d are the same, in which case
      # subtraction should be used
      $rhs=Formula("$a*x-$e")->reduce;
      $lhs=Formula("$c*x+$d*$a*x-$d*$e")->reduce;
BEGIN_PGML_SOLUTION
* From the first equation we see that [`y=[$rhs]`], which we substitute into the _second_ equation and solve for [`x`].
* This gives [`[$lhs]=[$f]`] so [`x=[$x]`].
* We find [`y`] using the first equation: 

      [`\begin{aligned}
           y&=([$a])\cdot([$x])-([$e])  \\ 
            &=[$y]\end{aligned}`]
* [$commonConclusion]**
END_PGML_SOLUTION
}
elsif($c==-1 and $a!=$c and $b!=$d)
{
      # - x + dy = f should be solved for x
      # unless $a and $c are the same, in which case
      # subtraction should be used
      $rhs=Formula("$d*y-$f")->reduce;
      $lhs=Formula("$a*$d*y-$a*$f+$b*y")->reduce;
BEGIN_PGML_SOLUTION
* From the second equation we see that [`x=[$rhs]`], which we substitute into the _first_ equation and solve for [`y`].
* This gives [`[$lhs]=[$e]`] so [`y=[$y]`].
* We find [`x`] using the _second_ equation: 
      
      [`\begin{aligned}
          x&=([$d])\cdot([$y])-([$f])\\
           &=[$x]
         \end{aligned}`].
* [$commonConclusion]**
END_PGML_SOLUTION
}
elsif($d==-1 and $b!=$d and $a!=$c)
{      
      # cx - y = f should be solved for y
      # unless $b and $d are the same, in which case
      # subtraction should be used
      $rhs=Formula("$c*x-$f")->reduce;
      $lhs=Formula("$a*x+$b*$c*x-$b*$f")->reduce;

BEGIN_PGML_SOLUTION
* From the second equation we see that [`y=[$rhs]`], which we substitute into the _first_ equation and solve for [`x`].
* This gives [`[$lhs]=[$e]`] so [`x=[$x]`].
* We find [`y`] using the _second_ equation: 

      [`\begin{aligned}
       y&=([$c])\cdot([$x])-([$f])\\
        &=[$y]
        \end{aligned}`].
* [$commonConclusion]**
END_PGML_SOLUTION
}
else
{
     if($a==$c)
     {
          # ax + by = e
          # ax + dy = f
          # should be solved using subtraction
          $lhs=Formula("$b*y-$d*y")->reduce;
          $lhs1=Formula("$a*x+$b*($y)")->reduce;
BEGIN_PGML_SOLUTION 
* We subtract the two equations, which will cancel the terms in involving [`x`] and give [`[$lhs]=[$e]-([$f])`].
* This gives [`y=[$y]`].
* Now that we have [`y`], we find [`x`] using either equation - let's use the first: [`[$lhs1]=[$e]`], so [`x=[$x]`].
* [$commonConclusion]**
END_PGML_SOLUTION 
     }
     elsif($b==$d)
     {
          # ax + by = e
          # cx + by = f
          # should be solved using subtraction
          $lhs=Formula("$a*x-$c*x")->reduce;
          $lhs1=Formula("$a*($x)+$b*y")->reduce;
BEGIN_PGML_SOLUTION 
* We subtract the two equations, which will cancel the terms in involving [`y`] and give [`[$lhs]=[$e]-([$f])`].
* This gives [`x=[$x]`].
* Now that we have [`x`], we find [`y`] using either equation - let's use the first: [`[$lhs1]=[$e]`], so [`y=[$y]`].
* [$commonConclusion]**
END_PGML_SOLUTION 
     }
     else
     {
          # otherwise use elimination

          # multiply the first equation by $c
          $topleft=Formula("$c*$a*x+$c*$b*y")->reduce;
          $topright=$c*$e;

          # multiply the second equation by $a
          $bottomleft=Formula("$a*$c*x+$a*$d*y")->reduce;
          $bottomright=$a*$f;

          $lhs=Formula("$c*$b*y-$a*$d*y")->reduce;
          $rhs=$c*$e-$a*$f;

          # put them together
BEGIN_PGML_SOLUTION 
* Let's multiply the _first_ equation by [$c] and the _second_ equation by [$a]

          [`\begin{aligned} 
             [$topleft] &= [$topright]\\ 
             [$bottomleft] &=[$bottomright]
           \end{aligned}`]
* Subtracting these two equations gives [`[$lhs]=[$rhs]`], so [`y=[$y]`].

* Now that we have [`y`], we can use either equation to find [`x`]; let's use the first one: 

      [`[$a]*x+([$b])\cdot([$y])=[$e]`]

     so [`x=[$x]`].
* [$commonConclusion]**
END_PGML_SOLUTION 
     }
}

##############################################


ENDDOCUMENT();
