## DESCRIPTION
## Algebra: Write a set in interval notation
# written by Jan Hlavacek (jhlavace@svsu.edu)
## ENDDESCRIPTION


## DBsubject(Algebra)
## DBchapter(Algebra of real numbers and simplifying expressions)
## DBsection(Inequalities and intervals)
## Level(1)
## KEYWORDS('algebra', 'intervals')


###########################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGcourse.pl",
"PGML.pl",
"PGgraphmacros.pl",
"AnswerFormatHelp.pl",
"PGchoicemacros.pl",
);

TEXT(beginproblem());


###########################
#  Setup

Context("Interval");

# Create number line:

$gr = init_graph(-6,-1,6,1,
size=>[600,100]);

$gr->moveTo(-6,0);
$gr->lineTo(6,0,"black");

for (my $i=-5; $i < 6; $i++) {
    $gr->moveTo($i,.15);
    $gr->lineTo($i,-.15);
    $gr->lb( new Label($i,-.35,"$i",
    'black','center','middle'));
}

# create random intervals:

@ind = NchooseK(13,6);
@ints = -6..6;
@endpoints = num_sort(@ints [@ind]);

# -6 is -Infinity:

if ($endpoints[0] == -6) {
    $l1 = "(";  # just for completeness
    $r1 = list_random(")", "]");
    $i1 = Interval("(-Infinity,$endpoints[1]" . $r1);
    $gr->moveTo($endpoints[1],0);
    $gr->arrowTo(-6,0,'blue',3);
    $gr->stamps( ($r1 eq ")")? open_circle($endpoints[1],0,'blue') : closed_circle($endpoints[1],0,'blue') );
} else {
    $l1 = list_random("(", "[");
    $r1 = list_random(")", "]");
    $i1 = Interval($l1 . "$endpoints[0],$endpoints[1]" . $r1);
    $gr->moveTo($endpoints[0],0);
    $gr->lineTo($endpoints[1],0,'blue',3);
    $gr->stamps( ($l1 eq "(")? open_circle($endpoints[0],0,'blue') : closed_circle($endpoints[0],0,'blue') );
    $gr->stamps( ($r1 eq ")")? open_circle($endpoints[1],0,'blue') : closed_circle($endpoints[1],0,'blue') );
}

$l2 = list_random("(", "[");
$r2 = list_random(")", "]");
$i2 = Interval($l2 . "$endpoints[2],$endpoints[3]" . $r2);
$gr->moveTo($endpoints[2],0);
$gr->lineTo($endpoints[3],0,'blue',3);
$gr->stamps( ($l2 eq "(")? open_circle($endpoints[2],0,'blue') : closed_circle($endpoints[2],0,'blue') );
$gr->stamps( ($r2 eq ")")? open_circle($endpoints[3],0,'blue') : closed_circle($endpoints[3],0,'blue') );

# 6 is Infinity:

if ($endpoints[5] == 6) {
    $l3 = list_random("(", "[");
    $r3 = ")";  # just for completeness
    $i3 = Interval($l3 . "$endpoints[4],Infinity" . $r3);
    $gr->moveTo($endpoints[4],0);
    $gr->arrowTo(6,0,'blue',3);
    $gr->stamps( ($l3 eq "(")? open_circle($endpoints[4],0,'blue') : closed_circle($endpoints[4],0,'blue') );
} else {
    $l3 = list_random("(", "[");
    $r3 = list_random(")", "]");
    $i3 = Interval($l3 . "$endpoints[4],$endpoints[5]" . $r3);
    $gr->moveTo($endpoints[4],0);
    $gr->lineTo($endpoints[5],0,'blue',3);
    $gr->stamps( ($l3 eq "(")? open_circle($endpoints[4],0,'blue') : closed_circle($endpoints[4],0,'blue') );
    $gr->stamps( ($r3 eq ")")? open_circle($endpoints[5],0,'blue') : closed_circle($endpoints[5],0,'blue') );
}

$showPartialCorrectAnswers = 1;

$answer = Union($i1, $i2, $i3);

###########################
#  Main text

BEGIN_PGML

Write the set pictured below using interval notation:

>> [@ image(insertGraph($gr), width=>$pixels, height=>$pixels, tex_size=>900) @]* <<

>> [______________________________]{$answer} [@ AnswerFormatHelp("intervals") @]* <<

END_PGML

#hint:
$showHint = 2;

BEGIN_PGML_HINT
Interval notation is trying to give you the same information as the picture.
END_PGML_HINT

############################
#  Solution

BEGIN_PGML_SOLUTION
The set consist of three intervals, [` [$i1] `], [` [$i2] `] and [` [$i3] `]. Using the union notation
it will be written as 

[` [$answer] `]

You type in [$answer].
END_PGML_SOLUTION

COMMENT('Uses PGML.');

ENDDOCUMENT();
