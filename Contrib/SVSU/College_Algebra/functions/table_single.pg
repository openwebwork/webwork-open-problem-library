# DESCRIPTION
# Absolute value inequalities (simple, less then)
# written by Jan Hlavacek (jhlavace@svsu.edu)
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Functions)
## DBsection(Definition, concept)
## Institution(SVSU)
## Author(Jan Hlavacek)
## Level(2)
## TitleText1('Algebra and Trigonometry')
## AuthorText1('Swokowski, Cole')
## EditionText1('13')
## Section1('.')
## Problem1('')
## KEYWORDS('algebra,domain,function,intervals')

DOCUMENT();
loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGML.pl",
"PGcourse.pl",
"PGchoicemacros.pl",
"AnswerFormatHelp.pl",
"niceTables.pl",
);

$showPartialCorrectAnswers = 1;

Context("Numeric")->strings->add(undefined=>{});

# Define variables here:

@ind = NchooseK(40,10);
@xs = PGsort( sub {$_[0] < $_[1]}, map {$_ - 20} @ind);

@ys = map {random(-20,20,1)} @xs;

# Find three values of x, two of them in the domain, one of them outside the
# domain, and the corresponding answers:

$undef = random(1,3,1);
@chosen = NchooseK(10,3);

if ($undef == 1) {
    do { $x1 = random(-20,20); } while ( grep {$x1 eq $_} @xs );
    $a1 = Compute("undefined");
    $a1str = 'undefined';
} else {
    $x1 = @xs[$chosen[0]];
    $a1 = @ys[$chosen[0]];
    $a1str = '[:[$a1]:]';
}
if ($undef == 2) {
    do { $x2 = random(-20,20); } while ( grep {$x2 eq $_} @xs );
    $a2 = Compute("undefined");
    $a2str = 'undefined';
} else {
    $x2 = @xs[$chosen[1]];
    $a2 = @ys[$chosen[1]];
    $a2str = '[:[$a2]:]';
}
if ($undef == 3) {
    do { $x3 = random(-20,20); } while ( grep {$x3 eq $_} @xs );
    $a3 = Compute("undefined");
    $a3str = 'undefined';
} else {
    $x3 = @xs[$chosen[2]];
    $a3 = @ys[$chosen[2]];
    $a3str = '[:[$a3]:]';
}

Context()->texStrings;
$table = 
DataTable([
[['\(x\) ',midrule => 1],@xs],
['\(f(x)\)',@ys],
],
align=>'r|cccccccccc',
allcellcss => 'vertical-align:top; horizontal-padding: 6pt; '
);
Context()->normalStrings;

Context("Interval");

# Turn xs and ys into sets.  Strip duplicates from ys, otherwise correct answer 
# will have the duplicates, possibly confusing students:
$domain = Compute("{" . join(', ', @xs) . "}");
%rangeref = map { $_ => 1 } @ys;
@rangeuniq = keys %rangeref;
$range = Compute("{" . join(', ', @rangeuniq) . "}");

# Actual problem goes here:
TEXT(beginproblem());
BEGIN_PGML
The function [: f :] is defined by the table

[$table]*** 

Find the following values of [: f(x) :].  Use the word "undefined" when appropriate.
-----

*   [: f([$x1]) :] is [________________]{$a1}
*   [: f([$x2]) :] is [________________]{$a2}
*   [: f([$x3]) :] is [________________]{$a3}

-----
Find the domain and range of the function [:f:].  Write each **as a set** of real numbers, with proper set notation!

* Domain: [____________________]{$domain}
* Range:  [____________________]{$range}

END_PGML

# Solution:
BEGIN_PGML_SOLUTION
If the given input is in the "[:x:]" row in the table, find the corresponding output in the "[:f(x):]" row. 
If the input is not in the "[:x:]" row, there is no corresponding output, and [:f(x):] is *undefined*.

*   [: f([$x1]) :] is [$a1str]**
*   [: f([$x2]) :] is [$a2str]**
*   [: f([$x3]) :] is [$a3str]**

-----

The domain is simply a set containing all the input, while the range is the set containing all the outputs.

Note that sets are denoted using curly brackets, entries are separated with commas, there should be no duplicate 
elements, and the elements *do not* have to be in order:

* Domain: [:[$domain]:]
* Range:  [:[$range]:]

END_PGML_SOLUTION

#hint:
$showHint = 2;

BEGIN_PGML_HINT
Set notation uses curly brackets: [: {1, 4, -3} :].
END_PGML_HINT

ENDDOCUMENT();
