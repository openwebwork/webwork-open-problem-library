## This problem is a modification of the following problem
## Library/Mizzou/Algebra/graph_exponential/matching_01.pg
## Modifications were made by R. Noonan Heale and M. Osman

## ORIGINAL PROBLEM DESCRIPTION:




# DESCRIPTION
# Gives the graphs of four exponential functions and asks to match them
# to the correct equation
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Exponential and logarithmic expressions and functions)
## DBsection(Graphs)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## Level(3)
## KEYWORDS('functions', 'exponential', 'graphs')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "parserImplicitPlane.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
@bases = (2,exp(1),3,4,5,6,10,1/2,1/3,1/4,1/5,1/6,1/10);
@choices = (0..3);
for ($i = 0; $i < 4; $i++) {
  $choices[$i] = list_random(@bases);
  for ($j = 0; $j < scalar(@bases); $j++) {
    if ($bases[$j] == $choices[$i] ) {
      $tmp = $bases[$j];
      $bases[$j] = $bases[scalar(@bases)-1];
      $bases[scalar(@bases)-1] = $tmp;
      pop(@bases);
      $j--;
    }
  }
}

$max = max(@choices);
for ($i = 0; $i < 4; $i++) {
  if (1/$choices[$i] > $max) {
    $max = 1/$choices[$i];
  }
  
  if ($choices[$i] == exp(1)) {
    $dispfun[$i] = "(2.7)^x";
  } elsif ($choices[$i] == 1/2) {
    $dispfun[$i] = "\left(\frac{1}{2}\right)^x";
  } elsif ($choices[$i] == 1/3) {
    $dispfun[$i] = "\left(\frac{1}{3}\right)^x";
  } elsif ($choices[$i] == 1/4) {
    $dispfun[$i] = "\left(\frac{1}{4}\right)^x";
  } elsif ($choices[$i] == 1/5) {
    $dispfun[$i] = "\left(\frac{1}{5}\right)^x";
  } elsif ($choices[$i] == 1/6) {
    $dispfun[$i] = "\left(\frac{1}{6}\right)^x";
  } elsif ($choices[$i] == 1/10) {
    $dispfun[$i] = "\left(\frac{1}{10}\right)^x";
  } else {
    $dispfun[$i] = "$choices[$i]^x";
  }
}

@pos = (0..3);
@posspos = (0..3);
for ($i = 0; $i < 4; $i++) {
  $pos[$i] = list_random(@posspos);
  for ($j = 0; $j < scalar(@posspos); $j++) {
    if ($posspos[$j] == $pos[$i] ) {
      $tmp = $posspos[$j];
      $posspos[$j] = $posspos[scalar(@posspos)-1];
      $posspos[scalar(@posspos)-1] = $tmp;
      pop(@posspos);
      $j--;
    }
  }
}

Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, E=>{}, "none"=>{});
@possans = ("A", "B", "C", "D", "E");
@ans = ($possans[$pos[0]], $possans[$pos[1]], $possans[$pos[2]], $possans[$pos[3]]);

$maxx = 4;
$maxy = $max+2;
$minx = -$maxx;
$miny = -3;
$gsize = 500;

for ($i = 0; $i < 4; $i++) {
  $graphs[$i] = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
  for ($j = $minx; $j <= $maxx; $j++) {
    $graphs[$i]->moveTo($j,$miny);
    $graphs[$i]->lineTo($j,$maxy,'gray',1);
  }
  for ($j = $miny; $j <= $maxy; $j++) {
    $graphs[$i]->moveTo($minx,$j);
    $graphs[$i]->lineTo($maxx,$j,'gray',1);
  }
  $graphs[$i]->moveTo($minx, 0);
  $graphs[$i]->arrowTo($maxx, 0, 'black', 2);
  $graphs[$i]->arrowTo($minx, 0, 'black', 2);
  $graphs[$i]->moveTo(0, $miny);
  $graphs[$i]->arrowTo(0, $maxy, 'black', 2);
  $graphs[$i]->arrowTo(0, $miny, 'black', 2);
  $graphs[$i]->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

  for ($j = $minx+1; $j < $maxx; $j++) {
    if ($j != 0) {
      $graphs[$i]->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
    }
  }

  for ($j = $miny+1; $j < $maxy; $j++) {
    if ($j != 0 && $j % 2 == 0) {
      $graphs[$i]->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
    }
  }
}

# set up plots
for ($i = 0; $i < 4; $i++) {
  $expn[$i] = sub { my $x = shift(); ($choices[$i])**($x) };
  $fun[$i] = new Fun($expn[$i], $graphs[$i]);
  $fun[$i]->domain(-$maxx,$maxx);
  $fun[$i]->steps(1500);
  $fun[$i]->weight(3);
}

for ($i = 0; $i < 4; $i++) {
  for ($j = $miny-2; $j < $maxy+2; $j = $j + 2) {
    $graphs[$pos[$i]]->moveTo($j-0.5, 0);
    $graphs[$pos[$i]]->lineTo($j+0.5, 0,'red',4);
  }
}

@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize/2, height=>$gsize/2, tex_size=>250 );
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 
$PAR
For each function, give the correct letter that corresponds to its graph:
$PAR
(i) \(f(x) = $dispfun[$pos[0]]\) $SPACE $SPACE $SPACE \{ans_rule(5)\}
$PAR
(ii) \(g(x) = $dispfun[$pos[1]]\) $SPACE $SPACE $SPACE \{ans_rule(5)\}
$PAR
(iii) \(h(x) = $dispfun[$pos[2]]\) $SPACE $SPACE $SPACE \{ans_rule(5)\}
$PAR
(iv) \(k(x) = $dispfun[$pos[3]]\) $SPACE $SPACE $SPACE \{ans_rule(5)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(String($ans[0])->cmp());
ANS(String($ans[1])->cmp());
ANS(String($ans[2])->cmp());
ANS(String($ans[3])->cmp());



COMMENT('matching, different bases');
ENDDOCUMENT();