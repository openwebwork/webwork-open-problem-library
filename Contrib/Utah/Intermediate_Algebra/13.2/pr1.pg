## This problem is a modification of the following problem
## Library/Mizzou/Algebra/graph_exponential/matching_02.pg
## Modifications were made by Rebecca Noonan Heale and Anna Schoening

## ORIGINAL PROBLEM DESCRIPTION:

# DESCRIPTION
# Gives the graphs of four exponential functions and asks to match them
# to the correct equation
# ENDDESCRIPTION

## DBsubject(Algebra)
## DBchapter(Exponential and logarithmic expressions and functions)
## DBsection(Graphs)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## MLT(graph-match)
## Level(3)
## KEYWORDS('functions', 'exponential', 'graphs')

###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "parserImplicitPlane.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
@bases = (2..10);
push(@bases,exp(1));
$choice = list_random(@bases);

if ($choice == exp(1)) {
  @dispfun = ("e^x", "e^{-x}", "-e^x", "-e^{-x}");
} else {
  @dispfun = ("$choice^x", "(1/$choice)^{x}", "-$choice^x", "-(1/$choice)^{x}");
}

@pos = (0..3);
@posspos = (0..3);
for ($i = 0; $i < 4; $i++) {
  $pos[$i] = list_random(@posspos);
  for ($j = 0; $j < scalar(@posspos); $j++) {
    if ($posspos[$j] == $pos[$i] ) {
      $tmp = $posspos[$j];
      $posspos[$j] = $posspos[scalar(@posspos)-1];
      $posspos[scalar(@posspos)-1] = $tmp;
      pop(@posspos);
      $j--;
    }
  }
}

Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, E=>{}, "none"=>{});
@possans = ("A", "B", "C", "D", "E");
@ans = ($possans[$pos[0]], $possans[$pos[1]], $possans[$pos[2]], $possans[$pos[3]]);

$maxx = 4;
$maxy = $choice+2;
$minx = -$maxx;
$miny = -$maxy;
$gsize = 500;

for ($i = 0; $i < 4; $i++) {
  $graphs[$i] = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
  for ($j = $minx; $j <= $maxx; $j++) {
    $graphs[$i]->moveTo($j,$miny);
    $graphs[$i]->lineTo($j,$maxy,'gray',1);
  }
  for ($j = $miny; $j <= $maxy; $j++) {
    $graphs[$i]->moveTo($minx,$j);
    $graphs[$i]->lineTo($maxx,$j,'gray',1);
  }
  $graphs[$i]->moveTo($minx, 0);
  $graphs[$i]->arrowTo($maxx, 0, 'black', 2);
  $graphs[$i]->arrowTo($minx, 0, 'black', 2);
  $graphs[$i]->moveTo(0, $miny);
  $graphs[$i]->arrowTo(0, $maxy, 'black', 2);
  $graphs[$i]->arrowTo(0, $miny, 'black', 2);
  $graphs[$i]->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

  for ($j = $minx+1; $j < $maxx; $j++) {
    if ($j != 0) {
      $graphs[$i]->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
    }
  }

  for ($j = $miny+1; $j < $maxy; $j++) {
    if ($j != 0 && $j % 2 == 0) {
      $graphs[$i]->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
    }
  }
}

# set up plots
$expn[0] = sub { my $x = shift(); ($choice)**($x) };
$fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
$fun[0]->domain(-$maxx,$maxx);
$fun[0]->steps(1500);
$fun[0]->weight(3);

$expn[1] = sub { my $x = shift(); ($choice)**(-$x) };
$fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
$fun[1]->domain(-$maxx,$maxx);
$fun[1]->steps(1500);
$fun[1]->weight(3);

$expn[2] = sub { my $x = shift(); -($choice)**($x) };
$fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
$fun[2]->domain(-$maxx,$maxx);
$fun[2]->steps(1500);
$fun[2]->weight(3);

$expn[3] = sub { my $x = shift(); -($choice)**(-$x) };
$fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
$fun[3]->domain(-$maxx,$maxx);
$fun[3]->steps(1500);
$fun[3]->weight(3);


for ($i = 0; $i < 4; $i++) {
  for ($j = $miny-2; $j < $maxy+2; $j = $j + 2) {
    $graphs[$i]->moveTo($j-0.5, 0);
    $graphs[$i]->lineTo($j+0.5, 0,'red',4);
  }
}

@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize/2, height=>$gsize/2, tex_size=>250 );
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 
$PAR
For each function, give the correct letter that corresponds to its graph:
$PAR
(i) \(f(x) = $dispfun[0]\) $SPACE $SPACE $SPACE \{ans_rule(5)\}
$PAR
(ii) \(g(x) = $dispfun[1]\) $SPACE $SPACE $SPACE \{ans_rule(5)\}
$PAR
(iii) \(h(x) = $dispfun[2]\) $SPACE $SPACE $SPACE \{ans_rule(5)\}
$PAR
(iv) \(k(x) = $dispfun[3]\) $SPACE $SPACE $SPACE \{ans_rule(5)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(String($ans[0])->cmp());
ANS(String($ans[1])->cmp());
ANS(String($ans[2])->cmp());
ANS(String($ans[3])->cmp());



COMMENT('matching, same base');
ENDDOCUMENT();