# DESCRIPTION
# VandM_functions_SSCL_M_D_C_01
# Calculate key values on shear and bending moment diagrams.
# WeBWorK problem written by Michael Swanbom (26 August 2013)
# mswanbom at latech dot edu
# Louisiana Tech University
# OPES Project
# ENDDESCRIPTION

## DBsubject('Statics_and_Mechanics_of_Materials')
## DBchapter('Beams')
## DBsection('Shear_and_Bending_Moment_Diagrams')
## KEYWORDS('simply supported', 'cantilever', 'moment', 'beam', 'diagram', 'bending', 'USunits')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Michael Swanbom')
## Institution('Louisiana Tech')
## RESOURCES('VandM_diagrams_SSCL_M_D_M_D_C_01.png')

# This work is licensed under a Creative Commons Attribution-NonCommercial-
# ShareAlike 3.0 Unported License.

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"extraAnswerEvaluators.pl",
"PGauxiliaryFunctions.pl",
"PGasu.pl",
"PGmatrixmacros.pl"
);

TEXT(beginproblem());

#
# Now we do the randomization of variables, and other computations
# as needed for this problem.  Sometimes we compute the answers here.
#

@curvature = ("","not curved", "concave up", "convex up", "mixed");
@function = ("","linear", "quadratic", "cubic", "other");

$a = random(2,4,.2);
$b = random(8,12,.1);
$c = random(1.5,2.5,.2);
$w = random(170,230,10);
$F1 = random(400,600,10);
$M = random(2700,3300,10);

$RC = ($F1*($b+$c)+$w*$b*$b/2-$M)/($b);
$RB = $w*$b+$F1-$RC;

$slope0 = $RB/$w;

$Mmax = -$M + $RB*$slope0 - $w*$slope0**2/2;

BEGIN_TEXT
VandM diagrams SSCL M D C 01
$PAR
\{ image("VandM_diagrams_SSCL_M_D_C_01.png", width=>450, height=>131, tex_size=>600) \}
$PAR
A beam is loaded and supported as shown, with F = $F1 lb, M = $M ft*lb, and w = $w lb/ft.  $PAR
The dimensions on the figure are a = $a ft, b = $b ft and c = $c ft. $PAR
Draw and label shear and bending moment diagrams for this beam.  From your diagrams, enter the following information.  $PAR

Limits of an interval are defined anywhere there is a change in the loading or the shear diagram becomes zero. The first interval is on the left and subsequent intervals are in order moving to the right. $PAR

$PAR
$BBOLD$BITALIC Reactions: $EITALIC$EBOLD$BR
\(R_B\) = \{ans_rule(10)\} $BR
\(R_C\) = \{ans_rule(10)\} 
$PAR
$BBOLD$BITALIC Shear and Bending Moment Diagram Data: $EITALIC$EBOLD$BR
\{ display_matrix( [ 

 ["Interval", '\(x_{left}\)','\(x_{right}\)','\(V_{left}\)','\(V_{right}\)',"function$BR type", "curvature",'\(M_{left}\)','\(M_{right}\)',"function$BR type", "curvature"],


'hline',

 ["1",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])],

["2",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])],

["3",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])],

["4",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])]

 ]) \}
  
        
END_TEXT


#
# Tell WeBWork how to test if answers are right.  These should come in the
# same order as the answer blanks above.  You tell WeBWork both the type of
# "answer evaluator" to use, and the correct answer.
#

ANS(num_cmp($RB, units=>"lb"));
ANS(num_cmp($RC, units=>"lb"));

ANS(num_cmp(-$a, units=>"ft"));
ANS(num_cmp(0, units=>"ft"));
ANS(num_cmp(0, units=>"lb"));
ANS(num_cmp(0, units=>"lb"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp(-$M, units=>"ft*lb"));
ANS(num_cmp(-$M, units=>"ft*lb"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));

ANS(num_cmp(0, units=>"ft"));
ANS(num_cmp($slope0, units=>"ft"));
ANS(num_cmp($RB, units=>"lb"));
ANS(num_cmp(0, units=>"lb"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp(-$M, units=>"ft*lb"));
ANS(num_cmp($Mmax, units=>"ft*lb"));
ANS(str_cmp($function[2]));
ANS(str_cmp($curvature[3]));

ANS(num_cmp($slope0, units=>"ft"));
ANS(num_cmp($b, units=>"ft"));
ANS(num_cmp(0, units=>"lb"));
ANS(num_cmp($F1-$RC, units=>"lb"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp($Mmax, units=>"ft*lb"));
ANS(num_cmp(-$F1*$c, units=>"ft*lb"));
ANS(str_cmp($function[2]));
ANS(str_cmp($curvature[3]));

ANS(num_cmp($b, units=>"ft"));
ANS(num_cmp($b+$c, units=>"ft"));
ANS(num_cmp($F1, units=>"lb"));
ANS(num_cmp($F1, units=>"lb"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp(-$F1*$c, units=>"ft*lb"));
ANS(num_cmp(0, units=>"ft*lb"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));

ENDDOCUMENT();        # This should be the last executable line in the problem.