# DESCRIPTION
# VandM_functions_SSCL_C_M_D_C_01
# Find functions for shearing forces and bending moments in different intervals
# of a beam.
# WeBWorK problem written by Michael Swanbom (26 August 2013)
# mswanbom at latech dot edu
# Louisiana Tech University
# OPES Project
# ENDDESCRIPTION

## DBsubject('Statics_and_Mechanics_of_Materials')
## DBchapter('Beams')
## DBsection('Shear_and_Bending_Moment_Functions')
## KEYWORDS('simply supported', 'cantilever', 'moment', 'beam', 'function', 'USunits')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Michael Swanbom')
## Institution('Louisiana Tech')
## RESOURCES('VandM_diagrams_SSCL_M_D_M_D_C_01.png')

# This work is licensed under a Creative Commons Attribution-NonCommercial-
# ShareAlike 3.0 Unported License.


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"extraAnswerEvaluators.pl",
"PGauxiliaryFunctions.pl",
"PGasu.pl",
"PGmatrixmacros.pl"
);

TEXT(beginproblem());

#
# Now we do the randomization of variables, and other computations
# as needed for this problem.  Sometimes we compute the answers here.
#

@curvature = ("","not curved", "concave up", "convex up", "mixed");
@function = ("","linear", "quadratic", "cubic", "other");

$a = random(1.5,1.9,.2);
$b = random(1.6,2.0,.2);
$c = random(2.1,2.7,.2);
$d = random(1.7,2.1,.2);
$w1 = random(2.5,3.5,.1);
$w2 = random(4.5,5.5,.1);
$F = random(2.5,3.5,.1);
$M1 = random(1.5,2.5,.1);
$M2 = random(1.5,2.5,.1);

$RE = ($F*($b+$c)-$w1*$a*$a/2-$M2+$M1+$w2*($c+$d)*($b+($c+$d)/2))/($b+$c+$d);
$RB = $w1*$a+$F-$RE+$w2*($c+$d);

$slope0 = 0;

$Mmax = 0;

BEGIN_TEXT
VandM diagrams SSCL M D M D C 01
$PAR
\{ image("VandM_diagrams_SSCL_M_D_M_D_C_01.png", width=>448, height=>138, tex_size=>600) \}
$PAR
A beam is loaded and supported as shown, with F = $F kN, \(M_1\) = $M1 kN*m, \(M_2\) = $M2 kN*m, \(w_1\) = $w1 kN/m, and \(w_2\) = $w2 kN/m.  $PAR
The dimensions on the figure are a = $a m, b = $b m, c = $c m, and d = $d m. $PAR
Draw and label shear and bending moment diagrams for this beam.  From your diagrams, enter the following information.  $PAR

Limits of an interval are defined anywhere there is a change in the loading or the shear diagram becomes zero. The first interval is on the left and subsequent intervals are in order moving to the right.$PAR

$BBOLD$BITALIC Reactions: $EBOLD$ETIALIC$BR
\(R_B\) = \{ans_rule(10)\} $BR
\(R_E\) = \{ans_rule(10)\}
$PAR
$BBOLD$BITALIC Shear and Bending Moment Diagram Data: $EBOLD$ETIALIC$BR
\{ display_matrix( [ 

 ["Interval", '\(x_{left}\)','\(x_{right}\)','\(V_{left}\)','\(V_{right}\)',"function$BR type", "curvature",'\(M_{left}\)','\(M_{right}\)',"function$BR type", "curvature"],

'hline',

 ["1",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])],

["2",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])],

["3",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])],

["4",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])],

["5",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])]

 ]) \}
$PAR
$BITALIC be sure to include units with your answers $EITALIC
        
END_TEXT


#
# Tell WeBWork how to test if answers are right.  These should come in the
# same order as the answer blanks above.  You tell WeBWork both the type of
# "answer evaluator" to use, and the correct answer.
#

ANS(num_cmp($RB*1000, units=>"N"));
ANS(num_cmp($RE*1000, units=>"N"));

ANS(num_cmp(-$a, units=>"m"));
ANS(num_cmp(0, units=>"m"));
ANS(num_cmp(0*1000, units=>"N"));
ANS(num_cmp((-$w1*$a)*1000, units=>"N"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp($M1*1000, units=>"N*m"));
ANS(num_cmp(($M1-$w1*$a*$a/2)*1000, units=>"N*m"));
ANS(str_cmp($function[2]));
ANS(str_cmp($curvature[3]));

ANS(num_cmp(0, units=>"m"));
ANS(num_cmp($b, units=>"m"));
ANS(num_cmp((-$w1*$a+$RB)*1000, units=>"N"));
ANS(num_cmp((-$w1*$a+$RB)*1000, units=>"N"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp(($M1-$w1*$a*$a/2)*1000, units=>"N*m"));
ANS(num_cmp(($M1-$w1*$a*$a/2 + (-$w1*$a+$RB)*$b)*1000, units=>"N*m"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));

ANS(num_cmp($b, units=>"m"));
ANS(num_cmp(($b+ (-$w1*$a+$RB)/$w2), units=>"m"));
ANS(num_cmp((-$w1*$a+$RB)*1000, units=>"N"));
ANS(num_cmp(0*1000, units=>"N"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp(($M1-$w1*$a*$a/2 + (-$w1*$a+$RB)*$b - $M2)*1000, units=>"N*m"));
ANS(num_cmp(($M1-$w1*$a*$a/2 + (-$w1*$a+$RB)*$b - $M2 + (-$w1*$a+$RB)*((-$w1*$a+$RB)/$w2)/2)*1000, units=>"N*m"));
ANS(str_cmp($function[2]));
ANS(str_cmp($curvature[3]));

ANS(num_cmp(($b+ (-$w1*$a+$RB)/$w2), units=>"m"));
ANS(num_cmp($b+$c, units=>"m"));
ANS(num_cmp(0*1000, units=>"N"));
ANS(num_cmp((-($c-(-$w1*$a+$RB)/$w2)*$w2)*1000, units=>"N"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp(($RE*$d - $w2*$d**2/2 + (($c-(-$w1*$a+$RB)/$w2)*$w2)*($c-(-$w1*$a+$RB)/$w2)/2)*1000, units=>"N*m"));
ANS(num_cmp(($RE*$d - $w2*$d**2/2)*1000, units=>"N*m"));
ANS(str_cmp($function[2]));
ANS(str_cmp($curvature[3]));

ANS(num_cmp(($b+$c), units=>"m"));
ANS(num_cmp(($b+$c+$d), units=>"m"));
ANS(num_cmp((-($c-(-$w1*$a+$RB)/$w2)*$w2 - $F)*1000, units=>"N"));
ANS(num_cmp(-$RE*1000, units=>"N"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp(($RE*$d - $w2*$d**2/2)*1000, units=>"N*m"));
ANS(num_cmp(0, units=>"N*m"));
ANS(str_cmp($function[2]));
ANS(str_cmp($curvature[3]));

ENDDOCUMENT();        # This should be the last executable line in the problem.