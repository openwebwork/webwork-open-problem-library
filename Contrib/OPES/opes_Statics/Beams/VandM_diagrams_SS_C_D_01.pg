# DESCRIPTION
# VandM_diagrams_SS_C_D_01
# Calculate key values for shear and bending moment diagrams.
# WeBWorK problem written by Michael Swanbom (26 August 2013)
# mswanbom at latech dot edu
# Louisiana Tech University
# OPES Project
# ENDDESCRIPTION

## DBsubject('Statics_and_Mechanics_of_Materials')
## DBchapter('Beams')
## DBsection('Shear_and_Bending_Moment_Diagrams')
## KEYWORDS('simply supported', 'moment', 'beam', 'diagram', 'bending', 'SIunits')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Michael Swanbom')
## Institution('Louisiana Tech')
## RESOURCES('VandM_diagrams_SS_C_D_01.pg')

# This work is licensed under a Creative Commons Attribution-NonCommercial-
# ShareAlike 3.0 Unported License.

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"extraAnswerEvaluators.pl",
"PGauxiliaryFunctions.pl",
"PGasu.pl",
"PGmatrixmacros.pl"
);

TEXT(beginproblem());

#
# Now we do the randomization of variables, and other computations
# as needed for this problem.  Sometimes we compute the answers here.
#

@curvature = ("","not curved", "concave up", "convex up", "mixed");
@function = ("","linear", "quadratic", "cubic", "other");

$a = random(2.5,4.5,.1);
$b = floor($a*10*random(.6,1.08,.12))/10;
$c = floor($a*10*random(1.75,2.75,.1))/10;
$d = floor($a*10*random(.56,1.04,.12))/10;
$F1 = random(15,25,1);
$w = floor($F1/$c*random(1.25,2.5,.05));

$RE = ($F1*$a+$w*$c*($a+$b+$c/2))/($a+$b+$c+$d);
$RA = $w*$c+$F1-$RE;

$x_Mmax = $a + $b + ($RA-$F1)/$w;

$Mmax = $RA*$x_Mmax - $F1*($x_Mmax-$a) - $w*(($x_Mmax-($a+$b))**2)/2;

BEGIN_TEXT
VandM diagrams SS C D 01
$PAR
\{ image("VandM_diagrams_SS_C_D_01.png", width=>441, height=>122, tex_size=>600) \}
$PAR
A beam is loaded and supported as shown, with F = $F1 kN and w = $w kN/m.  $PAR
The dimensions on the figure are a = $a m, b = $b m, c = $c m, and d = $d m. $PAR
Draw and label shear and bending moment diagrams for this beam.  From your diagrams, enter the following information.  $PAR

Limits of an interval are defined anywhere there is a change in the loading or the shear diagram becomes zero. The first interval is on the left and subsequent intervals are in order moving to the right.
$PAR
$BBOLD$BITALIC Reactions: $EBOLD$EITALIC$BR
\(R_A\) = \{ans_rule(10)\} $BR
\(R_E\) = \{ans_rule(10)\} $BR

$PAR
$BBOLD$BITALIC Shear and Bending Moment Diagram Data: $EBOLD$EITALIC$BR
\{ display_matrix( [ 

 ["Interval", '\(x_{left}\)','\(x_{right}\)','\(V_{left}\)','\(V_{right}\)',"function$BR type", "curvature",'\(M_{left}\)','\(M_{right}\)',"function$BR type", "curvature"],

'hline',

 ["1",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])],

["2",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])],

["3",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])],

["4",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])],

["5",ans_rule(4), ans_rule(4), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature]), ans_rule(4), ans_rule(4), pop_up_list([@function]), pop_up_list([@curvature])]

 ]) \}$BR
$BITALIC be sure to include units with your answers $EITALIC  
        
END_TEXT


#
# Tell WeBWork how to test if answers are right.  These should come in the
# same order as the answer blanks above.  You tell WeBWork both the type of
# "answer evaluator" to use, and the correct answer.
#
$showPartialCorrectAnswers = 1;
ANS(num_cmp($RA*1000, units=>"N"));
ANS(num_cmp($RE*1000, units=>"N"));

ANS(num_cmp(0, units=>"m"));
ANS(num_cmp($a, units=>"m"));
ANS(num_cmp($RA*1000, units=>"N"));
ANS(num_cmp($RA*1000, units=>"N"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp(0, units=>"N*m"));
ANS(num_cmp($RA*$a*1000, units=>"N*m"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));

ANS(num_cmp($a, units=>"m"));
ANS(num_cmp($a+$b, units=>"m"));
ANS(num_cmp(($RA-$F1)*1000, units=>"N"));
ANS(num_cmp(($RA-$F1)*1000, units=>"N"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp($RA*$a*1000, units=>"N*m"));
ANS(num_cmp(($RA*$a+($RA-$F1)*$b)*1000, units=>"N*m"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));

ANS(num_cmp($a+$b, units=>"m"));
ANS(num_cmp($x_Mmax, units=>"m"));
ANS(num_cmp(($RA-$F1)*1000, units=>"N"));
ANS(num_cmp(0*1000, units=>"N"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp(($RA*$a+($RA-$F1)*$b)*1000, units=>"N*m"));
ANS(num_cmp($Mmax*1000, units=>"N*m"));
ANS(str_cmp($function[2]));
ANS(str_cmp($curvature[3]));

ANS(num_cmp($x_Mmax, units=>"m"));
ANS(num_cmp($a+$b+$c, units=>"m"));
ANS(num_cmp(0*1000, units=>"N"));
ANS(num_cmp(-$RE*1000, units=>"N"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp($Mmax*1000, units=>"N*m"));
ANS(num_cmp($RE*$d*1000, units=>"N*m"));
ANS(str_cmp($function[2]));
ANS(str_cmp($curvature[3]));

ANS(num_cmp($a+$b+$c, units=>"m"));
ANS(num_cmp($a+$b+$c+$d, units=>"m"));
ANS(num_cmp(-$RE*1000, units=>"N"));
ANS(num_cmp(-$RE*1000, units=>"N"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));
ANS(num_cmp($RE*$d*1000, units=>"N*m"));
ANS(num_cmp(0, units=>"N*m"));
ANS(str_cmp($function[1]));
ANS(str_cmp($curvature[1]));

ENDDOCUMENT();        # This should be the last executable line in the problem.