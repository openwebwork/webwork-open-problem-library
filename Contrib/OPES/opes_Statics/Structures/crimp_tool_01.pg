# DESCRIPTION
# crimp_tool_01
# Find forces acting between all parts of a crimping tool.
# WeBWorK problem written by Michael Swanbom (20 August 2013)
# mswanbom at latech dot edu
# Louisiana Tech University
# OPES Project
# ENDDESCRIPTION

## DBsubject('Statics_and_Mechanics_of_Materials')
## DBchapter('Structures')
## DBsection('Frames_and_Machines')
## KEYWORDS('2D', 'machine', 'bearing', 'USunits')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Michael Swanbom')
## Institution('Louisiana Tech')
## RESOURCES('crimp_tool_01.png')


# This work is licensed under a Creative Commons Attribution-NonCommercial-
# ShareAlike 3.0 Unported License.

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"extraAnswerEvaluators.pl",
"PGauxiliaryFunctions.pl",
"PGasu.pl"
);

TEXT(beginproblem());

#
# Now we do the randomization of variables, and other computations
# as needed for this problem.  Sometimes we compute the answers here.
#

$F = random(40,70,1);
$d = random(8,15,.1);
$c = floor($d*100*random(.03,.09,.02)+.5)/100;
$b = floor($d*10*random(.3,.6,.01)+.5)/10;
$a = floor($b*100*random(.25,.55,.01)+.5)/100; 
$h1 = floor($d*100*random(.25,.35,.01))/100;
$h2 = floor($d*10*random(.6,.7,.01)+.5)/10;

$FCD_CE = -$F*($d+$c)/$c;
$FAD_CD = -$F*$d/$c;
$FAB_AD = $FAD_CD*($a+$b)/$a;
$FCR_AD = -$FAD_CD*$b/$a;
$FAB_BE = -$FAB_AD;
$FBE_CE = -$FAD_CD;

BEGIN_TEXT
crimp tool 01
$PAR
\{ image("crimp_tool_01.png", width=>327, height=>163, tex_size=>600) \}
$PAR
\{ begintable(6) \}
\{row("$BCENTER$BITALIC a","$BCENTER$BITALIC b","$BCENTER$BITALIC c",
      "$BCENTER$BITALIC d","$BCENTER \(h_1\)","$BCENTER\(h_2\)")\}
\{row("$BCENTER$SPACE $a in $SPACE","$BCENTER$SPACE $b in $SPACE",
      "$BCENTER$SPACE $c in $SPACE","$BCENTER$SPACE $d in $SPACE",
      "$BCENTER$SPACE $h1 in $SPACE","$BCENTER$SPACE $h2 in $SPACE")\}
\{ endtable \}
$PAR
A certain type of piping system uses deformable rings to clamp pipes onto fittings. A crimping tool that is used to make these connections is shown here. Find the forces indicated in the table below when a force of F = $F lb is applied to the handles as shown.
$PAR
$BBOLD$BITALIC Forces: $EBOLD (Denote rightward or upward forces with positive values; leftward or downward forces with negative values.)$EITALIC$BR
\{ begintable(4) \}
\{row("$BBOLD$BCENTER$SPACE This body exerts $BR forces of -> $SPACE",
      "$BCENTER\(F_{horizontal}\)","$BCENTER\(F_{vertical}\)",
      "$BBOLD$BCENTER$SPACE on this body $SPACE") \}
\{row("$BCENTER$BITALIC$SPACE crimp ring $SPACE", ans_rule(10),ans_rule(10), 
      "$BCENTER$BITALIC$SPACE AD $SPACE")\}
\{row("$BCENTER$BITALIC$SPACE AB $SPACE", ans_rule(10),ans_rule(10), 
      "$BCENTER$BITALIC$SPACE AD $SPACE")\}
\{row("$BCENTER$BITALIC$SPACE AB $SPACE", ans_rule(10),ans_rule(10), 
      "$BCENTER$BITALIC$SPACE BE $SPACE")\}
\{row("$BCENTER$BITALIC$SPACE AD $SPACE", ans_rule(10),ans_rule(10), 
      "$BCENTER$BITALIC$SPACE CD $SPACE")\}
\{row("$BCENTER$BITALIC$SPACE BE $SPACE", ans_rule(10),ans_rule(10), 
      "$BCENTER$BITALIC$SPACE CE $SPACE")\}
\{row("$BCENTER$BITALIC$SPACE CD $SPACE", ans_rule(10),ans_rule(10), 
      "$BCENTER$BITALIC$SPACE CE $SPACE")\}
\{ endtable() \}

$BITALIC be sure to include units with your answers $EITALIC

END_TEXT


#
# Tell WeBWork how to test if answers are right.  These should come in the
# same order as the answer blanks above.  You tell WeBWork both the type of
# "answer evaluator" to use, and the correct answer.
#
$showPartialCorrectAnswers = 1;
ANS(num_cmp(0, units=>"lb")); ANS(num_cmp($FCR_AD, units=>"lb")); 
ANS(num_cmp(0, units=>"lb")); ANS(num_cmp($FAB_AD, units=>"lb")); 
ANS(num_cmp(0, units=>"lb")); ANS(num_cmp($FAB_BE, units=>"lb")); 
ANS(num_cmp(0, units=>"lb")); ANS(num_cmp($FAD_CD, units=>"lb")); 
ANS(num_cmp(0, units=>"lb")); ANS(num_cmp($FBE_CE, units=>"lb")); 
ANS(num_cmp(0, units=>"lb")); ANS(num_cmp($FCD_CE, units=>"lb")); 


ENDDOCUMENT();        # This should be the last executable line in the problem.