##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('linear', 'velocity')

## DBsubject('Calculus')
## DBchapter('Differentiation')
## DBsection('Derivatives of Polynomials and Exponential Functions')
## Date('8/5/2011')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('AUCI')
## EditionText1('')
## AuthorText1('')
## Section1('1.3')
## Problem1('')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   "unionTables.pl",
   "contextFraction.pl",
   "parserFormulaWithUnits.pl",
   "weightedGrader.pl",
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;
install_weighted_grader();
##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->variables->are(t=>'Real',ft=>'Real',s=>'Real');
$deltav = Formula("ft/s");
$accel = Formula("ft/s^2");

$gunits = Compute(random(1,3,.25));
$vinit = Compute(non_zero_random(-9,9));
$vunits = FormulaWithUnits("$gunits*t+$vinit ft/s");
$accelunits = FormulaWithUnits("$gunits ft/s^2");


Context("Fraction-NoDecimals");
Context()->variables->are(t=>'Real');

$g = Fraction($gunits);
$v = Formula("$g*t+$vinit");
$t0 = Fraction(random(0,2,.25));
$t1 = $t0 + Fraction(random(0.25,2,.25));
$t2 = $t1 + Fraction(random(0.25,2,.25));
$t3 = $t2 + Fraction(random(0.25,2,.25));
$t4 = $t3 + Fraction(random(0.25,2,.25));
$t5 = $t4 + Fraction(random(0.25,2,.25));

$v0 = Fraction($v->eval(t=>"$t0"));
$v1 = Fraction($v->eval(t=>"$t1"));
$v2 = Fraction($v->eval(t=>"$t2"));
$v3 = Fraction($v->eval(t=>"$t3"));
$v4 = Fraction($v->eval(t=>"$t4"));
$v5 = Fraction($v->eval(t=>"$t5"));

$deltav1=Compute("$v1-$v0");
$deltav2=Compute("$v2-$v1");
$deltav3=Compute("$v3-$v2");
$deltav4=Compute("$v4-$v3");
$deltav5=Compute("$v5-$v4");

$avg1 = Compute("($v1-$v0)/($t1-$t0)");
$avg2 = Compute("($v2-$v1)/($t2-$t1)");
$avg3 = Compute("($v3-$v2)/($t3-$t2)");
$avg4 = Compute("($v4-$v3)/($t4-$t3)");
$avg5 = Compute("($v5-$v4)/($t5-$t4)");


##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
An object moves in a straight line with position measured in feet at time t seconds. The table below gives velocity (not position) at various times. In a given row, use the data from that and the next row to compute the net change and average rate of change of the velocity (average acceleration).
$BR
$BR
$BBOLD Note: $EBOLD Your answers must be reduced fractions or integers.  
$BR
$BR
\{ 
BeginTable(border=>1, tex_border=>"1pt", spacing=>0, padding=>4).
AlignedRow(["\(t\)","\(v\)","\(\Delta v\)","units","\(\frac{\Delta v}{\Delta t}\)","units"], align=>MIDDLE, separation=>0).
AlignedRow(["\($t0\)","\($v0\)",ans_rule(5),ans_rule(1),ans_rule(5),ans_rule(2)], separation=>0).
AlignedRow(["\($t1\)","\($v1\)",ans_rule(5),ans_rule(1),ans_rule(5),ans_rule(2)], separation=>0).
AlignedRow(["\($t2\)","\($v2\)",ans_rule(5),ans_rule(1),ans_rule(5),ans_rule(2)], separation=>0).
AlignedRow(["\($t3\)","\($v3\)",ans_rule(5),ans_rule(1),ans_rule(5),ans_rule(2)], separation=>0).
AlignedRow(["\($t4\)","\($v4\)",ans_rule(5),ans_rule(1),ans_rule(5),ans_rule(2)], separation=>0).
AlignedRow(["\($t5\)","\($v5\)",""], separation=>0).
EndTable()
\}
$BR
(Don't forget units here!) If the velocity of the object is linear, then the acceleration is \(v^\prime(t) = \)\{ans_rule\}, and the velocity function is \(v(t) = \)\{ans_rule\}. 
END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#
Context("LimitedFraction");
WEIGHTED_ANS(Compute("$deltav1")->cmp, 7);
WEIGHTED_ANS($deltav->cmp, 1);
WEIGHTED_ANS(Compute("$avg1")->cmp, 7);
WEIGHTED_ANS($accel->cmp, 1);

WEIGHTED_ANS(Compute("$deltav2")->cmp, 7);
WEIGHTED_ANS($deltav->cmp, 1);
WEIGHTED_ANS(Compute("$avg2")->cmp);
WEIGHTED_ANS($accel->cmp, 1);

WEIGHTED_ANS(Compute("$deltav3")->cmp, 7);
WEIGHTED_ANS($deltav->cmp, 1);
WEIGHTED_ANS(Compute("$avg3")->cmp, 7);
WEIGHTED_ANS($accel->cmp, 1);

WEIGHTED_ANS(Compute("$deltav4")->cmp, 7);
WEIGHTED_ANS($deltav->cmp, 1);
WEIGHTED_ANS(Compute("$avg4")->cmp, 7);
WEIGHTED_ANS($accel->cmp, 1);

WEIGHTED_ANS(Compute("$deltav5")->cmp, 7);
WEIGHTED_ANS($deltav->cmp, 1 );
WEIGHTED_ANS(Compute("$avg5")->cmp, 7);
WEIGHTED_ANS($accel->cmp, 1);

WEIGHTED_ANS($accelunits->cmp, 10);
WEIGHTED_ANS($vunits->cmp, 10);
ENDDOCUMENT();        
