##DESCRIPTION
#
# File Created: 5/13/2008
# Last Modified: 5/13/2008
# Problem Author: Darwyn Cook
# WeBWorK Entry: 
# Location: Alfred University
#
##ENDDESCRIPTION

##KEYWORDS()
##

## DBsubject('Calculus')
## DBchapter('Differentiation')
## DBsection('The Chain Rule')
## Date('5/13/2008')
## Author('')
## Institution('Alfred University')
## TitleText1('Calculus: with Early Transcendentals')
## EditionText1('8')
## AuthorText1('Anton')
## Section1('')
## Problem1('')

DOCUMENT();

# Load the macro file to create graphs.
loadMacros("PGgraphmacros.pl");
# Load whatever macros you need for the problem
loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGauxiliaryFunctions.pl",
           "PGgraphmacros.pl",
           "MathObjects.pl");
 
## Show partial correct answers
$showPartialCorrectAnswers = 1;
## Display the problem information
TEXT(beginproblem());
Context("Numeric");
Context()->variables->are(t=>'Real',P=>'Real');

$n = random(50,200,5);
$year = random(2002,2010,1);
$input = Compute("$year - 2000");
$pop = random(2500,10000,100);
$P = Formula("$n*t^2+2500")->reduce;
$L = Formula("sqrt{P}")->reduce;
$Pt = Compute("$n*$input^2+2500");
$Pprimet = Compute("2*$n*$input");
$LP = Compute("sqrt{$Pt}");
$LprimeP = Compute("1/(2*sqrt($Pt))");
$Lprimet = Compute("($n*$input)/sqrt($n*$input^2+2500)");

$comp = Formula("sqrt($n*t^2+2500)")->reduce;
$compder = Formula("($n*t)/sqrt($n*t^2+2500)")->reduce;


## This is a fancy way to implement the possible answers for the drop down menu.
## Technically for the drop down menu we don't need the alias, it is here to 
## to give the reader ideas.
Context()->strings->are("dL/dP"=>{caseSensitive=>1},"dP/dt"=>{caseSensitive=>1},"dL/dt"=>{caseSensitive=>1},"ppm/h"=>{caseSensitive=>1},"h/yr"=>{caseSensitive=>1},"ppm/yr"=>{caseSensitive=>1});

$dLdP = String("dL/dP");
$dPdt = String("dP/dt");
$dLdt = String("dL/dt");
$ppmh = String("ppm/h");
$hyr  = String("h/yr");
$ppmyr= String("ppm/yr");

# include javascript for pop-up explaining units
HEADER_TEXT(<<EOF);
<script language="javascript" type="text/javascript">
<!-- //
function unitspopup() {
    var url = "/webwork2_files/units.html";
    var opt = "height=625,width=600,location=no,menubar=no,status=no" +
              "resizable=yes,scrollbars=yes,toolbar=no,";
    window.open(url,'examdata_info',opt).focus();
}
// -->
</script>
EOF

Context()->texStrings;
BEGIN_TEXT
$BR
An environmental study in a community shows that the level of a certain pollutant in the air is \(L(P) = $L\) parts per million (ppm), where \(P\) is the population in heads (h).  The population of the community is \(P(t) = $P\), where \(t\) is years (yr) after 2000.
$BR 
$BR
(a) The population in $year was \{ans_rule(30)\} people.
$BR$BR
(b) In Leibniz notation and with units, the population in $year was changing by
$BR$BR $SPACE $SPACE $SPACE 
\{ pop_up_list([$dLdt->string,$dLdP->string,$dPdt->string]) \}=\{ans_rule(30)\} \{ pop_up_list([$ppmh->string,$ppmyr->string,$hyr->string]) \}

$BR$BR
(c) The pollution level for $Pt people is \{ans_rule(30)\} ppm. 
$BR$BR
(d) In Leibniz notation and with units, the pollution level for $Pt people is changing by
$BR$BR $SPACE $SPACE $SPACE 
 \{ pop_up_list([$dLdt->string,$dLdP->string,$dPdt->string]) \}=\{ans_rule(30)\} \{ pop_up_list([$ppmh->string,$ppmyr->string,$hyr->string]) \} 
$BR$BR
(e)  Write a composition function that represents the pollution level as a function of time, then use the chain rule to find its derivative with respect to time:
$BR$BR $SPACE $SPACE $SPACE 
\( L(t) =  \) \{ ans_rule(40) \}  ppm
$BR$BR $SPACE $SPACE $SPACE 
\( L'(t) =  \) \{ ans_rule(40) \}  ppm/yr
$BR$BR
(f)  In Leibniz notation and with units, the pollution level in $year was changing by
$BR$BR $SPACE $SPACE $SPACE 
 \{ pop_up_list([$dLdt->string,$dLdP->string,$dPdt->string]) \}=\{ans_rule(30)\} \{ pop_up_list([$ppmh->string,$ppmyr->string,$hyr->string]) \} 


$BR
END_TEXT
Context()->normalStrings;

ANS($Pt->cmp);

ANS($dPdt->cmp);
ANS($Pprimet->cmp);
ANS($hyr->cmp);

ANS($LP->cmp);

ANS($dLdP->cmp);
ANS($LprimeP->cmp);
ANS($ppmh->cmp);

ANS($comp->cmp());
ANS($compder->cmp());

ANS($dLdt->cmp);
ANS($Lprimet->cmp);
ANS($ppmyr->cmp);
ENDDOCUMENT();
      
