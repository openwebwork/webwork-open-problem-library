## DESCRIPTION
## Linear Models
## ENDDESCRIPTION

## KEYWORDS('Statistics', 'Linear regression', 'line')
## Tagged by LD

## DBsubject('Statistics')
## DBchapter('Correlation/Regression')
## DBsection('Linear regression')
## Date('10/29/2012')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('AUCI')
## EditionText1('1')
## AuthorText1('Petrillo')
## Section1('7.3')
## Problem1('4')

#
# First comes some stuff that appears at the beginning of every problem
#

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGnumericalmacros.pl",
"PGstatisticsmacros.pl",
"MathObjects.pl",
"Alfredmacros.pl"
);

TEXT(beginproblem());

#
# Now we do the randomization of variables, and other computations
# as needed for this problem.  Sometimes we compute the answers here.
#
Context()->variables->are(t=>"Real");
# Make numpoints at least 9
$numpoints = 11; 
$numdivisions = $numpoints - 1;
for ($j=0;$j<$numpoints;$j++){
 $time[$j] = Compute("$j/2");
};

# coefficients of the polynomial, we want the derivative to be zero somewhere
# between $time[0] and $time[$numdivisions]:

$a0 = Compute(non_zero_random($time[0],$time[3],.01));
$a1 = Compute(non_zero_random($time[4],$time[7],.01));
$a2 = Compute(non_zero_random($time[8],$time[$numdivisions],.01));
$g = Formula("(t-$a0)*(t-$a1)*(t-$a2)");


# Now we are going to make sure that f is positive
$cp1 = Compute("($a0+$a1+$a2-sqrt(($a0)^2+($a1)^2+($a2)^2-$a0*$a1-$a0*$a2-$a1*$a2))/3")->with(tolType => 'absolute',tolerance =>.05);
$cp2 = Compute("($a0+$a1+$a2+sqrt(($a0)^2+($a1)^2+($a2)^2-$a0*$a1-$a0*$a2-$a1*$a2))/3")->with(tolType => 'absolute',tolerance =>.05);
$localmaxg = $g->eval(t=>"$cp1")->with(tolType => 'absolute',tolerance =>.1);
$localming = $g->eval(t=>"$cp2")->with(tolType => 'absolute',tolerance =>.1);
$a3 = abs(&min($g->eval(t=>"0"),$localmaxg,$localming,$g->eval(t=>"$time[$numdivisions]")))+random(2,9,.01); # a vertical shift to make the function positive

$f = Formula("$g+$a3");
$df = $f->D('t');
$d2f = $df->D('t');
$localmax = $f->eval(t=>"$cp1");
$localmin = $f->eval(t=>"$cp2");

$F = Formula("(-$a0*$a1*$a2+$a3)*t + 1/2($a0*$a1+$a0*$a2+$a1*$a2)*t^2+1/3(-$a0-$a1-$a2)t^3+t^4/4");
$Fa = $F->eval(t=>"$time[0]");
$Fb = $F->eval(t=>"$time[$numdivisions]");

$ip = Compute("($a0+$a1+$a2)/3")->with(tolType => 'absolute',tolerance =>.05);
$rate = $df->eval(t=>"$ip")->with(tolType => 'absolute',tolerance =>.1);

$reg = Regression->new( 4, "regression", [ "const", "X1","X2","X3" ] );

$left = Compute("0");
for $j (0..($numdivisions)) {
        $t[$j] = Compute("$time[$j]-$time[0]");
	$exact = $f->eval(t=>"$t[$j]");
	$y[$j] = Compute(random(.99*$exact, 1.01*$exact, 0.001));
        if($j < $numdivisions){$left = Compute("$left + $y[$j]*($time[$j+1]-$time[$j])");};
        $reg->include($y[$j],[1,$t[$j],($t[$j])**2,($t[$j])**3]);
};

@coeff= $reg->theta();
$cubicreg = Formula("$coeff[0][0]+$coeff[0][1]*t+$coeff[0][2]*t^2+$coeff[0][3]*t^3");


$cellwidth = 20;

BEGIN_TEXT
	Jen is trying to analyze the data below, which she decides is modeled by a cubic equation.
$BR
$BCENTER
\{begintable(2)\}
\{row("t","\(y=a_3t^3+a_2t^2+a_1t+a_0\)")\}
END_TEXT

for $j (0..($numdivisions)){
BEGIN_TEXT
\{row($time[$j], $y[$j])\}
END_TEXT
};

BEGIN_TEXT
\{endtable\}
$ECENTER
$BR
$BR
Find a cubic regression model for Jen's data: \{ans_rule(75)\}
$BR
Find the critical points of f: \{ans_rule(30)\}
$BR
The local max for f on the interval \(\lbrack 0,$time[$numdivisions]\rbrack\) is \{ans_rule\}
$BR
The local min for f on the interval \(\lbrack 0,$time[$numdivisions]\rbrack\) is \{ans_rule\}
$BR
What is the greatest rate of decrease for f on the interval \(\lbrack 0,$time[$numdivisions]\rbrack\)? \{ans_rule\} (Your answer should be negative)
$BR
Use a left hand Riemann sum and $BBOLD Jen's data $EBOLD (not the regression model!) to estimate the net change in her data on the interval \(\lbrack 0,$time[$numdivisions]\rbrack\) using \($numdivisions\) divisions \{ans_rule(100)\}
$BR
Estimate the net change in Jen's data on the interval \(\lbrack 0,$time[$numdivisions]\rbrack\) by integrating your regression model \{ans_rule\}
END_TEXT

$cubiccheck = sub  {
  my ($correct, $student, $ansHash) = @_;
  Value::isFormula($student);
  my $context = Context()->copy;
  my $s = Formula($context,"$student");
  my $ds = $s->D('t');
  my $d2s = $ds->D('t')->with(tolType => 'absolute',tolerance =>.0001);
  my $d3s = $d2s->D('t')->with(tolType => 'absolute',tolerance =>.0001);
  my $d4s = $d3s->D('t')->with(tolType => 'absolute',tolerance =>.0001);
  my $s0 = $s->eval(t=>'0')->with(tolType => 'absolute',tolerance =>.0001);
  my $s1 = $ds->eval(t=>'0')->with(tolType => 'absolute',tolerance =>.0001);
  my $s2 = $d2s->eval(t=>'0')->with(tolType => 'absolute',tolerance =>.0001);
  my $s3 = $d3s->eval(t=>'0')->with(tolType => 'absolute',tolerance =>.0001);
  my $s4 = $d4s->eval(t=>'0')->with(tolType => 'absolute',tolerance =>.0001);
  my $c = Formula($context,"$correct");
  my $dc = $c->D('t');
  my $d2c = $dc->D('t')->with(tolType => 'absolute',tolerance =>.0001);
  my $d3c = $d2c->D('t')->with(tolType => 'absolute',tolerance =>.0001);
  my $d4c = $d3c->D('t')->with(tolType => 'absolute',tolerance =>.0001);
  my $c0 = $c->eval(t=>'0')->with(tolType => 'absolute',tolerance =>.0001);
  my $c1 = $dc->eval(t=>'0')->with(tolType => 'absolute',tolerance =>.0001);
  my $c2 = $d2c->eval(t=>'0')->with(tolType => 'absolute',tolerance =>.0001);
  my $c3 = $d3c->eval(t=>'0')->with(tolType => 'absolute',tolerance =>.0001);
  my $c4 = $d4c->eval(t=>'0')->with(tolType => 'absolute',tolerance =>.0001);
 
  if ($d4s != 0) {Value->Error('Your answer should be a cubic polynomial')};
  if ($s0 != $c0) {Value->Error('Your constant coefficient is off')};
  if ($s1 != $c1) {Value->Error('Your linear coefficient is off')};
  if ($s2 != $c2) {Value->Error('Your quadratic coefficient is off')};
  if ($s3 != $c3) {Value->Error('Your cubic coefficient is off')};
  ### if you've made it this far, your answer should be correct.
  return 1;
};

ANS($cubicreg->cmp(checker=> $cubiccheck) );
ANS(List($cp1,$cp2)->cmp());
ANS($localmax->cmp(tolType => 'relative',tolerance =>.01));
ANS($localmin->cmp(tolType => 'relative',tolerance =>.01));
ANS($rate->cmp(tolType => 'absolute',tolerance =>.1));
ANS($left->cmp());
ANS(Compute("$Fb-$Fa")->cmp(tolType => 'relative',tolerance =>.01) );
ENDDOCUMENT();        # This should be the last executable line in the problem.