#DESCRIPTION
#KEYWORDS('derivatives', 'numerical calculation')
# Differentiation -- calculate numerically


## DBsubject('WeBWorK')
## DBchapter('WeBWorK Tutorial')
## DBsection('WeBWorK Tutorial')
## Date('12/13/2009')
## Author('Darwyn Cook')
## Institution('')
## TitleText1('Calculus: Early Transcendentals')
## EditionText1('8')
## AuthorText1('Anton')
## Section1('12.3')
## Problem1('')

#ENDDESCRIPTION

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGauxiliaryFunctions.pl",
           "MathObjects.pl");

TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

Context("Numeric")->variables->add(y=>'Real');
Context()->{format}{number} = "";
#########################################################################
##
## Create the point at which we will estimate the partial deritvatives
##
$x1 = random(.001, .01,.0001);
$y1 = random(.001, .01,.0001);

#########################################################################
##
## Set dx and dy, first we check to see of the student has put in a value for 
## these, if not we set it at 0.0001

if (defined $inputs_ref->{'dx'} ) {
     $dx = $inputs_ref->{'dx'};
}
elsif (defined $in{'dx'} ) {
	$dx = $in{'dx'};
}
else {
	 $dx = .0001
}
## set increment value for y
if (defined $inputs_ref->{'dy'} ) {
     $dy = $inputs_ref->{'dy'};
}
elsif (defined $in{'dy'} ) {
	$dy = $in{'dy'};
}
else {
	 $dy = .0001
}


##########################################################################
##
## The function we are going to create the table for, along with the partial 
## derivative. $fdiru is used so that you can easily make the problem to 
## estimate the derivative in any direction.
##

$f = Formula("sin(x^2/y)");
$f->perlFunction('f');
$dfdy = $f->D('y');
$dfdy->perlFunction('dfdy');
$dfdyeval = $dfdy->eval(x=>$x1,y=>$y1);
$fdiru = Compute("$dfdyeval")->with(
  tolType=>'absolute', tolerance=>'.01');;


#########################################################################
##
## This is where we create the perl lists that will make up the table. We are
## going to have five rows of data. If you are using the BEGIN_TEXT/END_TEXT
## delimeters you cannot make the 
##

my $i;
@inputx  = ();
@inputy  = ();
@output1 = ();
@output2 = ();
@output3 = ();
@output4 = ();
@output5 = ();

foreach my $i (-2..2) {
push(@inputx,spf($x1+$i*$dx , "%2.8g") );
push(@inputy,spf($y1+(-$i)*$dy , "%2.8g") );
};

foreach my $i (-2..2) {
push(@output1, spf( f($x1+$i*$dx,$y1+2*$dy) , "%2.8g")     );
push(@output2, spf( f($x1+$i*$dx,$y1+1*$dy) , "%2.8g")     );
push(@output3, spf( f($x1+$i*$dx,$y1+0*$dy) , "%2.8g")     );
push(@output4, spf( f($x1+$i*$dx,$y1-1*$dy) , "%2.8g")     );
push(@output5, spf( f($x1+$i*$dx,$y1-2*$dy) , "%2.8g")     );};

# Present the text.

$len = 1;
$INPUTSPACEX = M3( qq! \\rule{${len}in}{.01in}!,
               qq!\begin{rawhtml}<INPUT TYPE = "TEXT" NAME="dx"
                  VALUE="$dx">\end{rawhtml}!,
              qq!<INPUT TYPE = "TEXT" NAME="dx" VALUE="$dx">!
              );
$INPUTSPACEY = M3( qq! \\rule{${len}in}{.01in}!,
               qq!\begin{rawhtml}<INPUT TYPE = "TEXT" NAME="dy"
                  VALUE="$dy">\end{rawhtml}!,
              qq!<INPUT TYPE = "TEXT" NAME="dy" VALUE="$dy">!
              );


$numcolumns = 1+scalar(@inputx);
BEGIN_TEXT
Given the following table:
$BR
\{begintable($numcolumns)\}
\{row("y\x",@inputx)\}
\{row(@inputy[0],@output1)\}
\{row(@inputy[1],@output2)\}
\{row(@inputy[2],@output3)\}
\{row(@inputy[3],@output4)\}
\{row(@inputy[4],@output5)\}
\{endtable()\}
$PAR
Estimate the value of \( \frac{\partial f}{\partial y}\vert_{($x1,$y1)} \approx\) \{&ans_rule(30)\} to within 0.1.
$PAR
To obtain more precise information about the value of \( f \) near \(
($x1,$y1) \) enter a  new increment value for 
$PAR
\(\Delta x =\) $INPUTSPACEX 
$PAR
\(\Delta y=\) $INPUTSPACEY 
$BR and then press the Submit Answer button.
$PAR
How will you tell when your increment is small enough to give you a good answer
 for the problem?
END_TEXT
ANS($fdiru->cmp);

COMMENT('Create a table of values for a function of two variables');
ENDDOCUMENT();        # This should be the last executable line in the problem.


