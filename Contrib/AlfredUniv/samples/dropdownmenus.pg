##DESCRIPTION
#
# File Created: 5/13/2008
# Last Modified: 5/13/2008
# Problem Author: Darwyn Cook
# WeBWorK Entry: 
# Location: Alfred University
#
##ENDDESCRIPTION

##KEYWORDS()
##

## DBsubject('WeBWorK')
## DBchapter('WeBWorK Tutorial')
## DBsection('WeBWorK Tutorial')
## Date('5/13/2008')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('Calculus: with Early Transcendentals')
## EditionText1('8')
## AuthorText1('Anton')
## Section1('')
## Problem1('')

DOCUMENT();

# Load the macro file to create graphs.
loadMacros("PGgraphmacros.pl");
# Load whatever macros you need for the problem
loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGauxiliaryFunctions.pl",
           "PGgraphmacros.pl",
           "MathObjects.pl");
 
## Show partial correct answers
$showPartialCorrectAnswers = 1;
## Display the problem information
TEXT(beginproblem());

## This is a fancy way to implement the possible answers for the drop down menu.
## First we have to define the character strings that we will use in the menu. ## We also need to define string variables for these strings, although 
## technically we only need a variable for the correct answer.
Context()->strings->are(true=>{},false=>{});
$correct = String(true);
$incorrect = String(false);

Context()->texStrings;
BEGIN_TEXT
2+2 = 4 \{ pop_up_list([$correct->string,$incorrect->string]) \}
END_TEXT
Context()->normalStrings;
ANS($correct->cmp);
COMMENT('This problem shows how to implement a drop-down menu for an answer blank using math objects.');
ENDDOCUMENT();
