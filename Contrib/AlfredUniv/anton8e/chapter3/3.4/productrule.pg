##DESCRIPTION
#
# File Created: 6/6/2008
# Last Modified: 9/1/2011
# Problem Author:Darwyn Cook
# Location: Alfred University
#
##ENDDESCRIPTION

##KEYWORDS('Derivative','Product','rule')
##

## DBsubject('Calculus')
## DBchapter('Differentiation')
## DBsection('The Product and Quotient Rules')
## Date('9/1/2011')
## Author('Darwyn Cook')
## Institution('Alfred University')
## TitleText1('Calculus: with Early Transcendentals')
## EditionText1('8')
## AuthorText1('Anton')
## Section1('3.4')
## Problem1('1')

DOCUMENT();

# Load whatever macros you need for the problem
loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "MathObjects.pl",
           "contextFraction.pl",
           "parserMultiAnswer.pl",
           "Alfredmacros.pl");
 
## Show partial correct answers
$showPartialCorrectAnswers = 1;
## Display the problem information
TEXT(beginproblem());

## Declare Variables
Context("Numeric");
Context()->reduction->set('(-x)+y'=>0,'(-x)-y'=>0);

## Function Definition
$a0 = Compute(non_zero_random(-10,10));
$a1 = Compute(random(2,9));
$a2 = Compute(non_zero_random(-10,10));
$b0 = Compute(non_zero_random(-10,10));
$b1 = Compute(random(2,9));
$b2 = Compute(non_zero_random(-10,10));

if ($b2 == $a2){$b2++;};

$n1= Compute(random(0,3));
$n2 = Compute(random(4,6));
$n3 = Compute(random(7,9));

$polynomial = 1;
$rational = 2;
$exponential = 3;
$logarithmic = 4;
$trig = 5;
$inversetrig = $#Functions;

$functiontype = $polynomial;


@Functions = (Formula("$a0+$a1*x+$a2*x^2")->reduce,
Formula("$b0*x^($n1)+$b1*x^($n2)+$b2*x^($n3)")->reduce,
Formula("sqrt(x^(2*$n1+1))")->reduce,
Formula("1/sqrt(x^(2*$n2+1))")->reduce,
Formula("e^($a0*x)")->reduce,
Formula("($a1)^(x)")->reduce,
Formula("ln($a2*x)")->reduce,
Formula("cos($a1*x)")->reduce,
Formula("sin($a1*x)")->reduce,
Formula("tan($a1*x)")->reduce,
Formula("cot($a1*x)")->reduce,
Formula("sec($a1*x)")->reduce,
Formula("csc($a1*x)")->reduce,
Formula("asin($b1*x)")->reduce,
Formula("acos($b1*x)")->reduce,
Formula("atan($b1*x)")->reduce); 

@Functiontype = (-1,1,3,5,6,12,$#Functions); # Gives the index of the last function of a certain type from the list Function.

$function1 = Compute(random($Functiontype[$functiontype-1]+1,$Functiontype[$functiontype]));

# generate a list of indices not equal to the first chosen function.
@Function2 = ();
for (my $i = 0; $i <= $functiontype; $i++)
    {if ($i != $function1) {push(@Function2,$i);};
    };
$function2 = $Function2[random(0,$#Function2)];


$f = $Functions[$function1];
$g = $Functions[$function2];
$h = $f*$g;
$df = $f->D('x');
$dg = $g->D('x');
$dh = $h->D('x');

#### And now we check for all of the myriad ways they may have plugged these functions in
$productrulechecker = MultiAnswer($df,$g,$f,$dg)->with(
  singleResult => 0,
  allowBlankAnswers => 1,
  checker => ~~&product_Rule_cmp #Found in Alfredmacros.pl
);

Context()->texStrings;
BEGIN_TEXT
\(h = $h\). Then \(h=fg\) where
$BR 
\(f\) = \{ans_rule\}
$BR
and
$BR
\(g\) = \{ans_rule\}
$BR
$BR
$BBOLD NOTE: $EBOLD WeBWorK will automatically mark the next four blanks wrong  unless they all have answers in them.
$BR
$BR
Using the product rule
 \(\>h'(x) = \>\) \{$productrulechecker->ans_rule(20)\}*\{$productrulechecker->ans_rule(20)\}+\{$productrulechecker->ans_rule(20)\}*\{$productrulechecker->ans_rule(20)\} = \{ans_rule(60)\}.
$BR
END_TEXT
Context()->normalStrings;
ANS($f->cmp);
ANS($g->cmp);

ANS($productrulechecker->cmp());

ANS($dh->cmp);
ENDDOCUMENT();
