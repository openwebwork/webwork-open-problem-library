##DESCRIPTION
#
# File Created: 
# Last Modified: 5/13/2008
# Problem Author: 
# WeBWorK Entry: 
# Location: 
#
##ENDDESCRIPTION

##KEYWORDS()
##

## DBsubject('WeBWorK')
## DBchapter('WeBWorK Tutorial')
## DBsection('Alfred Samples')
## Date('')
## Author('')
## Institution('Rochester')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')


&DOCUMENT();

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGnumericalmacros.pl",
           "PGauxiliaryFunctions.pl",
           "MathObjects.pl"
); 

TEXT(beginproblem());

## By default numbers are displayed at 6 decimal places of accuracy, this flag
## displays them in their full precision.
Context()->{format}{number} = "";

# define function to be evaluated
$a= random(1,3,.1);
$b= random(-4,4,.1);
$c = random(-4,4,.1);
$x0= 0;
$x = non_zero_random(-2,2,0.1);
$function = Formula("$a*x^2+$b*x +$c");
$f = $function->perlFunction;
$f0 = Real($function->eval(x=>$x));

## There are two sections of code now to create the oracle function. The first
## section is to create a cubic spline approximation to the function that 
## can be passed to the html code that actually prints the oracle function.

## Section 1: Creating the cubic spline approximation to f.

$llimit = -5; $rlimit = 5;
my $num_of_intervals = 500;  # number of interpolation points
my $delta =  ($rlimit-$llimit)/($num_of_intervals); 
my (@x_values, @y_values);
foreach my $i (0..$num_of_intervals) {
	my $x = $llimit + $delta*$i;
	my $y = &$f($x)->value;
	push(@x_values, $x); push(@y_values,$y);
}

($t_ref, $a_ref, $b_ref, $c_ref, $d_ref) = create_cubic_spline (~~@x_values, ~~@y_values);

$f_approx = cubic_spline(~~@x_values, ~~@y_values);

#calculate a javaScript runtime cubic spline representation of this function.

HEADER_TEXT(javaScript_cubic_spline(~~@x_values,~~@y_values, name => 'func', llimit => -5, rlimit => 5)  );

## End cubic spline creation.



# A warning that we are using javaScript
TEXT(M3("",
"\begin{rawhtml}
<NOSCRIPT> This problem requires that Java Script be enabled </NOSCRIPT> \end{rawhtml}
",
"<NOSCRIPT> This problem requires that Java Script be enabled </NOSCRIPT>"
));

Context()->texStrings;
BEGIN_TEXT
One view of functions is that they are input/output machines. Although we generally see functions from a table, a graph, or from a formula, webwork gives us another alternative: you type in the input in the x column, hit the f(x) button, and webwork tells you the corresponding output. This emphasizes the input/output nature of functions; because webwork is behaving like an \{htmlLink("http://en.wikipedia.org/wiki/Oracle","oracle") \} these are called oracle functions. Now for the actual question:
$BR
$BR
Use the oracle function below to compute \(f($x)\) = \{$f0->ans_rule()\}
END_TEXT
Context()->normalStrings;

ANS($f0->cmp );  

## This section is the javascript to print the oracle function. 

$javaScript2 = begintable(3) .
               MODES(HTML =>q{<TR>
					<TH>x</TH><TH></TH><TH>f(x)</TH>
					<TR>},
					TeX => "x & \(\rightarrow\) & f(x)\\"
				) .
				row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
				    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->"  
                        OnClick="this.form.Output.value=func(this.form.Input.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output"   Size="30">}, TeX => 'result: \(f(x)\)')
				) .
endtable();

TEXT($javaScript2);      

## End the javascript printing section.
      	
&ENDDOCUMENT;

