## DESCRIPTION
## Calculus 1, use the idea of left and right limits to determine if the limit exists
## ENDDESCRIPTION


## DBsubject(Calculus - single variable)
## DBchapter(Limits and continuity)
## DBsection(Finding limits using graphs)
## Date(06/12/2018)
## Institution(Community College of Denver, Colorado Community College System)
## Author(Teresa Adams)
## KEYWORDS('calculus', 'limit laws')


###########################
#  Initialization

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "AnswerFormatHelp.pl",
  "PGML.pl",
  "PGcourse.pl",
  "parserAssignment.pl",
  "PGchoicemacros.pl",
  "parserPopUp.pl",
  "PGgraphmacros.pl",
  "scaffold.pl",
  "contextLimitedPoint.pl",
  "contextFraction.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;
$refreshCachedImages=1;
Parser::Number::NoDecimals();

###########################
#  Setup
Context("Fraction-NoDecimals");


########## First set of graphs ##############
# the leftside of the piecewise function
$m = non_zero_random(-4,4,1); #slope
$b = non_zero_random(-4,4,1); #intercept
$f_left = Formula("$m*x+$b")->reduce(); 

# the rightside of the piecewise function
$a = non_zero_random (-1, 1, 1); # vertical reflection 
$h = non_zero_random (-1, 1, 1); # horizontal translation 
$d = non_zero_random(-4, 4, 1); # vertical translation
$f_right = Formula("$a*(x - $h)^2 +$d")->reduce(); 

########## second set of graphs ##############
# the leftside of the piecewise function
$m1 = non_zero_random(-4,4,1); #slope
$b1 = non_zero_random(-4,4,1); #intercept
$f_left1 = Formula("$m1*x+$b1")->reduce(); 

# the leftside of the piecewise function
$m2 = non_zero_random(-4,4,1); #slope
if ($m2==$m1) {
  $m2 = -$m1; # making sure slopes are not equal
}
$b2 = non_zero_random(-4,4,1); #intercept
if ($b2 ==$b1) {
  $b2 = $b1 +1; #making sure y-intercepts are not equal
}
$f_right1 = Formula("$m2*x+$b2")->reduce(); 

# $c is the break in the piecewise function
$c = random (-3, 3, 1);

# this is making sure the vertex of the quadratic is shown on the graph
if ($h < $c) {
  $c = $h - 1;
}

# $x_1 is the additional value for the limit
$x_1 = non_zero_random(-2, 2, 1);

# this is making sure the break in the peicewise is not the additional value for the limit
if ($c == $x_1) {
  $x_1 = $x_1+1;
}

######## first graph ############
# setting up the min/max y-value for the graph setting
$L_eval = $f_left->eval(x=>$c);
$R_eval = $f_right->eval(x=>$c);

if ($x_1 < $c) {
 $L_x1 = $f_left->eval(x=>$x_1);
 $R_x1 = $R_eval;
 } else {
 $R_x1 = $f_right->eval(x=>$x_1);
 $L_x1 = $L_eval;
}

@seq=($L_eval, $R_eval, $L_x1, $R_x1); # building the sequence
@ysorted = PGsort( sub {$_[0] < $_[1]} , @seq ); #sorting the sequence

# this is making sure the y-axis is shown on the graph
if ($ysorted[0] > 2) {
  $ymin = Real(-1);
 } else {
  $ymin = $ysorted[0] - 2;
}

if ($ysorted[3] < -3) {
  $ymax = Real(3);
 } else {
 $ymax = $ysorted[3]+4;
}

$ygrid = $ymax - $ymin;

# setting up the min/max x-value for the graph setting
@seq=($c, $x_1, $h); # building the sequence
@xsorted = PGsort( sub {$_[0] < $_[1]} , @seq ); #sorting the sequence

$xmin = $xsorted[0] - 2;
$xmax = $xsorted[2]+2;


$xgrid = $xmax - $xmin;

# setting up the dynamic graph
$gr = init_graph($xmin-2,$ymin-2,$xmax+2,$ymax+2,
axes=>[0,0],
grid=>[$xgrid+4, $ygrid+4],
size=>[500,500]
);

$gr -> lb('reset'); # remove default labels

# axes labels
$gr->lb( new Label($xmax-0.2,0,'x', 'black', 'center', 'bottom'));
$gr->lb( new Label(0.1,$ymax+2-0.2,"f(x)", 'black', 'left', 'middle'));
foreach my $i (-1..1) {
  $gr->lb( new Label($i,0, $i, 'black', 'center', 'top'));
  $gr->lb( new Label(-0.1,$i, $i, 'black', 'right', 'middle'));
}
# setting up the right side of the piecewise function
add_functions($gr, "$f_left for x in <-8,$c]".
  " using color:blue and weight:2");

add_functions($gr, "$f_right for x in ($c,8>".
  " using color:blue and weight:2");

######## second graph ############
# setting up the min/max y-value for the graph setting
$L_eval1 = $f_left1->eval(x=>$c);
$R_eval1 = $f_right1->eval(x=>$c);

if ($x_1 < $c) {
 $L1_x1 = $f_left1->eval(x=>$x_1);
 $R1_x1 = $R_eval1;
 } else {
 $R1_x1 = $f_right1->eval(x=>$x_1);
 $L1_x1 = $L_eval1;
}

@seq1=($L_eval1, $R_eval1, $L1_x1, $R1_x1); # building the sequence
@ysorted1 = PGsort( sub {$_[0] < $_[1]} , @seq1 ); #sorting the sequence

# this is making sure the y-axis is shown on the graph
if ($ysorted1[0] > 2) {
  $ymin1 = Real(-1);
 } else {
  $ymin1 = $ysorted1[0] - 2;
}

if ($ysorted1[3] < -3) {
  $ymax1 = Real(1);
 } else {
 $ymax1 = $ysorted1[3]+2;
}

$ygrid1 = $ymax1 - $ymin1;

# setting up the min/max x-value for the graph setting
if ($x_1 < $c) {
  $xmin1 = $x_1 - 2;
  $xmax1 = $c+2;
 } else {
  $xmin1 = $c - 2;
  $xmax1 = $x_1+2;
}

$xgrid1 = $xmax1 - $xmin1;

# setting up the dynamic graph
$gr1 = init_graph($xmin1,$ymin1,$xmax1,$ymax1,
axes=>[0,0],
grid=>[$xgrid1, $ygrid1],
size=>[500,500]
);

$gr1 -> lb('reset'); # remove default labels

# axes labels
$gr1->lb( new Label($xmax1-0.2,0,'x', 'black', 'center', 'bottom'));
$gr1->lb( new Label(0.1,$ymax1-0.2,"g(x)", 'black', 'left', 'middle'));
foreach my $i (-1..1) {
  $gr1->lb( new Label($i,0, $i, 'black', 'center', 'top'));
  $gr1->lb( new Label(-0.1,$i, $i, 'black', 'right', 'middle'));
}
# setting up the right side of the piecewise function
add_functions($gr1, "$f_left1 for x in <-8,$c]".
  " using color:blue and weight:2");

add_functions($gr1, "$f_right1 for x in ($c,8>".
  " using color:blue and weight:2");

$in=time();
$gr->gifName($gr->gifName()."$in");
$gr1->gifName($gr1->gifName()."$in");

###### answers
# the limits at $c right
$form_r = $f_right + $f_right1;
$answer[1] =  $form_r ->eval(x=>$c);

# the limits at $c left
$form_l = $f_left -3*$f_left1;
$answer[2]  = $form_l->eval(x=>$c);

# the limit at random $x_1
if ($x_1<$c) {
 $form_x1 = ($f_left*$f_left1)/3;
 $answer[3] = $form_x1->eval(x=>$x_1);
 } else {
 $form_x1 = ($f_right*$f_right1)/3;
 $answer[3] = $form_x1->eval(x=>$x_1);
}




Context()->texStrings;

###########################
#  Main text


BEGIN_PGML

Use the figures below, which gives a graph of the function `f(x)` and `g(x)`,
and the limit laws to evaluate each limit.  Give exact answers.


 `f(x):` [@ image(insertGraph($gr), width=>300, height=>300), @]*   `g(x):` [@ image(insertGraph($gr1), width=>300, height=>300), @]* 

END_PGML

BEGIN_TEXT

$HR
$BBOLD Note: $EBOLD $BITALIC You can click on the graph to enlarge the image.$EITALIC
$HR

END_TEXT

BEGIN_PGML

(a)
`\lim_{x \to [$c]^+} (f(x)+g(x))` = [________] [@ AnswerFormatHelp("limits") @]*

(b)
`\lim_{x \to [$c]^-} (f(x)-3g(x))` = [________]

(c)
`\lim_{x \to [$x_1]} ((f(x)g(x))/3)` = [________]


END_PGML

############################
# Answer evaluation 

Context()->normalStrings;

ANS($answer[1] ->cmp() );
ANS($answer[2] ->cmp() );
ANS($answer[3] ->cmp() );


COMMENT('MathObject version. Uses PGML.');


ENDDOCUMENT();


