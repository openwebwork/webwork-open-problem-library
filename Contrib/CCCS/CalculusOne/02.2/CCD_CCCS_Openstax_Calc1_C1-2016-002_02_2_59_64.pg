## DESCRIPTION
## Calculus 1, use the idea of left and right limits to determine if the limit exists
## ENDDESCRIPTION


## DBsubject(Calculus - single variable)
## DBchapter(Limits and continuity)
## DBsection(Finding limits using graphs)
## Date(06/12/2018)
## Institution(Community College of Denver, Colorado Community College System)
## Author(Teresa Adams)
## KEYWORDS('calculus', 'limit')


###########################
#  Initialization

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "AnswerFormatHelp.pl",
  "PGML.pl",
  "PGcourse.pl",
  "parserAssignment.pl",
  "PGchoicemacros.pl",
  "parserPopUp.pl",
  "PGgraphmacros.pl",
  "scaffold.pl",
  "contextLimitedPoint.pl",
  "PGessaymacros.pl",
);


TEXT(beginproblem());
$showPartialCorrectAnswers = 1;
$refreshCaschedImages = 0;
$refreshCachedImages=1;

###########################
#  Setup

Context("Numeric");

# allowing answers that are within 1%
Context()->flags->set(tolerance => 0.01);

# having answers to 4 decimal places AND reduced
Context()->{format}{number} = "%.4f#"; 

# the leftside of the piecewise function
$m1 = non_zero_random(-4,4,1); #slope
$b1 = non_zero_random(-4,4,1); #intercept
$f_left = Formula("$m1*x+$b1")->reduce(); 

# the middle of the piecewise function
$m2 = non_zero_random(-4,4,1); #slope
$f_middle = Formula("$m2*x")->reduce(); 

# the rightside of the piecewise function
$m3 = non_zero_random(-4,4,1); #slope
$b3 = non_zero_random(-4,4,1); #intercept
$f_right = Formula("$m3*x+$b3")->reduce(); 

# $c1 is the break in the piecewise function
$c1 = random (-2, 0, 1);

# $c2 is the break in the piecewise function
$c2 = random (0, 2, 1);

# making sure the break points are not the same
if ($c1 == $c2) {
  $c2 = $c1 + 2;
}

# picking an x on the left of $c1 and an x on the right of x2
$x1 = $c1 - 1;
$x2 = $c2 +1;

# setting up the min/max y-value for the graph setting
$L_eval = $f_left->eval(x=>$c1);
$L_x1 = $f_left->eval(x=>$x1);
$ML_eval = $f_middle -> eval(x=>$c1);
$MR_eval = $f_middle -> eval(x=>$c2);
$R_eval = $f_right->eval(x=>$c2);
$R_x2 = $f_right->eval(x=>$x2);


@seq=($L_eval, $L_x1, $ML_eval, $MR_eval, $R_eval, $R_x2); # building the sequence
@ysorted = PGsort( sub {$_[0] < $_[1]} , @seq ); #sorting the sequence

# this is making sure the y-axis is shown on the graph
if ($ysorted[0] > 2) {
  $ymin = Real(0);
 } else {
  $ymin = $ysorted[0] - 2;
}

if ($ysorted[5] < -3) {
  $ymax = Real(0);
 } else {
 $ymax = $ysorted[5]+2;
}

$ygrid = $ymax - $ymin;

# setting up the min/max x-value for the graph setting
$xmin = $x1;
$xmax = $x2;

$xgrid = $xmax - $xmin;

# setting up the dynamic graph
$gr = init_graph($xmin,$ymin,$xmax,$ymax,
axes=>[0,0],
grid=>[$xgrid, $ygrid],
size=>[400,400]
);

# setting up the right side of the piecewise function
add_functions($gr, "$f_left for x in <$xmin,$c1)".
  " using color:blue and weight:2");

add_functions($gr, "$f_middle for x in [$c1,$c2]".
  " using color:blue and weight:2");

add_functions($gr, "$f_right for x in ($c2,$xmax>".
  " using color:blue and weight:2");

# the the limits at $c1 left
$answer[1] =  $f_left->eval(x=>$c1);

# the the limits at $c1 middle
$answer[2] =  $f_middle->eval(x=>$c1);

# the the limits at $c2 middle
$answer[4] =  $f_middle->eval(x=>$c2);

# the the limits at $c2 right
$answer[5]  = $f_right->eval(x=>$c2);

# the two sided limit at $c1
if ($answer[1] == $answer[2]) {
  $answer[3] = $answer[1];
 } else {
  $answer[3]=List("DNE");
}

# the two sided limit at $c2
if ($answer[4] == $answer[5]) {
  $answer[6] = $answer[4];
 } else {
  $answer[6]=List("DNE");
}

Context()->strings->add(
  "Does Not Exist"=>{alias=>"DNE"}
);


Context()->texStrings;

###########################
#  Main text


BEGIN_PGML

Use the figure below, which gives a graph of the function `f(x)`,
to give values for the indicated limits.  If a limit does not exist,
enter DNE.

[@ image(insertGraph($gr), width=>400, height=>400), @]*   

END_PGML

BEGIN_TEXT

$HR
$BBOLD Note: $EBOLD $BITALIC You can click on the graph to enlarge the image.$EITALIC
$HR

END_TEXT

BEGIN_PGML


(a)
`\lim_{x \to [$c1]^-} f(x)` = [________] [@ AnswerFormatHelp("limits") @]*

(b)
`\lim_{x \to [$c1]^+} f(x)` = [________]

(c)
`\lim_{x \to [$c1]} f(x)` = [________]

(d)
`\lim_{x \to [$c2]^-} f(x)` = [________]

(e)
`\lim_{x \to [$c2]^+} f(x)` = [________]

(f)
`\lim_{x \to [$c2]} f(x)` = [________]

END_PGML

############################
# Answer evaluation 

Context()->normalStrings;

ANS($answer[1] ->cmp() );
ANS($answer[2] ->cmp() );
ANS($answer[3] ->cmp() );
ANS($answer[4] ->cmp() );
ANS($answer[5] ->cmp() );
ANS($answer[6] ->cmp() );

COMMENT('MathObject version. Uses PGML.');


ENDDOCUMENT();


