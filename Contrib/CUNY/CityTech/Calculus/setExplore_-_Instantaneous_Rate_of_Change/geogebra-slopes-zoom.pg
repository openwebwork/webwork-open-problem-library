##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS('calculus', '', '')

## DBsubject('Calculus - single variable')
## DBchapter('')
## DBsection('')
## Date('6/15/2019')
## Author('K. Andrew Parker')
## Institution('CityTech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "AppletObjects.pl",
   "niceTables.pl",
   "parserMultiAnswer.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

#######################
### ggbApplet MultiAns
#######################
#
#  Make a subclass of MultiAnswer
#
package myMultiAnswer;
our @ISA = ('MultiAnswer');

sub new {
  my $self = shift;
  my $ma = $self->SUPER::new(@_);
  $ma->{part} = 1;
  $ma->{answerName} = 'answerBox';
  $ma->{answerNames}{0} = $ma->{answerName};
  $ma->{id} = $MultiAnswer::answerPrefix.$ma->{answerName};
  $ma->{singleResult} = 1;
  $ma->{namedRules}  = 1;
  return $ma;
}

sub ANS_NAME {
  my $self = shift;
  my $i = shift;
  $self->{answerNames}{$i} = ($i == 0 ? $self->{answerName} : $self->{id}.'_'.$i);
  return $self->{answerNames}{$i};
}

package main;

Context("Numeric");
Context()->flags->set(
  reduceConstants=>0,
  reduceConstantFunctions=>0,
  tolerance=>10**(-10),
  tolType=>'absolute'
);


#### WARNING: mind your domain with f(x) - we need +/-1 around (A,f(A)) ####

# $f = Formula("x - cos(x)");
#$D = list_random(2,4,5,10);
#do { $R = random(2,10,1); } until ( $R != 8 );
# $f = Formula("1/$D (x^3 - $R)");

$N = list_random("pi","e");
$D = random(0.55,0.85,0.05);
$f = Formula("$N/sqrt($D x)");
$ftext = "$N/sqrt($D x)";

$A = random(2,3,1); #randomize this later, along with f(x)
$m = $f->D('x')->eval(x=>$A); # this is what students will estimate

# this is why $A needs to be chosen with at least one unit
# of separation from any domain issues for f(x)
@L = ($A-1);
@R = ($A+1);

# x approaches $A by a factor of four at each increment from both directions
for my $i (1..5) {
  $L[$i] = (3*$A + $L[$i-1])/4;
  $R[$i] = (3*$A + $R[$i-1])/4;
}

# randomly assign the student to approach from the left / right
$LR = random(0,1,1);
@x = $LR ? @R : @L; # $LR==1 then "right", $LR==0 then "left"

# come back to this!
$multiAns = myMultiAnswer->new(Real(5),Real($m))->with(
  checkTypes=>0,
  singleAnswer=>1,
  checker => sub {
    my ( $correct, $student, $self, $ans_hash ) = @_;
    my ( $increment, $slopeStu ) = @{$student};
    my ( $requiredInc, $slopeActual ) = @{$correct};
    my $error = abs($slopeStu - $slopeActual);
    ## 10 iterations at least...
    if ( $increment < $requiredInc ) {
      Value::Error("You haven't completed enough secant slopes. <BR>(I hope you have been writing down your work.)");
    }
    if ( $error > 0.005 ) { 
      Value::Error("Take a look at your table of slopes. <BR>Your estimation for the instantaneous slope does not seem to match their pattern.");
    }
    return 1;
  }
);

######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the
# command end command
# so that they don't get in the way
###################################


$appletName = "ggbfoo";

$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "",
   codebase                 => "",
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => 'configure',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   width                 => 500,              # may want to modify width
   height                => 500,              # may want to modify height
  # mayscript             => "true",
   debugMode             => 0,   # set debugMode to 0 for no debug
                                              # to 1 to make xml representation visible
                                              # to 2 to add alerts detailing progression
                                              # through the applet
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   #submitActionScript => '',
   selfLoading           => 1,
   params     => GEOGEBRA_PARAMS(),# paste parameters in

);


###############################################
#
#  PNG picture of GeoGebra applet for hardcopy

# $im = image( "AF7-c".$c."-d".$d.".png", width=>486, height=>335, tex_size=>900 );


##################################
# Setup GeogebraWebApplet --
###################################

###############################################
#
#  For persistence of GeoGebra applet state 
#  when answers are submitted or page is refreshed.
#  Uses JavaScript interface to GeoGebra.

HEADER_TEXT(
qq! 
<script language="javascript">
   function ggbOnInit(param) {
       if (param == "$appletName") {
           applet_loaded(param,1);  // report that applet is ready. 
           ww_applet_list[param].safe_applet_initialize(2);
       }
   } 
</script>
<noscript>For this question to work properly, 
you must enable JavaScript, or use another browser 
(or computer) on which JavaScript works.</noscript>
!);


#######################################################
#
#  For setting initial values in GeoGebra from WeBWorK
#  Uses JavaScript interface to GeoGebra.

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setAppletCoefficients() {
   var applet=getApplet("$appletName");   // alert("Updating coefficients");
   if (typeof(applet)!="undefined") {
     if (typeof(applet.setValue)!="undefined") {
     
     ////////////////////////////////////////////////////////////////
     //  List the values of the parameters to be set in the applet here
     
          applet.setPerspective("G");
          applet.setRounding("8d");
          applet.setGridVisible('true');
          // Set function f(x)
          applet.evalCommand("f=$ftext"); 
          // Create the list of points along which we approach $A
          applet.evalCommand("P1 = ($x[0],f($x[0]))");
          applet.evalCommand("P2 = ($x[1],f($x[1]))");
          applet.evalCommand("P3 = ($x[2],f($x[2]))");
          applet.evalCommand("P4 = ($x[3],f($x[3]))");
          applet.evalCommand("P5 = ($x[4],f($x[4]))");
          applet.evalCommand("P6 = ($x[5],f($x[5]))");
          // tell our app how many successful zooms we've completed.
          applet.evalCommand("increment = 0");
          // Set the point where we want to find the tangent slope
          applet.evalCommand("A=($A,f($A))");
          // Create the point that will "slide" over the P_i
          applet.evalCommand("P=P1");
          // Create the secant line whose slope students will find
          applet.evalCommand("L = Line(A,P)");
          applet.setLineStyle("L",1);
          applet.setColor("L",200,0,0);
          applet.setColor("A",200,0,0);
          applet.setColor("P",200,0,0);
          applet.setColor("f",0,75,150);
          // get the coordinates of our outermost points
          var xA = applet.getXcoord("A");
          var xP = applet.getXcoord("P");
          var yA = applet.getYcoord("A");
          var yP = applet.getYcoord("P");
          // find the maximum dimension: height or width 
          // and pad it by 10% in both directions
          var dim = Math.max(Math.abs(xA-xP),Math.abs(yA-yP));
          dim *= 1.2;
          // find the center and then the coordinates for our window
          var midX = 0.5*(xA + xP);
          var midY = 0.5*(yA + yP);
          var xMin = midX - 0.5*dim;
          var xMax = midX + 0.5*dim;
          var yMin = midY - 0.5*dim;
          var yMax = midY + 0.5*dim;
          // Set the window size
          applet.setCoordSystem(xMin,xMax,yMin,yMax);
          // show the coordinates for the points that the student needs
          // as they will NOT know the function's expression explicitly!
          applet.setLabelVisible("A",true);
          applet.setLabelVisible("P",true);
          applet.setLabelStyle("A",2);
          applet.setLabelStyle("P",2);
     } else {
          setTimeout("setAppletCoefficients()", 1000);
     }
   } else {
      setTimeout("setAppletCoefficients()",1000);
   }
}
ww_applet_list["$appletName"].setConfig = function() {setAppletCoefficients()};
</script>
END_SCRIPT

HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );

<script language="javascript">

function checkSlope(slopeStu) {
    var applet = getApplet("$appletName");
    
    var inc = applet.getValue("increment");
    if ( inc >= 5 ) {
      console.log("student isn't moving on to tangent slope");
      alert("You've found enough secant slopes - now estimate the instantanous rate of change and submit your answer.");
      return false;
    }
    
    if ( slopeStu == "" ) {
      console.log("blank entry");
      alert("It looks like you forgot to enter a slope. Please enter the secant slope as a decimal value, accurate to at least the ten-thousandths place.");
      return false;
    }
    // regular expression tests for non-numeric or decimal characters
    var re = /[^0-9.\-]/g; 
    if ( re.test(slopeStu) ) {
      console.log("invalid characters in student answer");
      alert("Please enter your answer as a single decimal value, accurate to at least the ten-thousandths place.");
      return false;
    }
    
    // now that we've validated the string contents of the student
    // answer, we can proceed with numerical evaluation...
    slopeStu = parseFloat(slopeStu);
    var xA = applet.getXcoord("A");
    var yA = applet.getYcoord("A");
    var xP = applet.getXcoord("P");
    var yP = applet.getYcoord("P");
    var slopeActual = (yP-yA)/(xP-xA);

    if ( slopeActual*slopeStu < 0 ) {
      console.log("slope in the wrong direction.");
      alert("Does your slope make sense? Look at the graph, is the secant line increasing or decreasing? What does that mean for your slope?");
      return false;
    }
    if ( Math.abs(slopeActual-slopeStu) > 0.1 ) {
      console.log("not very close, error > 0.1");
      alert("You need to compute the secant slope with an accuracy of at least four decimal places. Please check your work and try again.");
      return false;
    }
    if ( Math.abs(slopeActual-slopeStu) > 0.00005 ) {
      console.log("close but not enough precision");
      alert("You're close! Re-compute the slope, but be more precise. You need to be accurate to at least four decimal places.");
      return false;
    }
    
    // we made it through - must be correct!
    if (inc==0) {
      createTable(); // first time through, create the table
    }
    inc++; // inc now matches our current count of correct repsonses
    // add this response to the table of correct answers
    extendTable(inc, xP, slopeStu);
    
    // now update the applet for the next round
    applet.setValue("increment",inc);
    updateGraph(inc); // coloring, shift to the next point
    zoomIn(inc);
    
    // inform the student of their next steps
    yA = yA.toFixed(5); // shorten our decimal for display
    if (inc < 5) {
      alert("Good work! Now let's find the secant slope for a point closer to ("+xA+","+yA+").");
    } else {
      alert("Excellent! Now use your table of secant slopes to estimate a value for the instantaneous rate of change at ("+xA+","+yA+").");
    }
    return;
}

function createTable() {
    console.log("creating table.");
    // find the placeholder for the student table
    var tableDiv = document.getElementById("studentTable");
      
    // generate the table and its sub-sections
    var table = document.createElement("table");
    var tableBody = document.createElement("tbody");
    var tableHead = document.createElement("thead");
      
    // create a row that will be our header
    var text = ["step #", "x-coordinate", "slope"];
    var row = document.createElement("tr");
    for (var j = 0; j <= 2; j++) {
      var cell = document.createElement("td");
      var cellText = document.createTextNode(text[j]);
      cell.appendChild(cellText);
      row.appendChild(cell);
    }
      
    // glue everything together and insert into DOM
    tableHead.appendChild(row);
    table.appendChild(tableHead);
    table.appendChild(tableBody);
    tableDiv.append(table);

    // Create our stylesheet
    var style = document.createElement('style');
    style.innerHTML =
    '#studentTable thead {' +
      'background-color: #005706;' +
      'color: #fff;' +
    '}' +

    '#studentTable tbody {' +
      'background-color: #53e65d;' +
    '}' +

    '#studentTable table {' +
      'border-collapse: collapse;' +
      'border: 2px solid rgb(200, 200, 200);' +
      'letter-spacing: 1px;' +
      'font-family: sans-serif;' +
      'font-size: .8rem;' +
    '}' +

    '#studentTable td,' +
    '#studentTable th {' +
      'border: 1px solid rgb(190, 190, 190);' +
      'padding: 5px 10px;' +
    '}' +

    '#studentTable td {' +
      'text-align: center;' +
    '}';

    // Get the first script tag
    var ref = document.querySelector('script');

    // Insert our new styles before the first script tag
    ref.parentNode.insertBefore(style, ref);

    return true;
}

function extendTable(i, xP, slope) {
    console.log("extending table with "+i+", "+xP+", "+slope+".");
    var tBody = document.getElementsByTagName("tbody")[0];
    
    // shorten values that could be overly long
    xP = parseFloat(xP.toFixed(5));
    slope = parseFloat(slope.toFixed(5));
    var text = [i, xP, slope];

    // create row, add cells as children
    var row = document.createElement("tr");
    for (var j = 0; j <= 2; j++) {
      var cell = document.createElement("td");
      var cellText = document.createTextNode(text[j]);
      cell.appendChild(cellText);
      row.appendChild(cell);
    }
    
    // add row to existing table
    tBody.appendChild(row);
    return;
}

function updateGraph(i) {
    console.log("updating graph.");
	var applet = $appletName;
    
    // create the secant line that will be left behind
    applet.setColor("P"+i,0,150,0);
    applet.evalCommand("L"+i+" = Line(A,P"+i+")");
    applet.setColor("L"+i,0,150,0);
    applet.setLineStyle("L"+i,3);
    
    // shift P on to the next P_i (and L along with it)
    i++;
    applet.evalCommand("P=P"+i);
    return;
}

function zoomIn(i) {
	var applet = $appletName;
    console.log("entered zoomIn.");
    var xA = applet.getXcoord("A");
    var xP = applet.getXcoord("P"+i);
    var yA = applet.getYcoord("A");
    var yP = applet.getYcoord("P"+i);
    // find the maximum dimension: height or width 
    // and pad it by 10% in both directions
    var dim = Math.max(Math.abs(xA-xP),Math.abs(yA-yP));
    dim *= 1.2;
    // find the center and then the coordinates for our window
    var midX = 0.5*(xA + xP);
    var midY = 0.5*(yA + yP);
    var xMin = midX - 0.5*dim;
    var xMax = midX + 0.5*dim;
    var yMin = midY - 0.5*dim;
    var yMax = midY + 0.5*dim;
    // Set the window size
    applet.setCoordSystem(xMin,xMax,yMin,yMax);
    // Blank out the entry fields
    jQuery("#slopeStu").val("");

    return true;
}
</script>

<script language="javascript">
function getAppletValues() {
    console.log("getAppletValues() entered");
	// get a handle for the applet object
	var applet = $appletName;
	var inc = applet.getValue("increment");
    return( inc ); 
}
 </script>
END_SCRIPT

###################################
#insert applet into body  -- this does not need to be changed
# except to adjust the insertion of the reinitialize_button or
# a hidden AnswerBox
###################################
$ggb_code = LayoutTable(
  [
    [ MODES(TeX=>'geogebraweb code', HTML=>$applet->insertAll(debug =>0, reinitialize_button => 0, includeAnswerBox=>1)),
      [ MODES(
        HTML => qq{<CENTER><B> Secant Slope: </B><BR> `m =` <INPUT TYPE="text" NAME="midXstu" ID="slopeStu" Value="" Size="10"><BR><BR><I> When you have computed the secant slope and typed it into the box above, press the button below to verify your answer and continue on to the next point.</I><BR><INPUT TYPE="button" VALUE="continue to the next point" OnClick='checkSlope(this.form.slopeStu.value)'></CENTER><BR><div id="studentTable"></div>}."Once you've recorded 5 correct secant slopes, type in an estimate for the instantaneous rate of change and press submit. $PAR $BCENTER $BBOLD instantaneous rate of change: $EBOLD $BR `m \approx` ".$multiAns->ans_rule(10)."$ECENTER", 
        TeX => '\fbox{Enter the secant slope.}'),rowcss=>'padding-top:2pt; vertical-align:top;'
      ]
    ]
  ],
  align => 'c p{100px}',
  center => 1
);

##############################################################
#
#  Text
#
#

BEGIN_PGML

>> ## Approaching the Instantaneous Rate of Change ## <<

### Note: ###

    Students will not be given the actual formula, but we show it here so that you realize the points and slopes will be transcendental.

[``` f(x) = [$f] ```]

### Warning: ###

    You should write down all your secant slopes. I have not yet worked out how best to save your progress in WeBWorK.

[$ggb_code]***

END_PGML

##############################################################
#
#  Answers
#
#

NAMED_ANS($multiAns->cmp);

BEGIN_PGML_HINT
END_PGML_HINT

BEGIN_PGML_SOLUTION
END_PGML_SOLUTION

sub GEOGEBRA_PARAMS {
    my $result = {
        appName=>"classic", # instead of using ggbbase64
        enableShiftDragZoom=>"false",
        showResetIcon=>"false" ,
        enableRightClick=>"false" ,
        enableLabelDrags=>"false",
        showMenuBar=>"false" ,
        showToolBar=>"false",
        showAlgebraInput=>"false",
        useBrowserForJS=>"true",
        #ggbbase64=>''
    };
    $result;
}

ENDDOCUMENT();        
