##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS('calculus', '', '')

## DBsubject('Calculus - single variable')
## DBchapter('')
## DBsection('')
## Date('6/15/2019')
## Author('K. Andrew Parker')
## Institution('CityTech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "parserMultiAnswer.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

Context("Numeric");
Context()->flags->set(
  reduceConstants=>0,
  reduceConstantFunctions=>0,
  tolerance=>10**(-25), 
  tolType=>'absolute');

Context()->strings->add(undefined=>{},undef=>{alias=>"undefined"});

$a = Real(random(-10,10,1));
$y = Real(random(-10,10,1));
$undef = String("undefined")->typeMatch($y);

@messages = (
  [-1, "Oh no! You can get much closer than that - try decimals, maybe?", 0],
  [-2, "You could do better with another attempt, yes?", 0.25],
  [-3, "Try again. You can manage better than this.",0.25],
  [-4, "This is okay, But you could do better, yeah?",0.5],
  [-5, "You are getting better, Try another?",0.5],
  [-6, "Nice Work! There's still room to get closer...",0.75],
  [-7, "Very Good! Can you get closer?",0.75],
  [-10, "Excellent!",1], # full credit for 91+
  [-24, "Perfect!",1],
);

$ans = MultiAnswer($a,$y)->with(
  singleResult=>0,
  checker => sub {
    my ($correct, $student, $ansHash) = @_;
    my ($in, $out) = @{$student};
    my ($domain, $const) = @{$correct};
    my $epsilon = abs($domain - $in);
    my $xScore = 0;
    # my ($acc,$eligible) = @$student; # student answer is passed as a list
    #
    # set the preview string to display the accuracy score
    # set the "correct answer" to display the requirements
    # 
#    $ansHash->{preview_latex_string} = "\text{epsilon: }$epsilon";
    $ansHash->{correct_ans_latex_string} = "\text{ $b - ans } < \(10^{-7}\)";
    #
    # invalidate the student answer if they gave the exact value
    #
    if ($epsilon == 0) {
      $ansHash->setMessage(1,"You must pick an x-value in the domain of f.");
      return [0,0];
    } elsif ($out != $const) {
      $ansHash->setMessage(2,"You do not have the correct value for f($in).");
    }
    my $yScore = ($out == $const)?1:0;
    # loop through messages to assign partial credit
    for my $data (@messages) {
      my ($exp, $msg, $nscore) = @$data;
      if ($epsilon >= 10**($exp)) {
        $ansHash->setMessage(1,$msg);
        $xScore = $nscore if defined $nscore;
        last;
      }
    }
    return [$xScore, $yScore]; # ansHash already contains the feedback
});

##############################################################
#
#  Text
#
#

BEGIN_PGML

relation to functions:  
* if x-values are removed from domain, then we have open intervals
* f(a) is undefined, but what about "near" x=a where f _is_ defined

example:  
[``f(x) = \dfrac{[$y](x - [$a])}{x - [$a]}``]  
or, in other notation:  
[``f(x) = \left\{
  \begin{array}{ll}
     [$y] & \quad x \neq [$a] \\
     \text{undefined} & \quad x = [$a]
  \end{array}
\right.``]

What is [`f([$a])`]? [_____]{$undef}

Select an [`x`]-value that _is_ in the domain of [`f`]:[__________]{$ans}  
and then evaluate [`f`] at your chosen [`x`]-value: [__________]{$ans}

What then can we conclude about [``\displaystyle \lim_{x \to [$a]} f(x)``]?

END_PGML

##############################################################
#
#  Answers
#
#

BEGIN_PGML_HINT
END_PGML_HINT

BEGIN_PGML_SOLUTION
END_PGML_SOLUTION

ENDDOCUMENT();        
