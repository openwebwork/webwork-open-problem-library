##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Trigonometry')
## DBchapter('Polar coordinates & vectors')
## DBsection('Polar and rectangular coordinates')
## Date('8/12/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "bizarroArithmetic.pl",
   "PGML.pl",
   "niceTables.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Complex");
Context()->flags->set(
    reduceConstants=>0,
    reduceConstantFunctions=>0,
    tolType=>'absolute',
    tolerance=>0.0005);

Context()->operators->set(
'+' => {class => 'bizarro::BOP::add', isCommand => 1},
'-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
'*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
' *' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'* ' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'/' => {class => 'bizarro::BOP::divide', isCommand => 1},
' /' => {class => 'bizarro::BOP::divide', isCommand => 1},
'/ ' => {class => 'bizarro::BOP::divide', isCommand => 1},
'//' => {class => 'bizarro::BOP::divide', isCommand => 1},
'**' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
'^' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
);

##############################################
#  Begin trig functions in degrees

Context()->functions->remove("cos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub cos {Parser::Function->call('cos',@_)} 
#  Add the new functions to the Context
Context()->functions->add( cos => {class => 'NewFunc', TeX => '\cos'}, );


Context()->functions->remove("sin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub sin {Parser::Function->call('sin',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sin => {class => 'NewFunc', TeX => '\sin'}, );


Context()->functions->remove("tan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180)/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub tan {Parser::Function->call('tan',@_)}
#  Add the new functions to the Context
Context()->functions->add( tan => {class => 'NewFunc', TeX => '\tan'}, );


Context()->functions->remove("sec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub sec {Parser::Function->call('sec',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sec => {class => 'NewFunc', TeX => '\sec'}, );


Context()->functions->remove("csc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub csc {Parser::Function->call('csc',@_)} 
#  Add the new functions to the Context
Context()->functions->add( csc => {class => 'NewFunc', TeX => '\csc'}, );


Context()->functions->remove("cot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180)/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub cot {Parser::Function->call('cot',@_)}
#  Add the new functions to the Context
Context()->functions->add( cot => {class => 'NewFunc', TeX => '\cot'}, );



#sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))}
#sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])}
#sub atan {CORE::atan2($_[1],1)}
#sub acot {CORE::atan2(1,$_[1])}
#sub asec {acos($_[0],1.0/$_[1])}
#sub acsc {asin($_[0],1.0/$_[1])}


Context()->functions->remove("acos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acos {Parser::Function->call('acos',@_)}
#  Add the new functions to the Context
Context()->functions->add( acos => {class => 'NewFunc', TeX => '\arccos'}, );


Context()->functions->remove("asin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub asin {Parser::Function->call('asin',@_)}
#  Add the new functions to the Context
Context()->functions->add( asin => {class => 'NewFunc', TeX => '\arcsin'}, );


Context()->functions->remove("atan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub atan {Parser::Function->call('atan',@_)}
#  Add the new functions to the Context
Context()->functions->add( atan => {class => 'NewFunc', TeX => '\arctan'}, );


Context()->functions->remove("asec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
#sub asec {acos($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub asec {Parser::Function->call('asec',@_)}
#  Add the new functions to the Context
Context()->functions->add( asec => {class => 'NewFunc', TeX => '\arcsec'}, );


Context()->functions->remove("acsc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
#sub acsc {asin($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub acsc {Parser::Function->call('acsc',@_)}
#  Add the new functions to the Context
Context()->functions->add( acsc => {class => 'NewFunc', TeX => '\arccsc'}, );


Context()->functions->remove("acot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acot {Parser::Function->call('acot',@_)}
#  Add the new functions to the Context
Context()->functions->add( acot => {class => 'NewFunc', TeX => '\arccot'}, );


#  End trig functions in degrees
###################################################

do {
    $alpha = non_zero_random(-9,9,1);
    $beta = non_zero_random(-9,9,1);
} until ( $alpha < 0 || $beta < 0 );

$complex = Complex("$alpha+$beta i");
$radicand = $alpha**2 + $beta**2;
$modulus = Formula("sqrt($radicand)");
$argumentRad = $complex->arg;
$argumentDeg = $argumentRad*180/pi;
$euler = Formula("$modulus e^((pi/4)i)");
$polar = Formula("$modulus (cos($argumentDeg)+i*sin($argumentDeg))");

$eulerChecker = sub {
      my ( $correct, $student, $ansHash ) = @_;
      return 0 if $ansHash->{isPreview} || $correct != $student;
      $student = $ansHash->{student_formula};
      $correct = $correct->{original_formula} if defined $correct->{original_formula};
      $student = Formula("$student"); $correct = Formula("$correct");
      # return 0 unless ($correct == $student); #already covered above
      Context()->flags->set(bizarroPow=>1,bizarroSub=>1,bizarroDiv=>1);
      delete $correct->{test_values};
      delete $student->{test_values};
      my $OK = ($correct == $student);
      Context()->flags->set(bizarroPow=>0,bizarroSub=>0,bizarroDiv=>0);
      delete $correct->{test_values};
      delete $student->{test_values};
      Value::Error("Your answer is equivalent to \($complex\), but it is not in the correct form.") unless $OK;
      return $OK;
}; 

# for the solution

$quad = ($alpha>0)? (($beta>0)? "\text{I}" : "\text{IV}" ): (($beta>0)? "\text{II}" : "\text{III}" );

$adjust = ($alpha>0)? (($beta>0)? "" : "" ): (($beta>0)? "+180^{\circ}" : "-180^{\circ}" );
##############################################################
#
#  Text
#
#

BEGIN_PGML

 With vectors, a direction angle [`\theta`] is enough to determine a unit vector [`\vec{u}`] in the direction of [`\theta`]:  
>> [`\vec{u} = \langle \cos(\theta), \sin(\theta) \rangle`] <<  
 From [`\vec{u}`], we can create a vector of any magnitude [`r`] by taking the product of the magnitude and our unit vector:  
>> [` r \vec{u} `] or [`\langle r\cos(\theta), r\sin(\theta) \rangle`] <<  
 
 As with vectors, we can recover the usual [`\alpha + \beta i`] form of a complex number from simply knowing the modulus _(magnitude)_ and the argument _(direction angle)_.

For example, if we have a complex number, [`\zeta`], with modulus [`|\zeta| = 5`] and argument [`\arg(\zeta) = 60^{\circ}`], we can express it as:  
>> [` \zeta = 5 \left( \cos(60^{\circ}) + i \sin(60^{\circ}) \right)`]. <<  
If we compute the values for sine and cosine, we can recover the real and imaginary components:  
>> [` \zeta = 5 \left( \dfrac{1}{2} + \dfrac{\sqrt{3}}{2} i \right) `] <<  
>> [` \zeta = \dfrac{5}{2} + \dfrac{5\sqrt{3}}{2} i `] <<

Polar form is a way for us to express our complex number when we don't know the real [`(\alpha)`] or imaginary [`(\beta)`] components right away. Polar form may also be helpful when the sine or cosine ratios are not "nice" values.

This process also works in reverse. Try it out:

Convert [`[$complex]`] into polar form, [`r \left(\cos(\theta) + i \sin(\theta)\right) `]: 

[_________________________________________________]{$polar->cmp(checker=>$eulerChecker)}

* Use *degrees* for this problem, _not radians_.
* If you're using decimal approximations, you need to be accurate to _at least 3_ decimal places.

END_PGML

##############################################################
#
#  Answers
#
#

BEGIN_PGML_HINT

[@ LayoutTable(
    [
        ['vector', '`\vec{v}`', '`\langle A, B \rangle`', 'complex number', '`\zeta`', '`\alpha+\beta i`'],
        ['magnitude', '`|| \vec{v} ||`', '`\sqrt{A^2+B^2}`', 'modulus', '`|\zeta|`','`\sqrt{\alpha^2+\beta^2}`'],
        ['direction', '`\theta`', '`\arctan(\frac{B}{A})(+ \pi)`', 'argument', '`\arg(\zeta)`','`\arctan(\frac{\beta}{\alpha})(+ \pi)`'],
        ['unit vector','`\vec{u}`','`\langle \cos(\theta), \sin(\theta) \rangle`','','','`\cos(\arg(\zeta)) + i \sin(\arg(\zeta))`'],
        ['polar form','','`||\vec{v}||\langle \cos(\theta), \sin(\theta) \rangle`','','','`|\zeta| ( \cos(\arg(\zeta))+i \sin(\arg(\zeta)) )`']
    ],
    align => 'r c c | r c c'
)@]***

END_PGML_HINT

##############################################################
#
#  Solutions
#
#

BEGIN_PGML_SOLUTION

The modulus of [`[$complex]`] is 
>>[`\sqrt{([$alpha])^2+([$beta])^2} = \color{green}{[$modulus]}`]. <<
Its vector representation, [`\langle [$alpha],[$beta] \rangle`], is in quadrant [`[$quad]`]. The argument of [`[$complex]`] is 
>>[` \arctan \left(\dfrac{[$beta]}{[$alpha]}\right)[$adjust] =  {\color{blue}{[$argumentDeg]^{\circ}}}`].<<
Therefore the polar form of [`[$complex]`] is [`\color{green}{[$modulus]} (\cos({\color{blue}{[$argumentDeg]^{\circ}}})+i\sin({\color{blue}{[$argumentDeg]^{\circ}}}))`].

END_PGML_SOLUTION



ENDDOCUMENT();        
