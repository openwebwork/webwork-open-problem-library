##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Trigonometry')
## DBchapter('Polar coordinates & vectors')
## DBsection('Polar and rectangular coordinates')
## Date('8/6/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "answerHints.pl",
   "PGgraphmacros.pl",
   "AppletObjects.pl",
   "niceTables.pl",
   "parserMultiAnswer.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Complex");
Context()->flags->set(
    reduceConstants=>0, 
    reduceConstantFunctions=>0,
    tolType=>'absolute',
    tolerance=>0.0005);

# Ensure that at least one of our complex numbers is not in Q1
do {
    $alpha1 = random(-1,1,2)*random(2,5,1);
    $beta1 = random(-1,1,2)*random(2,4,1);
} until ($alpha1<0 || $beta1<0);

$complex1 = Complex("$alpha1+$beta1 i");
$radicand1 = $alpha1**2 + $beta1**2;
$modulus1 = Formula("sqrt($radicand1)");

## for static image / PDF
$x1 = $alpha1/2;
$y1 = $beta1/2;
$lr1 = ($alpha1<0)?"right":"left";
$tb1 = ($beta1<0)?"bottom":"top";
$lrVec1 = ($alpha1*$beta1<0)?"left":"right";

# Repeat for second complex number/vector, ensure different complex number
do {
    $alpha2 = random(-1,1,2)*random(2,5,1);
    $beta2 = random(-1,1,2)*random(2,4,1);
} until ($alpha1!=$alpha2 || $beta1!=$beta2);

$complex2 = Complex("$alpha2+$beta2 i");
$radicand2 = $alpha2**2 + $beta2**2;
$modulus2 = Formula("sqrt($radicand2)");

## for static image / PDF
$x2 = $alpha2/2;
$y2 = $beta2/2;
$lr2 = ($alpha2<0)?"right":"left";
$tb2 = ($beta2<0)?"bottom":"top";
$lrVec2 = ($alpha=2*$beta2<0)?"left":"right";

# for ggbChecker
$complexList = List($complex1,$complex2);

# for display purposes
$complex1tex = $complex1->TeX;
$complex2tex = $complex2->TeX;

# determine product 
$productAlpha = $alpha1*$alpha2 - $beta1*$beta2;
$productBeta = $alpha1*$beta2 + $alpha2*$beta1;
$product = Complex("$productAlpha + $productBeta i");
$productRadicand = $radicand1*$radicand2;
$productModulus = Formula("sqrt($productRadicand)");

# for display 
$producttex = $product->TeX;

# for the solution


$quad1 = ($alpha1>0)? (($beta1>0)? "\text{I}" : "\text{IV}" ): (($beta1>0)? "\text{II}" : "\text{III}" );
$adjust1 = ($alpha1>0)? (($beta1>0)? "\arctan($beta1/$alpha1)" : "\arctan(($beta1)/$alpha1)" ): (($beta1>0)? "\arctan($beta1/($alpha1))+180^{\circ}" : "\arctan(($beta1)/($alpha1))+180^{\circ}" );
$quad2 = ($alpha2>0)? (($beta2>0)? "\text{I}" : "\text{IV}" ): (($beta2>0)? "\text{II}" : "\text{III}" );
$adjust2 = ($alpha2>0)? (($beta2>0)? "\arctan($beta2/$alpha2)" : "\arctan(($beta2)/$alpha2)" ): (($beta2>0)? "\arctan($beta2/($alpha2))+180^{\circ}" : "\arctan(($beta2)/($alpha2))+180^{\circ}" );
$quadproduct = ($productAlpha>0)? (($productBeta>0)? "\text{I}" : "\text{IV}" ): (($productBeta>0)? "\text{II}" : "\text{III}" );
$adjustproduct = ($productAlpha>0)? (($productBeta>0)? "\arctan($productBeta/$productAlpha)" : "\arctan(($productBeta)/$productAlpha)" ): (($productBeta>0)? "\arctan($productBeta/($productAlpha))+180^{\circ}" : "\arctan(($productBeta)/($productAlpha))+180^{\circ}" );

##############################################
#  Begin trig functions in degrees

Context()->functions->remove("cos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub cos {Parser::Function->call('cos',@_)} 
#  Add the new functions to the Context
Context()->functions->add( cos => {class => 'NewFunc', TeX => '\cos'}, );


Context()->functions->remove("sin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub sin {Parser::Function->call('sin',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sin => {class => 'NewFunc', TeX => '\sin'}, );


Context()->functions->remove("tan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180)/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub tan {Parser::Function->call('tan',@_)}
#  Add the new functions to the Context
Context()->functions->add( tan => {class => 'NewFunc', TeX => '\tan'}, );


Context()->functions->remove("sec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub sec {Parser::Function->call('sec',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sec => {class => 'NewFunc', TeX => '\sec'}, );


Context()->functions->remove("csc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub csc {Parser::Function->call('csc',@_)} 
#  Add the new functions to the Context
Context()->functions->add( csc => {class => 'NewFunc', TeX => '\csc'}, );


Context()->functions->remove("cot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180)/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub cot {Parser::Function->call('cot',@_)}
#  Add the new functions to the Context
Context()->functions->add( cot => {class => 'NewFunc', TeX => '\cot'}, );



#sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))}
#sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])}
#sub atan {CORE::atan2($_[1],1)}
#sub acot {CORE::atan2(1,$_[1])}
#sub asec {acos($_[0],1.0/$_[1])}
#sub acsc {asin($_[0],1.0/$_[1])}


Context()->functions->remove("acos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acos {Parser::Function->call('acos',@_)}
#  Add the new functions to the Context
Context()->functions->add( acos => {class => 'NewFunc', TeX => '\arccos'}, );


Context()->functions->remove("asin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub asin {Parser::Function->call('asin',@_)}
#  Add the new functions to the Context
Context()->functions->add( asin => {class => 'NewFunc', TeX => '\arcsin'}, );


Context()->functions->remove("atan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub atan {Parser::Function->call('atan',@_)}
#  Add the new functions to the Context
Context()->functions->add( atan => {class => 'NewFunc', TeX => '\arctan'}, );


Context()->functions->remove("asec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
#sub asec {acos($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub asec {Parser::Function->call('asec',@_)}
#  Add the new functions to the Context
Context()->functions->add( asec => {class => 'NewFunc', TeX => '\arcsec'}, );


Context()->functions->remove("acsc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
#sub acsc {asin($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub acsc {Parser::Function->call('acsc',@_)}
#  Add the new functions to the Context
Context()->functions->add( acsc => {class => 'NewFunc', TeX => '\arccsc'}, );


Context()->functions->remove("acot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acot {Parser::Function->call('acot',@_)}
#  Add the new functions to the Context
Context()->functions->add( acot => {class => 'NewFunc', TeX => '\arccot'}, );


#  End trig functions in degrees
###################################################

$ggbCheck = sub {
    my ($correct,$student,$ansHash,$value) = @_;
    my $n = scalar(@$student);  # number of student answers
    my $score = 0;              # number of correct student answers
    my @errors = ();            # stores error messages
    my ($correct1,$correct2) = @{$correct};
    my $purple = Complex($student->[0]);
    my $orange = Complex($student->[1]);
    $ansHash->{preview_latex_string} = "{\zeta_1 : $purple \\ \zeta_2 : $orange}";
    $ansHash->{preview_text_string} = "{purple: $purple; orange: $orange";
    return 0 if $ansHash->{isPreview};
    push(@errors,"It looks like you graphed the given complex number twice.") if ($purple == $orange);
    if ($orange!=$correct1 && $orange!=$correct2) {
        push(@errors,"The product of \(\zeta_1\) and \(\zeta_2\) is incorrect.<BR>Check the product box and manipulate \(\zeta_2\) until the product matches \($producttex\).");
    } else {
        $score=2;
    }
    return ($score,@errors);
};

# Determine argument in degrees, adjusting for Q2 & Q3

$adjustQuadrant1 = ($alpha1<0)? 1 : 0; # adjust angle for Q2 & Q3? 
$argument1 = atan($beta1/$alpha1) + 180*$adjustQuadrant1;
$argument1 = Real($argument1); #->with(period=>360);

$adjustQuadrant2 = ($alpha2<0)? 1 : 0; # adjust angle for Q2 & Q3?
$argument2 = atan($beta2/$alpha2) + 180*$adjustQuadrant2;
$argument2 = Real($argument2); #->with(period=>360);

$productArgument = Real($argument1+$argument2); #->with(period=>360);
#$productArgument = ($productArgument>360)?Real("$productArgument-360")->reduce:Real($productArgument)->reduce;
#$productArgument = $productArgument->with(period=>360);

######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the
# command end command
# so that they don't get in the way
###################################


$appletName = "ggbfoo";

$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "",
   codebase                 => "",
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => 'configure',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   width                 => 538,              # may want to modify width
   height                => 469,              # may want to modify height
  # mayscript             => "true",
   debugMode             => 0,   # set debugMode to 0 for no debug
                                              # to 1 to make xml representation visible
                                              # to 2 to add alerts detailing progression
                                              # through the applet
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   #submitActionScript => '',
   selfLoading           => 1,
   params     => GEOGEBRA_PARAMS(),# paste parameters in

);


###############################################
#
#  PNG picture of GeoGebra applet for hardcopy

$im = init_graph(-6,-6,6,6,axes=>[0,0], grid=>[12,12], size=>[400,400]);
$im->moveTo(0,0);
$im->arrowTo($alpha1,$beta1,'blue',3);
$im->lineTo($alpha1,0,'orange',2,'dashed');
$im->lineTo(0,0,'orange',2,'dashed');
$im->lb( new Label($alpha1,$y1," $beta1 ",'orange',$lr1,'middle'));
$im->lb( new Label($x1,0,"$alpha1",'orange','center',$tb1));
$im->lb( new Label($x1,$y1," $complex1 ",'blue',$lrVec1,'bottom'));

$im->moveTo(0,0);
$im->arrowTo($alpha2,$beta2,'blue',3);
$im->lineTo($alpha2,0,'orange',2,'dashed');
$im->lineTo(0,0,'orange',2,'dashed');
$im->lb( new Label($alpha2,$y2," $beta2 ",'orange',$lr2,'middle'));
$im->lb( new Label($x2,0,"$alpha2",'orange','center',$tb2));
$im->lb( new Label($x2,$y2," $complex2 ",'blue',$lrVec2,'bottom'));


##################################
# Setup GeogebraWebApplet --
###################################

###############################################
#
#  For persistence of GeoGebra applet state 
#  when answers are submitted or page is refreshed.
#  Uses JavaScript interface to GeoGebra.

HEADER_TEXT(
qq! 
<script language="javascript">
   function ggbOnInit(param) {
       if (param == "$appletName") {
           applet_loaded(param,1);  // report that applet is ready. 
           ww_applet_list[param].safe_applet_initialize(2);
       }
   } 
</script>
<noscript>For this question to work properly, 
you must enable JavaScript, or use another browser 
(or computer) on which JavaScript works.</noscript>
!);


#######################################################
#
#  For setting initial values in GeoGebra from WeBWorK
#  Uses JavaScript interface to GeoGebra.

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setAppletCoefficients() {
   var applet=getApplet("$appletName");   // alert("Updating coefficients");
   if (typeof(applet)!="undefined") {
     if (typeof(applet.setValue)!="undefined") {
     
     ////////////////////////////////////////////////////////////////
     //  List the values of the parameters to be set in the applet here
     
          // hide product at first
          applet.setValue('d',0);
          // re-label vectors with complex variable names
          applet.setCaption('v','\$\$ \\zeta_1 \$\$');
          applet.setCaption('w','\$\$ \\zeta_2 \$\$');
          applet.setLabelStyle('v',3);
          applet.setLabelStyle('w',3);
          // lock to grid
          applet.setPointCapture(1,2);
          // set and lock one complex vector
          applet.setCoords('v',$alpha1,$beta1);
          applet.setFixed('v',true,false);

     } else {
          setTimeout("setAppletCoefficients()", 1000);
     }
   } else {
      setTimeout("setAppletCoefficients()",1000);
   }
}
ww_applet_list["$appletName"].setConfig = function() {setAppletCoefficients()};
</script>
END_SCRIPT

HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );

<script language="javascript">
function getAppletValues() {
    console.log("getAppletValues() entered");
	// get a handle for the applet object
	var applet = $appletName;
	var vX = applet.getXcoord("v");
	var vY = applet.getYcoord("v");
	var wX = applet.getXcoord("w");
	var wY = applet.getYcoord("w");
    // return string = "purple complex, orange complex"
    return( vX + '+' + vY + '*i,' + wX + '+' + wY + '*i' );	
}
 </script>
END_SCRIPT

 TEXT($PAR,  MODES(TeX=>$im,
                      HTML=>$applet->insertAll(
                                debug =>0,
                                reinitialize_button => 0,
                                includeAnswerBox=>1,
 )));

NAMED_ANS('answerBox'=>$complexList->cmp(list_checker=>$ggbCheck));


$multiAns = MultiAnswer($productModulus,$productArgument,$modulus1,$argument1,$complex2,$modulus2,$argument2)->with(
    singleResult=>1,
    allowBlankAnswers=>1,
    checkTypes=>0,
    tex_format=>'{|\zeta_1\cdot\zeta_2|=%1$s \\ \arg(\zeta_1\cdot\zeta_2)=%2$s \\ |\zeta_1|=%3$s \\ \arg(\zeta_1)=%4$s \\ \zeta_2 = %5$s \\ |\zeta_2|=%6$s \\ \arg(\zeta_2)=%7$s}',
    checker => sub {
        my ( $correct, $student, $self, $ansHash ) = @_;
        my $score = 0;
        my $n = scalar(@$student);
        my $i;
        my @ansObj = ('\(|\zeta_1\cdot\zeta_2|\)','\(\arg(\zeta_1\cdot\zeta_2)\)','\(|\zeta_1|\)','\(\arg(\zeta_1)\)','\(\zeta_2\)','\(|\zeta_2|\)','\(\arg(\zeta_2)\)');

        for ($i = 0; $i < $n; $i++) {
            my $cor = $correct->[$i];
            my $stu = $student->[$i];
            next if $stu eq ""; # don't choke if students leave a blank answer
            # periodic answers are failing _this_ logic 
            if ( $stu != $cor ) {
                # but satisfying _this_ logic...
                if ( abs($cor-$stu) == 360 && ($i-1)*($i-3)*($i-6) == 0) {
                    $score++;
                    next;
                }
                if ( abs($cor-$stu) < 0.05 ) {
                    $self->setMessage($i+1,"You're close. Make sure your answer is accurate to three decimal places.");
                } elsif ( abs(180*$stu/pi - $cor) < 0.05 && ($i == 1 || $i == 3 || $i == 6)) {
                    $self->setMessage($i+1,"It looks like you might have answered in radians instead of degrees.");
                } else {
                    $self->setMessage($i+1,"$ansObj[$i] is incorrect.");
                }
                next;
            } 
            $score++;
        }
        return ($score/$n);
    });

##############################################################
#
#  Text
#
#

BEGIN_PGML

a. Given the vector [`\zeta_1 = [$complex1]`] and the product [` \zeta_1 \cdot \zeta_2 = [$product]`], use the image above to find the vector [`\zeta_2`].

b. Use your results to fill in the following table:

* Make sure you're using *degrees* instead of radians.
* If you use any decimal approximations, they must be accurate to _at least 3 decimal places_.

[@
DataTable(
  [
    [['', headerrow => 1,midrule=>1],'`a+bi` form','modulus','argument'],
    ['`\zeta_1 \cdot \zeta_2`',"`$producttex`",$multiAns->ans_rule(15),$multiAns->ans_rule(15)],
    [['`\zeta_1`',midrule=>1],"`$complex1tex`",$multiAns->ans_rule(15),$multiAns->ans_rule(15)],
    ['`\zeta_2`',$multiAns->ans_rule(15),$multiAns->ans_rule(15),$multiAns->ans_rule(15)],
  ], 
  align => 'r | c c c'
)
@]***




END_PGML

##############################################################
#
#  Answers
#
#

ANS($multiAns->cmp);

BEGIN_PGML_HINT

* You do not have to find the modulus and the argument of  [`\zeta_2`] using its complex number representation.
Instead, use the modulus and the argument of [`\zeta_1`] and [`\zeta_1\cdot\zeta_2`].

* Use that [`|\zeta_1\cdot\zeta_2| = |\zeta_1|\cdot|\zeta_2|`] and isolate [`|\zeta_2|`].

* Use that [`\arg(\zeta_1\cdot\zeta_2) = \arg(\zeta_1)+\arg(\zeta_2)`] and isolate [`\arg(\zeta_2)`].

END_PGML_HINT

##############################################################
#
#  Solutions
#
#

$a1a2 = $alpha1 * $alpha2;
$a1b2 = $alpha1 * $beta2;
$b1a2 = $beta1 * $alpha2;
$b1b2 = $beta1 * $beta2;

BEGIN_PGML_SOLUTION

a.

    >> [@ image( insertGraph($im), width=>400, height=>400, tex_size=>800 ) @]* <<

The complex number [`\color{blue}{\zeta_2}`] is [`\color{blue}{[$alpha2]+[$beta2]i}`]. Let's check that the product [`\color{red}{\zeta_1}\cdot\color{blue}{\zeta_2}`] is indeed [`\color{green}{[$product]}`] when [`\color{red}{\zeta_1}=\color{red}{[$complex1]}`].

>>[` \begin{aligned}
\color{red}{\zeta_1}\cdot \color{blue}{\zeta_2}&\quad= (\color{red}{[$complex1]})\cdot (\color{blue}{[$complex2]}) \\
&\quad= [([$alpha1])\cdot ([$alpha2])] + [([$alpha1])\cdot ([$beta2] i)] +  [([$beta1] i)\cdot ([$alpha2])]+
[([$beta1] i)\cdot ([$beta2] i)]\\
&\quad = [$a1a2] + ([$a1b2])i + ([$b1a2])i + ([$b1b2])i^2 \\ 
&\quad = [$a1a2] + ([$a1b2])i + ([$b1a2])i - ([$b1b2])\\ 
&\quad = ([$a1a2]- ([$b1b2])) + [([$a1b2]) + ([$b1a2])] i \\
&\quad = \color{green}{[$product]}
\end{aligned} `]<<

b.


* The modulus of [`\color{green}{\zeta_1\cdot\zeta_2= [$product]}`] is 
>>[`\color{green}{|\zeta_1\cdot\zeta_2|}= \sqrt{([$productAlpha])^2+([$productBeta])^2} = \color{green}{[$productModulus]}`]. <<
Its vector representation, [`\langle [$productAlpha],[$productBeta] \rangle`], is in quadrant [`[$quadproduct]`]. The argument of [`\color{green}{\zeta_1\cdot\zeta_2= [$product]}`] is 
>>[` \color{green}{\arg(\zeta_1\cdot\zeta_2)} = [$adjustproduct] =  \color{green}{[$productArgument]^{\circ}}`].<<

* The modulus of [`\color{red}{\zeta_1= [$complex1tex]}`] is 
>>[`\color{red}{|\zeta_1|}= \sqrt{([$alpha1])^2+([$beta1])^2} = \color{red}{[$modulus1]}`]. <<
Its vector representation, [`\langle [$alpha1],[$beta1] \rangle`], is in quadrant [`[$quad1]`]. The argument of [`\color{red}{\zeta_1= [$complex1tex]}`] is 
>>[` \color{red}{\arg(\zeta_1)} = [$adjust1] =  \color{red}{[$argument1]^{\circ}}`].<<

* The modulus of [`\color{blue}{\zeta_2= [$complex2tex]}`] can be calculated in the following way:
>>[`\begin{aligned}
\color{green}{|\zeta_1\cdot\zeta_2|}  = \color{red}{|\zeta_1|}\cdot\color{blue}{|\zeta_2|} & \quad\Longrightarrow\quad \color{blue}{|\zeta_2|} = \dfrac{\color{green}{|\zeta_1\cdot\zeta_2|}}  {\color{red}{|\zeta_1|}} \\
& \quad\Longrightarrow\quad \color{blue}{|\zeta_2|} = \dfrac{\color{green}{[$productModulus]}}{\color{red}{[$modulus1]}} \\
& \quad\Longrightarrow\quad \color{blue}{|\zeta_2|}  = \color{blue}{[$modulus2]}
\end{aligned}
`].
<<

We can calculate the argument of [`\color{blue}{\zeta_2= [$complex2tex]}`] as: 
>>[` 
\begin{aligned}
\color{green}{\arg(\zeta_1\cdot\zeta_2)}=\color{red}{\arg(\zeta_1)} +\color{blue}{\arg(\zeta_2)} &\quad\Longrightarrow\quad \color{blue}{\arg(\zeta_2)} 
= \color{green}{\arg(\zeta_1\cdot\zeta_2)}-\color{red}{\arg(\zeta_1)} \\
&\quad\Longrightarrow\quad \color{blue}{\arg(\zeta_2)}  = \color{green}{[$productArgument]^{\circ}}-  \color{red}{[$argument1]^{\circ}} \\
&\quad\Longrightarrow\quad \color{blue}{\arg(\zeta_2)} = \color{blue}{[$argument2]^{\circ}}
\end{aligned}
`].
<<



[@
DataTable(
  [
    [['', headerrow => 1,midrule=>1],'`a+bi` form','modulus','argument'],
       ['`\zeta_1 \cdot \zeta_2`',"`$product`","`$productModulus`","`$productArgument`"],
    [['`\zeta_1`',midrule=>1],"`$complex1tex`","`$modulus1`", "`$argument1`"],
    ['`\zeta_2`',"`$complex2tex`","`$modulus2`","`$argument2`"]
  ], 
  align => 'r | c c c'
)
@]***

   
   


END_PGML_SOLUTION



##############################################################
#


sub GEOGEBRA_PARAMS {
    my $result = {
showResetIcon=>"true" ,
enableRightClick=>"false" ,
enableLabelDrags=>"false",
showMenuBar=>"false" ,
showToolBar=>"false",
showAlgebraInput=>"false",
enableShiftDragZoom=>"true",
useBrowserForJS=>"true",
ggbbase64=>""
};
$result;
}

ENDDOCUMENT();        


