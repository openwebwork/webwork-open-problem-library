##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS('precalculus', '', '')

## DBsubject('Precalculus')
## DBchapter('')
## DBsection('')
## Date('11/15/2019')
## Author('K. Andrew Parker')
## Institution('CUNY City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGchoicemacros.pl",
   "contextPiecewiseFunction.pl",
   "contextFraction.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

Context("Fraction");
Context()->variables->add(m=>Real);
Context()->noreduce('(-x)-y','(-x)+y');
Context()->strings->add('undefined');

# make sure the middle interval is wide enough to support evaluation
# at an integer x-value (in case both endpoints are not included)
# and make sure that the "gaps" are wide enough for at least one
# x-value where the function is undefined...
do {
  @x = NchooseK(11,4);
  @x = PGsort( sub{$_[0]<$_[1]}, @x );
  @x = map { $_ - 5 } @x;
} until ($x[2]-$x[1] > 1) && ($x[3]-$x[2] > 1 || $x[1]-$x[0] > 1);

# decide whether to include each x-value in the domain
for my $i (0..3) {
  @inc[$i] = random(0,1,1);
}

$int[0] = Interval("(-inf,$x[0])");
$int[0] = $int[0] + Set("{$x[0]}") if $inc[0]; 

$int[1] = Interval("($x[1],$x[2])");
$int[1] = $int[1] + Set("{$x[1]}") if $inc[1];
$int[1] = $int[1] + Set("{$x[2]}") if $inc[2];

$int[2] = Interval("($x[3],inf)");
$int[2] = $int[2] + Set("{$x[3]}") if $inc[3]; 

$domain = $int[0]+$int[1]+$int[2];

# select an x-value in each interval for evaluation
@a = ();
$a[0] = random(-10,$x[0]-1,1);
do { 
  $a[1] = random($x[1],$x[2],1); 
} until $int[1]->contains(Set("{$a[1]}"));
$a[2] = random($x[3]+1,10,1);
# select one x-value outside of the domain
do {
  $a[3] = random($x[0],$x[3],1);
} until !($domain->contains(Set("{$a[3]}")));

# Construct three lines, one for each interval
# evaluate line at corresponding x-value chosen above
@m = (); @b = (); @line = (); @y = ();
for my $i (0..2) {
  $m[$i] = Fraction(non_zero_random(-5,5,1),random(1,5,1))->reduce;
  $b[$i] = random(-8,8,1);
  $line[$i] = Formula("m x + $b[$i]")->reduce;
  $line[$i] = $line[$i]->substitute(m=>$m[$i]);
  $line[$i] = $line[$i]->reduce if (abs($m[$i])==1);
  $y[$i] = Fraction($line[$i]->eval(x=>$a[$i]));
}

$y[3] = String("undefined")->with(typeMatch=>Fraction(1,1));

@shuffle = NchooseK(4,4);
@y = @y[@shuffle];
@a = @a[@shuffle];

Context("PiecewiseFunction");
Context()->flags->set(reduceConstants=>0);

$f = PiecewiseFunction(
  $int[0]=>$line[0], 
  $int[1]=>$line[1], 
  $int[2]=>$line[2])->with(final_period=>1);

##############################################################
#
#  Text
#
#

BEGIN_PGML

Given the piecewise equation:  
>> [` y = [$f] `] <<

1. What is the domain of [`f(x)`]? [__________]{$domain}  

1. Evaluate [`f(a)`] for each of the following:  
    a. [`f([$a[0]])`] = [_________]{$y[0]}
    a. [`f([$a[1]])`] = [_________]{$y[1]}
    a. [`f([$a[2]])`] = [_________]{$y[2]}
    a. [`f([$a[3]])`] = [_________]{$y[3]}

*Notes:*
* If any of the [`f(a)`] are not defined, then enter "undefined" as your answer.

END_PGML

##############################################################
#
#  Answers
#
#

BEGIN_PGML_HINT
END_PGML_HINT

BEGIN_PGML_SOLUTION
END_PGML_SOLUTION

ENDDOCUMENT();        
