##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS('precalculus', '', '')

## DBsubject('Precalculus')
## DBchapter('')
## DBsection('')
## Date('11/15/2019')
## Author('K. Andrew Parker')
## Institution('CUNY City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGchoicemacros.pl",
   "contextPiecewiseFunction.pl",
   "contextFraction.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

Context("Fraction");
Context()->variables->add(m=>Real);
Context()->noreduce('(-x)-y','(-x)+y');
Context()->strings->add('undefined');

# make sure the middle interval is wide enough to support evaluation
# at an integer x-value (in case both endpoints are not included)
# and make sure that the "gaps" are wide enough for at least one
# x-value where the function is undefined...
do {
  @x = NchooseK(11,4);
  @x = PGsort( sub{$_[0]<$_[1]}, @x );
  @x = map { $_ - 5 } @x;
} until ($x[2]-$x[1] > 1) && ($x[3]-$x[2] > 1 || $x[1]-$x[0] > 1);

# decide whether to include each x-value in the domain
for my $i (0..3) {
  @inc[$i] = random(0,1,1);
}

$int[0] = Interval("(-inf,$x[0])");
$int[0] = $int[0] + Set("{$x[0]}") if $inc[0]; 

$int[1] = Interval("($x[1],$x[2])");
$int[1] = $int[1] + Set("{$x[1]}") if $inc[1];
$int[1] = $int[1] + Set("{$x[2]}") if $inc[2];

$int[2] = Interval("($x[3],inf)");
$int[2] = $int[2] + Set("{$x[3]}") if $inc[3]; 

$domain = $int[0]+$int[1]+$int[2];

# select an x-value in each interval for evaluation
@a = ();
$a[0] = random(-10,$x[0]-1,1);
do { 
  $a[1] = random($x[1],$x[2],1); 
} until $int[1]->contains(Set("{$a[1]}"));
$a[2] = random($x[3]+1,10,1);
# select one x-value outside of the domain
do {
  $a[3] = random($x[0],$x[3],1);
} until !($domain->contains(Set("{$a[3]}")));

# Construct three lines, one for each interval
# evaluate line at corresponding x-value chosen above
@m = (); @b = (); @line = (); @y = ();
for my $i (0..2) {
  $m[$i] = Fraction(non_zero_random(-5,5,1),random(1,5,1))->reduce;
  $b[$i] = random(-8,8,1);
  $line[$i] = Formula("m x + $b[$i]")->reduce;
  $line[$i] = $line[$i]->substitute(m=>$m[$i]);
  $line[$i] = $line[$i]->reduce if (abs($m[$i])==1);
  $y[$i] = Fraction($line[$i]->eval(x=>$a[$i]));
}

$y[3] = String("undefined")->with(typeMatch=>Fraction(1,1));

$txtans[0] = 'satisfies the condition of the top branch';
$txtans[1] = 'satisfies the condition of the middle branch';
$txtans[2] = 'satisfies the condition of the bottom branch';
$txtans[3] = 'does not satisfy any of the conditions of the function';

$calcans[0]= "=$m[0] \cdot ($a[0]) + $b[0]=";
$calcans[1]= "=$m[1] \cdot ($a[1]) + $b[1]=";
$calcans[2]= "=$m[2] \cdot ($a[2]) + $b[2]=";
$calcans[3]= "\text{ is }";

@shuffle = NchooseK(4,4);
@y = @y[@shuffle];
@a = @a[@shuffle];
@txtans = @txtans[@shuffle];
@calcans = @calcans[@shuffle];


Context("PiecewiseFunction");
Context()->flags->set(reduceConstants=>0);

$f = PiecewiseFunction(
  $int[0]=>$line[0], 
  $int[1]=>$line[1], 
  $int[2]=>$line[2])->with(final_period=>1);

##############################################################
#
#  Text
#
#

BEGIN_PGML

Given the piecewise equation:  
>> [` y = [$f] `] <<

1. What is the domain of [`f(x)`]? [__________]{$domain}  

1. Evaluate [`f(a)`] for each of the following:  
    a. [`f([$a[0]])`] = [_________]{$y[0]}
    a. [`f([$a[1]])`] = [_________]{$y[1]}
    a. [`f([$a[2]])`] = [_________]{$y[2]}
    a. [`f([$a[3]])`] = [_________]{$y[3]}

*Notes:*
* If any of the [`f(a)`] are not defined, then enter "undefined" as your answer.

END_PGML

##############################################################
#
#  Answers
#
#

BEGIN_PGML_HINT
To determine the domain, look at the condition on the right of each of the three branches (that is the top, middle, or bottom branch).

In which branch do you plug a given input?

If the input does not fit any of the conditions of the branches, the output is ``undefined''.
END_PGML_HINT

BEGIN_PGML_SOLUTION
1. The domain is the set of inputs as described on the right of the piecewise defined function (at the ''if'' part). It is a union of 3 intervals, each corresponding to one of the three branches: [`D=[$domain]`].

1. We plug each input into [`f(x)`], if possible.
    a. Setting [`x=[$a[0]]`] [$txtans[0]], so we get [`f([$a[0]])[$calcans[0]][$y[0]]`].
    a. Setting [`x=[$a[1]]`] [$txtans[1]], so we get [`f([$a[1]])[$calcans[1]][$y[1]]`].
    a. Setting [`x=[$a[2]]`] [$txtans[2]], so we get [`f([$a[2]])[$calcans[2]][$y[2]]`].
    a. Setting [`x=[$a[3]]`] [$txtans[3]], so we get [`f([$a[3]])[$calcans[3]][$y[3]]`].
END_PGML_SOLUTION

ENDDOCUMENT();        
