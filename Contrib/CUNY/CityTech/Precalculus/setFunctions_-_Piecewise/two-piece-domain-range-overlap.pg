##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS('precalculus', '', '')

## DBsubject('Precalculus')
## DBchapter('')
## DBsection('')
## Date('11/15/2019')
## Author('K. Andrew Parker')
## Institution('CUNY City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGgraphmacros.pl",
   "PGchoicemacros.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

Context("Numeric");
Context()->strings->add('undefined');

@x = NchooseK(11,4);
@x = PGsort( sub{$_[0]<$_[1]}, @x );
@x = map { $_ - 5 } @x;
@y = NchooseK(11,4);
@y = PGsort( sub{$_[0]<$_[1]}, @y );
@y = map { $_ - 5 } @y;

$min = random(0,1,1); # will y[0] be paired with x[0] or x[1]?
$minOC = random(0,1,1); # will the minimum be open or closed?
$max = random(0,1,1); # will y[3] be paired with x[2] or x[3]?
$maxOC = random(0,1,1); # will the maximum be open or closed?

%p = (
    1 => {
        x => $x[0],
        y => $y[2*$min],
        oc => ($min) ? random(0,1,1) : $minOC,
        tb => ($min) ? 'bottom' : 'top'
    },
    2 => {
        x => $x[1],
        y => $y[2*(1-$min)],
        oc => ($min) ? $minOC : random(0,1,1),
        tb => ($min) ? 'top' : 'bottom'
    },
    3 => {
        x => $x[2],
        y => $y[3-2*$max],
        oc => ($max) ? random(0,1,1) : $maxOC,
        tb => ($max) ? 'top' : 'bottom'
    },
    4 => {
        x => $x[3],
        y => $y[1+2*$max],
        oc => ($max) ? $maxOC : random(0,1,1),
        tb => ($max) ? 'bottom' : 'top'
    }
);

$gr = init_graph(-6,-6,6,6,grid=>[12,12],axes=>[0,0],size=>[400,400]);
$gr->moveTo($p{1}{x},$p{1}{y});
$gr->lineTo($p{2}{x},$p{2}{y},"blue",2);
$gr->moveTo($p{3}{x},$p{3}{y});
$gr->lineTo($p{4}{x},$p{4}{y},"blue",2);

$gr->lb( new Label($p{1}{x},$p{1}{y},"($p{1}{x},$p{1}{y})",'blue','center',$p{1}{tb}) );
if ($p{1}{oc}) { 
    $gr->stamps( closed_circle($p{1}{x},$p{1}{y},'blue') );
} else { 
    $gr->stamps( open_circle($p{1}{x},$p{1}{y},'blue') );
}

$gr->lb( new Label($p{2}{x},$p{2}{y},"($p{2}{x},$p{2}{y})",'blue','center',$p{2}{tb}) );
if ($p{2}{oc}) { 
    $gr->stamps( closed_circle($p{2}{x},$p{2}{y},'blue') );
} else { 
    $gr->stamps( open_circle($p{2}{x},$p{2}{y},'blue') );
}

$gr->lb( new Label($p{3}{x},$p{3}{y},"($p{3}{x},$p{3}{y})",'blue','center',$p{3}{tb}) );
if ($p{3}{oc}) { 
    $gr->stamps( closed_circle($p{3}{x},$p{3}{y},'blue') );
} else { 
    $gr->stamps( open_circle($p{3}{x},$p{3}{y},'blue') );
}

$gr->lb( new Label($p{4}{x},$p{4}{y},"($p{4}{x},$p{4}{y})",'blue','center',$p{4}{tb}) );
if ($p{4}{oc}) { 
    $gr->stamps( closed_circle($p{4}{x},$p{4}{y},'blue') );
} else { 
    $gr->stamps( open_circle($p{4}{x},$p{4}{y},'blue') );
}

$Sig1=" is ";
$Sig2=" is ";
$Sig3=" is ";
$Sig4=" is ";

$u[1]=$p{1}{x};$v[1]=String("undefined");
  if ($p{1}{oc}) {$v[1]=$p{1}{y}; $Sig1="`=`";}
$u[2]=$p{2}{x};$v[2]=String("undefined");
  if ($p{2}{oc}) {$v[2]=$p{2}{y}; $Sig2="`=`";}
$u[3]=$p{3}{x};$v[3]=String("undefined");
  if ($p{3}{oc}) {$v[3]=$p{3}{y}; $Sig3="`=`";}
$u[4]=$p{4}{x};$v[4]=String("undefined");
  if ($p{4}{oc}) {$v[4]=$p{4}{y}; $Sig4="`=`";}

$domain1 = Interval("($p{1}{x},$p{2}{x})");
$domain1 = $domain1 + Set($p{1}{x}) if $p{1}{oc};
$domain1 = $domain1 + Set($p{2}{x}) if $p{2}{oc};

$domain2 = Interval("($p{3}{x},$p{4}{x})");
$domain2 = $domain2 + Set($p{3}{x}) if $p{3}{oc};
$domain2 = $domain2 + Set($p{4}{x}) if $p{4}{oc};

$domain = $domain1 + $domain2;

# This is NOT flexible - hardcoded for choice of y-permutation

$range1 = Interval("($y[0],$y[2])");
$range1 = $range1 + Set($p{1}{y}) if $p{1}{oc};
$range1 = $range1 + Set($p{2}{y}) if $p{2}{oc};

$range2 = Interval("($y[1],$y[3])");
$range2 = $range2 + Set($p{3}{y}) if $p{3}{oc};
$range2 = $range2 + Set($p{4}{y}) if $p{4}{oc};

$range = $range1 + $range2;

##############################################################
#
#  Text
#
#

BEGIN_PGML

>> [@ image(insertGraph($gr), width=>400, height=>400, tex_size=>600) @]*** <<

Given the graph of [` y = f(x) `], as shown above:  

1. What is [`f([$u[1]])`]? [__________]{$v[1]} 

1. What is [`f([$u[2]])`]? [__________]{$v[2]} 

1. What is [`f([$u[3]])`]? [__________]{$v[3]} 

1. What is [`f([$u[4]])`]? [__________]{$v[4]} 

1. What is the domain of [`f(x)`]? [`\quad D=`][__________]{$domain}  

1. What is the range of [`f(x)`]? [`\quad R=`][__________]{$range}  

END_PGML

##############################################################
#
#  Answers
#
#
BEGIN_PGML_HINT

* The domain is the set of inputs [`x`]. Therefore, the domain is the projection of the graph onto the [`x`]-axis.

* The range is the set of outputs [`y`]. Therefore, the range is the projection of the graph onto the [`y`]-axis.

* A closed circle on the graph means the point is included (use square brackets " [` [ `] " or " [` ] `] " to include an endpoint of an interval). An open circle means the point is not included (use parentheses " [` ( `] " or " [` ) `] " to exclude an endpoint of an interval). 

END_PGML_HINT

BEGIN_PGML_SOLUTION

[`f([$u[1]])`][$Sig1][`[$v[1]]`]

[`f([$u[2]])`][$Sig2][`[$v[2]]`]

[`f([$u[3]])`][$Sig3][`[$v[3]]`]

[`f([$u[4]])`][$Sig4][`[$v[4]]`]

The domain is [`D=[$domain]`].

The range is [`R=[$range]`].

END_PGML_SOLUTION

ENDDOCUMENT();        
