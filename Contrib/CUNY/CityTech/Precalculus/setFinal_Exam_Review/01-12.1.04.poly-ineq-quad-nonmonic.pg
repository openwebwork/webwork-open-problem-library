##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Algebra')
## DBchapter('Polynomial equations and functions')
## DBsection('Inequalities involving polynomials')
## Date('8/23/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGgraphmacros.pl",
   "PGgraders.pl",
   "contextFraction.pl",
   "niceTables.pl",
   "parserMultiAnswer.pl",
   "parserPopUp.pl",
   "scaffold.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

# Give full credit if the student is able to complete the
# quotient without doing the scaffold steps...
install_problem_grader(~~&full_partial_grader);

##############################################################
#
#  Setup
#
#
Context("Fraction");
Context()->noreduce('(-x)-y','(-x)+y');
Parser::Number::NoDecimals();
Context()->{error}{msg}{"You are not allowed to type decimal numbers in this problem"} 
  = "Decimals are not allowed for this problem, please use exact forms (such as fractions) instead of decimal approximations.";

# (ax - r0)(x-r1)

$r[0] = non_zero_random(-8,8,1);
do { $a = list_random(2,3,5); } until (gcf(abs($r[0]),$a)==1);

do { $r[1] = non_zero_random(-8,8,1); } until ( abs($r[1]-$r[0]/$a) > 1.5 );
#do { $r[1] = random(-8,($r[0]>0)?-2:floor($r[0]/$a),1); } until ( abs($r[1]-$r[0]/$a) > 1.5 );

#do { $r[2] = random(($r[0]>0)?ceil($r[0]/$a):2,8,1); } until ( abs($r[2]-$r[0]/$a) > 1.5 );

@rootReal = ($r[0]/$a,$r[1]);

$A = $a;
$B = -($r[0]+$a*$r[1]);
$C = $r[1]*$r[0];
$f = Formula("$A x^2 + $B x + $C")->reduce;

@rootFrac = (Fraction($r[0],$a),Fraction($r[1],1));
$rootList = List($rootFrac[0],$rootFrac[1]);

@rootFOrd = PGsort(sub {$_[0]<$_[1]}, @rootFrac);
@rootROrd = PGsort(sub {$_[0]<$_[1]}, @rootReal);
    
#graph of rational:
$gr = init_graph(-10,-10,10,10,grid=>[20,20],axes=>[0,0],size=>[400,400]);
add_functions($gr,"$f for x in <-10,10> using color:blue and weight:2");
($gr->fn)[0]->steps(100);
$gr->stamps(closed_circle($rootReal[0],0,'orange'));
$gr->stamps(closed_circle($rootReal[1],0,'orange'));

$grDom = init_graph(-10,-1,10,1, size=>[680,68]);
# x-axis
$grDom -> moveTo(-10,0);
$grDom -> lineTo(10,0,'black','1');
# x-axis ticks entered as y-value, color, list of x-values
$grDom -> h_ticks(0,"black",-9,-8-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9);
# labels for tickmarks
foreach my $j (0..9) {
    $grDom->lb( new Label($j,-0.5,$j, 'black','center','middle'));
    $grDom->lb( new Label(-$j,-0.5,-$j, 'black','center','middle'));
}
$firstMid = (-10+$rootROrd[0])/2;
$secondMid = ($rootROrd[0]+$rootROrd[1])/2;
$thirdMid = ($rootROrd[1]+10)/2;
$grDom->lb( new Label($firstMid,0.5,"(-inf,$rootFOrd[0])",'black','center','middle'));
$grDom->lb( new Label($secondMid,0.5,"($rootFOrd[0],$rootFOrd[1])",'black','center','middle'));
$grDom->lb( new Label($thirdMid,0.5,"($rootFOrd[1],inf)",'black','center','middle'));
$grDom->stamps(closed_circle($rootReal[0],0,'orange'));
$grDom->stamps(closed_circle($rootReal[1],0,'orange'));

$x1 = Real(random(-10,floor($rootROrd[0]-.001),1));
$y1 = Real($f->eval(x=>$x1));
$ans1String = ($y1>0)?"Positive":"Negative";
$pn1 = PopUp(["?","Positive","Negative"],"$ans1String");
$xy1 = MultiAnswer($x1,$y1)->with(
    singleResult=>1, 
    checkTypes=>0,
    format=>'f(%1$s)=%2$s',
    tex_format=>'f(%1$s)=%2$s',
    checker=> sub {
        my ($correct, $student, $self) = @_;
        my ($x,$y) = @{$student};
        Value::Error("You should select a number for your x-value.") unless ($x->type eq "Number");
        Value::Error("f($x) should be a number.") unless ($y->type eq "Number");
        $self->setMessage(1,"You need to select an x-value less than $rootFOrd[0] for this interval.") unless ($x < $rootROrd[0]);
        $self->setMessage(2,"You have incorrectly evaluated f($x).") unless( $y == $f->eval(x=>$x));
        return ($x < $rootROrd[0], $x< $rootROrd[0] && $y == $f->eval(x=>$x));
    });

$x2 = Real(random(ceil($rootROrd[0]+.0001),floor($rootROrd[1]-.0001,1)));
$y2 = Real($f->eval(x=>$x2));
$ans2String = ($y2>0)?"Positive":"Negative";
$pn2 = PopUp(["?","Positive","Negative"],"$ans2String");
$xy2 = MultiAnswer($x2,$y2)->with(
    singleResult=>1, 
    checkTypes=>0,
    format=>'f(%1$s)=%2$s',
    tex_format=>'f(%1$s)=%2$s',
    checker=> sub {
        my ($correct, $student, $self) = @_;
        my ($x,$y) = @{$student};
        Value::Error("You should select a number for your x-value.") unless ($x->type eq "Number");
        Value::Error("f($x) should be a number.") unless ($y->type eq "Number");
        $self->setMessage(1,"You need to select an x-value between $rootFOrd[0] and $rootFOrd[1] for this interval.") unless ($x > $rootROrd[0] && $x < $rootROrd[1]);
        $self->setMessage(2,"You have incorrectly evaluated f($x).") unless( $y == $f->eval(x=>$x));
        return ($x > $rootROrd[0] && $x < $rootROrd[1], $x > $rootROrd[0] && $x < $rootROrd[1] && $y == $f->eval(x=>$x));
    });

$x3 = Real(random(ceil($rootROrd[1]+.0001),10,1));
$y3 = Real($f->eval(x=>$x3));
$ans3String = ($y3>0)?"Positive":"Negative";
$pn3 = PopUp(["?","Positive","Negative"],"$ans3String");
$xy3 = MultiAnswer($x3,$y3)->with(
    singleResult=>1, 
    checkTypes=>0,
    format=>'f(%1$s)=%2$s',
    tex_format=>'f(%1$s)=%2$s',
    checker=> sub {
        my ($correct, $student, $self) = @_;
        my ($x,$y) = @{$student};
        Value::Error("You should select a number for your x-value.") unless ($x->type eq "Number");
        Value::Error("f($x) should be a number.") unless ($y->type eq "Number");
        $self->setMessage(1,"You need to select an x-value larger than $rootFOrd[1] for this interval.") unless ($x > $rootROrd[1] );
        $self->setMessage(2,"You have incorrectly evaluated f($x).") unless( $y == $f->eval(x=>$x));
        return ($x > $rootROrd[1], $x > $rootROrd[1] && $y == $f->eval(x=>$x));
    });

$grDom2 = init_graph(-10,-2,10,1, size=>[680,102]);
# x-axis
$grDom2 -> moveTo(-10,0);
$grDom2 -> lineTo(10,0,'black','1');
# x-axis ticks entered as y-value, color, list of x-values
$grDom2 -> h_ticks(0,"black",-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9);
# labels for tickmarks
foreach my $j (0..9) {
    $grDom2->lb( new Label($j,-0.5,$j, 'black','center','middle'));
    $grDom2->lb( new Label(-$j,-0.5,-$j, 'black','center','middle'));
}
$color1=($y1>0)?'green':'red';
$color2=($y2>0)?'green':'red';
$color3=($y3>0)?'green':'red';
$grDom2->moveTo(-10,0);
$grDom2->lineTo($rootROrd[0],0,$color1,3);
$grDom2->lineTo($rootROrd[1],0,$color2,3);
$grDom2->lineTo(10,0,$color3,3);
$grDom2->lb( new Label($firstMid,0.4,$ans1String,$color1,'center','middle'));
$grDom2->lb( new Label($secondMid,0.4,$ans2String,$color2,'center','middle'));
$grDom2->lb( new Label($thirdMid,0.4,$ans3String,$color3,'center','middle'));
$grDom2->moveTo($rootReal[0],0.55);
$grDom2->lineTo($rootReal[0],-1,'orange',1);
$grDom2->stamps(closed_circle($rootReal[0],0,'orange'));
$grDom2->lb( new Label($rootReal[0],0.75,"root",'orange','center','middle'));
$grDom2->lb( new Label($rootReal[0],-1.5,"x=$rootFrac[0]",'orange','center','middle'));
$grDom2->moveTo($rootReal[1],0.55);
$grDom2->lineTo($rootReal[1],-1,'orange',1,);
$grDom2->stamps(closed_circle($rootReal[1],0,'orange'));
$grDom2->lb( new Label($rootReal[1],0.75,"root",'orange','center','middle'));
$grDom2->lb( new Label($rootReal[1],-1.5,"x=$rootFrac[1]",'orange','center','middle'));

Context("Interval");

$nonZero = Compute("(-inf,$rootFOrd[0]) U ($rootFOrd[0],$rootFOrd[1]) U ($rootFOrd[1],inf)");

# set up all four inequalities to solve, align with answer
@texIneq = ('>','<','\geq','\leq');
if ($A > 0) {
    $ansInt[0] = Compute("(-inf,$rootFOrd[0])U($rootFOrd[1],inf)");
    $ansInt[1] = Compute("($rootFOrd[0],$rootFOrd[1])");
    $ansInt[2] = Compute("(-inf,$rootFOrd[0]]U[$rootFOrd[1],inf)");
    $ansInt[3] = Compute("[$rootFOrd[0],$rootFOrd[1]]");
} else {
    $ansInt[1] = Compute("(-inf,$rootFOrd[0])U($rootFOrd[1],inf)");
    $ansInt[0] = Compute("($rootFOrd[0],$rootFOrd[1])");
    $ansInt[3] = Compute("(-inf,$rootFOrd[0]]U[$rootFOrd[1],inf)");
    $ansInt[2] = Compute("[$rootFOrd[0],$rootFOrd[1]]");
};

if ($A > 0) {
    $SoA[0] = '\Big(-\infty,'; 
    $SoB[0] = "\Big)\cup \Big("; 
    $SoC[0] = ",\infty\Big)";
    $SoA[1] = "\Big("; 
    $SoB[1] = ","; 
    $SoC[1] = "\Big)";
    $SoA[2] = "\Big(-\infty,"; 
    $SoB[2] = "\Big]\cup \Big["; 
    $SoC[2] = ",\infty\Big)";
    $SoA[3] = "\Big["; 
    $SoB[3] = ","; 
    $SoC[3] = "\Big]";
} else {
    $SoA[1] = '\Big(-\infty,'; 
    $SoB[1] = "\Big)\cup v("; 
    $SoC[1] = ",\infty\Big)";
    $SoA[0] = "("; 
    $SoB[0] = ","; 
    $SoC[0] = "\Big)";
    $SoA[3] = "\Big(-\infty,"; 
    $SoB[3] = "\Big]\cup \Big["; 
    $SoC[3] = ",\infty\Big)";
    $SoA[2] = "\Big["; 
    $SoB[2] = ","; 
    $SoC[2] = "\Big]";
};

$YesNoSol[0] = "do not";
$YesNoSol[1] = "do not";
$YesNoSol[2] = "";
$YesNoSol[3] = "";

$randomIneq = random(0,3,1);


#b. Use interval notation to represent the separate intervals where [`` [$f] ``] will be *non-zero*: [_________________________]{$nonZero}

#[`[$ansInt[$randomIneq]]`].
#[`[$ansInt[0]]`]
#[`[$ansInt[1]]`]
#[`[$ansInt[2]]`]
#[`[$ansInt[3]]`]
#[`[$SoA[0]][$rootFOrd[0]][$SoB[0]][$rootFOrd[1]][$SoC[0]]`]
#[`[$SoA[1]][$rootFOrd[0]][$SoB[1]][$rootFOrd[1]][$SoC[1]]`]
#[`[$SoA[2]][$rootFOrd[0]][$SoB[2]][$rootFOrd[1]][$SoC[2]]`]
#[`[$SoA[3]][$rootFOrd[0]][$SoB[3]][$rootFOrd[1]][$SoC[3]]`]


##############################################################
#
#  Text
#
#

BEGIN_PGML

Solve for [`x`]:

>> [`\displaystyle [$f] [$texIneq[$randomIneq]] 0 `] <<


END_PGML

Scaffold::Begin();
Section::Begin("Identify roots");
BEGIN_PGML

[`\displaystyle [$f]`] has root(s) at [`x=`][_______________________]{$rootList}





END_PGML
Section::End();

Section::Begin("Test each interval");
BEGIN_PGML

>> [@ image( insertGraph($grDom), width=>544, height=>68, tex_size=>800 ) @]* <<

a. Select an [`x`]-value in the first interval, [`(-\infty,[$rootFOrd[0]])`]: [_______________________]{$xy1}  

    Evaluate the function [`f(x)`] at your selected [`x`]-value: [_______________________]{$xy1}  
    
    Will [`f(x)`] be positive or negative on the first interval? [_]{$pn1}
    
b. Select an [`x`]-value in the second interval, [`([$rootFOrd[0]],[$rootFOrd[1]])`]: [_______________________]{$xy2}  

    And evaluate the function [`f(x)`] at your selected [`x`]-value: [_______________________]{$xy2}  
    
    Will [`f(x)`] be positive or negative on the second interval? [_]{$pn2}
    
c. Select an [`x`]-value in the third interval, [`([$rootFOrd[1]],\infty)`]: [_______________________]{$xy3}  

    And evaluate the function [`f(x)`] at your selected [`x`]-value: [_______________________]{$xy3}  
    
    Will [`f(x)`] be positive or negative on the third interval? [_]{$pn3}

END_PGML
Section::End();
Scaffold::End();


BEGIN_PGML

Finally, interpret your calculations by solving the original inequaility:

[`\displaystyle [$f] [$texIneq[$randomIneq]] 0 `] on the interval(s): [_______________]{$ansInt[$randomIneq]}

* Type "inf" and "-inf" for [`\infty`] and [`-\infty`], respectively.
* Type the capital letter "U" to represent the union symbol [`\cup`].


[@ LayoutTable(
  [
    [['\(\large\textbf{Exit Problem}\)', midrule=>1,   rowtop=>2, rowcolor=>"black", color=>"white", halign=>'c']],
    [['Pretend that the following problem is on the final exam and with pen and paper, work out the solution. Bring your work to class for the review session.', midrule=>1]],
    [[' Solve the inequality. Express the solution both on the number line and in interval notation. Use exact forms (such as fractions) instead of decimal approximations.
', midrule=>0, rowcolor=>"white"]],
    [['(a) \(x^2-2x-3\geq 0\)
', midrule=>0, rowcolor=>"white"]],
    [['(b) \(6x-2x^2>0\)
', rowbottom=>2, rowcolor=>"white"]],
  ],
  align=>'!{\vrule width 2pt}X!{\vrule width 2pt}',
  booktabs => 0,
  allcellcss=>'padding: 2pt;',
) @]***


END_PGML

##############################################################
#
#  Hints
#
#




##############################################################
#
#  Answers
#
#

##############################################################
#
#  Solutions
#
#



$ineq1 = ($y1>0)?">":"<";
$ineq2 = ($y2>0)?">":"<";
$ineq3 = ($y3>0)?">":"<";

BEGIN_PGML_SOLUTION

**Identify roots**
The polynomial [`\displaystyle [$f]`] factors as [`[$a](x-([$rootFOrd[0]]))(x-([$rootFOrd[1]]))`], and so it has roots at [`x=\displaystyle[$rootList]`].



**Test each interval**

a. Select an [`x`]-value in the first interval, [`(-\infty,[$rootFOrd[0]])`]:  [`\quad [$x1]`].

    Evaluate the function [`f(x)`] at your selected [`x`]-value:   [`\quad f([$x1]) = [$y1]`]
    
    Will [`f(x)`] be positive or negative on the first interval? [$pn1] since [`f([$x1]) = [$y1] [$ineq1] 0`].
    
    
b. Select an [`x`]-value in the second interval, [`([$rootFOrd[0]],[$rootFOrd[1]])`]: [`\quad[$x2]`].  

    And evaluate the function [`f(x)`] at your selected [`x`]-value: [`\quad f([$x2]) = [$y2]`]
    
    Will [`f(x)`] be positive or negative on the second interval? [$pn2] since [`f([$x2]) = [$y2] [$ineq2] 0`].
    
c. Select an [`x`]-value in the third interval, [`([$rootFOrd[1]],\infty)`]: [`\quad [$x3]`]. 

    And evaluate the function [`f(x)`] at your selected [`x`]-value: [`\quad f([$x3]) = [$y3]`]
    
    Will [`f(x)`] be positive or negative on the third interval? [$pn3] since [`f([$x3]) = [$y3] [$ineq3] 0`].

From (a)-(c), we have that:


>> [@ image( insertGraph($grDom2), width=>680, height=>102, tex_size=>800 ) @]* <<

**Interpreting your results**

Since the inequality in the original question [`[$f] [$texIneq[$randomIneq]] 0 `] is "[`[$texIneq[$randomIneq]]`]" we [$YesNoSol[$randomIneq]] include the roots in the solution.

Therefore, the solution set of  [` \displaystyle [$f] [$texIneq[$randomIneq]] 0 `] is:
[```S=[$SoA[$randomIneq]][$rootFOrd[0]][$SoB[$randomIneq]][$rootFOrd[1]][$SoC[$randomIneq]]```]



In fact, the graph of [`y=f(x)`] looks like:

>> [@ image( insertGraph($gr), width=>400, height=>400, tex_size=>800 ) @]* <<


END_PGML_SOLUTION

ENDDOCUMENT();        

