##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS()

## DBsubject('Algebra')
## DBchapter('Absolute value expressions and functions')
## DBsection('Solving equations with absolute values')
## Date('6/29/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')
## TitleText1('Precalculus')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGgraphmacros.pl",
   "PGauxiliaryFunctions.pl",
   "contextFraction.pl",
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");

foreach my $i (0..2) {
    $gr[$i] = init_graph(-8,-1,8,1, size=>[408,68]);
    # x-axis
    $gr[$i] -> moveTo(-8,0);
    $gr[$i] -> lineTo(8,0,'black','1');
    # x-axis ticks entered as y-value, color, list of x-values
    $gr[$i] -> h_ticks(0,"black",-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8);
    # labels for tickmarks
    foreach my $j (0..7) {
        $gr[$i]->lb( new Label($j,-0.5,$j, 'black','center','middle'));
        $gr[$i]->lb( new Label(-$j,-0.5,-$j, 'black','center','middle'));
    }
}

$gr[0] -> stamps( closed_circle(-4,0,'blue') );
$gr[0] -> stamps( closed_circle(4,0,'blue') );

$gr[1] -> moveTo(-4,0);
$gr[1] -> lineTo(4,0,'blue','3');
$gr[1] -> stamps( open_circle(4,0,'blue') );
$gr[1] -> stamps( open_circle(-4,0,'blue') );

$gr[2] -> arrowTo(-8,0,'orange', 3);
$gr[2] -> moveTo(-4,0);
$gr[2] -> moveTo(-4,0);
$gr[2] -> lineTo(4,0,'green','3');
$gr[2] -> moveTo (4,0);
$gr[2] -> arrowTo(8,0,'red', 3);
$gr[2] -> stamps( closed_circle(4,0,'blue') );
$gr[2] -> stamps( closed_circle(-4,0,'blue') );








#####################################################

@texIneq = ("<","\le",">","\ge");

#prob hash: $prob{problem_number}{flag}
#flags: gt = 1 for greater than
#       eq = 1 for include equality
%prob = ();

foreach my $i (1..5) {
    $prob{$i}{gt} = random(0,1,1);
    $prob{$i}{eq} = random(0,1,1);
    # index the right inequality sign from @texIneq using gt and eq flags
    $prob{$i}{index} = 2*$prob{$i}{gt}+$prob{$i}{eq};
}

@a = (0,1,1,1,1,1
);

@b = (0,0,0,0,0,0
);

@exp = (0,
    Formula("$a[1] x+$b[1]")->reduce,
    Formula("$a[2] x+$b[2]")->reduce,
    Formula("$a[3] x+$b[3]")->reduce,
    Formula("$a[4] x+$b[4]")->reduce,
    Formula("$a[5] x+$b[5]")->reduce
);

# optional - add possible negative values to the following:
@n = (1,
    random(5,9,1),
    random(5,9,1),
    random(11,19,1),
    random(21,29,1),
    random(51,99,2)
);

Context("LimitedFraction");
#Context()->strings->add(
#  "no solution"=>{},
#  "none"=>{alias=>"no solution"}
#);
#Context()->operators->redefine(',',using=>',',from=>'Numeric');
#Context()->operators->redefine('or',using=>',',from=>'Numeric');
#Context()->operators->set(
#  ','=>{string=>' or ',TeX=>'\hbox{ or }'},
#  'or'=>{string=>' or ',TeX=>'\hbox{ or }'}
#);
Context()->flags->set(showMixedNumbers=>0, reduceFractions=>0);

@l = ();
@r = ();
@max = ();
@min = ();

foreach my $i (1..5) {
    $l[$i] = Fraction(-1*$n[$i]-$b[$i],$a[$i])->reduce;
    $r[$i] = Fraction($n[$i]-$b[$i],$a[$i])->reduce;
    # max() & min() turn fractions to decimal, use our own logic instead
    $max[$i] = ($l[$i] > $r[$i]) ? $l[$i] : $r[$i]; 
    $min[$i] = ($l[$i] > $r[$i]) ? $r[$i] : $l[$i];
}

Context("Interval");
Context()->constants->set(R => {TeX=>'\mathbb{R}'});
Context()->constants->add(EmptySet => Set());
Context()->constants->set(EmptySet => {TeX=>'\emptyset'});

@ans = ();

foreach my $i (1..5) {
    if( $n[$i] > 0 ) {
        if ( $prob{$i}{eq} == 0 ) {
            $ans[$i] = ($prob{$i}{gt}==1) ? Compute("(-infinity,$min[$i]) U ($max[$i],infinity)") : Compute("($min[$i],$max[$i])");
        } else {
            $ans[$i] = ($prob{$i}{gt}==1) ? Compute("(-infinity,$min[$i]] U [$max[$i],infinity)") : Compute("[$min[$i],$max[$i]]");
        };
    } else {
        if ( $prob{$i}{gt}==1 ) {
            $ans[$i] = Interval("R");
        } else {
            $ans[$i] = Interval("{}");
        };
    };
}

##############################################################
#
#  Text
#
#

BEGIN_PGML

>> ### Absolute Value Inequalities ### <<

We recognize that the solutions to [`|x| = 4`] are [`x=-4`] and [`x=4`].

>> [@ image(insertGraph($gr[0]),width=>408, height=>68, tex_size=>700) @]* <<

But what if we have an inequality instead of equality? For example, what about [`|x|<4`]?

Notice that the points [`x=-4`] and [`x=4`] divide the number line into three subintervals: 

* [`x<-4`] (in orange), 

* [`-4<x<4`] (in green), 

* [`4<x`] (in red).



>> [@ image(insertGraph($gr[2]),width=>408, height=>68, tex_size=>700) @]* <<

Let's pick a number in each subinterval and check the inequality [`|x|<4`] for it.

*Check 1:* [`x=-5`] (in the orange subinterval)

>> [` |x|`] evaluated at [`x=-5 \; \rightarrow \; |x|= |-5|=5> 4  \;\rightarrow\; `] False<<

 
*Check 2:* [`x=1`] (in the green subinterval)

>> [`|x|`] evaluated at [`x=1 \; \rightarrow \; |x|=|1|=1 < 4 \;\rightarrow\;`] True <<
 
*Check 3:* [`x=6`] (in the red subinterval)

>> [`|x|`] evaluated at [`x=6 \; \rightarrow \; |x|= |6|=6> 4 \;\rightarrow\;`] False <<
 
The only value that works is the one in the subinterval [`-4<x<4`] or 
[`(-4,4)`].  We now need to check whether the endpoints of this interval satisfy the inequality [`|x|<4`].  Since the inequality is _strict_, the endpoints do not satisfy the inequality equation.  Therefore, the solution set to [`|x|<4`] is [`(-4,4)`].
 
>> [@ image(insertGraph($gr[1]),width=>408, height=>68, tex_size=>700) @]* <<




>> ### Practice ### <<

State your answer in *interval notation*.

* You can use "inf" and "-inf" for [`\infty`] and [`-\infty`].
* Use the _union_ operator "U" to describe intervals with separate regions.
* If the inequality is true for all real numbers, use "R" to represent "all real numbers".
* If the inequality is never true, use "{}" or "EmptySet" (case-sensitive) to represent "no solutions".

a. [`|[$exp[1]]| [$texIneq[$prob{1}{index}]] [$n[1]]`] is true on the interval [_____________________________]{$ans[1]}

b. [`|[$exp[2]]| [$texIneq[$prob{2}{index}]] [$n[2]]`] is true on the interval [_____________________________]{$ans[2]}

c. [`|[$exp[3]]| [$texIneq[$prob{3}{index}]] [$n[3]]`] is true on the interval [_____________________________]{$ans[3]}

d. [`|[$exp[4]]| [$texIneq[$prob{4}{index}]] [$n[4]]`] is true on the interval [_____________________________]{$ans[4]}

e. [`|[$exp[5]]| [$texIneq[$prob{5}{index}]] [$n[5]]`] is true on the interval [_____________________________]{$ans[5]}



END_PGML

##############################################################
#
#  Answers
#
#


##############################################################
#
#  Hints
#
#



BEGIN_PGML_HINT


* Replace your inequality symbol by [`=`], keep the absolute value, and solve the equation.

* Graph your solutions on the number line, and identify the key subintervals.

* Choose a number in each subinterval and check to see whether or not it satisfies the original equation with the inequality. If so, the subinterval containing the number is part of the solution set.

* Check whether or not the endpoints satisfy the original equation with the inequality.

* Write your solution set using the interval notation.

END_PGML_HINT

##############################################################
#
#  Solutions
#
#



BEGIN_PGML_SOLUTION

a. [` [$ans[1]] `]  

b. [` [$ans[2]] `]  

c. [` [$ans[3]] `]  

d. [` [$ans[4]] `]  

e. [` [$ans[5]] `]  

END_PGML_SOLUTION


ENDDOCUMENT();    

