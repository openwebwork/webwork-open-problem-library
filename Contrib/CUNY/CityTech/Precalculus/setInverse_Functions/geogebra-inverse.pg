##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Algebra')
## DBchapter('Inverse functions')
## DBsection('Interpreting inverse functions')
## Date('6/13/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGgraphmacros.pl",
   "AppletObjects.pl",
   "parserMultiAnswer.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

package myMultiAnswer;
our @ISA = ('MultiAnswer');

sub new {
  my $self = shift;
  my $ma = $self->SUPER::new(@_);
  $ma->{part} = 1;
  $ma->{answerName} = 'answerBox';
  $ma->{answerNames}{0} = $ma->{answerName};
  $ma->{id} = $MultiAnswer::answerPrefix.$ma->{answerName};
  $ma->{singleResult} = 1;
  $ma->{namedRules}  = 1;
  return $ma;
}

sub ANS_NAME {
  my $self = shift;
  my $i = shift;
  $self->{answerNames}{$i} = ($i == 0 ? $self->{answerName} : $self->{id}.'_'.$i);
  return $self->{answerNames}{$i};
}

package main;

Context("Point");
Context()->flags->set(reduceConstants=>0, reduceConstantFunctions=>0);

$Ax = random(-5,-1,1);
$Ay = random(-5,1,1);
$A = Point($Ax,$Ay);
$invA = Point($Ay,$Ax);

$Bx = random(1,5,1);
$By = random($Ay+1,5,1);
$B = Point($Bx,$By);
$invB = Point($By,$Bx);

do { $Lx = random(-7,-6,1);
    $Ly = random(-7,$Ay-1,1); } until ($Lx != $Ly);
$L = Point($Lx,$Ly);
$invL = Point($Ly,$Lx);
# for the static graph (PDF)
$L2x = 2*$Lx-$Ax;
$L2y = 2*$Ly-$Ay;

do { $Rx = 7;
    $Ry = random($By+1,7,1); } until ($Rx != $Ry);
$R = Point($Rx,$Ry);
$invR = Point($Ry,$Rx);
# for the static graph (PDF)
$R2x = 2*$Rx-$Bx;
$R2y = 2*$Ry-$By;

$answer=List($invL,$invA,$invB,$invR)->with(ordered=>1);

$multians = myMultiAnswer->new($answer)->with(
#  format => 'slope: %2$s , intercept: %3$s',
#  tex_format => 'slope: %2$s , intercept: %3$s',
  checkTypes=>0,
  allowBlankAnswers=>1,
  checker => sub {
      my ( $correct, $student, $self, $ans_hash ) = @_;
      my ( $correctPts ) = $correct;
      my ( $ggbPts ) = $student;
      return 0 if $self->{ans}[0]->{isPreview};
#      Value->Error("$ggbPts");
      $ggbStu = List($ggbPts);
      Value->Error("Your graph has not been shifted correctly.") if $ggbStu != $correctPts;
      return 1;
  }
);

######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the
# command end command
# so that they don't get in the way
###################################


$appletName = "ggbfoo";

$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "",
   codebase                 => "",
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => 'configure',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   width                 => 400,              # may want to modify width
   height                => 400,              # may want to modify height
   mayscript             => "true",
   debugMode             => 0,   # set debugMode to 0 for no debug
                                              # to 1 to make xml representation visible
                                              # to 2 to add alerts detailing progression
                                              # through the applet
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   #submitActionScript => '',
   selfLoading           => 1,
   params     => GEOGEBRA_PARAMS(),# paste parameters in

);


###############################################
#
#  PNG picture of GeoGebra applet for hardcopy

$imf = init_graph(-8,-8,8,8, 
    size=>[400,400],
    grid=>[16,16],
    axes=>[0,0]
);

$imf->moveTo($L2x,$L2y);
$imf->lineTo($Ax,$Ay,'blue',2);
$imf->lineTo($Bx,$By,'blue',2);
$imf->lineTo($R2x,$R2y,'blue',2);

$imf->stamps( closed_circle($Ax,$Ay,'blue') );
$imf->stamps( closed_circle($Bx,$By,'blue') );
$imf->stamps( closed_circle($Lx,$Ly,'blue') );
$imf->stamps( closed_circle($Rx,$Ry,'blue') );

##################################
# Setup GeogebraWebApplet --
###################################

###############################################
#
#  For persistence of GeoGebra applet state 
#  when answers are submitted or page is refreshed.
#  Uses JavaScript interface to GeoGebra.

HEADER_TEXT(
qq! 
<script language="javascript">
   function ggbOnInit(param) {
       // alert("ggbOnInit called");
       if (param == "$appletName") {
           applet_loaded(param,1);  // report that applet is ready. 
           ww_applet_list[param].safe_applet_initialize(2);
       }
       ggbApplet.registerAddListener("onAdd");
   }
   
   function onAdd(name){
       setLabelVisible(name, false);
   }

</script>
<noscript>For this question to work properly, 
you must enable JavaScript, or use another browser 
(or computer) on which JavaScript works.</noscript>
!);

#######################################################
#
#  For setting initial values in GeoGebra from WeBWorK
#  Uses JavaScript interface to GeoGebra.

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setAppletCoefficients() {
   var applet=getApplet("$appletName");   
   if (typeof(applet)!="undefined") {
     if (typeof(applet.setValue)!="undefined") {
     
     ////////////////////////////////////////////////////////////////
     //  List the values of the parameters to be set in the applet here
          // Construct the function and prepare the 
          // points to be manipulated into the inverse 
          // alert("Updating coefficients");
          applet.evalCommand('SetPerspective("G")');
          applet.setPointCapture(1,2);
          applet.setCoordSystem(-8,8,-8,8);
          applet.setAxisSteps(1,1,1);
          applet.setGridVisible('true');
          applet.evalCommand("L = ($Lx,$Ly)");
          applet.evalCommand("R = ($Rx,$Ry)");
          applet.evalCommand("A = ($Ax,$Ay)");
          applet.evalCommand("B = ($Bx,$By)");
          applet.setVisible("L",false);
          applet.setVisible("R",false);
          applet.setLabelVisible("A",false);
          applet.setFixed("A",true,false);
          applet.setColor("A",125,120,120);
          applet.setLabelVisible("B",false);
          applet.setFixed("B",true,false);
          applet.setColor("B",125,120,120);
          applet.evalCommand("f = Segment[A,B]");
          applet.setCaption("f",'\$\$ f \$\$');
          applet.setLabelVisible("f",true);
          applet.setLabelStyle("f",3);
          applet.setFixed("f",false,false);
          applet.setColor("f",125,120,120);
          applet.evalCommand("g = Ray[A,L]");
          applet.setFixed("g",false,false);
          applet.setColor("g",125,120,120);
          applet.evalCommand("h = Ray[B,R]");
          applet.setFixed("h",false,false);
          applet.setColor("h",125,120,120);
          applet.evalCommand("L' = ($Lx,$Ly)");
          applet.setColor("L'",250,60,25);
          applet.evalCommand("R' = ($Rx,$Ry)");
          applet.setColor("R'",250,60,25);
          applet.evalCommand("A' = ($Ax,$Ay)");
          applet.setColor("A'",250,60,25);
          applet.evalCommand("B' = ($Bx,$By)");
          applet.setColor("B'",250,60,25);
          applet.setLabelVisible("L'",false);
          applet.setLabelVisible("R'",false);
          applet.setLabelVisible("A'",false);
          applet.setLabelVisible("B'",false);
          applet.evalCommand("f' = Segment[A',B']");
          applet.setColor("f'",250,60,25);
          applet.setLabelVisible("f'",true);
          applet.setCaption("f'",'\$\$ f^{-1} \$\$');
          applet.setLabelStyle("f'",3);
          applet.setFixed("f'",false,false);
          applet.evalCommand("g' = Ray[A',L']");
          applet.setColor("g'",250,60,25);
          applet.setFixed("g'",false,false);
          applet.evalCommand("h' = Ray[B',R']");
          applet.setColor("h'",250,60,25);
          applet.setFixed("h'",false,false);
     } else {
          setTimeout("setAppletCoefficients()", 1000);
     }
   } else {
      setTimeout("setAppletCoefficients()",1000);
   }
}
ww_applet_list["$appletName"].setConfig = function() {setAppletCoefficients()};
</script>
END_SCRIPT

HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );

<script language="javascript">
function getAppletValues() {
    console.log("getAppletValues() entered");
	// get a handle for the applet object
	var applet = $appletName;
    // Get the inverse points for re-positioned A and B
	var Ax = applet.getXcoord("A'");
	var Ay = applet.getYcoord("A'");
	var Bx = applet.getXcoord("B'");
	var By = applet.getYcoord("B'");
    // Get the inverse points for re-positioned L and R
    var Lx = applet.getXcoord("L'");
    var Ly = applet.getYcoord("L'");
    var Rx = applet.getXcoord("R'");
    var Ry = applet.getYcoord("R'");
    return("("+Lx+","+Ly+"),("+Ax+","+Ay+"),("+Bx+","+By+"),("+Rx+","+Ry+")"); 
}
 </script>
END_SCRIPT

##############################################################
#
#  Text
#
#


Context()->texStrings;
BEGIN_PGML

>> ### The graph of an inverse function ### <<

What is the relationship between the graph of a function [` f(x) `] and the graph of its inverse function [` f^{-1}(x) `]?

If we have a point [` (\color{blue}{x_0},\color{red}{y_0}) `] on the graph of [` f( x ) `], that means [` \color{red}{y_0} =f( \color{blue}{x_0} ) `].  By the definition of [` f^{-1}(x)`], that implies [` f^{-1}( \color{red}{y_0} ) = \color{blue}{x_0} `], and hence [` (\color{red}{y_0}, \color{blue}{x_0}) `] is on the graph of [` f^{-1}(x) `].

So to summarize: if [` (\color{blue}{x_0},\color{red}{y_0}) `] is a point on the graph of [` f(x) `], then [` (\color{red}{y_0},\color{blue}{x_0}) `] is on the graph of [` f^{-1}(x) `], i.e., we "swap" the coordinates of points on [` f(x) `] to get points on [` f^{-1}(x) `].

>> #### Practice #### <<

Manipulate the graph to display the inverse of [` y = f ( x ) `] by dragging each given point on [` y = f ( x ) `] to the corresponding point on [` y = f^{-1} ( x ) `]:

END_PGML

TEXT($PAR, MODES(HTML=>$applet->insertAll(debug=>0, reinitialize_button=>1, includeAnswerBox=>1), TeX=>$imf));

Context()->normalStrings;

##############################################################
#
#  Answers
#
#

NAMED_ANS($multians->cmp);

BEGIN_PGML_HINT

* Take the given point [`([$Lx], [$Ly])`] on the graph of [` y = f ( x ) `]. So we know [` f( [$Lx] ) = [$Ly] `].

* What does that tell us about [` f^{-1}(x) `]?  In particular, what is the value of [` f^{-1} ([$Ly])`]?  That gives you the coordinates of a corresponding point on the graph of [` f^{-1}(x) `].

END_PGML_HINT

# we cannot put the solution on `$imf` since that is for hardcopy PDF
# make a copy of `$imf`
$solImg = $imf;
# and add the solution in red
$solImg->moveTo($L2y,$L2x);
$solImg->lineTo($Ay,$Ax,'red',2);
$solImg->lineTo($By,$Bx,'red',2);
$solImg->lineTo($R2y,$R2x,'red',2);

$solImg->stamps( closed_circle($Ly,$Lx,'red') );
$solImg->stamps( closed_circle($Ay,$Ax,'red') );
$solImg->stamps( closed_circle($By,$Bx,'red') );
$solImg->stamps( closed_circle($Ry,$Rx,'red') );

# include the line of symmetry for good measure
$solImg->moveTo(-8,-8);
$solImg->lineTo(8,8,'black',2,'dashed');

BEGIN_PGML_SOLUTION

We see that [`([$Ax], [$Ay])`] is a point on the graph of [` y = f ( x ) `].  Hence, [` f( [$Ax] ) = [$Ay] `].  But that means [` f^{-1}( [$Ay] ) = [$Ax] `], and so [` ([$Ay], [$Ax]) `] is on the graph of [` f^{-1}(x) `].  So we drag the point [`([$Ax], [$Ay])`] to the corresponding point [` ([$Ay], [$Ax]) `].  

Similarly for the other given points: drag each given [` (x_0, y_0) `] to [` (y_0, x_0) `].

Note that swapping the [`x`]- and [`y`]-coordinates like this has the effect of reflecting the graph across the line [`y=x`] (shown with the dashed line below).

[@ image( insertGraph($solImg), width=>400, height=>400, tex_size=>800 ) @]*

END_PGML_SOLUTION

sub GEOGEBRA_PARAMS {
    my $result = {
appName=>"classic",
showResetIcon=>"false" ,
enableRightClick=>"false" ,
enableLabelDrags=>"false",
enableShiftDragZoom=>"false",
showMenuBar=>"false" ,
showToolBar=>"false",
showAlgebraInput=>"false",
useBrowserForJS=>"true",
#ggbbase64=>""
};

$result;
}


ENDDOCUMENT();        
