##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS('algebra', 'function', 'inverse function')

## DBsubject('Algebra')
## DBchapter('Inverse functions')
## DBsection('Finding the inverse function')
## Date('6/13/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGchoicemacros.pl",
   "PGgraphmacros.pl",
   "parserPopUp.pl",
   "niceTables.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 0;

##############################################################
#
#  Setup
#
#
Context("Numeric");

@f = (Formula("x^2"), Formula("e^x"), Formula("1/x"), Formula("abs(x)"), Formula("x^3"), Formula("x^3-x"));

@ans = ("False", "True", "True", "False", "True", "False");

foreach $i (0..5) {
    $im[$i]=init_graph(-5,-5,5,5, size=>[400,400],grid=>[10,10],axes=>[0,0]);
    add_functions($im[$i], "$f[$i] for x in <-5,5> using color:blue and weight:2");
    $tf[$i] = PopUp(["?","True","False"], $ans[$i]);
}

@perm = NchooseK(6,6);

# forced, for formatting sake
$tex0 = $f[$perm[0]]->TeX;
$tex1 = $f[$perm[1]]->TeX;
$tex2 = $f[$perm[2]]->TeX;
$tex3 = $f[$perm[3]]->TeX;
$tex4 = $f[$perm[4]]->TeX;
$tex5 = $f[$perm[5]]->TeX;

##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_PGML

>> ### What are one-to-one functions? What is the horizontal line test? ### <<

* swapping inputs/outputs 
* relation to swapping [`x/y`] 
* coordinate pairs are "reversed" 
* line of reflection: [`y = x`] 
* Horizontal Line Test (HLT)/Vertical Line Test (VLT) and their relation

A function is *one-to-one* if every pair of different inputs have different outputs, i.e. if we have two inputs [`x_1 \not= x_2 `], then [`f(x_1) \not= f(x_2) `].  

In other words, a function is one-to-one if every single output in the range of the function corresponds to just one input in the domain; hence the terminology "one-to-one."  

This concept is important because if a function [`f(x)`] is one-to-one, then we can define a new function, called the *inverse function*, and denote it by [`f^{-1}(x)`], where we swap the inputs and outputs.

In terms of the graph of a function [` y = f(x) `], the function [`f(x)`] is one-to-one if and only if it satisfies the *horizontal line test*, which consists of checking that  every horizontal line intersects the graph of the function at most once. 

>> #### Practice #### <<

For each of the following, use the horizontal line test to determine whether or not each function is one-to-one.

[@ DataTable(
    [
        [  [  "$BR".image(insertGraph($im[ $perm[0] ]), width=>400,height=>400,tex_size=>800), midrule=>0],  "$BR".image(insertGraph($im[ $perm[1] ]), width=>400,height=>400,tex_size=>800) ],
        [ " (a) \\( y = $tex0 \\) is a one-to-one function. ".$tf[ $perm[0] ]->menu."$PAR" , " (b) \\(y = $tex1 \\) is a one-to-one function. ".$tf[ $perm[1] ]->menu."$PAR" ],
        [ [  "$BR".image(insertGraph($im[ $perm[2] ]), width=>400,height=>400,tex_size=>800), midrule=>0], "$BR".image(insertGraph($im[ $perm[3] ]), width=>400,height=>400,tex_size=>800) ],
        [ " (c) \\(y = $tex2 \\) is a one-to-one function. ".$tf[ $perm[2] ]->menu."$PAR" , " (d) \\(y = $tex3 \\) is a one-to-one function. ".$tf[ $perm[3] ]->menu."$PAR" ],
        [ [ "$BR".image(insertGraph($im[ $perm[4] ]), width=>400,height=>400,tex_size=>800), midrule=>0], "$BR".image(insertGraph($im[ $perm[5] ]), width=>400,height=>400,tex_size=>800) ],
        [ " (e) \\(y = $tex4 \\) is a one-to-one function. ".$tf[ $perm[4] ]->menu."$PAR" , " (f) \\(y = $tex5 \\) is a one-to-one function. ".$tf[ $perm[5] ]->menu."$PAR" ]
    ],
    align => '| c | c |',
    midrules => 1,
); @]***

END_PGML
Context()->normalStrings;

##############################################################
#
#  Answers
#
#

ANS($tf[$perm[0]]->cmp);
ANS($tf[$perm[1]]->cmp);
ANS($tf[$perm[2]]->cmp);
ANS($tf[$perm[3]]->cmp);
ANS($tf[$perm[4]]->cmp);
ANS($tf[$perm[5]]->cmp);


BEGIN_PGML_HINT

To apply the horizontal line test, imagine a ruler held horizontally on the graph. As you slide the ruler up and down the [`y`]-axis, does the ruler ever intersect the graph more than once? If so, the function is *not* one-to-one (because then you've found an output that gets "hit" by more than one input).

END_PGML_HINT

BEGIN_PGML_SOLUTION

a. [$ans[$perm[0]]]  

b. [$ans[$perm[1]]]  

c. [$ans[$perm[2]]]  

d. [$ans[$perm[3]]]  

e. [$ans[$perm[4]]]  

f. [$ans[$perm[5]]]  

END_PGML_SOLUTION

ENDDOCUMENT();        
