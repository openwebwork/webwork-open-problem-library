##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'exponents', 'logarithm', 'logarithms', 'laws of logarithms', 'natural log')

## DBsubject('Algebra')
## DBchapter('Exponential and logarithmic expressions and functions')
## DBsection('Exponential and logarithmic equations')
## Date('7/15/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')
## TitleText1('Precalculus')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "bizarroArithmetic.pl",
   "parserMultiAnswer.pl",
      "parserPopUp.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

Context("Numeric");
Context()->variables->are(b=>Real, x=>Real);
Context()->flags->set(reduceConstants=>0, reduceConstantFunctions=>0,tolType=>'absolute');
Context()->operators->set(
'+' => {class => 'bizarro::BOP::add', isCommand => 1},
'-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
'*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
' *' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'* ' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'/' => {class => 'bizarro::BOP::divide', isCommand => 1},
' /' => {class => 'bizarro::BOP::divide', isCommand => 1},
'/ ' => {class => 'bizarro::BOP::divide', isCommand => 1},
'//' => {class => 'bizarro::BOP::divide', isCommand => 1},
'**' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
'^' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
);

$base = random(2,8,1);
$exp = random(12,58,1);
$result = Formula("x");

$ans = MultiAnswer(Formula("$base^($exp)"),Formula("$result"))->with(
   singleResult => 1,
   separator => " = ",
   tex_separator => " = ",
   checker => sub {
      my ($correct,$student,$self) = @_;  # get the parameters
      my ($ansHash1, $ansHash2) = @{$self->{ans}};
      my $lhs = $ansHash1->{student_formula};
      my $rhs = $ansHash2->{student_formula};
      my ($exp,$res) = @{$correct};
      $lhs = Formula("$lhs"); $rhs = Formula("$rhs"); $exp = Formula("$exp");
      Context()->flags->set(bizarroDiv=>0, bizarroMul=>0, bizarroAdd=>0, bizarroSub=>0, bizarroPow=>0 );
      delete $exp->{test_values}, $lhs->{test_values}, $rhs->{test_values};
      return 0 unless (($lhs == $exp) && ($rhs == $res)) || (($rhs == $exp) && ($lhs == $res));
      Context()->flags->set(bizarroDiv=>1, bizarroMul=>1, bizarroAdd=>1, bizarroSub=>1, bizarroPow=>1 );
      delete $exp->{test_values}, $lhs->{test_values}, $rhs->{test_values};
      Value::Error("Your equation is not in exponential form.") unless ((($lhs == $exp || $exp == $lhs) && ($rhs == $res || $res == $rhs)) || (($lhs == $res || $res == $lhs) && ($rhs == $exp || $exp == $rhs)));
      Context()->flags->set(bizarroDiv=>0, bizarroMul=>0, bizarroAdd=>0, bizarroSub=>0, bizarroPow=>0 );
      delete $exp->{test_values}, $lhs->{test_values}, $rhs->{test_values};
      return 1;
       },
  );

$radio1 = PopUp(["","3","22","x","3^22"],"3");
$radio2 = PopUp(["","3","22","x","3^22"],"22");
$radio3 = PopUp(["","3","22","x","3^22"],"x");


 
   
##############################################################
#
#  Text
#
#

BEGIN_PGML

>> ### Logarithmic Equations ### <<


We know that the exponential function [`\color{red}{y}=2^\color{blue}{x}`] is the inverse of the logarithmic function [`\color{blue}{y}=\log_{2}(\color{red}{x})`].


This fact tells us that the output of the logarithmic function is an *exponent* (follow the blue highlight back to the exponential function).

For example, let's elaborate on [`\log_{2}(x)=5`]:

* [`\log_2(x)`] represents "the power of two that results in [`x`]"
* saying that [`\log_2(x) = 5`] means that "the power of two that results in [`x`]" = [`5`]
* in other words, "[`5`] is the power of two that results in [`x`]", which can be expressed: [`2^5 = x`]

So, [`\log_{2}(x)=5`] can be rewritten as [`x=2^5`]. 

This gives us a way to rewrite a logarithmic equation as an exponential equation.

For example, rewrite [`\log_{3}(x)=22`]  as an exponential equation.

* [`\log_3(x)`] represents "the power of [__________]{$radio1} that results in [`x`]"
* saying that [`\log_3(x) = 22`] means that "the power of three that results in [`x`]" = [__________]{$radio2}
* in other words, "[`22`] is the power of three that results in [`x`]", which can be expressed as: [__________]{$radio3} = [`3^{22}`]


Thus, [`\log_{3}(x)=22`] is equivalent to [`x=3^{22}`]


>> ### Practice ### <<

Rewrite [` \log_{[$base]}([$result]) = [$exp] `] as an exponential equation:

[__________]{$ans} = [__________]{$ans}

END_PGML

##############################################################
#
#  Answers
#
#

##############################################################
#
#  Hints
#
#



BEGIN_PGML_HINT


* [`\log_{\color{red}{b}}\color{blue}{c}=\color{green}{a}`] means that [`\color{red}{b}^{\color{green}{a}}=\color{blue}{c}`].

END_PGML_HINT

##############################################################
#
#  Solution
#
#



BEGIN_PGML_SOLUTION

[`\log_{\color{red}{[$base]}}(\color{blue}{[$result]}) = \color{green}{[$exp]}`] is equivalent to 
[`\color{blue}{[$result]} = \color{red}{[$base]}^{\color{green}{[$exp]}} `].

END_PGML_SOLUTION


ENDDOCUMENT();        
