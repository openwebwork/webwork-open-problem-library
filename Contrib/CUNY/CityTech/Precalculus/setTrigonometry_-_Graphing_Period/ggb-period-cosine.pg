##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('trigonometry', 'trig functions', 'trigonometric functions', 'period', 'amplitude', 'phase shift', 'trigonometric graph','fraction')

## DBsubject('Trigonometry')
## DBchapter('Trigonometric functions')
## DBsection('Sine & cosine functions - definitions, graphs, & properties')
## Date('7/19/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "AppletObjects.pl",
   "PGgraphmacros.pl",
   "PGML.pl",
   "contextFraction.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->flags->set(
  reduceConstants=>0, 
  reduceConstantFunctions=>0,
  tolerance=>0.05,
  tolType=>'absolute');

$A = Real(1);
$phaseShift = Real(0);
$B = list_random(2,3,4,6);
$period = Formula("2pi/$B");

$f = Formula("$A cos($B x)")->reduce;

$ans = List($A,$period,$phaseShift);

$custom = sub {
    my ($correct, $student, $ansHash, $value) = @_;
    my ($Samp,$Sper,$Sphase) = @$student;
    my ($Camp,$Cper,$Cphase) = @$correct;
    my @errors = ();
    my $score = 0;
    $ansHash->{correct_ans_latex_string} = "\text{amplitude: }$Camp\text{; period: }$Cper\text{; phase shift = }$Cphase";
    $ansHash->{preview_latex_string} = "\text{amplitude: }$Samp\text{; period: }$Sper\text{; phase shift = }$Sphase";
    if ($Sper == $Cper) {$score = 3};
    return ( $score, @errors );
};

Context("Fraction");
Context()->parens->set("("=>{type=>"Point"});

$periodQ = Fraction("$period/pi")->reduce;
$Q0x = Fraction("$phaseShift/pi")->reduce;
$Q1x = Fraction("$Q0x + $periodQ/4")->reduce;
$Q2x = Fraction("$Q0x + $periodQ/2")->reduce;
$Q3x = Fraction("$Q0x + 3*$periodQ/4")->reduce;
$Q4x = Fraction("$Q0x + $periodQ")->reduce;

$Q0y = $f->eval(x=>"$Q0x*pi");
$Q1y = $f->eval(x=>"$Q1x*pi");
$Q2y = $f->eval(x=>"$Q2x*pi");
$Q3y = $f->eval(x=>"$Q3x*pi");
$Q4y = $f->eval(x=>"$Q4x*pi");

$P = Compute("($Q0x pi, $Q0y)");
$Q = Compute("($Q1x pi, $Q1y)");
$R = Compute("($Q2x pi, $Q2y)");
$S = Compute("($Q3x pi, $Q3y)");
$T = Compute("($Q4x pi, $Q4y)");

######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the
# command end command
# so that they don't get in the way
###################################


$appletName = "ggbfoo";

$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "",
   codebase                 => "",
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => 'configure',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   width                 => 947,              # may want to modify width
   height                => 469,              # may want to modify height
  # mayscript             => "true",
   debugMode             => 0,   # set debugMode to 0 for no debug
                                              # to 1 to make xml representation visible
                                              # to 2 to add alerts detailing progression
                                              # through the applet
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   #submitActionScript => '',
   selfLoading           => 1,
   params     => GEOGEBRA_PARAMS(),# paste parameters in

);


###############################################
#
#  PNG picture of GeoGebra applet for hardcopy

$im = init_graph(-8,-8,8,8, axes=>[0,0], grid=>[8,8], size=>[400,400]);
#add_functions($im,"$f for x in <-8,8> using color:blue and weight:2");

##################################
# Setup GeogebraWebApplet --
###################################

###############################################
#
#  For persistence of GeoGebra applet state 
#  when answers are submitted or page is refreshed.
#  Uses JavaScript interface to GeoGebra.

HEADER_TEXT(
qq! 
<script language="javascript">
   function ggbOnInit(param) {
       if (param == "$appletName") {
           applet_loaded(param,1);  // report that applet is ready. 
           ww_applet_list[param].safe_applet_initialize(2);
       }
   } 
</script>
<noscript>For this question to work properly, 
you must enable JavaScript, or use another browser 
(or computer) on which JavaScript works.</noscript>
!);

#######################################################
#
#  For setting initial values in GeoGebra from WeBWorK
#  Uses JavaScript interface to GeoGebra.

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setAppletCoefficients() {
   var applet=getApplet("$appletName");   // alert("Updating coefficients");
   if (typeof(applet)!="undefined") {
     if (typeof(applet.setValue)!="undefined") {
     
     ////////////////////////////////////////////////////////////////
     //  List the values of the parameters to be set in the applet here
     
     // hide phase shift constructions
        applet.setVisible('i',false);
        applet.setVisible('A',false);

     // hide period constructions
        // applet.setVisible('g',false);
        // applet.setVisible('B',false);
        applet.setLabelVisible('B',false);
        applet.setColor('B',255,0,0);

     // hide amplitude constructions
        applet.setVisible('h',false);
        // applet.setVisible('C',false); // no "C" in cosine construction

     // change visible axis steps (for snap-to-grid)
        applet.setAxisSteps(1,'pi/6',1);
        applet.setPointCapture(1,1);

     // create points so we can ask for coordinates:
        applet.evalCommand('P=(ps,f(ps))'); 	// remove if A is visible
        applet.setLabelVisible('P',true);
        applet.evalCommand('Q=(ps+per/4,f(ps+per/4))'); // remove if sine amplitude
        applet.setLabelVisible('Q',true);	
        applet.evalCommand('R=(ps+per/2,f(ps+per/2))');
        applet.setLabelVisible('R',true);
        applet.evalCommand('S=(ps+3*per/4,f(ps+3*per/4))');
        applet.setLabelVisible('S',true);
        applet.setCaption('B','T');		// remove if no period
        applet.setLabelVisible('B',true);
        applet.setLabelStyle('B',3);

     } else {
          setTimeout("setAppletCoefficients()", 1000);
     }
   } else {
      setTimeout("setAppletCoefficients()",1000);
   }
}
ww_applet_list["$appletName"].setConfig = function() {setAppletCoefficients()};
</script>
END_SCRIPT

HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );

<script language="javascript">
function getAppletValues() {
    console.log("getAppletValues() entered");
	// get a handle for the applet object
	var applet = $appletName;
	var phaseShift = applet.getValue("ps");
	var period = applet.getValue("per");
	var amplitude = applet.getValue("a");
    return( amplitude + "," + period + "," + phaseShift ); 
}
 </script>
END_SCRIPT

###################################
#insert applet into body  -- this does not need to be changed
# except to adjust the insertion of the reinitialize_button or
# a hidden AnswerBox
###################################
 TEXT($PAR,  MODES(TeX=>$im,
                      HTML=>$applet->insertAll(
                                debug =>0,
                                reinitialize_button => 0,
                                includeAnswerBox=>1,
 )));

##############################################################
#
#  Text
#
#

BEGIN_PGML

Manipulate the graph so that it matches [` f(x) = [$f] `].

Give the coordinates of the points P, Q, R, S, and T (you may use 'pi' to represent [`` \pi``] ):  
    a. P = [__________]
    b. Q = [__________]
    c. R = [__________]
    d. S = [__________]
    e. T = [__________]

END_PGML

##############################################################
#
#  Answers
#
#

NAMED_ANS( 'answerBox'=>$ans->cmp(checkTypes=>0, list_checker=>$custom) );
ANS($P->cmp);
ANS($Q->cmp);
ANS($R->cmp);
ANS($S->cmp);
ANS($T->cmp);

sub GEOGEBRA_PARAMS {
    my $result = {
showResetIcon=>"true" ,
enableRightClick=>"false" ,
enableLabelDrags=>"false",
showMenuBar=>"false" ,
showToolBar=>"false",
showAlgebraInput=>"false",
enableShiftDragZoom=>"false",
useBrowserForJS=>"true",
ggbbase64=>""
};
$result;
}

ENDDOCUMENT();        

