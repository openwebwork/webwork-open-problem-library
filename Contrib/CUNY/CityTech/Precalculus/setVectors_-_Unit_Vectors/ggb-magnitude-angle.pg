##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Trigonometry')
## DBchapter('Polar coordinates & vectors')
## DBsection('Polar and rectangular coordinates')
## Date('7/31/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "AppletObjects.pl",
   "PGML.pl",
   "PGgraphmacros.pl",
   "parserMultiAnswer.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

Context("Vector");
Context()->flags->set(tolType=>'absolute', tolerance=>0.05);

##############################################
#  Begin trig functions in degrees

Context()->functions->remove("cos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub cos {Parser::Function->call('cos',@_)} 
#  Add the new functions to the Context
Context()->functions->add( cos => {class => 'NewFunc', TeX => '\cos'}, );


Context()->functions->remove("sin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub sin {Parser::Function->call('sin',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sin => {class => 'NewFunc', TeX => '\sin'}, );


Context()->functions->remove("tan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180)/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub tan {Parser::Function->call('tan',@_)}
#  Add the new functions to the Context
Context()->functions->add( tan => {class => 'NewFunc', TeX => '\tan'}, );


Context()->functions->remove("sec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub sec {Parser::Function->call('sec',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sec => {class => 'NewFunc', TeX => '\sec'}, );


Context()->functions->remove("csc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub csc {Parser::Function->call('csc',@_)} 
#  Add the new functions to the Context
Context()->functions->add( csc => {class => 'NewFunc', TeX => '\csc'}, );


Context()->functions->remove("cot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180)/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub cot {Parser::Function->call('cot',@_)}
#  Add the new functions to the Context
Context()->functions->add( cot => {class => 'NewFunc', TeX => '\cot'}, );



#sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))}
#sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])}
#sub atan {CORE::atan2($_[1],1)}
#sub acot {CORE::atan2(1,$_[1])}
#sub asec {acos($_[0],1.0/$_[1])}
#sub acsc {asin($_[0],1.0/$_[1])}


Context()->functions->remove("acos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acos {Parser::Function->call('acos',@_)}
#  Add the new functions to the Context
Context()->functions->add( acos => {class => 'NewFunc', TeX => '\arccos'}, );


Context()->functions->remove("asin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub asin {Parser::Function->call('asin',@_)}
#  Add the new functions to the Context
Context()->functions->add( asin => {class => 'NewFunc', TeX => '\arcsin'}, );


Context()->functions->remove("atan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub atan {Parser::Function->call('atan',@_)}
#  Add the new functions to the Context
Context()->functions->add( atan => {class => 'NewFunc', TeX => '\arctan'}, );


Context()->functions->remove("asec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
#sub asec {acos($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub asec {Parser::Function->call('asec',@_)}
#  Add the new functions to the Context
Context()->functions->add( asec => {class => 'NewFunc', TeX => '\arcsec'}, );


Context()->functions->remove("acsc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
#sub acsc {asin($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub acsc {Parser::Function->call('acsc',@_)}
#  Add the new functions to the Context
Context()->functions->add( acsc => {class => 'NewFunc', TeX => '\arccsc'}, );


Context()->functions->remove("acot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acot {Parser::Function->call('acot',@_)}
#  Add the new functions to the Context
Context()->functions->add( acot => {class => 'NewFunc', TeX => '\arccot'}, );


#  End trig functions in degrees
###################################################

###################################################
#  Make a subclass of MultiAnswer
#

package myMultiAnswer;
our @ISA = ('MultiAnswer');

sub new {
  my $self = shift;
  my $ma = $self->SUPER::new(@_);
  $ma->{part} = 1;
  $ma->{answerName} = 'answerBox';
  $ma->{answerNames}{0} = $ma->{answerName};
  $ma->{id} = $MultiAnswer::answerPrefix.$ma->{answerName};
  $ma->{singleResult} = 1;
  $ma->{namedRules}  = 1;
  return $ma;
}

sub ANS_NAME {
  my $self = shift;
  my $i = shift;
  $self->{answerNames}{$i} = ($i == 0 ? $self->{answerName} : $self->{id}.'_'.$i);
  return $self->{answerNames}{$i};
}

package main;

#  End subclass of MultiAnswer
###################################################

$mag = Real(1);
$theta = Real(45);
#Context()->{error}{msg}{"Can't convert an Empty Value to a Real Number"} = "It looks like you left one of your answers blank!";
$multiAns = myMultiAnswer->new(List(1,2), $mag, $theta)->with(
  format => '%2$s, %3$s',
  tex_format => '{\lVert\vec{u}\rVert = %2$s \\ \theta = %3$s^{\circ}}',
  checkTypes=>0,
  allowBlankAnswers=>1,
  checker => sub {
      my ( $correct, $student, $self, $ans_hash ) = @_;
      my ( $ggbStu, $magStu, $thetaStu ) = @{$student};
      my ( $magGGB, $thetaGGB ) = split(/,/,$ggbStu);
#      $self->{ans}[0]->{preview_text_string} = "hidden";
#      $self->{ans}[0]->{preview_latex_string} = "hidden";
#      Value::Error("$magGGB, $thetaGGB, $magStu, $thetaStu");
      return [0,0] if $self->{ans}[0]->{isPreview};
      Value::Error("It looks like you didn't give a magnitude for the unit vector.") unless ($magStu);
      Value::Error("It looks like you didn't give an angle for the unit vector.") unless ($thetaStu);
      Value::Error("Very clever, but you must place \(\vec{v}\) in a quadrant to receive credit.") if ( $thetaStu == 0 || $thetaStu == 90 || $thetaStu == 180 || $thetaStu == 270 );
      Value::Error("Unit vectors always have the same length.<BR>What is the magnitude of any unit vector?") if ($magStu != 1);
      Value::Error("The angle you entered doesn't match the angle from the image.") if (abs($thetaGGB-$thetaStu) != 360 && $thetaGGB != $thetaStu);
      return [1,1,1];
  }
);

######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the
# command end command
# so that they don't get in the way
###################################


$appletName = "ggbfoo";

$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "",
   codebase                 => "",
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => 'configure',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   width                 => 613,              # may want to modify width
   height                => 525,              # may want to modify height
  # mayscript             => "true",
   debugMode             => 0,   # set debugMode to 0 for no debug
                                              # to 1 to make xml representation visible
                                              # to 2 to add alerts detailing progression
                                              # through the applet
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   #submitActionScript => '',
   selfLoading           => 1,
   params     => GEOGEBRA_PARAMS(),# paste parameters in

);


###############################################
#
#  PNG picture of GeoGebra applet for hardcopy

 $im = init_graph(-4,-4,4,4,axes=>[0,0],grid=>[8,8],size=>[400,400]);
 $im->moveTo(0,0);
 $im->arrowTo(2,2,'blue',2);


##################################
# Setup GeogebraWebApplet --
###################################

###############################################
#
#  For persistence of GeoGebra applet state 
#  when answers are submitted or page is refreshed.
#  Uses JavaScript interface to GeoGebra.

HEADER_TEXT(
qq! 
<script language="javascript">
   function ggbOnInit(param) {
       if (param == "$appletName") {
           applet_loaded(param,1);  // report that applet is ready. 
           ww_applet_list[param].safe_applet_initialize(2);
       }
   } 
</script>
<noscript>For this question to work properly, 
you must enable JavaScript, or use another browser 
(or computer) on which JavaScript works.</noscript>
!);


#######################################################
#
#  For setting initial values in GeoGebra from WeBWorK
#  Uses JavaScript interface to GeoGebra.

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setAppletCoefficients() {
   var applet=getApplet("$appletName");   // alert("Updating coefficients");
   if (typeof(applet)!="undefined") {
     if (typeof(applet.setValue)!="undefined") {
     
     ////////////////////////////////////////////////////////////////
     //  List the values of the parameters to be set in the applet here
     
          // Initialize anything?
          applet.setFixed('text1',true,false);
          applet.setRounding(3);
     } else {
          setTimeout("setAppletCoefficients()", 1000);
     }
   } else {
      setTimeout("setAppletCoefficients()",1000);
   }
}
ww_applet_list["$appletName"].setConfig = function() {setAppletCoefficients()};
</script>
END_SCRIPT

HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );

<script language="javascript">
function getAppletValues() {
    console.log("getAppletValues() entered");
	// get a handle for the applet object
	var applet = $appletName;
	var mag = applet.getValue("mag");
	var theta = applet.getValue("theta");

    return( mag + ',' + theta );	
}
 </script>
END_SCRIPT

@completed = split(/:/,$main::inputs_ref->{_data}) // (0,0,0,0,0);

###################################
#insert applet into body  -- this does not need to be changed
# except to adjust the insertion of the reinitialize_button or
# a hidden AnswerBox
###################################
 TEXT($PAR,  MODES(TeX=>$im,
                      HTML=>$applet->insertAll(
                                debug =>0,
                                reinitialize_button => 0,
                                includeAnswerBox=>1,
 )));

##############################################################
#
#  Text
#
#

BEGIN_PGML

[$PAR]*

Drag [`\vec{v}`] into one of the four quadrants, then give the magnitude and direction angle for the *unit* vector, [`\vec{u}`].

    [`\lVert \vec{u} \rVert = `] [@$multiAns->ans_rule(20)@]*

    [` \theta = `] [@$multiAns->ans_rule(20)@]*

You must complete this problem once for each quadrant:

    [`[@ ($completed[1]==1)?'\boxtimes':'\square'@]*`] Quadrant I

    [`[@ ($completed[2]==1)?'\boxtimes':'\square'@]*`] Quadrant II

    [`[@ ($completed[3]==1)?'\boxtimes':'\square'@]*`] Quadrant III

    [`[@ ($completed[4]==1)?'\boxtimes':'\square'@]*`] Quadrant IV

END_PGML

##############################################################
#
#  Answers
#
#

NAMED_ANS($multiAns->cmp);

$needed = 4;

install_problem_grader(sub {
  my ($answers, $state) = (@_);
  my $result = {
    score => 0,
    errors => '',
    type => 'persistent grader',
    msg => '',
  };

  my $name = $main::PG->{flags}{ANSWER_ENTRY_ORDER}[0];
  my $ans = $answers->{$name};
  my $score = $answers->{$name}{score};
  $result->{score} = $score;
  my $data = $main::inputs_ref->{_data} // "0:0:0:0:0";
  my ($correct,@quadrants) = split(/:/,$data);
  my ($MAG,$THETA) = split(/,/,$ans->{original_student_ans});
  if ($main::inputs_ref->{submitAnswers}) {
    if ($score == 1) {
      # Check whether credit has been given for this quadrant already
      foreach my $Q (0..3) {
        if ($THETA > $Q*90 && $THETA < ($Q+1)*90 && $quadrants[$Q]==1) {
           $ans->{score} = $result->{score} = $score = 0;
           $ans->{ans_message} = "You have already received credit for a vector in this quadrant. <BR> Reposition the vector to another quadrant and try again.";
           last;
        }
      }
    }
    if ($score == 1) {
      # if we're still correct, record credit for the quadrant
      foreach my $Q (0..3) {
        if ($THETA > $Q*90 && $THETA < ($Q+1)*90) {
           $quadrants[$Q] = 1;
           last;
        }
      }
      $correct++ if $correct < $needed;
      $state->{num_of_correct_ans}++;
      my $need = $needed - $correct;
      $ans->{ans_message} = "Good job! <BR>".
        "You need to get the problem correct $need more time".($need == 1 ? "" : "s")." for full credit."
            if $need && $ans->{ans_message} eq '';
    } else {
      $state->{num_of_incorrect_ans}++;
    }
    $state->{recorded_score} = $state->{sub_recorded_score} = $correct/$needed;
    $data = join(':',$correct,@quadrants);
  }

  INSERT_RESPONSE($name,'_data',$data);
  $main::inputs_ref->{_data} = $data;
  push @{ $main::PG->{flags}{KEPT_EXTRA_ANSWERS} }, '_data';
  $result->{msg} = '<input type="hidden" name="_data" value="'.$data.'" />' .
    ($correct ?
      ($correct == $needed ?
        'You have completed the problem.' :
        'You have '.$correct.' out of '.$needed.' correct so far.') :
      'You must get this problem correct '.$needed.' times for full credit.');

  return ($result, $state);
});

sub GEOGEBRA_PARAMS {
    my $result = {
showResetIcon=>"true" ,
enableRightClick=>"false" ,
enableLabelDrags=>"false",
showMenuBar=>"false" ,
showToolBar=>"false",
showAlgebraInput=>"false",
enableShiftDragZoom=>"false",
useBrowserForJS=>"true",
ggbbase64=>""
};
$result;
}

ENDDOCUMENT();        

