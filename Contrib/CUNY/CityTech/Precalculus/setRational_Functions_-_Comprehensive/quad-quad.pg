##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Algebra')
## DBchapter('Rational equations and functions')
## DBsection('Asymptotes')
## Date('6/29/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "contextFraction.pl",
   "PGgraphmacros.pl",
   "parserAssignment.pl",
   "answerHints.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Fraction");
Context()->variables->are(x=>['Real',limits=>[-15,15]],y=>['Real',limits=>[-15,15]]);
Context()->parens->set("("=>{type=>"Point"});
Context()->noreduce('(-x)+y','(-x)-y');
parser::Assignment->Allow;

#@roots = (-7,-5,-3,-1,1,3,5,7);
#@rChoice = NchooseK(8,4);
#@r = @roots[ @rChoice ];

$r[0] = non_zero_random(-4,4,1);
do { $r[1] = $r[0]+random(-1,1,2)*random(2,8,1); } until ($r[1] != 0);
do { $gap = random(3,6,1); } until ( abs($r[0]-$r[1])!= $gap && abs($r[0]) != $gap);
$r[2] = $r[0]+$gap;
$r[3] = $r[0]-$gap;

# sort the roots for graphing purposes
@x = PGsort( sub {$_[0] < $_[1]} , @r );
@dom = PGsort( sub {$_[0] < $_[1]}, ($r[2],$r[3]) );

foreach my $i (0..3) {
  $fac[$i] = Formula("x-$r[$i]")->reduce;
}

  $A = random(-1,1,2)*random(3,7,2);
do { $B = random(1,7,1); } until ($B != abs($A));

  $rational = Formula("($A*$fac[0]*$fac[1])/($B*$fac[2]*$fac[3])")->reduce;
#  $rational = $rational->with(test_at=>[ [ $r[1],0 ] ]);
#  $rational->{checkUndefinedPoints} = 'true';

  # define the reduced formulas for rational_i 
  # so we can place the open_circle on the graph
  $reduced = Formula("($A*$fac[0]*$fac[1])/($B*$fac[2]*$fac[3])")->reduce;

$haReal = $A/$B;
$ha = Fraction($haReal);
$HAtype = Formula("y=$ha");
$HA = $HAtype; #String("none"); 
$VA = List(Formula("x=$r[2]"),Formula("x=$r[3]"));
$roots = List(Point("($r[0],0)"),Point("($r[1],0)"));
$hole = Real("$r[1]");
$holeY = Fraction($reduced->eval(x=>$r[1]));

#Context("Point");
#Context()->strings->add("none");
#$holePoint = Compute("($hole,$holeY)");
$holePoint = String("none")->with( typeMatch => Point(0,0) );

# rational_i has a VA (=1) or root (=0) or hole (=2) or none (=3) for r_j
@tf = (0,0,1,1);

# Custom PostFilters for error messages
#######################################
$customAsy = sub {
    my $ans = shift;
    $ans->{ans_message} = "Asymptotes are lines, and must be expressed as equations - not just as numbers." if ($ans->{ans_message} =~ m/isn't a variable equal to a/);
    return $ans;
};

$customHole = sub { 
  my $ans = shift; 
  $ans->{ans_message} = "Your function does not express the hole in the graph." 
    if $ans->{ans_message} eq "The domain of your function doesn't match that of the correct answer";
  return $ans; 
};

################
# Create Graph #
################
$gr = init_graph(-20,-20,20,20, size=>[400,400], grid=>[20,20], axes=>[0,0]);
add_functions($gr,"$rational for x in <-20,$x[0]> using color:blue and weight:2");
add_functions($gr,"$rational for x in <$x[0],$x[1]> using color:blue and weight:2");
add_functions($gr,"$rational for x in <$x[1],$x[2]> using color:blue and weight:2");    
add_functions($gr,"$rational for x in <$x[2],$x[3]> using color:blue and weight:2");
add_functions($gr,"$rational for x in <$x[3],20> using color:blue and weight:2");
($gr->fn)[0]->steps(250);
($gr->fn)[1]->steps(200);
($gr->fn)[2]->steps(200);
($gr->fn)[3]->steps(200);
($gr->fn)[4]->steps(300);
foreach my $j (0..3) {
  if ($tf[$j]==0) {
    $y = $reduced->eval(x=>$r[$j]);
    $gr->stamps( closed_circle($r[$j],$y,'blue') );
    #$gr->lb( new Label($r[$j],$y,"($r[$j],$y)", 'blue','bottom','right'));
  };
  if($tf[$j]==1) {
    $gr->moveTo($r[$j],-20);
    $gr->lineTo($r[$j],20,'red',2,'dashed');
  };    
  if ($tf[$j]==2) {
    $y = $reduced->eval(x=>$r[$j]);
    $gr->stamps( open_circle($r[$j],$y,'blue') );
  };
}
$gr->moveTo(-20,$haReal);
$gr->lineTo(20,$haReal,'red',1,'dashed');

$im = image(insertGraph($gr), width=>400, height=>400, tex_size=>800);

Context("Interval");
Context()->operators->undefine('-',' -','- ');
Context()->{error}{msg}{"Can't use '-' in this context"} 
  = "Please submit your answer in proper interval notation.";

$domain = Interval("(-inf,$dom[0]) U ($dom[0],$dom[1]) U ($dom[1],inf)");
# (-inf,$dom[0]) U ($dom[0],$dom[1]) U ($dom[1],$dom[2]) U ($dom[2],inf)

##############################################################
#
#  Text
#
#

BEGIN_PGML

[`` y = [$rational] ``]

The domain of this function is: [_______________________]{$domain}

This graph has horizontal asymptote(s) at: [_______________________]{$HA->cmp(typeMatch=>$HAtype)->withPostFilter($customAsy)}

This graph has vertical asymptote(s) at: [_______________________]{$VA->cmp()->withPostFilter($customAsy)}

This function has root(s) at: [_______________________]{$roots}

This function has hole(s) at: [_______________________]{$holePoint->cmp(typeMatch=>Point(0,0))}

* If this function does not have one of the requested features, respond with "none"
END_PGML

##############################################################
#
#  Answers
#
#

BEGIN_PGML_HINT

Think about where your rational function will have:
* _vertical asymptotes_, 
* _holes_, 
* and _roots_.

END_PGML_HINT

BEGIN_PGML_SOLUTION

>> [$im]* <<

END_PGML_SOLUTION

ENDDOCUMENT();