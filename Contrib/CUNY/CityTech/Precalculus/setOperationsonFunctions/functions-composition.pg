##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS('algebra', 'function', 'input', 'output', 'domain', 'rational function', 'radical function', 'compositions')

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Compositions and combinations of functions')
## Date('6/4/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')
## TitleText1('Precalculus')


########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "contextLimitedPolynomial.pl",
   "contextFraction.pl",
   "niceTables.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
# Set everything up in "Numeric" context
Context("Numeric");
Context()->noreduce('(-x)-y','(-x)+y');


@word = ("zero","one","two","three","four","five","six","seven","eight","nine","ten");

$fB = random(2,6,1);
# ensure that the root of f(x) is not an integer
do { $fC = non_zero_random(-10,10,1); } until (gcf($fB, abs($fC)) != $fB);
$f = Formula("$fB x + $fC")->reduce;
#$fRoot = Fraction(-$fC,$fB)->reduce;

$gA = 1;
$gRoot1 = non_zero_random(-9,9,1);
do{ $gRoot2 = non_zero_random(-9,9,1); } until ($gRoot1 != $gRoot2);
$gB = -($gRoot1 + $gRoot2);
$gC = $gRoot1*$gRoot2;
$g = Formula("$gA x^2 + $gB x + $gC")->reduce;

$xA = random(2,5,1);
$xB = random(-5,-2,1);

$fOfgA = $f->eval(x=>($g->eval(x=>$xA)));
$gOffA = $g->eval(x=>($f->eval(x=>$xA)));

$fOfgB = $f->eval(x=>($g->eval(x=>$xB)));
$gOffB = $g->eval(x=>($f->eval(x=>$xB)));

#x^2 + gB x + gC sub (fB x + fC)
$gOffX = Formula("($fB)^2 x^2 + (2*$fB*$fC + $fB*$gB) x + (($fC)^2 + $gB*$fC + $gC)")->reduce;
$fOfgX = Formula("$fB x^2 + ($fB*$gB) x + ($fB*$gC + $fC)")->reduce;



# Specialize context for "simplifying" polynomials

Context("LimitedPolynomial-Strict");
Context()->{error}{msg}{"Addition is allowed only between monomials"}
    = "Please combine like terms and resubmit your answer.";
Context()->{error}{msg}{"Subtraction is allowed only between monomials"}
    = "Please combine like terms and resubmit your answer.";
Context()->{error}{msg}{"Multiplication can only be used between coefficients and variables"}
    = "Please distribute your multiplication and resubmit your answer.";

# These were already computed when we had the freedom of "Numeric"
# Now we re-wrap them in the new context to force students to simplify

$fOfgX = Formula($fOfgX);
$gOffX = Formula($gOffX);

# Another specialized context to force students to evaluate compositions
Context("LimitedNumeric");
Context()->{error}{msg}{"Can't use '+' in this context"} 
  = "Addition is disabled for this problem. Simplify the sum and resubmit your answer.";
Context()->{error}{msg}{"Can't use '-' in this context"} 
  = "Subtraction is disabled for this problem. Simplify the difference and resubmit your answer.";
Context()->{error}{msg}{"Can't use '*' in this context"} 
  = "Multiplication is disabled for this problem. Simplify the product and resubmit your answer.";
Context()->{error}{msg}{"Can't use '/' in this context"} 
  = "Division is disabled for this problem. Simplify the quotient and resubmit your answer.";
Context()->{error}{msg}{"Can't use '^' in this context"} 
  = "Exponents are disabled for this problem. Compute the result for yourself and resubmit your answer.";
Context()->{error}{msg}{"Can't use '**' in this context"} 
  = "Exponents are disabled for this problem. Compute the result for yourself and resubmit your answer.";

# These were already computed when we had the freedom of "Numeric"
# Now we re-wrap them in the specialized context to force students to compute
# the answers without using any operations in their response

$fOfgA = Compute($fOfgA);
$fOfgB = Compute($fOfgB);
$gOffA = Compute($gOffA);
$gOffB = Compute($gOffB);

#<here's the code to compute f([$xA]) = [@ $f->eval(x=>$xA) @], g([$xA]) = [@ $g->eval(x=>$xA) @]>

Context()->variables->add('g'=>'Real');
##############################################################
#
#  Text
#
#

BEGIN_PGML

>> ### Composition of Functions ### <<

Consider

>> [` f(x) = 9x-3 \qquad`]  and  [`\qquad g(x) = x^2-5x+7 `]. <<  

We understand how to evaluate an output [`f(x)`] for an input [`x`]. For example, if we want to find [`f(2)`] and [`g(2)`], the input is [`2`] and we need to substitute [`x`] by [`2`] in the definitions of [`f(x)`] and [`g(x)`].

>> [` f(x) = 9x-3 \quad\underset{x\;\rightarrow\;2}\longrightarrow\quad f(2) = 9(2)-3 \quad\longrightarrow\quad 18-3
\quad\longrightarrow\quad 15`] <<

>> [` g(x) = x^2-5x+7 \quad\underset{x\;\rightarrow\;2}\longrightarrow\quad g(2) = (2)^2-5(2)+7 \quad\longrightarrow\quad 4-10+7 \quad\longrightarrow\quad 1`] <<

The process of _plugging_ a number into a function is an important one.  However, an input may not be a number.  For instance, what if the input is a [`\square`]?  Yes, a [`\square`]. Let's say we want to evaluate [`f(\square)`].

>> [`f(x) = 9x-3 \quad\underset{x\;\rightarrow\;\square}\longrightarrow\quad f(\square)=9(\square)-3 `] <<

This gives that [`f(\square) =9(\square)-3`]. For [`g(\star)`], the input is [`\star`].

>> [` g(x) = x^2-5x+7 \quad\underset{x\;\rightarrow\;\star}\longrightarrow\quad g(\star) =(\star)^2-5(\star)+7`] <<

So [`g(\star)=(\star)^2-5(\star)+7`].

The _composition of_ [`f`] _and_ [`g`] is another way of combining two functions.   The composition of [`f`] and [`g`] is a new function 
denoted by [`(f\circ g)(x)`]. It is defined by [`(f\circ g)(x)=f(g(x))`].
To find [`f({\bf{g(x)}})`], we evaluate the function [`f(x)`] for the input [`{\bf{g(x)=x^2-5x+7}}`]. Here the input is a polynomial.  When the input is neither [`x`] nor a number, it helps to think about the input as a square.
We need to substitute each [`\square`] by [`x^2-5x+7`] enclosed in parentheses.

>> [` f(\square)= 9(\square)-3 \quad\underset{\square\;\rightarrow\;{\bf{x^2-5x+7}}}\longrightarrow\quad  f({\bf{x^2-5x+7}}) = 9({\bf{x^2-5x+7}})-3`] <<

>>[`\quad\longrightarrow\quad  9x^2-45x+63 -3  \quad\longrightarrow\quad  9x^2-45x+60 `]<<

So [`(f\circ g)(x)= 9x^2-45x+60`].  

Every function produces an output for an input. The new function [`(f\circ g)(x)`] can be evaluated at the input [`x=2`] to produce the output 
[`(f\circ g)(2)`]. In order to find [`(f\circ g)(2)`], we can proceed in two ways: one that requires [`(f\circ g)(x)`] and another one that does not.

* Suppose we know [`(f\circ g)(x)`]. The output [`(f\circ g)(2)`] is the evaluation of the function [`(f\circ g)(x)`] for the input [`2`].

>>[`(f\circ g)(x)= 9x^2-45x+60 \quad\underset{x\;\rightarrow\;2}\longrightarrow\quad 
(f\circ g)(2) =  9(2)^2-45(2)+60 
\quad\longrightarrow\quad 36-90+60 \quad\longrightarrow\quad  6`] <<

So [`(f\circ g)(2)=6`].

* If we don't have a formula for [`(f\circ g)(x)`], then we can see [`(f\circ g)(2)=f(g(2))`] as the evaluation of the function [`f(x)`] for the input [`g(2)`]. In this case we need to find [`g(2)`] first. From earlier calculations, we know that 

>> [` g(x) = x^2-5x+7 \quad\underset{x\;\rightarrow\;2}\longrightarrow\quad g(2) = (2)^2-5(2)+7 \quad\longrightarrow\quad 4-10+7 \quad\longrightarrow\quad 1`] <<

So [`g(2)=1`]. Now we need to evaluate [`f(x)`] for the input [`1`].

>> [`f(x) = 9x-3 \quad\underset{x\;\rightarrow\;1}\longrightarrow\quad f(1) = 9(1)-3 \quad\longrightarrow\quad 9-3\quad\longrightarrow\quad 6`] <<

Hence [`(f\circ g)(2)=f(g(2))=f(1)=6`].

When dealing with composition of functions, the order of the functions matters. In general, [`(f\circ g)(x)`] and [`(g\circ f)(x)`] are not the same.

>> #### Practice #### <<

Consider [` f(x) = [$f] `] and  [` g(x) = [$g] `].

* You must combine all like terms before you submit your answer.
* You must expand all products before your submit your answer.

a. Compute: [` (f \circ g)([$xA]) = `][_____________________________]{$fOfgA}

b. Compute: [` (g \circ f)([$xA]) = `][_____________________________]{$gOffA}

c. Compute: [` (f \circ g)([$xB]) = `][_____________________________]{$fOfgB}

d. Compute: [` (g \circ f)([$xB]) = `][_____________________________]{$gOffB}

e. Simplify: [` (f \circ g)(x) = `][_____________________________]{$fOfgX}

f. Simplify: [` (g \circ f)(x) = `][_____________________________]{$gOffX}



END_PGML

##############################################################
#
#  Answers
#
#

##############################################################
#
#  Hints
#
#



BEGIN_PGML_HINT

* Which _function_ do you want to evaluate?

* What's your _input_?

* Do you need to evaluate your input? In other words, is your input an output?  If so, identify the function and the input that produce the output.  Then evaluate it.  Expand all products. Simplify the expression by combining all like terms.

* Use the definition of the function you want to evaluate and substitute each [`x`] by the input.

* Expand all products. Simplify the expression by combining all like terms.



END_PGML_HINT

##############################################################
#
#  Solutions
#
#


BEGIN_PGML_SOLUTION

a. We have that [` (f \circ g)([$xA]) = f(g([$xA]))`] which is the evaluation of [`f(x)`] for the input [`g([$xA])`].  We start by finding the input [`g([$xA])`].  

    >> [`g(x) = [$g] \quad\underset{x\;\rightarrow\;[$xA]}\longrightarrow\quad g([$xA])
= ([$xA])^2 + [$gB] ([$xA]) + [$gC] 
\quad\longrightarrow\quad [@ $g->eval(x=>$xA) @]`] <<  

    So [`g([$xA])=[@ $g->eval(x=>$xA) @]`] which means that [` (f \circ g)([$xA]) = f(g([$xA]))= f([@ $g->eval(x=>$xA) @])`]. Now we need to find
[`f([@ $g->eval(x=>$xA) @])`].  

    >> [`f(x) = [$f] \quad\underset{x\;\rightarrow\;[@ $g->eval(x=>$xA) @]}\longrightarrow\quad f([@ $g->eval(x=>$xA) @])
= [$fB] ([@ $g->eval(x=>$xA) @])+ [$fC]
\quad\longrightarrow\quad [@ $f->eval(x=>$g->eval(x=>$xA)) @]`] <<  

    So [` (f \circ g)([$xA]) = f(g([$xA]))= f([@ $g->eval(x=>$xA) @])= [$fOfgA]`].  

b. We have that [` (g \circ f)([$xA]) = g(f([$xA]))`] which is the evaluation of [`g(x)`] for the input [`f([$xA])`].  We start by finding the input [`f([$xA])`].  
  
    >> [`f(x) = [$f] \quad\underset{x\;\rightarrow\;[$xA]}\longrightarrow\quad f([$xA])
= [$fB] ([$xA])+ [$fC]
\quad\longrightarrow\quad [@ $f->eval(x=>$xA) @]`] <<  
  
    So [`f([$xA])=[@ $f->eval(x=>$xA) @]`] which means that [` (g \circ f)([$xA]) = g(f([$xA]))= g([@ $f->eval(x=>$xA) @])`]. Now we need to find
[`g([@ $f->eval(x=>$xA) @])`].  
  
    >> [`g(x) = [$g] \quad \underset{x\;\rightarrow\;[@ $f->eval(x=>$xA) @]}\longrightarrow\quad g([@ $f->eval(x=>$xA) @])
= ([@ $f->eval(x=>$xA) @])^2 + [$gB] ([@ $f->eval(x=>$xA) @]) + [$gC] 
\quad\longrightarrow\quad [@ $g->eval(x=> $f->eval(x=>$xA) ) @]`] <<  
  
    So [` (g \circ f)([$xA]) = g(f([$xA]))= g([@ $f->eval(x=>$xA) @]) = [$gOffA]`].

c. We have that [` (f \circ g)([$xB]) = f(g([$xB]))`] which is the evaluation of [`f(x)`] for the input [`g([$xB])`].  We start by finding the input [`g([$xB])`].  

    >> [`g(x) = [$g] \quad\underset{x\;\rightarrow\;[$xB]}\longrightarrow\quad g([$xB])
= ([$xB])^2 + [$gB] ([$xB]) + [$gC] 
\quad\longrightarrow\quad [@ $g->eval(x=>$xB) @]`] <<  

    So [`g([$xB])=[@ $g->eval(x=>$xB) @]`] which means that [` (f \circ g)([$xB]) = f(g([$xB]))= f([@ $g->eval(x=>$xB) @])`]. Now we need to find
[`f([@ $g->eval(x=>$xB) @])`].  

    >> [`f(x) = [$f] \quad\underset{x\;\rightarrow\;[@ $g->eval(x=>$xB) @]}\longrightarrow\quad f([@ $g->eval(x=>$xB) @])
= [$fB] ([@ $g->eval(x=>$xB) @])+ [$fC]
\quad\longrightarrow\quad [@ $f->eval(x=>$g->eval(x=>$xB)) @]`] <<

    So [` (f \circ g)([$xB]) = f(g([$xB])) = f([@ $g->eval(x=>$xB) @]) = [$fOfgB]`].

d. We have that [` (g \circ f)([$xB]) = g(f([$xB]))`] which is the evaluation of [`g(x)`] for the input [`f([$xB])`].  We start by finding the input [`f([$xB])`]. 

    >> [`f(x) = [$f] \quad\underset{x\;\rightarrow\;[$xB]}\longrightarrow\quad f([$xB])
=[$fB] ([$xB])+ [$fC]
\quad\longrightarrow\quad [@ $f->eval(x=>$xB) @]`] <<

    So [`f([$xB])=[@ $f->eval(x=>$xB) @]`] which means that [` (g \circ f)([$xB]) = g(f([$xB]))= g([@ $f->eval(x=>$xB) @])`]. Now we need to find
[`g([@ $f->eval(x=>$xB) @])`].

    >> [`g(x) = [$g] \quad\underset{x\;\rightarrow\;[@ $f->eval(x=>$xB) @]}\longrightarrow\quad g([@ $f->eval(x=>$xB) @])
= ([@ $f->eval(x=>$xB) @])^2 + [$gB] ([@ $f->eval(x=>$xB) @]) + [$gC] 
\quad\longrightarrow\quad [@ $g->eval(x=> $f->eval(x=>$xB) ) @]`] <<

    So [` (g \circ f)([$xB]) = g(f([$xB])) = g ([@ $f->eval(x=>$xB) @])=  [$gOffB]`].

 
e. We have that [` (f \circ g)(x) = f(g(x))`] which is the evaluation of [`f(x)`] for the input [`g(x)`].  

    >> [`f(x) = [$f] \quad\underset{x\;\rightarrow\;g(x)}\longrightarrow\quad f(g(x))
=[$fB] (g(x))+ [$fC]`] <<

    >> [`\quad\underset{g(x)\;\rightarrow\;[$g]}\longrightarrow\quad 
     [$fB] ([$g])+ [$fC]
\quad\longrightarrow\quad [$fOfgX]`] <<

    So [` (f \circ g)(x) = f(g(x)) = f([$g]) =  [$fOfgX]`].

f. We have that [` (g \circ f)(x) = g(f(x))`] which is the evaluation of [`g(x)`] for the input [`f(x)`].  

    >> [`g(x) = [$g] \quad\underset{x\;\rightarrow\;f(x)} \longrightarrow\quad g(f(x)) = (f(x))^2 + [$gB] (f(x)) + [$gC] `] <<

    >> [`\quad\underset{f(x)\;\rightarrow\;[$f]} \longrightarrow\quad
     ([$f])^2 + [$gB] ([$f]) + [$gC] \quad\longrightarrow\quad [$gOffX]`] <<


    So [` (g \circ f)(x) = g(f(x)) = g([$f]) =   [$gOffX]`].

END_PGML_SOLUTION





ENDDOCUMENT();        
