##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS('algebra', 'function', 'input', 'output', 'domain', 'rational function', 'radical function', 'operations')

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Compositions and combinations of functions')
## Date('6/4/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')
## TitleText1('Precalculus')


########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGgraphmacros.pl",
   "contextLimitedPolynomial.pl",
   "contextFraction.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Fraction");
Context()->noreduce('(-x)-y','(-x)+y');

@word = ("zero","one","two","three","four","five","six","seven","eight","nine","ten");

# f(x) = sqrt(linear) with domain [root, inf)
$fB = random(2,6,1);
# ensure that the root of f(x) is not an integer
do { $fC = non_zero_random(-10,10,1); } until (gcf($fB, abs($fC)) != $fB);
$f = Formula("sqrt($fB x + $fC)")->reduce;
$fRoot = Fraction(-$fC,$fB)->reduce;

# g(x) = 1/quadratic with domain R - {root1, root2}
# note to students: be careful with domains when simplifying
$gA = 1;
# make sure that at least one domain "hole" for g(x) is in the domain of f(x)
do{ $gRoot1 = non_zero_random(-9,9,1); } until ($gRoot1 > $fRoot && abs($fRoot-$gRoot1) > 1);
do{ $gRoot2 = non_zero_random(-9,9,1); } until ($gRoot1 != $gRoot2 && abs($fRoot-$gRoot1) > 1);
# order the g(x) "holes" for later ease of use: root1 < root2 now ensured.
($gRoot1, $gRoot2) = ($gRoot1 < $gRoot2)? ($gRoot1,$gRoot2):($gRoot2,$gRoot1);
$gB = -($gRoot1 + $gRoot2);
$gC = $gRoot1*$gRoot2;
$g = Formula("1/($gA x^2 + $gB x + $gC)")->reduce;

$fPlusg = Formula("$gA x^2 + ($fB+$gB)x + ($fC+$gC)")->reduce;
$fMinusg = Formula("-$gA x^2 + ($fB-$gB)x + ($fC-$gC)")->reduce;
$gMinusf = Formula("$gA x^2 + (-$fB+$gB)x + (-$fC+$gC)")->reduce;
$fTimesg = Formula("($fB*$gA)x^3 + ($fC*$gA+$fB*$gB)x^2 + ($fC*$gB+$fB*$gC)x + $fC*$gC")->reduce;
$fByg = Formula("$f/$g")->reduce;
$gByf = Formula("$g/$f")->reduce;

Context("LimitedPolynomial-Strict");
Context()->{error}{msg}{"Addition is allowed only between monomials"}
    = "Please combine like terms and resubmit your answer.";
Context()->{error}{msg}{"Subtraction is allowed only between monomials"}
    = "Please combine like terms and resubmit your answer.";
Context()->{error}{msg}{"Multiplication can only be used between coefficients and variables"}
    = "Please distribute your multiplication and resubmit your answer.";

$fPlusg = Formula("$fPlusg");
$fMinusg = Formula("$fMinusg");
$gMinusf = Formula("$gMinusf");
$fTimesg = Formula("$fTimesg");

Context("Interval");
$fDom = Compute("[$fRoot, inf)");
$gDom = Interval("R - {$gRoot1, $gRoot2}");
# I wish that $fDom->intersect($gDom) didn't decimal-ize the boundary values
$fPlusgDom = ($fRoot < $gRoot1)? Compute("[$fRoot,$gRoot1)U($gRoot1,$gRoot2)U($gRoot2,inf)"):Compute("[$fRoot,$gRoot2)U($gRoot2,inf)");
$fMinusgDom = ($fRoot < $gRoot1)? Compute("[$fRoot,$gRoot1)U($gRoot1,$gRoot2)U($gRoot2,inf)"):Compute("[$fRoot,$gRoot2)U($gRoot2,inf)");
$gMinusfDom = ($fRoot < $gRoot1)? Compute("[$fRoot,$gRoot1)U($gRoot1,$gRoot2)U($gRoot2,inf)"):Compute("[$fRoot,$gRoot2)U($gRoot2,inf)");
$fTimesgDom = ($fRoot < $gRoot1)? Compute("[$fRoot,$gRoot1)U($gRoot1,$gRoot2)U($gRoot2,inf)"):Compute("[$fRoot,$gRoot2)U($gRoot2,inf)");
$fBygDom = ($fRoot < $gRoot1)? Compute("[$fRoot,$gRoot1)U($gRoot1,$gRoot2)U($gRoot2,inf)"):Compute("[$fRoot,$gRoot2)U($gRoot2,inf)");
$gByfDom = ($fRoot < $gRoot1)? Compute("($fRoot,$gRoot1)U($gRoot1,$gRoot2)U($gRoot2,inf)"):Compute("($fRoot,$gRoot2)U($gRoot2,inf)");

##############################################################
#
#  Text
#
#



BEGIN_PGML


Consider [` f(x) = [$f] \quad`] and  [`\quad g(x) = \displaystyle{[$g]} `].
Use interval notation to state the domain of the following functions:

* You may use "R" to denote "all real numbers".
* Use "U" to indicate the union of intervals.


a. [`f(x): \quad`] [_____________________________]{$fDom}

b. [`g(x): \quad`] [_____________________________]{$gDom}

c. [`(f+g)(x): \quad`] [_____________________________]{$fPlusgDom}

d. [`(f-g)(x): \quad`] [_____________________________]{$fMinusgDom}

e. [`(fg)(x): \quad`] [_____________________________]{$fTimesgDom}

f. [`\left(\dfrac{f}{g}\right)(x): \quad`]  [_____________________________]{$fBygDom}

g. [`\left(\dfrac{g}{f}\right)(x): \quad`]  [_____________________________]{$gByfDom}


END_PGML

##############################################################
#
#  Answers
#
#

##############################################################
#
#  Hints
#
#


BEGIN_PGML_HINT



*To combine the functions*

* If you are calculating a difference or a product, enclose each function in parentheses.

* If you have a difference, the next step is to distribute the negative sign  over _each_ term within the parentheses.

* Expand all products. 

* Combine all like terms.

*To find the domain of a function*

* The domain of a new function that is a combination of [`f(x)`] and [`g(x)`] consists of all inputs [`x`] for which we can evaluate:

[`\qquad`] * the output of the function [`f(x)`],

[`\qquad`] * the output of the function [`g(x)`], and

[`\qquad`] * the output of the new function.

* For each one of these functions, consider the following questions. Is it a polynomial? Does it have an explicit denominator? Does it have any square roots?

[`\qquad`] * All *polynomial* functions have the same domain. What is it?

[`\qquad`] * In case you have an *explicit denominator*, which value can't your denominator take?

[`\qquad`] * If your function has a *square root*, think about the following questions: what can you take the square root of? what can't you take the square root of? 

* Once you find the restriction for each one of the three functions, find all values of [`x`] that satisfy _every_ restriction.

END_PGML_HINT

##############################################################
#
#  Solutions
#
#

$fred = Formula("$fB x + $fC")->reduce;
$fCred = Formula("-$fC")->reduce;
$gden = Formula("$gA x^2 + $gB x + $gC")->reduce;
$g1 = Formula("x-$gRoot1")->reduce;
$g2 = Formula("x-$gRoot2")->reduce;
$a = Formula("$fRoot")->reduce;

foreach my $i (0..5) {
    $gr[$i] = init_graph(-12,-1,12,1, size=>[408,68]);
    # x-axis
    $gr[$i] -> moveTo(-12,0);
    $gr[$i] -> lineTo(12,0,'black','1');
    # x-axis ticks entered as y-value, color, list of x-values
    $gr[$i] -> h_ticks(0,"black",-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12);
    # labels for tickmarks
    foreach my $j (0..12) {
        $gr[$i]->lb( new Label($j,-0.5,$j, 'black','center','middle'));
        $gr[$i]->lb( new Label(-$j,-0.5,-$j, 'black','center','middle'));
    }
}


$gr[0] -> moveTo($a,0);
$gr[0] -> arrowTo(12,0,'blue', 3);
$gr[0] -> stamps( closed_circle($a,0,'blue') );

$gr[1] -> moveTo($gRoot1,0);
$gr[1] -> arrowTo(-12,0,'blue', 3);
$gr[1] -> moveTo($gRoot1,0);
$gr[1] -> lineTo($gRoot2,0,'blue', 3);
$gr[1] -> arrowTo(12,0,'blue', 3);
$gr[1] -> stamps( open_circle($gRoot1,0,'blue') );
$gr[1] -> stamps( open_circle($gRoot2,0,'blue') );

#$fPlusgDom = ($fRoot < $gRoot1)? Compute("[$fRoot,$gRoot1)U($gRoot1,$gRoot2)U($gRoot2,inf)"):Compute("[$fRoot,$gRoot2)U($gRoot2,inf)");

$gr[2] -> moveTo($a,0);
$gr[2] -> lineTo($gRoot1,0,'blue','3');
$gr[2] -> lineTo($gRoot2,0,'blue','3');
$gr[2] -> arrowTo(12,0,'blue', 3);
$gr[2] -> stamps( closed_circle($a,0,'blue') );
$gr[2] -> stamps( open_circle($gRoot1,0,'blue') );
$gr[2] -> stamps( open_circle($gRoot2,0,'blue') );

$gr[3] -> moveTo($a,0);
$gr[3] -> lineTo($gRoot2,0,'blue','3');
$gr[3] -> arrowTo(12,0,'blue', 3);
$gr[3] -> stamps( closed_circle($a,0,'blue') );
$gr[3] -> stamps( open_circle($gRoot2,0,'blue') );


$grc= ($fRoot < $gRoot1)? $gr[2]: $gr[3];


$gr[4] -> moveTo($a,0);
$gr[4] -> lineTo($gRoot1,0,'blue','3');
$gr[4] -> lineTo($gRoot2,0,'blue','3');
$gr[4] -> arrowTo(12,0,'blue', 3);
$gr[4] -> stamps( open_circle($a,0,'blue') );
$gr[4] -> stamps( open_circle($gRoot1,0,'blue') );
$gr[4] -> stamps( open_circle($gRoot2,0,'blue') );

$gr[5] -> moveTo($a,0);
$gr[5] -> lineTo($gRoot2,0,'blue','3');
$gr[5] -> arrowTo(12,0,'blue', 3);
$gr[5] -> stamps( open_circle($a,0,'blue') );
$gr[5] -> stamps( open_circle($gRoot2,0,'blue') );


$grg= ($fRoot < $gRoot1)? $gr[4]: $gr[5];

$ineq = ($fB>0)? "\geq" :"\leq";



####################################################
BEGIN_PGML_SOLUTION

a. [`f(x)=[$f]`]  

    This function has a square root. We need [`[$fred]\geq 0`].  
    
    >> [`[$fred]\geq 0 \quad\longrightarrow\quad [$fB]  x\geq[$fCred]\quad\longrightarrow\quad x[$ineq] [$fRoot] `] <<  
    
    >> [@ image(insertGraph($gr[0]),width=>400, height=>68, tex_size=>700) @]* <<  
    
    The domain of [`f(x)`] is [`[$fDom]`].  
    
b. [`g(x)=\displaystyle{[$g]}`]  

    This function has an explicit denominator. We need [`[$gden]\neq 0`].  
    
    >> [`[$gden]\neq 0 \quad\longrightarrow\quad([$g1])([$g2])\neq 0
\quad\longrightarrow\quad (x\neq [$gRoot1] \quad`] and [`\quad x\neq [$gRoot2])`] <<  

    >> [@ image(insertGraph($gr[1]),width=>408, height=>68, tex_size=>700) @]* <<  
    
    The domain of [`g(x)`] is [`[$gDom]`].  
    
c. [`(f+g)(x) = [$f]+\displaystyle{[$g]}`]  

    This function is the sum of [`f(x)`] and [`g(x)`].  We can add [`f(x)`] and [`g(x)`] as long as we can evaluate [`f(x)`] and [`g(x)`]. These functions have a square root and an explicit denominator. We need  
    
    >>[`[$fred]\geq 0\quad`] and [`\quad [$gden]\neq 0`].<<  
    
    From (a) and (b), we know that  
    
    >>[`([$fred]\geq 0\quad`] and [`\quad [$gden]\neq 0)\quad\longrightarrow\quad (x\geq [$fRoot]\quad`] and
[`\quad x\neq [$gRoot1] \quad`] and [`\quad x\neq [$gRoot2])`].<<  

    The following graph contains all points satisfying these three conditions *at the same time*.  
    
    >> [@ image(insertGraph($grc),width=>408, height=>68, tex_size=>700) @]* <<
    
    The domain of [`(f+g)(x)`] is [`[$fPlusgDom]`].  

d. [`(f-g)(x) = [$f]-\displaystyle{[$g]}`]  

    This function is the difference of [`f(x)`] and [`g(x)`].  We can subtract [`g(x)`] from [`f(x)`]  as long as we can evaluate [`f(x)`] and [`g(x)`]. These functions have a square root and an explicit denominator. We need  
    
    >>[`[$fred]\geq 0\quad`] and [`\quad [$gden]\neq 0`].<<  
    
    From (a) and (b), we know that  
    
    >>[`([$fred]\geq 0\quad`] and [`\quad [$gden]\neq 0)\quad\longrightarrow\quad (x\geq [$fRoot]\quad`] and
[`\quad x\neq [$gRoot1] \quad`] and [`\quad x\neq [$gRoot2])`].<<  

    The following graph contains all points satisfying these three conditions *at the same time*.  
    
    >> [@ image(insertGraph($grc),width=>408, height=>68, tex_size=>700) @]* <<  
    
    The domain of [`(f-g)(x)`] is [`[$fMinusgDom]`].  

e. [`(fg)(x) = \left([$f]\right)\left(\displaystyle{[$g]}\right)`]  

    This function is the product of [`f(x)`] and [`g(x)`].  We can multiply [`f(x)`] by [`g(x)`]  as long as we can evaluate [`f(x)`] and [`g(x)`]. These functions have a square root and an explicit denominator. We need  
    
    >>[`[$fred]\geq 0\quad`] and [`\quad [$gden]\neq 0`].<<  
    
    From (a) and (b), we know that  
    
    >>[`([$fred]\geq 0\quad`] and
    [`\quad [$gden]\neq 0)\quad\longrightarrow\quad (x\geq [$fRoot]\quad`]
and
    [`\quad x\neq [$gRoot1] \quad`] and [`\quad x\neq [$gRoot2])`].<<  
    
    The following graph contains all points satisfying these three conditions *at the same time*.  
    
    >> [@ image(insertGraph($grc),width=>408, height=>68, tex_size=>700) @]* <<  
    
    The domain of [`(fg)(x)`] is [`[$fTimesgDom]`].  

f. [`\left(\dfrac{f}{g}\right)(x) = \dfrac{[$f]}{[$g]} `]  

    This function is the quotient of [`f(x)`] by [`g(x)`].  We can divide [`f(x)`] by [`g(x)`]  as long as we can evaluate [`f(x)`] and [`g(x)`], and [`g(x)\neq 0`].  We need  
    
    >> [`[$fred]\geq 0\quad`]  and [`\quad [$gden]\neq 0`].<<  
    
    From (a) and (b), we know that  
    
    >>[`([$fred]\geq 0\quad`] and
    [`\quad [$gden]\neq 0)\quad\longrightarrow\quad (x\geq [$fRoot]\quad`]
and
    [`\quad x\neq [$gRoot1] \quad`] and [`\quad x\neq [$gRoot2])`].<<  
    
    The following graph contains all points satisfying these three conditions *at the same time*.  
    
    >> [@ image(insertGraph($grc),width=>408, height=>68, tex_size=>700) @]* <<  
    
    The domain of [`\left(\dfrac{f}{g}\right)(x)`] is [`[$fBygDom]`].

g. [`\left(\dfrac{g}{f}\right)(x) = \dfrac{[$g]}{[$f]} `]  

    This function is the quotient of [`g(x)`] by [`f(x)`].  We can divide [`g(x)`] by [`f(x)`]  as long as we can evaluate [`g(x)`] and [`f(x)`], and [`f(x)\neq 0`].  We need  
    
    >> [`[$gden]\neq 0\quad`]  and [`\quad [$fred]\geq  0\quad `] and [`\quad [$fred]\neq 0`].<<  
    
    From (a) and (b), we know that  
    
    >>[`([$gden]\neq 0\quad`] and
    [`\quad [$fred]> 0)\quad\longrightarrow\quad (x\neq [$gRoot1]\quad`]
and
    [`\quad x\neq [$gRoot2] \quad`] and [`\quad x> [$fRoot])`].<<  
    
    The following graph contains all points satisfying these three conditions *at the same time*.
    
    >> [@ image(insertGraph($grg),width=>408, height=>68, tex_size=>700) @]* <<
    
    The domain of [`\left(\dfrac{g}{f}\right)(x)`] is [`[$gByfDom]`].


END_PGML_SOLUTION





ENDDOCUMENT();        
