########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "parserMultiAnswer.pl",
   "parserImplicitEquation.pl",
   "AppletObjects.pl");

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

#
#  Make a subclass of MultiAnswer
#
package myMultiAnswer;
our @ISA = ('MultiAnswer');

sub new {
  my $self = shift;
  my $ma = $self->SUPER::new(@_);
  $ma->{part} = 1;
  $ma->{answerName} = 'answerBox';
  $ma->{answerNames}{0} = $ma->{answerName};
  $ma->{id} = $MultiAnswer::answerPrefix.$ma->{answerName};
  $ma->{singleResult} = 1;
  $ma->{namedRules}  = 1;
  return $ma;
}

sub ANS_NAME {
  my $self = shift;
  my $i = shift;
  $self->{answerNames}{$i} = ($i == 0 ? $self->{answerName} : $self->{id}.'_'.$i);
  return $self->{answerNames}{$i};
}

package main;

Context("ImplicitEquation");
Context()->variables->are(x=>["Real",limits=>[-8,8]],y=>["Real",limits=>[-8,8]]);
Context()->{error}{msg}{"Your formula doesn't look like an implicit equation"} 
  = "It looks like you did not enter an equation. <BR> Double check your entry and try again.";

# Set the "answer" to look like the original image

$f = Formula("(x-2)^2 + (y-1)^2");

$answer = ImplicitEquation("$f = 5", solutions=>[[0,0],[0,4],[2,0],[2,4]]);

$multians = myMultiAnswer->new(List(1,2,3), $answer)->with(
  format => '%2$s',
  tex_format => '%2$s',
  checkTypes=>0,
  allowBlankAnswers=>1,
  checker => sub {
      my ( $correct, $student, $self, $ans_hash ) = @_;
      my ( $ggbStu, $eqnStu ) = @{$student};
      my ( $h, $k, $r ) = split(/,/,$ggbStu);
      my $f = Formula("(x-$h)^2+(y-$k)^2")->reduce;
      my $r2 = $r**2;
#      $self->{ans}[0]->{preview_text_string} = "hidden";
#      $self->{ans}[0]->{preview_latex_string} = "hidden";
      return [0,0] if $self->{ans}[0]->{isPreview};
      $eqnGGB = ImplicitEquation("$f=$r2", 
          limits=>[[$h-$r-1,$h+$r+1],[$k-$r-1,$k+$r+1]]); 
      $eqnStu = ImplicitEquation($eqnStu,
          limits=>[[$h-$r-1,$h+$r+1],[$k-$r-1,$k+$r+1]]);
      Value->Error("Your equation doesn't match the graphed circle. $ggbStu") if $eqnStu != $eqnGGB;
      return [1,1];
  }
);

######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the
# command end command
# so that they don't get in the way
###################################


$appletName = "ggbfoo";

$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "",
   codebase                 => "",
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => 'configure',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   width                 => 640,              # may want to modify width
   height                => 490,              # may want to modify height
  # mayscript             => "true",
   debugMode             => 0,   # set debugMode to 0 for no debug
                                              # to 1 to make xml representation visible
                                              # to 2 to add alerts detailing progression
                                              # through the applet
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   #submitActionScript => '',
   selfLoading           => 1,
   params     => GEOGEBRA_PARAMS(),# paste parameters in

);


###############################################
#
#  PNG picture of GeoGebra applet for hardcopy

 $im = image( "circle-center-multians.png", width=>640, height=>490, tex_size=>850 );


##################################
# Setup GeogebraWebApplet --
###################################

###############################################
#
#  For persistence of GeoGebra applet state 
#  when answers are submitted or page is refreshed.
#  Uses JavaScript interface to GeoGebra.

HEADER_TEXT(
qq! 
<script language="javascript">
   function ggbOnInit(param) {
       if (param == "$appletName") {
           applet_loaded(param,1);  // report that applet is ready. 
           ww_applet_list[param].safe_applet_initialize(2);
       }
   } 
</script>
<noscript>For this question to work properly, 
you must enable JavaScript, or use another browser 
(or computer) on which JavaScript works.</noscript>
!);


#######################################################
#
#  For setting initial values in GeoGebra from WeBWorK
#  Uses JavaScript interface to GeoGebra.

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setAppletCoefficients() {
   var applet=getApplet("$appletName");   // alert("Updating coefficients");
   if (typeof(applet)!="undefined") {
     if (typeof(applet.setValue)!="undefined") {
     
     ////////////////////////////////////////////////////////////////
     //  List the values of the parameters to be set in the applet here
     
          // Initialize variables "(h,k): center" and "(a,b): point" in GeoGebra from WebWork
          applet.setCoords("A", 2, 0); 
          applet.setCoords("O", 1, 2);    
     } else {
          setTimeout("setAppletCoefficients()", 1000);
     }
   } else {
      setTimeout("setAppletCoefficients()",1000);
   }
}
ww_applet_list["$appletName"].setConfig = function() {setAppletCoefficients()};
</script>
END_SCRIPT

HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );

<script language="javascript">
function getAppletValues() {
    console.log("getAppletValues() entered");
	// get a handle for the applet object
	var applet = $appletName;
	var h = applet.getXcoord("O");
	var k = applet.getYcoord("O");
	var r = applet.getValue("r");

        return( h + ',' + k + ',' + r );	
}
 </script>
END_SCRIPT

#         return( '( x - (' + h + '))^2 + ( y - (' + k + '))^2 = (' + r + ')^2' ); 


###################################
#insert applet into body  -- this does not need to be changed
# except to adjust the insertion of the reinitialize_button or
# a hidden AnswerBox
###################################
 TEXT($PAR,  MODES(TeX=>$im,
                      HTML=>$applet->insertAll(
                                debug =>0,
                                reinitialize_button => 0,
                                includeAnswerBox=>1,
 )));

##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT

$PAR
Drag the points to create any circle, find its equation, and enter your equation in the box below.
$PAR
\{ $multians->ans_rule(40) \}

END_TEXT
Context()->normalStrings;

TEXT( "run SetConfig", q!<script language="javascript">setConfig()</script> !) if $inputs_ref->{ "${appletName}_state"} =~ "restart_applet";

 Context()->{error}{msg}{"Can't find any solutions to your equation"} =
       "Your equation does not match the graphed circle.";

##############################################################
#
#  Answers
#
#

NAMED_ANS( $multians->cmp() );

##############################################################
#
#  Grader that expects 4 correct answers to complete the problem
#
#

$needed = 4;

install_problem_grader(sub {
  my ($answers, $state) = (@_);
  my $result = {
    score => 0,
    errors => '',
    type => 'persistent grader',
    msg => '',
  };

  my $name = $main::PG->{flags}{ANSWER_ENTRY_ORDER}[0];
  my $ans = $answers->{$name};
  my $score = $answers->{$name}{score};
  $result->{score} = $score;
  
  my $data = $main::inputs_ref->{_data} // "0";
  my ($correct,@circles) = split(/:/,$data);
  if ($main::inputs_ref->{submitAnswers}) {
    if ($score == 1) {
      my $CIRCLE = List($ans->{original_student_ans});
      foreach my $L (@circles) {
        my $circle = List($L);
        if ($CIRCLE == $circle) {
           $ans->{score} = $result->{score} = $score = 0;
           $ans->{ans_message} = "You have already received credit for this circle. <BR> Change the center and/or the radius and try again.";
           last;
        }
      }
      push(@circles,$CIRCLE->string) if $score;
    }
    if ($score == 1) {
      $correct++ if $correct < $needed;
      $state->{num_of_correct_ans}++;
      my $need = $needed - $correct;
      $ans->{ans_message} = "Good job! <BR>".
        "You need to get the problem correct $need more time".($need == 1 ? "" : "s")." for full credit."
            if $need && $ans->{ans_message} eq '';
    } else {
      $state->{num_of_incorrect_ans}++;
    }
    $state->{recorded_score} = $state->{sub_recorded_score} = $correct/$needed;
    $data = join(':',$correct,@circles);
  }

  INSERT_RESPONSE($name,'_data',$data);
  $main::inputs_ref->{_data} = $data;
  push @{ $main::PG->{flags}{KEPT_EXTRA_ANSWERS} }, '_data';
  $result->{msg} = '<input type="hidden" name="_data" value="'.$data.'" />' .
    ($correct ?
      ($correct == $needed ?
        'You have completed the problem.' :
        'You have '.$correct.' out of '.$needed.' correct so far.') :
      'You must get this problem correct '.$needed.' times for full credit.');

  return ($result, $state);
});

sub GEOGEBRA_PARAMS {
    my $result = {
showResetIcon=>"true" ,
enableRightClick=>"false" ,
enableLabelDrags=>"false",
showMenuBar=>"false" ,
showToolBar=>"false",
showAlgebraInput=>"false",
enableShiftDragZoom=>"false",
useBrowserForJS=>"true",
ggbbase64=>"",
};
$result;
}

ENDDOCUMENT();        
