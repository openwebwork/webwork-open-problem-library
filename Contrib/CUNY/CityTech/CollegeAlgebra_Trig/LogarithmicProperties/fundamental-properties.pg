##DESCRIPTION
##  Algebra problem: Rewrite logarithms in expanded form by applying the properties of logarithms
##ENDDESCRIPTION

##KEYWORDS('algebra', 'logarithm', 'logarithms', 'laws of logarithms')
## DBsubject(Algebra)
## DBchapter(Exponential and logarithmic expressions and functions)
## DBsection(Properties of logarithms)
## Level(2)
## Author(K. Andrew Parker)
## Institution(CUNY City Tech)
## Language(en)

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl"
);

###########################
#
# Subclass the numeric functions
#
package my::Function::numeric;
our @ISA = ('Parser::Function::numeric');

#
# Override log() to return a special value (usually 1) when evaluated
# effectively eliminating it from the product.
#
sub log {
  my $self = shift;
  my $value = $self->context->flag("setLog");
  return $value+1 if $value && $_[0] == 10; # force log(10) to be incorrect
  return $value if $value;
  return $self->SUPER::log(@_);
}

#
# end of subclass
#
package main;

###########################

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->functions->set(log=>{class=>'my::Function::numeric'});
Context()->variables->are(x => ["Real", limits => [0.1,2]],y => ["Real", limits => [0.1,2]],);

$logCheck = sub {
  my ($correct,$student,$ans) = @_;
  return 0 if $ans->{isPreview} || $correct != $student;
  #
  #  Get parsed formula for student and correct answers
  #
  $student = $ans->{student_formula};
  $correct = $correct->{original_formula} if defined $correct->{original_formula};
  #
  # check if equal when logs are replaced by 1
  #
  Context()->flags->set(setLog => 1);
  delete $correct->{test_values}, $student->{test_values};
  my $OK = ($correct == $student);
  Context()->flags->set(setLog => 0);
  delete $correct->{test_values}, $student->{test_values};
  Value::Error("Your answer can be expanded further.") unless $OK;
  return $OK;
};

$ans[1] = Formula("log(x)+log(y)");
$ans[2] = Formula("log(x)+log(y)");
$ans[3] = Formula("log(x)+log(y)");
$quest[1] = Formula("log(xy)");
$quest[2] = Formula("log(xy)");
$quest[3] = Formula("log(xy)");

$ran1 = random(1,3,1);
do {$ran2 = random(1,3,1)} until ($ran1!=$ran2);
$ans[$ran1] = Formula("log(x)-log(y)");
$ans[$ran2] = Formula("y*log(x)");
$quest[$ran1] = Formula("log(x/y)");
$quest[$ran2] = Formula("log(x^y)");


##############################################################
#
#  Text
#
#

BEGIN_PGML

Rewrite the following logarithms in expanded form by applying the properties of logarithms.

a. [` [$quest[1]] = `] [_____________________]{$ans[1]->cmp(checker=>$logCheck)} 

b. [` [$quest[2]] = `] [_____________________]{$ans[2]->cmp(checker=>$logCheck)} 

c. [` [$quest[3]] = `] [_____________________]{$ans[3]->cmp(checker=>$logCheck)} 

END_PGML

##############################################################
#
#  Answers
#
#



BEGIN_PGML_SOLUTION

 ` \log(xy) = \log(x)+\log(y)`

 ` \log(\frac{x}{y}) =\log(x)-\log(y)`

 ` \log(x^y) = y\log(x)`



END_PGML_SOLUTION



COMMENT("Funded by US DoE Title V: Opening Gateways grant.");

ENDDOCUMENT();        
