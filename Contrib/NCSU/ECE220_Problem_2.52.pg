# DESCRIPTION
# Problem from 'Mathematics: The Language of Electrical and Computer Engineering', Viniotis and Trussell, 3rd ed.
# WeBWorK problem written by Joel Trussell, <hjt@ncsu.edu>
# ENDDESCRIPTION

## DBsubject(Electrical Engineering Mathematics)
## DBchapter(Basic Signals)
## DBsection(Shifting and Scaling)
## Institution(North Carolina State University)
## Author(H. J. Trussell)
## TitleText1('Mathematics: The Language of Electrical and Computer Engineering')
## AuthorText1('Viniotis and Trussell')
## EditionText1('3')
## Problem1('2.52')

DOCUMENT();

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "AnswerFormatHelp.pl",
           "extraAnswerEvaluators.pl",
           "PGauxiliaryFunctions.pl",
           "PGgraphmacros.pl",
#           "parserPopUp.pl",
# need parser for formula evaluation
           "unionLists.pl",
           "parserAssignment.pl",
           "MathObjects.pl",
           "PGcourse.pl",
);

TEXT(beginproblem());

Context("Numeric");

Context("Numeric")->functions->add(
  step => {
    class => 'Parser::Legacy::Numeric',
    perl => 'Parser::Legacy::Numeric::do_step'
  },
);

## define base function and limits on graph 
## add t to varaibles
Context()->variables->add(t=>'Real');
##Context()->variables->add(x=>'Real',y=>'Real');
parser::Assignment->Allow;
parser::Assignment->Function("s");
parser::Assignment->Function("p");

$eqn = Formula("s(t) = p(t)");
#$ans = Formula("s(t) = -2 p(t/4+9/4) + p(t) + p(t-2) + 3 p(t/5 - 4/5)");       
$ans = Formula("s(t) =  p(t)");
$c1 = -2; $a1 = 1/4;  $t1 = -9/4;
$c2 = 1; $a2 = 1;  $t2 = 0;
$c3 = 1; $a3 = 1;  $t3 = 2;
$c4 = 3; $a4 = 1/5;  $t4 = 4/5;

$showPartialCorrectAnswers = 1;

$p1 = Formula("step(t) - step(t-1)");
$h = Formula("-2*step(t+9) + 2*step(t+5) + step(t) - step(t-1) +step(t-2)-step(t-3) + 3*step(t-4) - 3*step(t-9) ");
##$ans = Formula(" -2 p(t/4+9/4) + p(t) + p(t-2) + 3 p(t/5 - 4/5) ");
#$ans = ("\( -2 p(t/4+9/4) + p(t) + p(t-2) + 3 p(t/5 - 4/5) \)"  );

# this is description of solution - needs to be changed for this problem
@descript = ("is a reflection about both the \(t\)-axis and \(y\)-axis as well as a vertical stretch by a factor of 2.",
"is a horizontal reflection about the \(y\)-axis as well as a vertical stretch by a factor of 2.",
"is a vertical reflection about the \(t\)-axis as well as a vertical stretch by a factor of 2.",
"is a reflection about both the \(t\)-axis and \(y\)-axis as well as a horizontal stretch by a factor of 2.");


$xmin = -10;
$xmax = 10;
$ymin = -3;
$ymax = 4;
$ph = FEQ(qq! $h for t in <$xmin,$xmax> using color:blue and weight:2!);


$gr = init_graph($xmin,$ymin,$xmax,$ymax,'axes'=>[0,0],'ticks'=>[($xmax-$xmin),($ymax - $ymin)] );
$gr->lb('reset');
for ($i = $ymin; $i <= $ymax; $i++) { if ($i != 0) {
  $gr->lb(new Label(-.1,$i,$i,'black','right','middle')) }};
for ($i = $xmin; $i <= $xmax; $i++) {
  $gr->lb(new Label(2*$i,-.2,2*$i,'black','center','top')) };
$gr->lb(new Label(-.2,3.5,"y",'black','right','top'));
$gr->lb(new Label(9.5,-.2,"t",'black','right','top'));
$gr->lb(new Label(1.5,3,"h(t)",'black','left','bottom'));
## parentheses in ($fn1) are necessary
($f1n) = plot_functions( $gr, $ph );
$f1n->steps(200);

$orig = image(insertGraph($gr),width => 400,height => 300,tex_size => 600);



## force a refresh of the image after changes
$refreshCachedImages = 1;

Context()->texStrings;
BEGIN_TEXT

This is based on problem 2.52
$BR Consider the function \( h(t) \) drawn below:

$PAR
$BCENTER
$orig
$BR
$BITALIC (click on image to enlarge) $EITALIC
$ECENTER
$PAR
Express \( h(t) \) in terms of the time scaled and shifted versions of the unit pulse, \( p(t) = u(t) - u(t-1) \). While there are many correct ways to do this, the answer we want is one that uses four (4) pulses that are NOT overlapping. The answer has the form
$BR
\( h(t) = c_1 p(a_1 t - t_1) + c_2 p(a_2 t - t_2) + c_3 p(a_3 t - t_3) + c_4 p(a_4 t - t_4) \)
$BR where the numbering starts with the leftmost pulse. Give the values of the amplitudes, scale factors and shifts as a comma separated list. 
$BR
\( c_1 , a_1, t_1 \)\{ ans_rule(30) \}
\{ AnswerFormatHelp("numbers") \}
$BR
\( c_2 , a_2, t_2 \)\{ ans_rule(30) \}
\{ AnswerFormatHelp("numbers") \}
$BR
\( c_3 , a_3, t_3 \)\{ ans_rule(30) \}
\{ AnswerFormatHelp("numbers") \}
$BR
\( c_4 , a_4, t_4 \)\{ ans_rule(30) \}
\{ AnswerFormatHelp("numbers") \}
$BR

END_TEXT
Context()->normalStrings;

$ans1 = List(Real($c1),Real($a1),Real($t1));
$ans2 = List(Real($c2),Real($a2),Real($t2));
$ans3 = List(Real($c3),Real($a3),Real($t3));
$ans4 = List(Real($c4),Real($a4),Real($t4));

ANS($ans1->cmp(ordered => 1));
ANS($ans2->cmp(ordered => 1));
ANS($ans3->cmp(ordered => 1));
ANS($ans4->cmp(ordered => 1));



## force a refresh of the image after changes
$refreshCachedImages = 1;

Context()->texStrings;
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR
$BBOLD  SOLUTION $EBOLD
$PAR

which is answer \{ $func1 \}.

END_SOLUTION
Context()->normalStrings;


ENDDOCUMENT();  
