# DESCRIPTION
# gives an exponential equation and asks to find the x and y intercepts
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Exponential and Logarithmic Functions')
## DBsection('Exponential Functions')
## KEYWORDS('exponential functions', 'functions', 'inverse functions', 'intercepts')
## Author('Rick Lynch')
## Author('Patrick Spencer')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization
###########################################################################
DOCUMENT();
loadMacros(
  "PGstandard.pl",

  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "contextFraction.pl",
  "parserFunction.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables
###########################################################################
Context("Fraction-NoDecimals")->texStrings;
$base = list_random(exp(1),10,2,3,4,5,6,7,8,9);
# do {$a = random(-1,1,2)*random(2,10)} until (abs($a) != abs($base));
$a = 1;
$b = random(-1,1,2)*random(2,10);
$c = 0;
$d = -sgn($a)*random(2,10);

if ($base == exp(1)) {
  $dispeqn = "\( f(x) = e^{$b x} + $d \)";
  $yintcoord = $a*exp($c)+$d;
  if ($c < 0) {
    $tmp = -$c;
    $dispyintcoord = "\frac{$a + $d e^{$tmp}}{e^{$tmp}}";
  } else {
    $dispyintcoord = "$a e^{$c} + $d";
  }
} else {
  $dispeqn = "\( f(x) = $base^{$b x} + $d \)";
  $yintcoord = $a*(($base)**($c))+$d;
  if ($c < 0) {
    $tmp = -$c;
    $dispyintcoord = Fraction($d, 1);
  } else {
    $dispyintcoord = Fraction(1 + $d,1);
  }
}

# compute x-intercept
if (log(-$d/$a)/log($base) == floor(log(-$d/$a)/log($base))) {
  $tmp = floor(log(-$d/$a)/log($base));
  $xintcoord = ($tmp-$c)/$b;
  $dispxintcoord = Fraction($tmp, $b);
} else {
  $xintcoord = (log(-$d/$a)/log($base) - $c)/$b;
  $tmp = Fraction(-$d,$a);
  if ($base == exp(1)) {
    $dispxintcoord = "\frac{\ln\left($tmp\right)}{$b}";
  } elsif ($base == 10) {
    $dispxintcoord = "\frac{\log\left($tmp\right)}{$b}";
  } else {
    $dispxintcoord = "\frac{\log_{$base}\left($tmp\right)}{$b}";
  }
}

$dispxint = "\left( $dispxintcoord, 0\right)";
$dispyint = "\left( 0, $dispyintcoord \right)";

Context("Point")->variables->are(x=>"Real", b=>"Real");
$xint = Point($xintcoord, 0);
$yint = Point(0, $yintcoord);

Context()->functions->remove("log");
parserFunction("log(b,x)" => "ln(x)/ln(b)");


###########################################################################
# state the problem
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Find the \(x\)- and \(y\)-intercepts of $dispeqn. Write ${BBOLD}none${EBOLD} if such a point does not exist.
$PAR
\(x\)-intercept: \{ans_rule(20)\}
$PAR
\(y\)-intercept: \{ans_rule(20)\}
END_TEXT


###########################################################################
# check the answer
###########################################################################
ANS( Compute($xint)->cmp(tolType=>'absolute', tolerance=>0.0000000001) );
ANS( Compute($yint)->cmp(tolType=>'absolute', tolerance=>0.0000000001) );


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD}
  The \(x\)-intercept is \(\displaystyle$dispxint\) and the \(y\)-intercept is \(\displaystyle$dispyint\).
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Help:${EBOLD}  Use ${BBOLD}log(b,x)${EBOLD} to enter logarithms that are not base \(e\) nor base \(10\). For example, type ${BBOLD}log(3,5)${EBOLD} to enter \(\log_3(5)\). Use  ${BBOLD}ln(15)${EBOLD} for \(\ln(15)\), and ${BBOLD}log10(20)${EBOLD} for \(\log(20)\). \{helpLink("points", "Click here for help entering points as an answer.")\}
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus();


ENDDOCUMENT();
