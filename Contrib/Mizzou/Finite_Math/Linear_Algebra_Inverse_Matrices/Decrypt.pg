##DESCRIPTION
##  Matrix Operations: Secret Messages
##  Instructions for how the problem was written:
##  First, I define the encryption matrix and from that find the decryption 
##  matrix.
##  Next, I manually converted the twelve secret message to string of numbers ##  (using the Caesar cipher)
##  Then, I multiply the two matrices to find the encrypted matrix
##  Then, I extract each element from the encrypted matrix, and print the 
##  extracted elements in a list
##  The list of extracted numbers is what the students should put into a 
## matrix, and then multily by the decryption matrix thus ending up with the 
## original string
##ENDDESCRIPTION

##KEYWORDS('linear algebra', 'matrix inverse', 'encryption')
 
## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('The Inverse of a Matrix')
## Date('Spring 2012')
## Author1('David Covert')
## Author2('Jason Aubrey')
## Institution('University of Missouri')


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl", 
"PGgraphmacros.pl", 
"PGmatrixmacros.pl",
"MathObjects.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;


Context("Matrix");
Context()->strings->add(
   "GENERAL"=>{},
   "PASS KEY"=>{},
   "RENEGADE"=>{},
   "PINAFORE"=>{},
   "PROFESSOR"=>{},
   "PACKMAN"=>{},
   "DIAMOND"=>{},
   "SANDSTORM"=>{},
   "CENTURION"=>{},
   "SMURFETTE"=>{},
   "TIMBERWOLF"=>{},
   "TRAPLINE"=>{},
);

if($case ==1){
   $string = "GENERAL";
    $string_matrix = Matrix([[7,14,18,12],[5,5,1,0]]);
} elsif($case ==2){
   $string = "PASS KEY";
   $string_matrix = Matrix([[16,19,19,0,5],[1,19,11,25]]);
} elsif($case ==3){
   $string = "RENEGADE";
   $string_matrix = Matrix([[18,14,7,4],[5,5,1,5]]);
} elsif($case ==4){
   $string = "PINAFORE";
   $string_matrix = Matrix([[16,14,6,18],[15,1,15,5]]);
} elsif($case ==5){
   $string = "PROFESSOR";
   $string_matrix = Matrix([[16,15,5,19,18],[18,6,19,15,0]]);
} elsif($case ==6){
   $string = "PACKMAN";
   $string_matrix = Matrix([[16,3,13,14],[1,11,1,0]]);
} elsif($case ==7){
   $string = "DIAMOND";
   $string_matrix = Matrix([[4,1,15,4],[9,13,14,0]]);
} elsif($case ==8){
   $string = "SANDSTORM";
   $string_matrix = Matrix([[19,14,19,15,13],[1,4,20,18,0]]);
} elsif($case ==9){
   $string = "CENTURION";
   $string_matrix = Matrix([[3,14,21,9,14],[5,20,18,15,0]]);
} elsif($case ==10){
   $string = "SMURFETTE";
   $string_matrix = Matrix([[19,21,6,20,5],[13,18,5,20,0]]);
} elsif($case ==11){
   $string = "TIMBERWOLF";
   $string_matrix = Matrix([[20,13,5,23,12],[9,2,18,15,6]]);
} else{
   $string = "TRAPLINE";
   $string_matrix = Matrix([[20,1,12,14],[18,16,9,5]]);
}

$m = random(2,4,1);
$n = $m + 1;
$case = random(1,12,1);


$M = Matrix( [[1,$m], [1,$n]]);
$Minv =$M->inverse();



$enc_matrix = $M*$string_matrix;

$x11 = $enc_matrix->element(1,1);
$x21 = $enc_matrix->element(2,1);
$x12 = $enc_matrix->element(1,2);
$x22 = $enc_matrix->element(2,2);
$x13 = $enc_matrix->element(1,3);
$x23 = $enc_matrix->element(2,3);
$x14 = $enc_matrix->element(1,4);
$x24 = $enc_matrix->element(2,4);

if($case ==  5 || $case ==8 || $case ==9 | $case ==10 || $case ==11 ){
   $x15 = $enc_matrix->element(1,5);
   $x25 = $enc_matrix->element(2,5);
}

if($case ==  1 || $case ==2 || $case ==3 | $case ==4 || $case ==6 || $case ==7 || $case==12){
   $encryption = "$x11  $x21  $x12  $x22  $x13  $x23  $x14  $x24";
} else {
   $encryption = "$x11 $x21  $x12  $x22  $x13  $x23  $x14  $x24  $x15  $x25";
}


Context()->texStrings;
BEGIN_TEXT
The Secret Service uses code names for each member of the first and second families.  Suppose you are communicating with the secret service, and you agree to encrypt messages in the following way:  a blank space is given the number 0, A=1, B=2, C=3, D=4, E = 5, and so on.  
$PAR
You agree to use the encryption matrix
$PAR
\[
M = $M
\]
$PAR
and are sent the following code:
$PAR 
 $encryption. 
$PAR
$SPACE a) First, find the decryption matrix:
$PAR $BCENTER
\( M^{-1} = \) \{$Minv -> ans_array\}
$ECENTER $PAR 
$SPACE b) Decrypt the received message: \{ANS_RULE(10)\}.
END_TEXT

Context()->normalStrings;
ANS( $Minv->cmp () );
ANS(String($string)->cmp () );

COMMENT('MathObject version');
ENDDOCUMENT();