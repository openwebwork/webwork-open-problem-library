# DESCRIPTION
# 
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter()
## DBsection()
## KEYWORDS()
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
  "contextLimitedPowers.pl",
  "contextFraction.pl",
  "AnswerFormatHelp.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;

#
# Subclass the numeric functions
#
package my::Function::numeric;
our @ISA = ('Parser::Function::numeric');

#
# Override sqrt() to return a special value (usually 1) when evaluated
# effectively eliminating it from the product.
#
sub sqrt {
  my $self = shift;
  my $value = $self->context->flag("setSqrt");
  return $value+1 if $value && $_[0] == 1; # force sqrt(1) to be incorrect
  return $value if $value;
  return $self->SUPER::sqrt(@_);
}

#
# end of subclass
#
package main;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
Context()->functions->set(sqrt=>{class=>'my::Function::numeric'});
Context()->flags->set(reduceConstantFunctions=>0);
Context()->variables->are(x=>"Real", y=>"Real");
LimitedPowers::OnlyPositiveIntegers();

for ($i = 0; $i < random(20,50); $i++) { ## more random??
  $case1 == random(0,1,1); # 0 - make negative, 1 - not
  $case2 == random(0,1,1); # nothing if root is not odd root, if odd 0 - neg inside, 1 - neg out
  $r2 = random(2,5,1);
} 

if ($r2 == 2) {
  $b = list_random(3,4,5,6,7,8,9,10,11,12,13,14,15,20);
} elsif ($r2 == 3) {
  $b = random(2,5);
} else {
  $b = random(2,3);
}
$br = ($b)**$r2;


$p21 = random(2,13)*$r2;
do {$p22 = random(2,13)*$r2} until ($p22 != $p21); 
$k21 = $p21/$r2;
$k22 = $p22/$r2;

if ($r2 == 2) {
  if ($case1 == 0) {
    $disp = "\(-\displaystyle \sqrt{\frac{x^{$p21}}{$br y^{$p22}}} = \)";
    $ans1 = Formula("-x^{$k21}/ ($b y^{$k22})");
  } else {
    $disp = "\(\displaystyle \sqrt{\frac{x^{$p21}}{$br y^{$p22}}} = \)";
    $ans1 = Formula("x^{$k21}/ ($b y^{$k22})");
  }
} elsif ($r2 == 4) {
  if ($case1 == 0) {
    $disp = "\(-\displaystyle \sqrt[4]{\frac{x^{$p21}}{$br y^{$p22}}} = \)";
    $ans1 = Formula("-x^{$k21}/ ($b y^{$k22})");
  } else {
    $disp = "\(\displaystyle \sqrt[4]{\frac{x^{$p21}}{$br y^{$p22}}} = \)";
    $ans1 = Formula("x^{$k21}/ ($b y^{$k22})");
  }
} else {
  if ($case1 == 0) {
    if ($case2 == 0) {
      $disp = "\(\displaystyle \sqrt[$r2]{\frac{x^{$p21}}{-$br y^{$p22}}} = \)";
    } else {
      $disp = "\(-\displaystyle \sqrt[$r2]{\frac{x^{$p21}}{$br y^{$p22}}} = \)";
    }
    $ans1 = Formula("-x^{$k21}/ ($b y^{$k22})");
  } else {
    $disp = "\(\displaystyle \sqrt[$r2]{\frac{x^{$p21}}{$br y^{$p22}}} = \)";
    $ans1 = Formula("x^{$k21}/ ($b y^{$k22})");
  }
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Simplify. Assume that all variables represent positive real numbers.
$PAR
$disp \{ans_rule(20)\}
$PAR
Write your answer using radical notation if necessary or write ${BBOLD}not real${EBOLD} if the answer is not a real number.
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS( $ans1-> cmp( checker => sub {
  my ($correct,$student,$ans) = @_;
  return 0 if $ans->{isPreview} || $correct != $student;
  #
  #  Get parsed formula for student and correct answers
  #
  $student = $ans->{student_formula};
  $correct = $correct->{original_formula} if defined $correct->{original_formula};
  #
  # check if equal when sqrt's are replaced by 1
  #
  Context()->flags->set(setSqrt => 1);
  delete $correct->{test_values}, $student->{test_values};
  my $OK = ($correct == $student);
  Context()->flags->set(setSqrt => 0);
  #
  Value::Error("Check to see if your answer is simplified.") unless $OK;
  return $OK;
  }, formatStudentAnswer=>"reduced"
  )
);


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD}  \(\displaystyle $ans1\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Help:${EBOLD} 
  \{ AnswerFormatHelp("exponents", "Click here for help writing exponents and square roots.") \}
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 

COMMENT('Features Periodic Rerandomization');
ENDDOCUMENT();