# DESCRIPTION
# Gives an expression and asks to translate from english into math
# ENDDESCRIPTION

## DBsubject('Intermediate Algebra')
## DBchapter('Ch 01: Algebra, Mathematical Models, and Problem Solving')
## DBsection('Algebraic Expressions and Real Numbers')
## KEYWORDS('real numbers')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
Context()->variables->are(n=>"Real", d=>"Real", p=>"Real");
$case = random(0,2,1); # 0 - nickels, 1 - dimes, 2 - pennies
$m = random(1,15,1);
$case2 = random(0,1,1); # 0 - plus, 1 - minus
$pm = ($case2 == 0) ? "+" : "-";
$disppm = ($case2 == 0) ? "plus" : "minus";
if ($case == 0) {
  $disptype = "nickels";
  $var = "n";
  $ans = Formula("0.05 n $pm $m");
} elsif ($case == 1) {
  $disptype = "dimes";
  $var = "d";
  $ans = Formula("0.10 d $pm $m");
} else {
  $disptype = "pennies";
  $var = "p";
  $ans = Formula("0.01 p $pm $m");
}



###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Write an expression for the amount of money (in dollars) in \($var\) $disptype $disppm \($m\) dollars.
$PAR
Answer: \{ans_rule(20)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS($ans->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} \($ans\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 

COMMENT('Features Periodic Rerandomization');
ENDDOCUMENT();