# DESCRIPTION
# Asks to solve a round-trip travel problem using d = rt
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Equations and Inequalities')
## DBsection('Modeling with Equations')
## KEYWORDS('equations')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
for ($i = 0; $i < random(10,50); $i++) {
  $case = random(0,1,1);
}

if ($case == 0) {
  do {
    $miles = random(50,200,5);
    $mph = random(45,75,5);
    $ans = (2*$miles)/$mph;
  } until ($ans*100 == floor($ans*100));
  $question = "Rosette just moved and now lives roughly $miles miles away from her hometown. She has to return to her hometown to give a document by hand to her old employer. Find how long in hours it takes her to drive round-trip if she averages $mph mph.";
  $word = "hours";
} else {
  do {
    $time = random(2,5,0.5);
    $miles = random(50,200,5);
    $ans = (2*$miles)/$time;
  } until ($ans < 80 && $ans > 40 && $ans*100 == floor($ans*100));
  $question = "Rosette just moved and now lives roughly $miles miles away from her hometown. She had to return to her hometown to give a document by hand to her old employer. The entire round-trip took $time hours. Find her average speed in mph for the trip.";
  $word = "mph";
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$question
$PAR
Answer: \{ans_rule(20)\} $word
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($ans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} \($ans\) $word
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 

COMMENT('Features Periodic Rerandomization');
ENDDOCUMENT();