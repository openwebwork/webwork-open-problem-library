# DESCRIPTION
# Gives the graph of a piecewise function and asks for the intervals
# for which it is inc/dec/const, as well as domain and range
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Graphs of Functions')
## KEYWORDS('functions', 'piecewise', 'graphs', 'increasing', 'decreasing', 'domain', 'range')
## Author1('Rick Lynch')
## Author2('Teri Christiansen')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$maxx = 11;
$minx = -$maxx;
$gsize = 500;

$graph = init_graph($minx, $minx, $maxx, $maxx, size=>[$gsize,$gsize]);
for ($i = 1; $i <= $maxx ; $i++) {
  $graph->moveTo($i,$minx);
  $graph->lineTo($i, $maxx, 'gray', 1);
  $graph->moveTo(-$i,$maxx);
  $graph->lineTo(-$i, $minx, 'gray', 1);
  $graph->moveTo($minx, $i);
  $graph->lineTo($maxx, $i, 'gray', 1);
  $graph->moveTo($minx, -$i);
  $graph->lineTo($maxx, -$i, 'gray', 1);
}
$graph->moveTo($minx, 0);
$graph->arrowTo($maxx, 0, 'black', 2);
$graph->arrowTo($minx, 0, 'black', 2);
$graph->moveTo(0, $minx);
$graph->arrowTo(0, $maxx, 'black', 2);
$graph->arrowTo(0, $minx, 'black', 2);
$graph->lb(new Label($maxx-0.1, -0.2, 'x', 'black', 'top', 'right'));
$graph->lb(new Label(0.4, $maxx-0.1, 'y', 'black', 'top', 'left'));
$graph->lb(new Label(1,-0.1,'1', 'black', 'top','center'));
$graph->lb(new Label(5,-0.1,'5', 'black', 'top','center'));
$graph->lb(new Label(10,-0.1,'10', 'black', 'top','center'));
$graph->lb(new Label(-5,-0.1,'-5', 'black', 'top','center'));
$graph->lb(new Label(-10,-0.1,'-10', 'black', 'top','center'));
$graph->lb(new Label(-0.1,0.7,'1', 'black', 'bottom', 'right'));
$graph->lb(new Label(-0.1,4.7,'5', 'black', 'bottom', 'right'));
$graph->lb(new Label(-0.1,9.7,'10', 'black', 'bottom', 'right'));
$graph->lb(new Label(-0.1,-5.3,'-5', 'black', 'bottom', 'right'));
$graph->lb(new Label(-0.1,-10.3,'-10', 'black', 'bottom', 'right'));

# set up parabola piece
$str = random(1,2);
$x3 = random(-2,2);
$y3 = random(-10,-2); #($x3,$y3) is the vertex
$x2 = $x3 - random(1,2);
$y2 = (($x2 - $x3)**2)+$y3;
$x4 = $x3+3;
$y4 = (($x4 - $x3)**2)+$y3;

if ($str == 2) {
  $x2 = 2*$x2;
  $x3 = 2*$x3;
  $x4 = 2*$x4;
}

# set up const piece
if ($str == 2) {
  $x1 = $x2 - 1;
} else {
  $x1 = $x2 - random(1,3);
}

$x0 = $minx;
do {$y1 = $y4 + random(1,3)} until ($y1 != 0);
$y0 = $y1;
$infornot = random(0,1,1); # 0 - inf, # 1 - finite
if ($x1 > -6) {
  if ($infornot == 1) {
    $x0 = $x1 - random(2,4);
  }
}

# graph everything
$flipx = 1; # random(0,1); # 0 - no flip, 1 - flip x, 
$flipy = 0;#random(0,1); # 0 - no flip, 1 - flip y

if ($flipx == 1) {
  $x0 = -$x0;
  $x1 = -$x1;
  $x2 = -$x2;
  $x3 = -$x3;
  $x4 = -$x4;
}

if ($flipy == 1) {
  $y0 = -$y0;
  $y1 = -$y1;
  $y2 = -$y2;
  $y3 = -$y3;
  $y4 = -$y4;
}

$oc1 = random(0,1,1);
if ($x0 == $minx || $x0 == $maxx) {
  $graph->moveTo($x1,$y1);
  $graph->lineTo($x0,$y1,'blue',3);
} else {
  $graph->moveTo($x1,$y1);
  $graph->lineTo($x0,$y0,'blue',3);
  if ($oc1 == 0) {
    $graph->stamps(new Circle($x0,$y0,5,'blue','white'));
  } else {
    $graph->stamps(new Circle($x0,$y0,5,'blue','blue'));
  }
}

if ($str == 2) {
  if ($flipy == 1) {
    $piece1 = sub { my $x = shift(); -((($x - $x3)/2)**2)+$y3; };
  } else {
    $piece1 = sub { my $x = shift(); ((($x - $x3)/2)**2)+$y3; };
  }
} else {
  if ($flipy == 1) {
    $piece1 = sub { my $x = shift(); -((($x - $x3))**2)+$y3; };
  } else {
    $piece1 = sub { my $x = shift(); ((($x - $x3))**2)+$y3; };
  }
}
$fun1 = new Fun($piece1, $graph);
$fun1->steps(1500);
$fun1->weight(3);
if ($flipx == 0) {
  $fun1->domain($x2,$x4);
} else {
  $fun1->domain($x4,$x2);
}

$oc2 = random(0,1);
if ($oc2 == 0) {
  $graph->stamps(new Circle($x1,$y1,5,'blue','blue'));
  $graph->stamps(new Circle($x2,$y2,5,'blue','white'));
} else {
  $graph->stamps(new Circle($x1,$y1,5,'blue','white'));
  $graph->stamps(new Circle($x2,$y2,5,'blue','blue'));
}
$graph->stamps(new Circle($x3,$y3,5,'blue','blue'));

$oc3 = random(0,1);
if ($oc3 == 0) {
  $graph->stamps(new Circle($x4,$y4,5,'blue','white'));
} else {
  $graph->stamps(new Circle($x4,$y4,5,'blue','blue'));
}

# set up answers
Context("Interval");
Context()->strings->add("none"=>{});

if ($flipx == 0) {
  if ($x0 == $minx) {
    if ($oc2 == 0) {
      if ($oc3 == 0) {
        $domain = List(Compute("(-inf,$x1]U($x2,$x4)"));
      } else {
        $domain = List(Compute("(-inf,$x1]U($x2,$x4]"));
      }
    } else {
      if ($oc3 == 0) {
        $domain = List(Compute("(-inf,$x1)U[$x2,$x4)"));
      } else {
        $domain = List(Compute("(-inf,$x1)U[$x2,$x4]"));
      }
    }
  } else {
    if ($oc1 == 0) {
      if ($oc2 == 0) {
        if ($oc3 == 0) {
          $domain = List(Compute("($x0,$x1]U($x2,$x4)"));
        } else {
          $domain = List(Compute("($x0,$x1]U($x2,$x4]"));
        }
      } else {
        if ($oc3 == 0) {
          $domain = List(Compute("($x0,$x1)U[$x2,$x4)"));
        } else {
          $domain = List(Compute("($x0,$x1)U[$x2,$x4]"));
        }
      }
    } else {
      if ($oc2 == 0) {
        if ($oc3 == 0) {
          $domain = List(Compute("[$x0,$x1]U($x2,$x4)"));
        } else {
          $domain = List(Compute("[$x0,$x1]U($x2,$x4]"));
        }
      } else {
        if ($oc3 == 0) {
          $domain = List(Compute("[$x0,$x1)U[$x2,$x4)"));
        } else {
          $domain = List(Compute("[$x0,$x1)U[$x2,$x4]"));
        }
      }
    }
  }
} else {
  if ($x0 == $maxx) {
    if ($oc2 == 0) {
      if ($oc3 == 0) {
        $domain = List(Compute("($x4,$x2) U [$x1,inf)"));
      } else {
        $domain = List(Compute("[$x4,$x2)U[$x1,inf)"));
      }
    } else {
      if ($oc3 == 0) {
        $domain = List(Compute("($x4,$x2]U($x1,inf)"));
      } else {
        $domain = List(Compute("[$x4,$x2]U($x1,inf)"));
      }
    }
  } else {
    if ($oc1 == 0) {
      if ($oc2 == 0) {
        if ($oc3 == 0) {
          $domain = List(Compute("($x4,$x2)U[$x1,$x0)"));
        } else {
          $domain = List(Compute("[$x4,$x2)U[$x1,$x0)"));
        }
      } else {
        if ($oc3 == 0) {
          $domain = List(Compute("($x4,$x2]U($x1,$x0)"));
        } else {
          $domain = List(Compute("[$x4,$x2]U($x1,$x0)"));
        }
      }
    } else {
      if ($oc2 == 0) {
        if ($oc3 == 0) {
          $domain = List(Compute("($x4,$x2)U[$x1,$x0]"));
        } else {
          $domain = List(Compute("[$x4,$x2)U[$x1,$x0]"));
        }
      } else {
        if ($oc3 == 0) {
          $domain = List(Compute("($x4,$x2]U($x1,$x0]"));
        } else {
          $domain = List(Compute("[$x4,$x2]U($x1,$x0]"));
        }
      }
    }
  }
}

if ($flipy == 0) {
  if ($oc3 == 0) {
    $range = List(Compute("[$y3,$y4)U[$y1,$y1]"));
  } else {
    $range = List(Compute("[$y3,$y4]U[$y1,$y1]"));
  }
} else {
  if ($oc3 == 0) {
    $range = List(Compute("[$y1,$y1]U($y4,$y3]"));
  } else {
    $range = List(Compute("[$y1,$y1]U[$y4,$y3]"));
  }  
}

if ($flipx == 0) {
  if ($flipy == 0) {
    $inc = List(Compute("($x3,$x4)"));
    $dec = List(Compute("($x2,$x3)"));
    $maxima = List(String("none"));
    $minima = List($y3);
  } else {
    $dec = List(Compute("($x3,$x4)"));
    $inc = List(Compute("($x2,$x3)"));
    $minima = List(String("none"));
    $maxima = List($y3);
  }
  if ($x0 == $minx) {
    $const = List(Compute("(-inf,$x1)"));
  } else {
    $const = List(Compute("($x0,$x1)"));
  }
} else  {
  if ($flipy == 0) {
    $inc = List(Compute("($x3,$x2)"));
    $dec = List(Compute("($x4,$x3)"));
    $maxima = List(String("none"));
    $minima = List($y3);
  } else {
    $dec = List(Compute("($x3,$x2)"));
    $inc = List(Compute("($x4,$x3)"));
    $minima = List(String("none"));
    $maxima = List($y3);
  }
  if ($x0 == $maxx) {
    $const = List(Compute("($x1,inf)"));
  } else {
    $const = List(Compute("($x1,$x0)"));
  }
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT

$PAR
$BCENTER
\{ image(insertGraph($graph), width=>$gsize, height=>$gsize, tex_size=>500 ); \}
$ECENTER 
$PAR

Given the graph of \(f(x)\) above, find the following and write your answers using interval notation:
$PAR
(a) Domain: \{ans_rule(20)\}
$PAR
(b) Range: \{ans_rule(20)\}
$PAR
(c) Interval(s) on which \(f(x)\) is increasing: \{ans_rule(30)\}
$PAR
(d) Interval(s) on which \(f(x)\) is decreasing: \{ans_rule(30)\}
$PAR
(e) Interval(s) on which \(f(x)\) is constant: \{ans_rule(30)\}
$PAR
(f) Relative maxima: \{ans_rule(20)\}
$PAR
(g) Relative minima: \{ans_rule(20)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($domain)->cmp());
ANS(Compute($range)->cmp());
ANS(Compute($inc)->cmp());
ANS(Compute($dec)->cmp());
ANS(Compute($const)->cmp());
ANS(Compute($maxima)->cmp());
ANS(Compute($minima)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    $PAR
    (a) \($domain\)
    $PAR
    (b) \( $range \)
    $PAR
    (c) \($inc\)
    $PAR
    (d) \($dec\)
    $PAR
    (e) \($const\)
    $PAR
    (f) \($maxima\)
    $PAR
    (g) \($minima\)
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $PAR
    ${BBOLD}Help:${EBOLD} Write ${LQ}none${RQ} if no such interval(s) exist or if there is no relative maximum or relative minima. Separate multiple intervals by a comma when entering intervals for increasing, decreasing, and constant.  \{ AnswerFormatHelp("intervals","Click here for help entering intervals.") \}
    $BR
    END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();