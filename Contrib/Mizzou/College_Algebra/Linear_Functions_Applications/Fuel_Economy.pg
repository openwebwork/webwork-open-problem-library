# DESCRIPTION
# Asks to find the fuel economy of a truck knowing cars by solving a 
# linear equation
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Modeling with Functions')
## KEYWORDS('functions', 'algebra, application of linear equations')
## TitleText1('College Algebra')
## EditionText1('4')
## AuthorText1('Beecher, Penna, Bittinger')
## Section1('1.5')
## Problem1('34')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
  "contextFraction.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$frac = list_random(1/2, 2/3, 3/4);
do {$carmpg = random(38,52,2)} until ($carmpg*$frac == floor($carmpg*$frac));
$amtless = random(5,15,1);
$truckmpg = $carmpg*$frac - $amtless;
if ($frac == 1/2) {
  $dispfrac = "one-half";
} elsif ($frac == 2/3) {
  $dispfrac = "two-thirds";
} else {
  $dispfrac = "three-fourths";
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
A car gets $carmpg miles per gallon (mpg) overall. A truck gets $amtless mpg less than $dispfrac of the miles-per-gallon for the car. Find the miles-per-gallon rate for the truck.
$PAR
Truck MPG: \{ans_rule(20)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($truckmpg)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} $truckmpg mpg
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();