# DESCRIPTION
# Gives multiple graphs and asks to list ones that are even, odd, or neither
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Even and Odd')
## KEYWORDS('functions', 'graphs', 'symmetry', 'even', 'odd')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "parserImplicitPlane.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, E=>{}, "none"=>{});
$min = -8;
$max = -$min;
$gsize = 500;

for ($i = 0; $i < 4; $i++) {
  $graphs[$i] = init_graph($min, $min, $max, $max, size=>[$gsize,$gsize]);
  for ($j = $min; $j <= $max; $j++) {
    $graphs[$i]->moveTo($j,$min);
    $graphs[$i]->lineTo($j,$max,'gray',1);
    $graphs[$i]->moveTo($min,$j);
    $graphs[$i]->lineTo($max,$j,'gray',1);
  }
  $graphs[$i]->moveTo($min, 0);
  $graphs[$i]->arrowTo($max, 0, 'black', 2);
  $graphs[$i]->arrowTo($min, 0, 'black', 2);
  $graphs[$i]->moveTo(0, $min);
  $graphs[$i]->arrowTo(0, $max, 'black', 2);
  $graphs[$i]->arrowTo(0, $min, 'black', 2);
  $graphs[$i]->lb(new Label($max-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(0.4, $max-0.1, 'y', 'black', 'top', 'left'));

  for ($j = $min+1; $j < $max; $j++) {
    if ($j != 0 && $j % 5 == 0 || $j == 1) {
      $graphs[$i]->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
      $graphs[$i]->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
    }
  }
}

@possch = (0..5);
@choices = ();
$chosen = 0;
for ($i = 0; $i < 4; $i++) {
  do {
    $chosen = 0;
    $tmp = list_random(@possch);
    for ($j = 0; $j < scalar(@choices); $j++) {
      if ($tmp == $choices[$j]) {
        $chosen = 1;
      }
    }
  } until ($chosen == 0);
  push(@choices,$tmp);
}

@pos = (0..3);
@posspos = (0..3);
for ($i = 0; $i < 4; $i++) {
  $pos[$i] = list_random(@posspos);
  for ($j = 0; $j < scalar(@posspos); $j++) {
    if ($posspos[$j] == $pos[$i] ) {
      $tmp = $posspos[$j];
      $posspos[$j] = $posspos[scalar(@posspos)-1];
      $posspos[scalar(@posspos)-1] = $tmp;
      pop(@posspos);
      $j--;
    }
  }
}
@possans = ("A","B","C","D");
@eans = ();
@oans = ();
@fun = (0..3);
@expns = (0..3);
$haseven = 0;
$hasodd = 0;
for ($j = 0; $j < 4; $j++) {
  $tmp = $choices[$pos[$j]];
  if ($tmp == 0) {
    if ($haseven == 0) {
      $a0 = random(0.5,2.5,0.5)*random(-1,1,2);
      $d0 = random(-4,4,1);
      $expns[$pos[$j]] = sub { my $x = shift(); $a0*abs($x)**3 + $d0 };
      push(@eans, $possans[$pos[$j]]);
      $haseven = 1;
    } elsif ($hasodd == 0) {
      $a0 = random(0.5,2.5,0.5)*random(-1,1,2);
      $expns[$pos[$j]] = sub { my $x = shift(); $a0*($x)**3 };
      push(@oans, $possans[$pos[$j]]);
      $hasodd = 1;
    } else {
      $eoo = random(0,2,1);
      if ($eoo == 0) {
        $a0 = random(0.5,2.5,0.5)*random(-1,1,2);
        $d0 = random(-4,4,1);
        $expns[$pos[$j]] = sub { my $x = shift(); $a0*(abs($x))**3 + $d0 };
        push(@eans, $possans[$pos[$j]]);
        $haseven = 1;
      } elsif ($eoo == 1) {
        $a0 = random(0.5,2.5,0.5)*random(-1,1,2);
        $expns[$pos[$j]] = sub { my $x = shift(); $a0*($x)**3 };
        push(@oans, $possans[$pos[$j]]);
        $hasodd = 1;
      } else {
        $a0 = random(0.5,2.5,0.5)*random(-1,1,2);
        $c0 = non_zero_random(-4,4,1);
        $d0 = random(-4,4,1);
        $expns[$pos[$j]] = sub { my $x = shift(); $a0*($x + $c0)**3 + $d0 };
      }
    }
    $fun[$pos[$j]] = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
    $fun[$pos[$j]]->domain($min,$max);
    $fun[$pos[$j]]->steps(1500);
  } elsif ($tmp == 1) {
    if ($haseven == 0) {
      $a1 = random(1.5,4.5,0.5)*random(-1,1,2);
      $d1 = random(-4,4,1);
      $expns[$pos[$j]] = sub { my $x = shift(); $a1*abs($x) + $d1 };
      push(@eans, $possans[$pos[$j]]);
      $haseven = 1;
    } elsif ($hasodd == 0) {
      $a1 = random(1.5,4.5,0.5)*random(-1,1,2);
      $expns[$pos[$j]] = sub { my $x = shift(); ($x < 0) ? -$a1*abs($x) : $a1*abs($x) };
      push(@oans, $possans[$pos[$j]]);
      $hasodd = 1;
    } else {
      $eoo = random(0,2,1);
      if ($eoo == 0) {
        $a1 = random(1.5,4.5,0.5)*random(-1,1,2);
        $d1 = random(-4,4,1);
        $expns[$pos[$j]] = sub { my $x = shift(); $a1*abs($x) + $d1 };
        push(@eans, $possans[$pos[$j]]);
        $haseven = 1;
      } elsif ($eoo == 1) {
        $a1 = random(1.5,4.5,0.5)*random(-1,1,2);
        $expns[$pos[$j]] = sub { my $x = shift(); ($x < 0) ? -$a1*abs($x) : $a1*abs($x) };
        push(@oans, $possans[$pos[$j]]);
        $hasodd = 1;
      } else {
        $a1 = random(1.5,4.5,0.5)*random(-1,1,2);
        $c1 = non_zero_random(-4,4,1);
        $d1 = random(-4,4,1);
        $expns[$pos[$j]] = sub { my $x = shift(); $a1*abs($x + $c1) + $d1 };
      }
    }
    $fun[$pos[$j]] = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
    $fun[$pos[$j]]->domain($min,$max);
    $fun[$pos[$j]]->steps(1500);
  } elsif ($tmp == 2) {
    if ($haseven == 0) {
      $a2 = random(0.5,2.5,0.5)*random(-1,1,2);
      $d2 = random(-4,4,1);
      $expns[$pos[$j]] = sub { my $x = shift(); $a2*(abs($x)**(1/3)) + $d2 };
      push(@eans, $possans[$pos[$j]]);
      $haseven = 1;
    } elsif ($hasodd == 0) {
      $a2 = random(0.5,2.5,0.5)*random(-1,1,2);
      $expns[$pos[$j]] = sub { my $x = shift(); $a2*sgn($x)*(abs($x)**(1/3)) + $d2 };
      push(@oans, $possans[$pos[$j]]);
      $hasodd = 1;
    } else {
      $eoo = random(0,2,1);
      if ($eoo == 0) {
        $a2 = random(0.5,2.5,0.5)*random(-1,1,2);
        $d2 = random(-4,4,1);
        $expns[$pos[$j]] = sub { my $x = shift(); $a2*(abs($x)**(1/3)) + $d2 };
        push(@eans, $possans[$pos[$j]]);
        $haseven = 1;
      } elsif ($eoo == 1) {
        $a2 = random(0.5,2.5,0.5)*random(-1,1,2);
        $expns[$pos[$j]] = sub { my $x = shift(); $a2*sgn($x)*(abs($x)**(1/3)) + $d2 };
        push(@oans, $possans[$pos[$j]]);
        $hasodd = 1;
      } else {
        $a2 = random(0.5,2.5,0.5)*random(-1,1,2);
        $c2 = non_zero_random(-4,4,1);
        $d2 = random(-4,4,1);
        $expns[$pos[$j]] = sub { my $x = shift(); $a2*sgn($x+$c2)*(abs($x+$c2)**(1/3)) + $d2 };
      }
    }
    $fun[$pos[$j]] = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
    $fun[$pos[$j]]->domain($min,$max);
    $fun[$pos[$j]]->steps(1500);
  } elsif ($tmp == 3) {
    if ($haseven == 0) {
      $a3 = random(1.5,6.5,0.5)*random(-1,1,2);
      $d3 = random(-2,2,1);
      $expns[$pos[$j]] = sub { my $x = shift(); $a3*cos($x) + $d3 };
      push(@eans, $possans[$pos[$j]]);
      $haseven = 1;
    } elsif ($hasodd == 0) {
      $a3 = random(1.5,5.5,0.5)*random(-1,1,2);
      $expns[$pos[$j]] = sub { my $x = shift(); ($x < 0) ? -$a3*cos($x)+$a3 : $a3*cos($x)-$a3 };
      push(@oans, $possans[$pos[$j]]);
      $hasodd = 1;
    } else {
      $eoo = random(0,2,1);
      if ($eoo == 0) {
        $a3 = random(1.5,5.5,0.5)*random(-1,1,2);
        $d3 = random(-2,2,1);
        $expns[$pos[$j]] = sub { my $x = shift(); $a3*cos($x) + $d3 };
        push(@eans, $possans[$pos[$j]]);
        $haseven = 1;
      } elsif ($eoo == 1) {
        $a3 = random(1.5,5.5,0.5)*random(-1,1,2);
        $expns[$pos[$j]] = sub { my $x = shift(); ($x < 0) ? -$a3*cos($x)+$a3 : $a3*cos($x)-$a3 };
        push(@oans, $possans[$pos[$j]]);
        $hasodd = 1;
      } else {
        $a3 = random(1.5,5.5,0.5)*random(-1,1,2);
        $c3 = non_zero_random(-4,4,1);
        $d3 = non_zero_random(-2,2,1);
        $expns[$pos[$j]] = sub { my $x = shift(); $a3*cos($x + $c3) + $d3 };
      }
    }
    $fun[$pos[$j]] = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
    $fun[$pos[$j]]->domain($min,$max);
    $fun[$pos[$j]]->steps(1500);
  } elsif ($tmp == 4) {
    if ($haseven == 0) {
      $a4 = random(1.5,5.5,0.5)*random(-1,1,2);
      $d4 = random(-2,2,1);
      $expns[$pos[$j]] = sub { my $x = shift(); ($x < 0) ? -$a4*sin($x)+$d4 : $a4*sin($x)+$d4 };
      push(@eans, $possans[$pos[$j]]);
      $haseven = 1;
    } elsif ($hasodd == 0) {
      $a4 = random(1.5,5.5,0.5)*random(-1,1,2);
      $expns[$pos[$j]] = sub { my $x = shift(); $a4*sin($x) };
      push(@oans, $possans[$pos[$j]]);
      $hasodd = 1;
    } else {
      $eoo = random(0,2,1);
      if ($eoo == 0) {
        $a4 = random(1.5,5.5,0.5)*random(-1,1,2);
        $d4 = random(-2,2,1);
        $expns[$pos[$j]] = sub { my $x = shift(); ($x < 0) ? -$a4*sin($x)+$d4 : $a4*sin($x)+$d4 };
        push(@eans, $possans[$pos[$j]]);
        $haseven = 1;
      } elsif ($eoo == 1) {
        $a4 = random(1.5,5.5,0.5)*random(-1,1,2);
        $expns[$pos[$j]] = sub { my $x = shift(); $a4*sin($x) };
        push(@oans, $possans[$pos[$j]]);
        $hasodd = 1;
      } else {
        $a4 = random(1.5,5.5,0.5)*random(-1,1,2);
        $c4 = non_zero_random(-4,4,1);
        $d4 = non_zero_random(-2,2,1);
        $expns[$pos[$j]] = sub { my $x = shift(); $a4*sin($x + $c4) + $d4 };
      }
    }
    $fun[$pos[$j]] = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
    $fun[$pos[$j]]->domain($min,$max);
    $fun[$pos[$j]]->steps(1500);
  } else {
    if ($haseven == 0) {
      $a5 = random(1,2.5,0.5)*random(-1,1,2);
      $d5 = random(-4,4,1);
      $expns[$pos[$j]] = sub { my $x = shift(); if ($x != 0) {$a5/(($x)**2)+$d5} };
      push(@eans, $possans[$pos[$j]]);
      $haseven = 1;
      $fun1[$pos[$j]] = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
      $fun1[$pos[$j]]->domain($min,-0.01);
      $fun1[$pos[$j]]->steps(1500);
      $fun2 = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
      $fun2->domain(0.01,$max);
      $fun2->steps(1500);
    } elsif ($hasodd == 0) {
      $a5 = random(1,2.5,0.5)*random(-1,1,2);
      $expns[$pos[$j]] = sub { my $x = shift(); if ($x != 0) {$a5/(($x))} };
      push(@oans, $possans[$pos[$j]]);
      $hasodd = 1;
      $fun1[$pos[$j]] = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
      $fun1[$pos[$j]]->domain($min,-0.01);
      $fun1[$pos[$j]]->steps(1500);
      $fun2 = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
      $fun2->domain(0.01,$max);
      $fun2->steps(1500);
    } else {
      $eoo = random(0,2,1);
      if ($eoo == 0) {
        $a5 = random(1,2.5,0.5)*random(-1,1,2);
        $d5 = random(-4,4,1);
        $expns[$pos[$j]] = sub { my $x = shift(); if ($x != 0) {$a5/(($x)**2)+$d5} };
        push(@eans, $possans[$pos[$j]]);
        $haseven = 1;
        $fun1[$pos[$j]] = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
        $fun1[$pos[$j]]->domain($min,-0.01);
        $fun1[$pos[$j]]->steps(1500);
        $fun2 = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
        $fun2->domain(0.01,$max);
        $fun2->steps(1500);
      } elsif ($eoo == 1) {
        $a5 = random(1,2.5,0.5)*random(-1,1,2);  
        $expns[$pos[$j]] = sub { my $x = shift(); if ($x != 0) {$a5/(($x))} };
        push(@oans, $possans[$pos[$j]]);
        $hasodd = 1;
        $fun1[$pos[$j]] = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
        $fun1[$pos[$j]]->domain($min,-0.01);
        $fun1[$pos[$j]]->steps(1500);
        $fun2 = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
        $fun2->domain(0.01,$max);
        $fun2->steps(1500);
      } else {
        $a5 = random(1,2.5,0.5)*random(-1,1,2);
        $c5 = non_zero_random(-4,4,1);
        $d5 = random(-4,4,1);
        $expns[$pos[$j]] = sub { my $x = shift(); if ($x != $c5) {$a5/($x - $c5) + $d5} };
        $fun1[$pos[$j]] = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
        $fun1[$pos[$j]]->domain($min,$c5-0.1);
        $fun1[$pos[$j]]->steps(1500);
        $fun2 = new Fun($expns[$pos[$j]],$graphs[$pos[$j]]);
        $fun2->domain($c5+0.1,$max);
        $fun2->steps(1500);
      }
    }
  }
}

@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize/2, height=>$gsize/2, tex_size=>500 );
}

$eans = List(@eans);
$oans = List(@oans);


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 
$PAR

List the letters of the graphs above which represent graphs that are
$PAR
(a) Even: \{ans_rule(10)\}
$PAR
(b) Odd: \{ans_rule(10)\}
$PAR
Separate multiple answers by commas. You may click a graph to enlarge it.
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($eans)->cmp());
ANS(Compute($oans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} (a) \($eans\) and (b) \($oans\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();