## DESCRIPTION
## Radicals and Rational Exponents: Simplifying Radicals
## ENDDESCRIPTION

## KEYWORDS('radical expression')

## DBsubject('Algebra') 
## DBchapter('Basic Algebra') 
## DBsection('Exponents and Radicals') 
## Date('Spring 2012')
## Author1('David Covert')
## Author2('Teri Christiansen')
## Author3('Rick Lynch')
## Institution('University of Missouri')
## TitleText1('College Algebra')
## EditionText1('4')
## AuthorText1('Beecher, Penna, Bittinger')
## Section1('R.7')
## Problem1('')


##################################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGunion.pl",
"MathObjects.pl",
"PGcourse.pl",
"parserMultiAnswer.pl",
"contextLimitedPowers.pl",
"AnswerFormatHelp.pl",
"PeriodicRerandomization.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");


###################################
# Setup


#
# Subclass the numeric functions
#
package my::Function::numeric;
our @ISA = ('Parser::Function::numeric');

#
# Override sqrt() to return a special value (usually 1) when evaluated
# effectively eliminating it from the product.
#
sub sqrt {
  my $self = shift;
  my $value = $self->context->flag("setSqrt");
  return $value+1 if $value && $_[0] == 1; # force sqrt(1) to be incorrect
  return $value if $value;
  return $self->SUPER::sqrt(@_);
}

#
# end of subclass
#
package main;

Context("Numeric")->variables->are(
x => ["Real", limits => [0,2]],    # only needed if x is used in the square roots
);
#
# make sqrt() use our subclass
#
Context()->functions->set(sqrt=>{class=>'my::Function::numeric'});
Context()->flags->set(reduceConstantFunctions=>0);
Context()->variables->add(
y=>"Real",
t=>"Real",
s=>"Real",
u=>"Real",
v=>"Real",
p=>"Real",
q=>"Real",
r=>"Real",
w=>"Real",
z=>"Real");



$a = random(3,10,1);
$b = random(2,5,1);
$b2 = $b**2;
$c = random(3,10,1);
do {$d = random(2,5,1)} until (gcd($b,$d) ==1);
$d2 = $d**2;
$e = $a*$b + $c*$d;
$f1 = 2*$b2;
$f2 = 2*$d2;

$expr = " $a\sqrt{$f1} + $c \sqrt{$f2}";

Context("Numeric");
Context()->operators->undefine("+", "-");
#
# Don't allow fractional powers (avoids 1/2 power)
# [Could subclass exponentiation to handle that as well]
#
LimitedPowers::OnlyPositiveIntegers();

$ans = $e * sqrt(2);
$texanswer = "\( $e \sqrt{2} \)";

###################################
# Main text

Context()->texStrings;
BEGIN_TEXT

Simplify.  Assume that all expressions under radicals represent nonnegative numbers.
$PAR
$BCENTER
\($expr  = \text{ }\) \{ANS_RULE(10)\}
$ECENTER
$BR Write your answer using radical notation if necessary.  
END_TEXT


if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    $texanswer
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $PAR
   ${BBOLD}Help:${EBOLD}
    
To enter the square root of a number use ${BBOLD}sqrt()${EBOLD}. For example, to give \(\sqrt{7x}\) as an answer, you would type sqrt(7x). If you mistakenly type sqrt 7x instead, Webwork will take this to mean \(x \sqrt{7}\), not \(\sqrt{7x}\). That is, you MUST put parenthesis around everything that you want to take the square root of. 
    $BR
    END_TEXT
}
Context()->normalStrings;

PeriodicStatus(); 



###################################
# Answers

$showPartialCorrectAnswers = 0;

Context()->flags->set(  tolerance=>0.0000001,   tolType=>"absolute" );

ANS(Compute($ans)->cmp); 
#made tolerance obnoxiously low so students can't enter a decimal.

COMMENT('MathObject version');
ENDDOCUMENT();