# DESCRIPTION
# Plots a line through arbitrary points and asks the student to give the slope.
# The line can have arbitrary real valued slope or be undefined.
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Lines')
## KEYWORDS('slope','line')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "contextFraction.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswer = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$maxXVal = random(6,10,1);
$maxYVal = $maxXVal;
$gridWidth = 350;
$gridHeight = $gridWidth*($maxYVal/$maxXVal);

# initialize graph, draw grid manually, and label axes
$graph = init_graph(-$maxXVal, -$maxYVal, $maxXVal, $maxYVal, size => [$gridWidth, $gridHeight]);

for ($i = -$maxYVal + 1; $i < $maxYVal; $i++) {
  if ($i != 0) {
    $graph->moveTo(-$maxXVal, $i);
    $graph->lineTo($maxXVal, $i, 'gray', 1);
  }
}
for ($i = -$maxXVal+1; $i < $maxXVal+1; $i++) {
  if ($i != 0) {
    $graph->moveTo($i, -$maxYVal);
    $graph->lineTo($i, $maxYVal, 'gray', 1);
  }
}

$graph->moveTo(-$maxXVal, 0);
$graph->arrowTo($maxXVal, 0, 'black', 1);
$graph->arrowTo(-$maxXVal, 0, 'black', 1);
$graph->moveTo(0, -$maxYVal);
$graph->arrowTo(0, $maxYVal, 'black', 1);
$graph->arrowTo(0, -$maxYVal, 'black', 1);
$graph->lb(new Label($maxXVal-0.1, -0.2, 'x', 'black', 'top', 'right'));
$graph->lb(new Label(0.4, $maxYVal-0.1, 'y', 'black', 'top', 'left'));
$graph->lb(new Label(1,0,'1', 'black', 'bottom','left'));
$graph->lb(new Label(0,1,'1', 'black', 'bottom','left'));

# define coordinates
$xCoordOne = random(-$maxXVal+1, $maxXVal-1, 1);
$xCoordTwo = random(-$maxXVal+1, $maxXVal-1, 1);
$yCoordOne = random(-$maxYVal+1, $maxYVal-1, 1);
$yCoordTwo = random(-$maxYVal+1, $maxYVal-1, 1);

# makes sure that the points are distinct and check whether vert or hori line
# 0 reps a hori line, 1 reps a vert line, and 2 reps nonzero sloped line
$vOrHLine = 2;
if ($xCoordOne != $xCoordTwo && $yCoordOne == $yCoordTwo) {
  $vOrHLine = 0;
} elsif ($xCoordOne == $xCoordTwo && $yCoordOne != $yCoordTwo) {
  $vOrHLine = 1;
} elsif ($xCoordOne == $xCoordTwo && $yCoordOne == $yCoordTwo) {
  while ($xCoordOne == $xCoordTwo) {
    $xCoordTwo = random(-$maxXVal+1, $maxXVal-1, 1);
  }
  while ($yCoordOne == $yCoordTwo) {
    $yCoordTwo = random(-$maxYVal+1, $maxYVal-1, 1);
  }
}

# draw line and points
if ($vOrHLine == 0) {
  $graph->moveTo(-$maxXVal, $yCoordOne);
  $graph->arrowTo($maxXVal, $yCoordOne, 'blue', 2);
  $graph->arrowTo(-$maxXVal, $yCoordOne, 'blue', 2);
} elsif ($vOrHLine == 1) {
  $graph->moveTo($xCoordOne, -$maxYVal);
  $graph->arrowTo($xCoordOne, $maxYVal, 'blue', 2);
  $graph->arrowTo($xCoordOne, -$maxYVal, 'blue', 2);
} elsif ($vOrHLine == 2) {
  $slope = ($yCoordOne - $yCoordTwo)/($xCoordOne - $xCoordTwo);
  $b = $yCoordOne - $slope*$xCoordOne;
  $xGraphMin = -$maxXVal;
  $xGraphMax = $maxXVal;
  $yGraphMin = $slope*$xGraphMin + $b;
  $yGraphMax = $slope*$xGraphMax + $b;

  # these if statements make sure that the arrows draw nicely
  if ($yGraphMin < -$maxYVal) {
    $yGraphMin = -$maxYVal;
    $xGraphMin = ($yGraphMin - $b)/$slope;
  } elsif ($yGraphMin > $maxYVal) {
    $yGraphMin = $maxYVal;
    $xGraphMin = ($yGraphMin - $b)/$slope;
  }

  if ($yGraphMax < -$maxYVal) {
    $yGraphMax = -$maxYVal;
    $xGraphMax = ($yGraphMax - $b)/$slope;
  } elsif ($yGraphMax > $maxYVal) {
    $yGraphMax = $maxYVal;
    $xGraphMax = ($yGraphMax - $b)/$slope;
  }

  $graph->moveTo($xGraphMin, $yGraphMin);
  $graph->arrowTo($xGraphMax, $yGraphMax, 'blue', 2);
  $graph->arrowTo($xGraphMin, $yGraphMin, 'blue', 2);
}
$graph->stamps(closed_circle($xCoordOne, $yCoordOne, 'blue'));
$graph->stamps(closed_circle($xCoordTwo, $yCoordTwo, 'blue'));

# compute slope or set it as undefined, this will be used in answer check
Context("Fraction-NoDecimals");
Context()->operators->undefine('+','-','*');
Context()->strings->add("undefined"=>{});
if ($vOrHLine == 1) {
  $m = String("undefined");
} else {
  $num = $yCoordTwo - $yCoordOne;
  $den = $xCoordTwo - $xCoordOne;
  $m = Compute("$num/$den")->reduce;
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Find the slope of the line if it exists or write ${BBOLD}undefined${EBOLD} if the slope is undefined. You must reduce your answer completely.

$PAR
$BCENTER
\{ image( insertGraph($graph), width=>$gridWidth, height=>$gridHeight, tex_size=>800 ) \}
$ECENTER 
$PAR

\(m = \) \{ans_rule(20)\} 
END_TEXT


###########################################################################
# check the answer  
###########################################################################
if ($vOrHLine == 1) {
  $texAnswer = "The slope is undefined.";
  ANS($m->cmp());
} else {
  $texAnswer = "\(m = $m\)";
  ANS($m->cmp(studentsMustReduceFractions => 1));
}


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    $texAnswer
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $BR
    END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();