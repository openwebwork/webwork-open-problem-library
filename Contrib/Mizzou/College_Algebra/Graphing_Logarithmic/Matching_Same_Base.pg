# DESCRIPTION
# Gives the graphs of four logarithmic functions and asks to match them
# to the correct equation
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Graphs of Functions')
## KEYWORDS('functions', 'logarithmic', 'graphs')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "parserImplicitPlane.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
@bases = (2..10);
push(@bases,exp(1));
$choice = list_random(@bases);

if ($choice == exp(1)) {
  @dispfun = ("\ln(x)", "\ln(-x)", "-\ln(x)", "-\ln(-x)");
} elsif ($choice == 10) {
  @dispfun = ("\log(x)", "\log(-x)", "-\log(x)", "-\log(-x)");
} else {
  @dispfun = ("\log_{$choice}(x)", "\log_{$choice}(-x)", "-\log_{$choice}(x)", "-\log_{$choice}(-x)");
}

@pos = (0..3);
@posspos = (0..3);
for ($i = 0; $i < 4; $i++) {
  $pos[$i] = list_random(@posspos);
  for ($j = 0; $j < scalar(@posspos); $j++) {
    if ($posspos[$j] == $pos[$i] ) {
      $tmp = $posspos[$j];
      $posspos[$j] = $posspos[scalar(@posspos)-1];
      $posspos[scalar(@posspos)-1] = $tmp;
      pop(@posspos);
      $j--;
    }
  }
}

Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, E=>{}, "none"=>{});
@possans = ("A", "B", "C", "D", "E");
@ans = ($possans[$pos[0]], $possans[$pos[1]], $possans[$pos[2]], $possans[$pos[3]]);

$maxy = 4;
$maxx = $choice+2;
$miny = -$maxy;
$minx = -$maxx;
$gsize = 500;

for ($i = 0; $i < 4; $i++) {
  $graphs[$i] = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
  for ($j = $minx; $j <= $maxx; $j++) {
    $graphs[$i]->moveTo($j,$miny);
    $graphs[$i]->lineTo($j,$maxy,'gray',1);
  }
  for ($j = $miny; $j <= $maxy; $j++) {
    $graphs[$i]->moveTo($minx,$j);
    $graphs[$i]->lineTo($maxx,$j,'gray',1);
  }
  $graphs[$i]->moveTo($minx, 0);
  $graphs[$i]->arrowTo($maxx, 0, 'black', 2);
  $graphs[$i]->arrowTo($minx, 0, 'black', 2);
  $graphs[$i]->moveTo(0, $miny);
  $graphs[$i]->arrowTo(0, $maxy, 'black', 2);
  $graphs[$i]->arrowTo(0, $miny, 'black', 2);
  $graphs[$i]->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

  for ($j = $minx+1; $j < $maxx; $j++) {
    if ($j != 0) {
      $graphs[$i]->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
    }
  }

  for ($j = $miny+1; $j < $maxy; $j++) {
    if ($j != 0 && $j % 2 == 0) {
      $graphs[$i]->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
    }
  }
}

# set up plots
$expn[0] = sub { my $x = shift(); log($x)/log($choice) };
$fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
$fun[0]->domain(0.001,$maxx);
$fun[0]->steps(1500);
$fun[0]->weight(3);

$expn[1] = sub { my $x = shift(); log(-$x)/log($choice) };
$fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
$fun[1]->domain($minx,-0.001);
$fun[1]->steps(1500);
$fun[1]->weight(3);

$expn[2] = sub { my $x = shift(); -log($x)/log($choice) };
$fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
$fun[2]->domain(0.001,$maxx);
$fun[2]->steps(1500);
$fun[2]->weight(3);

$expn[3] = sub { my $x = shift(); -log(-$x)/log($choice) };
$fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
$fun[3]->domain($minx,-0.001);
$fun[3]->steps(1500);
$fun[3]->weight(3);


for ($i = 0; $i < 4; $i++) {
  for ($j = $miny-2; $j < $maxy+2; $j = $j + 2) {
    $graphs[$i]->moveTo(-0.025,$j-0.5, 0);
    $graphs[$i]->lineTo(-0.025, $j+0.5,'red',4);
  }
}

@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize/2, height=>$gsize/2, tex_size=>500 );
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 
$PAR
For each function, give the correct letter that corresponds to its graph:
$PAR
(i) \(f(x) = $dispfun[0]\) $SPACE $SPACE $SPACE \{ans_rule(5)\}
$PAR
(ii) \(g(x) = $dispfun[1]\) $SPACE $SPACE $SPACE \{ans_rule(5)\}
$PAR
(iii) \(h(x) = $dispfun[2]\) $SPACE $SPACE $SPACE \{ans_rule(5)\}
$PAR
(iv) \(k(x) = $dispfun[3]\) $SPACE $SPACE $SPACE \{ans_rule(5)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(String($ans[0])->cmp());
ANS(String($ans[1])->cmp());
ANS(String($ans[2])->cmp());
ANS(String($ans[3])->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} (i) \($ans[0]\), (ii) \($ans[1]\), (iii) \($ans[2]\), (iv) \($ans[3]\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();