# DESCRIPTION
# Plots two intersecting lines and asks to solve the system graphically.
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Linear Functions')
## DBsection('Systems of Linear Equations')
## KEYWORDS('linear systems','graphing')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "contextLimitedPoint.pl",
  "MUHelp.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswer = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("LimitedPoint");
Context()->strings->add("no solution"=>{}, "no solutions"=>{alias=>"no solution"}, "no soln"=>{alias=>"no solution"}, "no solns"=>{alias=>"no solution"}, "none"=>{alias=>"no solution"}, "infinitely many"=>{});
Context()->operators->undefine('+','-','*','* ','**','^');

# initialize graph, draw grid manually, and label axes
$maxx = random(6,10,1);
$maxy = $maxx;
$minx = -$maxx;
$miny = -$maxy;
$gsize = 450;

$graph = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
for ($j = $minx; $j <= $maxx; $j++) {
  $graph->moveTo($j,$miny);
  $graph->lineTo($j,$maxy,'gray',1);
}
for ($j = $miny; $j <= $maxy; $j++) {
  $graph->moveTo($minx,$j);
  $graph->lineTo($maxx,$j,'gray',1);
}
$graph->moveTo($minx, 0);
$graph->arrowTo($maxx, 0, 'black', 2);
$graph->arrowTo($minx, 0, 'black', 2);
$graph->moveTo(0, $miny);
$graph->arrowTo(0, $maxy, 'black', 2);
$graph->arrowTo(0, $miny, 'black', 2);
$graph->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
$graph->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));
for ($j = $minx+1; $j < $maxx; $j++) {
  if ($j != 0) {
    $graph->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
  }
}
for ($j = $miny+1; $j < $maxy; $j++) {
  if ($j != 0 && $j % 2 == 0) {
    $graph->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
  }
}

# define coordinates, the do-while loops make sure the points are all distinct
# the line through ($x0, $y0) and ($x1, $y1) cannot be horizontal
# the line through ($x0, $y0) and ($x2, $y2) cannot be vertical
$x0 = random($minx+1, $maxx-1, 1);
$y0 = random($miny+1, $maxy-1, 1);
do {
  $x1 = random($minx+1, $maxx-1, 1);
  $y1 = random($miny+1, $maxy-1, 1);
} while (abs($x1 - $x0) == 1 || abs($y0 - $y1) <= 1);

do {
  $x2 = random($minx+1, $maxx-1, 1);
  $y2 = random($miny+1, $maxy-1, 1);
} while (abs($x0 - $x2) <= 1 || $y1 == $y2);


# draw lines and the point ($x0, $y0)
if ($x0 == $x1) {
  $graph->moveTo($x0, $miny);
  $graph->arrowTo($x0, $maxy, 'blue', 2);
  $graph->arrowTo($x0, $miny, 'blue', 2);
} else {
  $m0 = ($y1-$y0)/($x1-$x0);
  $b0 = $y0 - $m0*$x0;
  $expn1 = sub { my $t = shift(); return ($t*$m0+$b0); };
  $fun1 = new Fun($expn1,$graph);
  $fun1->steps(1500);
}

if ($y0 == $y2) {
  $graph->moveTo($minx, $y0);
  $graph->arrowTo($maxx, $y0, 'blue', 2);
  $graph->arrowTo($minx, $y0, 'blue', 2);
} else {
  $m1 = ($y2-$y0)/($x2-$x0);
  $b1 = $y0 - $m1*$x0;
  $expn2 = sub { my $t = shift(); return ($t*$m1+$b1); };
  $fun2 = new Fun($expn2,$graph);
  $fun2->steps(1500);
}
# uncomment to put show intersection point on the graph
#$graph->stamps(new Circle($x0, $y0, 6, 'blue', 'blue')); 

# here in order to write the system in the problem statement
$xcoeff1 = $y0-$y1;
$ycoeff1 = $x1-$x0;
$sign1 = "+";
if ($ycoeff1 < 0) {
  $sign1 = "-";
  $ycoeff1 = -$ycoeff1;
}
$const1 = ($x1-$x0)*$y0 - ($y1-$y0)*$x0;
$xcoeff2 = $y0-$y2;
$ycoeff2 = $x2-$x0;
$sign2 = "+";
if ($ycoeff2 < 0) {
  $sign2 = "-";
  $ycoeff2 = -$ycoeff2;
}
$const2 = ($x2-$x0)*$y0 - ($y2-$y0)*$x0;

if ($ycoeff1 == 0 && $xcoeff2 == 0) {
  $eqn = "\(\left${LBRACE} \begin{array}{rcr}";
  if ($xcoeff1 == 1) {$eqn = $eqn."x"} elsif ($xcoeff1 == -1) {$eqn = $eqn."-x"} else {$eqn = $eqn."$xcoeff1 x"};
  $eqn = $eqn." & = & $const1\\";
  if ($ycoeff2 == 1) {$eqn = $eqn."y"} else {$eqn = $eqn."$ycoeff2 y"};
  $eqn = $eqn." & = & $const2 \end{array} \right. \)";
} elsif ($ycoeff1 == 0 && $xcoeff2 != 0) {
  $eqn = "\( \left${LBRACE} \begin{array}{rcrcr}";
  if ($xcoeff1 == 1) {$eqn = $eqn."x"} elsif ($xcoeff1 == -1) {$eqn = $eqn."-x"} else {$eqn = $eqn."$xcoeff1 x"};
  $eqn = $eqn." &        &            & = & $const1\\";
  if ($xcoeff2 == 1) {$eqn = $eqn."x"} elsif ($xcoeff2 == -1) {$eqn = $eqn."-x"} else {$eqn = $eqn."$xcoeff2 x"};
  $eqn = $eqn." & $sign2 & "; 
  if ($ycoeff2 == 1) {$eqn = $eqn."y"} else {$eqn = $eqn."$ycoeff2 y"};
  $eqn = $eqn."& = & $const2 \end{array} \right. \)";
} elsif ($ycoeff1 != 0 && $xcoeff2 == 0) {
  $eqn = "\( \left${LBRACE} \begin{array}{rcrcr}";
  if ($xcoeff1 == 1) {$eqn = $eqn."x"} elsif ($xcoeff1 == -1) {$eqn = $eqn."-x"} else {$eqn = $eqn."$xcoeff1 x"};
  $eqn = $eqn."& $sign1 & ";
  if ($ycoeff1 == 1) {$eqn = $eqn."y"} else {$eqn = $eqn."$ycoeff1 y"};
  $eqn = $eqn." & = & $const1\\";
  $eqn = $eqn." & & ";
  if ($sign2 == "-") {$eqn = ($ycoeff2 == 1) ? $eqn."-y" : $eqn."-$ycoeff2 y"} else {
    $eqn = ($ycoeff2 == 1) ? $eqn."y" : $eqn."$ycoeff2 y";
  }
  $eqn = $eqn."& = & $const2 \end{array} \right. \)";
} else {
  $eqn = "\( \left${LBRACE} \begin{array}{rcrcr}";
  if ($xcoeff1 == 1) {$eqn = $eqn."x"} elsif ($xcoeff1 == -1) {$eqn = $eqn."-x"} else {$eqn = $eqn."$xcoeff1 x"};
  $eqn = $eqn." & $sign1 & ";
  if ($ycoeff1 == 1) {$eqn = $eqn."y"} else {$eqn = $eqn."$ycoeff1 y"};
  $eqn = $eqn." & = & $const1\\";
  if ($xcoeff2 == 1) {$eqn = $eqn."x"} elsif ($xcoeff2 == -1) {$eqn = $eqn."-x"} else {$eqn = $eqn."$xcoeff2 x"};
  $eqn = $eqn." & $sign2 & "; 
  if ($ycoeff2 == 1) {$eqn = $eqn."y"} else {$eqn = $eqn."$ycoeff2 y"};
  $eqn = $eqn."& = & $const2 \end{array} \right. \)";
}
$answer = Point("($x0,$y0)");


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Solve the following system of equations graphically: $eqn
$PAR
$BCENTER
\{ image( insertGraph($graph), width=>$gridWidth, height=>$gridHeight, tex_size=>800 ) \}
$ECENTER 
$PAR
Answer: \{ans_rule(20)\} 
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS($answer->cmp(tolType => 'absolute', tolerance => 0.2));


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
Context()->texStrings;
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} \($answer\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  $BBOLD Help: $EBOLD \{ MUHelp("system2vars") \}
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus();

COMMENT('Features Periodic Rerandomization. Edited and updated in 2012/2013.
$BR
Desc: Plots two intersecting lines and asks to solve the system graphically.');
ENDDOCUMENT();