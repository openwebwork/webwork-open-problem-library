# DESCRIPTION
# Gives the graph of cubic function on -11, 11 and asks for the student to
# evaluate function values using points on the graph.
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Evaluation and Solving')
## KEYWORDS('functions', 'evaluating')
## Author1('Rick Lynch')
## Author2('Teri Christiansen')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$maxx = 11;
$minx = -$maxx;
$gsize = 500;

$graph = init_graph($minx, $minx, $maxx, $maxx, size=>[$gsize,$gsize]);
for ($i = 1; $i <= $maxx ; $i++) {
  $graph->moveTo($i,$minx);
  $graph->lineTo($i, $maxx, 'gray', 1);
  $graph->moveTo(-$i,$maxx);
  $graph->lineTo(-$i, $minx, 'gray', 1);
  $graph->moveTo($minx, $i);
  $graph->lineTo($maxx, $i, 'gray', 1);
  $graph->moveTo($minx, -$i);
  $graph->lineTo($maxx, -$i, 'gray', 1);
}
$graph->moveTo($minx, 0);
$graph->arrowTo($maxx, 0, 'black', 2);
$graph->arrowTo($minx, 0, 'black', 2);
$graph->moveTo(0, $minx);
$graph->arrowTo(0, $maxx, 'black', 2);
$graph->arrowTo(0, $minx, 'black', 2);
$graph->lb(new Label($maxx-0.1, -0.2, 'x', 'black', 'top', 'right'));
$graph->lb(new Label(0.4, $maxx-0.1, 'y', 'black', 'top', 'left'));
$graph->lb(new Label(1,-0.1,'1', 'black', 'top','center'));
$graph->lb(new Label(5,-0.1,'5', 'black', 'top','center'));
$graph->lb(new Label(10,-0.1,'10', 'black', 'top','center'));
$graph->lb(new Label(-5,-0.1,'-5', 'black', 'top','center'));
$graph->lb(new Label(-10,-0.1,'-10', 'black', 'top','center'));
$graph->lb(new Label(-0.1,0.7,'1', 'black', 'bottom', 'right'));
$graph->lb(new Label(-0.1,4.7,'5', 'black', 'bottom', 'right'));
$graph->lb(new Label(-0.1,9.7,'10', 'black', 'bottom', 'right'));
$graph->lb(new Label(-0.1,-5.3,'-5', 'black', 'bottom', 'right'));
$graph->lb(new Label(-0.1,-10.3,'-10', 'black', 'bottom', 'right'));

# set up cubic function
do {
$m = random(-1,1,2)*random(2,4);
$n = random(3,5);
$p = random(1,$n-1);
$a = $m/($p*((($p)**2)-(($n)**2)));
$c = -$m*(($n)**2)/($p*((($p)**2)-(($n)**2)));
$hshift = non_zero_random(-2,2);
$vshift = non_zero_random(-2,2);

$expn = sub { my $x = shift(); $a*(($x - $hshift)**3)+$c*($x-$hshift)+$vshift};
$fun = new Fun($expn, $graph);
$fun->steps(1500);
$fun->weight(2);
$fun->domain(-11,11);

@possx = (-11..11);
@possxg = (-11..11);
for ($i = 0; $i < scalar(@possx); $i++) {
  $possy[$i] = $a*(($possx[$i] - $hshift)**3)+$c*($possx[$i]-$hshift)+$vshift;
  $possyg[$i] = $a*(($possx[$i] - $hshift)**3)+$c*($possx[$i]-$hshift)+$vshift;
}

# delete bad values
for ($i = 0; $i < scalar(@possx); $i++) {
  if ($possy[$i] > 9 || $possy[$i] < -9 ||
      abs($possy[$i] - floor($possy[$i])) > 0.05) {
    $tmp1 = $possx[$i];
    $possx[$i] = $possx[scalar(@possx)-1];
    $possx[scalar(@possx)-1] = $tmp1;
    pop(@possx);

    $tmp2 = $possy[$i];
    $possy[$i] = $possy[scalar(@possy)-1];
    $possy[scalar(@possy)-1] = $tmp2;
    pop(@possy);
    $i = $i - 1;
  }
}
$size = scalar(@possx);
} until ($size > 5);

# adjust y-values to not be decimals by rounding
for ($i = 0; $i < scalar(@possy); $i++) {
  if ($possy[$i] - floor($possy[$i]) != 0) {
    $possy[$i] = floor($possy[$i]);
  }
}

for ($i = 0; $i < scalar(@possyg); $i++) {
  if (abs($possyg[$i]) < 10) {
    $graph->stamps(new Circle($possxg[$i],$possyg[$i],'4','blue','blue'));
  }
}

$hasdup = 1; # find a point with unique y-value
while ($hasdup) {
  $hasdup = 0;
  $x4pos = random(0,scalar(@possx)-1);
  for ($i = 0; $i < scalar(@possx); $i++) {
    if ($i != $x4pos && $possy[$i] == $possy[$x4pos]) {
       $hasdup = 1;
    }
  }
}

$hasdup = 1; # find a point with unique y-value
while ($hasdup) {
  $hasdup = 0;
  do {$x2pos = random(0,scalar(@possx)-1)} until ($x2pos != $x4pos);
  for ($i = 0; $i < scalar(@possx); $i++) {
    if ($i != $x2pos && $possy[$i] == $possy[$x2pos]) {
       $hasdup = 1;
    }
  }
}

$hasdup = 1; # find a point with unique y-value
while ($hasdup) {
  $hasdup = 0;
  do {$x3pos = random(0,scalar(@possx)-1)} until ($x3pos != $x4pos && $x3pos != $x2pos);
  for ($i = 0; $i < scalar(@possx); $i++) {
    if ($i != $x3pos && $possy[$i] == $possy[$x3pos]) {
       $hasdup = 1;
    }
  }
}

do {$x1pos = random(0,scalar(@possx)-1)} until ($x1pos != $x4pos && $x1pos != $x2pos && $x1pos != $x3pos);



###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT

$PAR
$BCENTER
\{ image(insertGraph($graph), width=>$gsize, height=>$gsize, tex_size=>500 ); \}
$ECENTER 
$PAR

Given the graph of \(f(x)\) above, find the following:
$PAR
(a) \(f($possx[$x1pos]) = \) \{ans_rule(5)\}
$PAR
(b) \(f($possx[$x2pos]) = \) \{ans_rule(5)\}
$PAR
(c) \(f($possx[$x3pos]) = \) \{ans_rule(5)\}
$PAR
(d) \(f \big(\) \{ans_rule(5)\} \(\big) = $possy[$x4pos]\)
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($possy[$x1pos])->cmp());
ANS(Compute($possy[$x2pos])->cmp());
ANS(Compute($possy[$x3pos])->cmp());
ANS(Compute($possx[$x4pos])->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    $PAR
    (a) $possy[$x1pos]
    $PAR
    (b) $possy[$x2pos]
    $PAR
    (c) $possy[$x3pos]
    $PAR
    (d) $possx[$x4pos]
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $BR
    END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();