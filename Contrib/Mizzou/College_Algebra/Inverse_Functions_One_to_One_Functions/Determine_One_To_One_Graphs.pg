# DESCRIPTION
# Gives four graphs and asks which represent one-to-one functions
# There are four groups of two, each containing a one-to-one function and one that's not
# Randomly chooses one from each group.
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection( 'One-to-one Functions and Their Inverses')
## KEYWORDS('functions')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("2");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 0;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
# set up graphs
$numgraphs = 4;
$maxx = 10;
$gsize = 500;
for ($j = 0; $j < $numgraphs; $j++) {
  $graphs[$j] = init_graph(-$maxx,-$maxx,$maxx,$maxx, size => [$gsize,$gsize]);
  for ($i = 1; $i <= $maxx ; $i++) {
    $graphs[$j]->moveTo($i,-$maxx);
    $graphs[$j]->lineTo($i, $maxx, 'gray', 1);
    $graphs[$j]->moveTo(-$i,$maxx);
    $graphs[$j]->lineTo(-$i, -$maxx, 'gray', 1);
    $graphs[$j]->moveTo(-$maxx, $i);
    $graphs[$j]->lineTo($maxx, $i, 'gray', 1);
    $graphs[$j]->moveTo(-$maxx, -$i);
    $graphs[$j]->lineTo($maxx, -$i, 'gray', 1);
  }
  $graphs[$j]->moveTo(-$maxx, 0);
  $graphs[$j]->arrowTo($maxx, 0, 'black', 2);
  $graphs[$j]->arrowTo(-$maxx, 0, 'black', 2);
  $graphs[$j]->moveTo(0, -$maxx);
  $graphs[$j]->arrowTo(0, $maxx, 'black', 2);
  $graphs[$j]->arrowTo(0, -$maxx, 'black', 2);
}

@positions = (0..3);
@possPositions = (0..3);
for ($i = 0; $i < 4; $i++) {
  $positions[$i] = list_random(@possPositions);
  for ($j = 0; $j < scalar(@possPositions); $j++) {
    if ($possPositions[$j] == $positions[$i] ) {
      $tmp = $possPositions[$j];
      $possPositions[$j] = $possPositions[scalar(@possPositions)-1];
      $possPositions[scalar(@possPositions)-1] = $tmp;
      pop(@possPositions);
    }
  }
}

Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, "none"=>{});
$num11 == 0;
@possans = ("A","B","C","D");
@answers = ();

# set up one-to-one cube root and non one-to-one cubic
$yfun1 = sub { my $x = shift(); 2*((($x)**3)- 3*$x + 1) };
$yfun2 = sub { my $x = shift(); 2*(sgn($x+2)*(abs($x+2)**(1/3)))+2 };
$choice = random(1,2,1);
if ($choice == 1) {
  $fun1 = new Fun($yfun1, $graphs[$positions[0]]);
} else {
  $fun1 = new Fun($yfun2, $graphs[$positions[0]]);
  $num11++;
  push(@answers, $possans[$positions[0]]);
}
$fun1->domain(-$maxx,$maxx);
$fun1->steps(1500);

# set rational function that is one-to-one and one that is not
$a = random(-1,1,2)*random(2,3,1);
do {$b = non_zero_random(-3,3)} until ($b != $a && $b != -$a);
$choice = 1; #random(1,2,1);
if ($choice == 1) {
for ($i = -$maxx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$positions[1]]->moveTo($b,$i-0.5);
  $graphs[$positions[1]]->lineTo($b,$i+0.5,'red',4);
}
for ($i = -$maxx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$positions[1]]->moveTo($i-0.5,0);
  $graphs[$positions[1]]->lineTo($i+0.5,0,'red',4);
}
$goodexpn = sub { my $x = shift(); $a/(($x - $b)) };
$goodfun1 = new Fun($goodexpn, $graphs[$positions[1]]);
$goodfun1->steps(1500);
$goodfun1->weight(3);
$goodfun1->domain(-$maxx,$b-0.001);
$goodfun2 = new Fun($goodexpn, $graphs[$positions[1]]);
$goodfun2->steps(1500);
$goodfun2->weight(3);
$goodfun2->domain($b+0.001,$maxx);
$num11++;
push(@answers, $possans[$positions[1]]);
$test = 27;
} else {
$badasym31 = -$b;
$badasym32 = $b;
for ($i = -$maxx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$positions[1]]->moveTo($badasym31,$i-0.5);
  $graphs[$positions[1]]->lineTo($badasym31,$i+0.5,'red',4);
  $graphs[$positions[1]]->moveTo($badasym32,$i-0.5);
  $graphs[$positions[1]]->lineTo($badasym32,$i+0.5,'red',4);
}
for ($i = -$maxx-2; $i < $maxx+2; $i = $i + 2) {
  $graphs[$positions[1]]->moveTo($i-0.5,0);
  $graphs[$positions[1]]->lineTo($i+0.5,0,'red',4);
}
$badexpn3 = sub { my $x = shift(); ($x - $a)/(($x-$b)*($x+$b)) };
$badfun31 = new Fun($badexpn3, $graphs[$positions[1]]);
$badfun31->steps(1500);
$badfun31->weight(3);
$badfun31->domain(-$maxx,min($badasym31,$badasym32)-0.001);
$badfun32 = new Fun($badexpn3, $graphs[$positions[1]]);
$badfun32->steps(1500);
$badfun32->weight(3);
$badfun32->domain(min($badasym31,$badasym32)+0.001,max($badasym31,$badasym32)-0.001);
$badfun33 = new Fun($badexpn3, $graphs[$positions[1]]);
$badfun33->steps(1500);
$badfun33->weight(3);
$badfun33->domain(max($badasym31,$badasym32)+0.001,$maxx);
}
#BEGIN_TEXT
#(x - $a)/(($b-x)*($b+x)) $PAR 
#END_TEXT

# zig zag lines
$choice = random(1,2,1);
$x[0] = random(-6,-4);
$x[1] = $x[0] + random(3,4);
$x[2] = $x[1] + random(1,2);
$x[3] = $x[1]+random(4,8);
$flip = -1; random(-1,1,2);
$y[0] = random(-7,-5,1)*$flip;
$y[1] = $y[0] + random(2,3)*$flip;
if ($choice == 1) {
  $y[2] = random(5,7)*$flip;
  $num11++;
  push(@answers, $possans[$positions[2]]);
} else {
  $y[2] = $y[1];
}
$y[3] = $y[2] + random(2,3)*$flip;
for ($i = 0; $i < 3; $i++) {
  $graphs[$positions[2]]->moveTo($x[$i],$y[$i]);
  $graphs[$positions[2]]->lineTo($x[$i+1],$y[$i+1],'blue',2);
  $graphs[$positions[2]]->stamps(closed_circle($x[$i],$y[$i],'blue'));
  $graphs[$positions[2]]->stamps(closed_circle($x[$i+1],$y[$i+1],'blue'));
}


# set up parabolas, one restricted so one-to-one, one not
$a = random(-1,1,2);
$h = random(-3,3);
$k = random(-3,3);
$expn = sub { my $x = shift(); $a*(($x - $h)**2) + $k };
$fun4 = new Fun($expn,$graphs[$positions[3]]);
$graphs[$positions[3]]->stamps(closed_circle($h,$k,'blue'));

$choice = random(1,2,1);
if ($choice == 1) {
  $fun4->domain($h,$maxx);
  $num11++;
  push(@answers, $possans[$positions[3]]);
} else {
  $fun4->domain(-$maxx,$maxx);
}
$fun4->steps(1500);


@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize/2, height=>$gsize/2, tex_size=>1000 );
}

if ($num11 == 0) {
  $ans = List("none");
} elsif ($num11 == 1) {
  $ans = List($answers[0]);
} elsif ($num11 == 2) {
  $ans = List($answers[0], $answers[1]);
} elsif ($num11 == 3) {
  $ans = List($answers[0], $answers[1], $answers[2]);
} elsif ($num11 == 4) {
  $ans = List($answers[0], $answers[1], $answers[2], $answers[3]);
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
List the letters corresponding to the graphs below that represent one-to-one functions. Write ${LQ}none${RQ} if none of the graphs represent a one-to-one function. If there are multiple letters, separate them by commas.

$PAR
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 

$BR
Correct Letters: \{ ans_rule(20) \} 
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($ans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    \($ans\)
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $BR
    END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();