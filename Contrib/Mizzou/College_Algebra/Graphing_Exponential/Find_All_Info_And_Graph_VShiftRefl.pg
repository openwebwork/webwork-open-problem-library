# DESCRIPTION
# Gives an exp eqn and asks to find the asymptote, range, y-int, and graph
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Graphs of Functions')
## KEYWORDS('functions', 'exponential', 'graphs')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "contextFraction.pl",
  "parserImplicitPlane.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
@bases = (2..10);
push(@bases,exp(1));
for ($i = 2; $i <= 10; $i++) {
  push(@bases,1/$i);
}
$choice = list_random(@bases);

@trans = (1,0,1,0); # 0 - V shift, 1 - H shift, 2 - V refl, 3 - H refl
if ($trans[1] == 1) {
  $a = non_zero_random(-5,5);
} else {
  $a = 0;
}

if ($trans[0] == 1) {
  do {$b = non_zero_random(-5,5)} until ($b != $a);
} else {
  $b = 0;
}

$dispfun = "";
if ($trans[2] == 1) {
  $dispfun = "-";
}
if ($choice < 1) {
  $dispfun = ($dispfun)."\left(\frac{1}{".(1/$choice)."}\right)^";
} elsif ($choice == exp(1)) {
  $dispfun = ($dispfun)."e^";
} else {
  $dispfun = ($dispfun)."$choice^";
}

if ($trans[3] == 1 && $trans[1] == 1) {
  $dispfun = ($dispfun)."{-(x-$a)}";
} elsif ($trans[3] == 1) {
  $dispfun = ($dispfun)."{-x}";
} elsif ($trans[1] == 1) {
  $dispfun = ($dispfun)."{x-$a}";
} else {
  $dispfun = ($dispfun)."{x}";
}

if ($trans[0] == 1) {
  $dispfun = ($dispfun)."+$b";
}

# for checking the y-intercept...
Context("Fraction-NoDecimals")->texStrings;
$num = 1;
$den = 1;
if ($choice != exp(1) && $choice != 1/exp(1)) {
  if ($trans[2] == 1) {
    $num = -1;
  }
  if ($trans[3] == 1 && $a < 0) {# neg exponent
    if ($choice < 1) {
      $num = $num*((1/$choice)**(-$a));
    } else {
      $den = $den*(($choice)**(-$a));
    } 
  } elsif ($trans[3] != 1 && $a > 0) {# neg exponent
    if ($choice < 1) {
      $num = $num*((1/$choice)**($a));
    } else {
      $den = $den*(($choice)**($a));
    }
  } elsif ($trans[3] != 1 && $a < 0) {# pos exponent
    if ($choice < 1) {
      $den = $den*((1/$choice)**(-$a));
    } else {
      $num = $num*(($choice)**(-$a));
    }
  } elsif ($trans[3] == 1 && $a > 0) {
    if ($choice < 1) {
      $den = $den*((1/$choice)**($a));
    } else {
      $num = $num*(($choice)**($a));
    }
  } # only other case is $a == 0, which is covered already
  $num = $num + $b*$den;
  $yintcoord = Fraction($num,$den);
} else {
  if ($trans[2] == 1) {
    $num = -1;
  }
  if ($trans[3] == 1 && $a < 0) {# neg exponent
    if ($choice < 1) {
      $num = $num*((1/$choice)**(-$a));
    } else {
      $den = $den*(($choice)**(-$a));
    } 
  } elsif ($trans[3] != 1 && $a > 0) {# neg exponent
    if ($choice < 1) {
      $num = $num*((1/$choice)**($a));
    } else {
      $den = $den*(($choice)**($a));
    }
  } elsif ($trans[3] != 1 && $a < 0) {# pos exponent
    if ($choice < 1) {
      $den = $den*((1/$choice)**(-$a));
    } else {
      $num = $num*(($choice)**(-$a));
    }
  } elsif ($trans[3] == 1 && $a > 0) {
    if ($choice < 1) {
      $den = $den*((1/$choice)**($a));
    } else {
      $num = $num*(($choice)**($a));
    }
  } # only other case is $a == 0, which is covered already
  $num = $num + $b*$den;
  $yintcoord = $num/$den;
}

Context("Numeric");
@pos = (0..3);
@posspos = (0..3);
for ($i = 0; $i < 4; $i++) {
  $pos[$i] = list_random(@posspos);
  for ($j = 0; $j < scalar(@posspos); $j++) {
    if ($posspos[$j] == $pos[$i] ) {
      $tmp = $posspos[$j];
      $posspos[$j] = $posspos[scalar(@posspos)-1];
      $posspos[scalar(@posspos)-1] = $tmp;
      pop(@posspos);
      $j--;
    }
  }
}

$maxx = max(abs($a),abs($b))+3;
$maxy = ceil(max($choice,1/$choice)+max(abs($a),abs($b))+2);
$minx = -$maxx;
$miny = -$maxy;
$gsize = 600;
for ($i = 0; $i < 4; $i++) {
  $graphs[$i] = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
  for ($j = $minx; $j <= $maxx; $j++) {
    $graphs[$i]->moveTo($j,$miny);
    $graphs[$i]->lineTo($j,$maxy,'gray',1);
  }
  for ($j = $miny; $j <= $maxy; $j++) {
    $graphs[$i]->moveTo($minx,$j);
    $graphs[$i]->lineTo($maxx,$j,'gray',1);
  }
  $graphs[$i]->moveTo($minx, 0);
  $graphs[$i]->arrowTo($maxx, 0, 'black', 2);
  $graphs[$i]->arrowTo($minx, 0, 'black', 2);
  $graphs[$i]->moveTo(0, $miny);
  $graphs[$i]->arrowTo(0, $maxy, 'black', 2);
  $graphs[$i]->arrowTo(0, $miny, 'black', 2);
  $graphs[$i]->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
  $graphs[$i]->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

  for ($j = $minx+1; $j < $maxx; $j++) {
    if ($j != 0) {
      $graphs[$i]->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
    }
  }

  for ($j = $miny+1; $j < $maxy; $j++) {
    if ($j != 0 && $j % 2 == 0) {
      $graphs[$i]->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
    }
  }
}

# set up plots
if ($trans[0] == 1 && $trans[1] == 1 && $trans[2] == 0 && $trans[3] == 0) {
  $expn[0] = sub { my $x = shift(); ($choice)**($x-$a)+$b };
  $fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
  if ($choice < 1) {
    $fun[0]->domain($a-3,$maxx);
  } else {
    $fun[0]->domain($minx,$a+3);
  }
  $fun[0]->steps(1500);
  $fun[0]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[0]]->moveTo($i-0.5, $b-0.1);
    $graphs[$pos[0]]->lineTo($i+0.5, $b-0.1,'red',4);
  }

  $expn[1] = sub { my $x = shift(); ($choice)**($x-$b)-$a };
  $fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
  if ($choice < 1) {
    $fun[1]->domain($b-3,$maxx);
  } else {
    $fun[1]->domain($minx,$b+3);
  }
  $fun[1]->steps(1500);
  $fun[1]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[1]]->moveTo($i-0.5, -$a-0.1);
    $graphs[$pos[1]]->lineTo($i+0.5, -$a-0.1,'red',4);
  }

  $expn[2] = sub { my $x = shift(); ($choice)**($x+$a)+$b };
  $fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
  if ($choice < 1) {
    $fun[2]->domain(-$a-3,$maxx);
  } else {
    $fun[2]->domain($minx,-$a+3);
  }
  $fun[2]->steps(1500);
  $fun[2]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[2]]->moveTo($i-0.5, $b-0.1);
    $graphs[$pos[2]]->lineTo($i+0.5, $b-0.1,'red',4);
  }

  $expn[3] = sub { my $x = shift(); ($choice)**($x-$a)-$b };
  $fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
  if ($choice < 1) {
    $fun[3]->domain($a-3,$maxx);
  } else {
    $fun[3]->domain($minx,$a+3);
  }
  $fun[3]->steps(1500);
  $fun[3]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[3]]->moveTo($i-0.5, -$b-0.1);
    $graphs[$pos[3]]->lineTo($i+0.5, -$b-0.1,'red',4);
  }
} elsif ($trans[0] == 1 && $trans[1] == 0 && $trans[2] == 1 && $trans[3] == 0) {
  $expn[0] = sub { my $x = shift(); -($choice)**($x)+$b };
  $fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
  if ($choice < 1) {
    $fun[0]->domain(-5,$maxx);
  } else {
    $fun[0]->domain($minx,5);
  }
  $fun[0]->steps(1500);
  $fun[0]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[0]]->moveTo($i-0.5, $b+0.1);
    $graphs[$pos[0]]->lineTo($i+0.5, $b+0.1,'red',4);
  }

  $expn[1] = sub { my $x = shift(); -(($choice)**($x)+$b) };
  $fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
  if ($choice > 1) {
    $fun[1]->domain($minx,5);
  } else {
    $fun[1]->domain(-5,$maxx);
  }
  $fun[1]->steps(1500);
  $fun[1]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[1]]->moveTo($i-0.5, -$b+0.1);
    $graphs[$pos[1]]->lineTo($i+0.5, -$b+0.1,'red',4);
  }

  $expn[2] = sub { my $x = shift(); -($choice)**($x+$b) };
  $fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
  if ($choice > 1) {
    $fun[2]->domain($minx,-$b+5);
  } else {
    $fun[2]->domain(-$b-5,$maxx);
  }
  $fun[2]->steps(1500);
  $fun[2]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[2]]->moveTo($i-0.5, 0.1);
    $graphs[$pos[2]]->lineTo($i+0.5, 0.1,'red',4);
  }

  $expn[3] = sub { my $x = shift(); -($choice)**(-$x)+$b };
  $fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
  if ($choice < 1) {
    $fun[3]->domain($minx,5);
  } else {
    $fun[3]->domain(-5,$maxx);
  }
  $fun[3]->steps(1500);
  $fun[3]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[3]]->moveTo($i-0.5, $b+0.1);
    $graphs[$pos[3]]->lineTo($i+0.5, $b+0.1,'red',4);
  }
} elsif ($trans[0] == 1 && $trans[1] == 0 && $trans[2] == 0 && $trans[3] == 1) {
  $expn[0] = sub { my $x = shift(); ($choice)**(-$x)+$b };
  $fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
  if ($choice < 1) {
    $fun[0]->domain($minx,5);
  } else {
    $fun[0]->domain(-5,$maxx);
  }
  $fun[0]->steps(1500);
  $fun[0]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[0]]->moveTo($i-0.5, $b-0.1);
    $graphs[$pos[0]]->lineTo($i+0.5, $b-0.1,'red',4);
  }

  $expn[1] = sub { my $x = shift(); -($choice)**($x)+$b };
  $fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
  if ($choice > 1) {
    $fun[1]->domain($minx,5);
  } else {
    $fun[1]->domain(-5,$maxx);
  }
  $fun[1]->steps(1500);
  $fun[1]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[1]]->moveTo($i-0.5, $b+0.1);
    $graphs[$pos[1]]->lineTo($i+0.5, $b+0.1,'red',4);
  }

  $expn[2] = sub { my $x = shift(); ($choice)**(-$x)-$b };
  $fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
  if ($choice < 1) {
    $fun[2]->domain($minx,5);
  } else {
    $fun[2]->domain(-5,$maxx);
  }
  $fun[2]->steps(1500);
  $fun[2]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[2]]->moveTo($i-0.5, -$b-0.1);
    $graphs[$pos[2]]->lineTo($i+0.5, -$b-0.1,'red',4);
  }

  $expn[3] = sub { my $x = shift(); ($choice)**($x)+$b };
  $fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
  if ($choice > 1) {
    $fun[3]->domain($minx,5);
  } else {
    $fun[3]->domain(-5,$maxx);
  }
  $fun[3]->steps(1500);
  $fun[3]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[3]]->moveTo($i-0.5, $b-0.1);
    $graphs[$pos[3]]->lineTo($i+0.5, $b-0.1,'red',4);
  }
} elsif ($trans[0] == 0 && $trans[1] == 1 && $trans[2] == 1 && $trans[3] == 0) {
  $expn[0] = sub { my $x = shift(); -($choice)**($x-$a) };
  $fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
  if ($choice < 1) {
    $fun[0]->domain($a-5,$maxx);
  } else {
    $fun[0]->domain($minx,$a+5);
  }
  $fun[0]->steps(1500);
  $fun[0]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[0]]->moveTo($i-0.5, 0.1);
    $graphs[$pos[0]]->lineTo($i+0.5, 0.1,'red',4);
  }

  $expn[1] = sub { my $x = shift(); -($choice)**($x)-$a };
  $fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
  if ($choice < 1) {
    $fun[1]->domain(-5,$maxx);
  } else {
    $fun[1]->domain($minx,5);
  }
  $fun[1]->steps(1500);
  $fun[1]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[1]]->moveTo($i-0.5, -$a+0.1);
    $graphs[$pos[1]]->lineTo($i+0.5, -$a+0.1,'red',4);
  }

  $expn[2] = sub { my $x = shift(); -($choice)**($x+$a) };
  $fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
  if ($choice < 1) {
    $fun[2]->domain(-$a-5,$maxx);
  } else {
    $fun[2]->domain($minx,-$a+5);
  }
  $fun[2]->steps(1500);
  $fun[2]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[2]]->moveTo($i-0.5, 0.1);
    $graphs[$pos[2]]->lineTo($i+0.5, 0.1,'red',4);
  }

  $expn[3] = sub { my $x = shift(); ($choice)**(-($x-$a)) };
  $fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
  if ($choice > 1) {
    $fun[3]->domain($a-5,$maxx);
  } else {
    $fun[3]->domain($minx,$a+5);
  }
  $fun[3]->steps(1500);
  $fun[3]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[3]]->moveTo($i-0.5, -0.1);
    $graphs[$pos[3]]->lineTo($i+0.5, -0.1,'red',4);
  }
} elsif ($trans[0] == 0 && $trans[1] == 1 && $trans[2] == 0 && $trans[3] == 1) {
  $expn[0] = sub { my $x = shift(); ($choice)**(-($x-$a)) };
  $fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
  if ($choice > 1) {
    $fun[0]->domain($a-5,$maxx);
  } else {
    $fun[0]->domain($minx,$a+5);
  }
  $fun[0]->steps(1500);
  $fun[0]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[0]]->moveTo($i-0.5, -0.1);
    $graphs[$pos[0]]->lineTo($i+0.5, -0.1,'red',4);
  }

  $expn[1] = sub { my $x = shift(); -($choice)**(($x-$a)) };
  $fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
  if ($choice < 1) {
    $fun[1]->domain($a-5,$maxx);
  } else {
    $fun[1]->domain($minx,$a+5);
  }
  $fun[1]->steps(1500);
  $fun[1]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[1]]->moveTo($i-0.5, 0.1);
    $graphs[$pos[1]]->lineTo($i+0.5, 0.1,'red',4);
  }

  $expn[2] = sub { my $x = shift(); ($choice)**(-($x+$a)) };
  $fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
  if ($choice > 1) {
    $fun[2]->domain(-$a-5,$maxx);
  } else {
    $fun[2]->domain($minx,-$a+5);
  }
  $fun[2]->steps(1500);
  $fun[2]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[2]]->moveTo($i-0.5, -0.1);
    $graphs[$pos[2]]->lineTo($i+0.5, -0.1,'red',4);
  }

  $expn[3] = sub { my $x = shift(); ($choice)**(-($x))+$a };
  $fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
  $fun[3]->domain(-5,$maxx);
  if ($choice > 1) {
    $fun[3]->domain(-5,$maxx);
  } else {
    $fun[3]->domain($minx,5);
  }
  $fun[3]->steps(1500);
  $fun[3]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[3]]->moveTo($i-0.5, $a-0.1);
    $graphs[$pos[3]]->lineTo($i+0.5, $a-0.1,'red',4);
  }
} elsif ($trans[0] == 0 && $trans[1] == 0 && $trans[2] == 1 && $trans[3] == 1) {
  $expn[0] = sub { my $x = shift(); -($choice)**(-($x)) };
  $fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
  $fun[0]->domain($minx,$maxx);
  $fun[0]->steps(1500);
  $fun[0]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[0]]->moveTo($i-0.5, 0.05);
    $graphs[$pos[0]]->lineTo($i+0.5, 0.05,'red',4);
  }

  $expn[1] = sub { my $x = shift(); ($choice)**(-($x)) };
  $fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
  $fun[1]->domain($minx,$maxx);
  $fun[1]->steps(1500);
  $fun[1]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[1]]->moveTo($i-0.5, -0.05);
    $graphs[$pos[1]]->lineTo($i+0.5, -0.05,'red',4);
  }

  $expn[2] = sub { my $x = shift(); -($choice)**(($x)) };
  $fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
  $fun[2]->domain($minx,$maxx);
  $fun[2]->steps(1500);
  $fun[2]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[2]]->moveTo($i-0.5, 0.05);
    $graphs[$pos[2]]->lineTo($i+0.5, 0.05,'red',4);
  }

  $expn[3] = sub { my $x = shift(); ($choice)**(($x)) };
  $fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
  $fun[3]->domain($minx,$maxx);
  $fun[3]->steps(1500);
  $fun[3]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[3]]->moveTo($i-0.5, -0.05);
    $graphs[$pos[3]]->lineTo($i+0.5, -0.05,'red',4);
  }
} elsif ($trans[0] == 1 && $trans[1] == 1 && $trans[2] == 1 && $trans[3] == 0) {
  $expn[0] = sub { my $x = shift(); -($choice)**($x-$a)+$b };
  $fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
  if ($choice < 1) {
    $fun[0]->domain($a-5,$maxx);
  } else {
    $fun[0]->domain($minx,$a+5);
  }
  $fun[0]->steps(1500);
  $fun[0]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[0]]->moveTo($i-0.5, $b+0.1);
    $graphs[$pos[0]]->lineTo($i+0.5, $b+0.1,'red',4);
  }

  $expn[1] = sub { my $x = shift(); -(($choice)**($x-$a)+$b) };
  $fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
  if ($choice > 1) {
    $fun[1]->domain($minx,$a+5);
  } else {
    $fun[1]->domain($a-5,$maxx);
  }
  $fun[1]->steps(1500);
  $fun[1]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[1]]->moveTo($i-0.5, -$b+0.1);
    $graphs[$pos[1]]->lineTo($i+0.5, -$b+0.1,'red',4);
  }

  $expn[2] = sub { my $x = shift(); ($choice)**($x-$a)-$b };
  $fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
  if ($choice > 1) {
    $fun[2]->domain($minx,$a+5);
  } else {
    $fun[2]->domain($a-5,$maxx);
  }
  $fun[2]->steps(1500);
  $fun[2]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[2]]->moveTo($i-0.5, -$b-0.1);
    $graphs[$pos[2]]->lineTo($i+0.5, -$b-0.1,'red',4);
  }

  $expn[3] = sub { my $x = shift(); ($choice)**(-($x-$a))+$b };
  $fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
  if ($choice < 1) {
    $fun[3]->domain($minx,$a+5);
  } else {
    $fun[3]->domain($a-5,$maxx);
  }
  $fun[3]->steps(1500);
  $fun[3]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[3]]->moveTo($i-0.5, $b-0.1);
    $graphs[$pos[3]]->lineTo($i+0.5, $b-0.1,'red',4);
  }
} elsif ($trans[0] == 1 && $trans[1] == 1 && $trans[2] == 0 && $trans[3] == 1) {
  $expn[0] = sub { my $x = shift(); ($choice)**(-($x-$a))+$b };
  $fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
  if ($choice < 1) {
    $fun[0]->domain($minx,$a+5);
  } else {
    $fun[0]->domain($a-5,$maxx);
  }
  $fun[0]->steps(1500);
  $fun[0]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[0]]->moveTo($i-0.5, $b-0.1);
    $graphs[$pos[0]]->lineTo($i+0.5, $b-0.1,'red',4);
  }

  $expn[1] = sub { my $x = shift(); (($choice)**(-($x+$a))+$b) };
  $fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
  if ($choice < 1) {
    $fun[1]->domain($minx,-$a+5);
  } else {
    $fun[1]->domain(-$a-5,$maxx);
  }
  $fun[1]->steps(1500);
  $fun[1]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[1]]->moveTo($i-0.5, $b-0.1);
    $graphs[$pos[1]]->lineTo($i+0.5, $b-0.1,'red',4);
  }

  $expn[2] = sub { my $x = shift(); ($choice)**($x-$a)-$b };
  $fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
  if ($choice > 1) {
    $fun[2]->domain($minx,$a+5);
  } else {
    $fun[2]->domain($a-5,$maxx);
  }
  $fun[2]->steps(1500);
  $fun[2]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[2]]->moveTo($i-0.5, -$b-0.1);
    $graphs[$pos[2]]->lineTo($i+0.5, -$b-0.1,'red',4);
  }

  $expn[3] = sub { my $x = shift(); ($choice)**(-($x-$a))-$b };
  $fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
  if ($choice < 1) {
    $fun[3]->domain($minx,$a+5);
  } else {
    $fun[3]->domain($a-5,$maxx);
  }
  $fun[3]->steps(1500);
  $fun[3]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[3]]->moveTo($i-0.5, -$b-0.1);
    $graphs[$pos[3]]->lineTo($i+0.5, -$b-0.1,'red',4);
  }
} elsif ($trans[0] == 1 && $trans[1] == 0 && $trans[2] == 1 && $trans[3] == 1) {
  $expn[0] = sub { my $x = shift(); -($choice)**(-$x)+$b };
  $fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
  if ($choice < 1) {
    $fun[0]->domain($minx,5);
  } else {
    $fun[0]->domain(-5,$maxx);
  }
  $fun[0]->steps(1500);
  $fun[0]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[0]]->moveTo($i-0.5, $b+0.1);
    $graphs[$pos[0]]->lineTo($i+0.5, $b+0.1,'red',4);
  }

  $expn[1] = sub { my $x = shift(); ($choice)**(-$x)-$b };
  $fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
  if ($choice < 1) {
    $fun[1]->domain($minx,5);
  } else {
    $fun[1]->domain(-5,$maxx);
  }
  $fun[1]->steps(1500);
  $fun[1]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[1]]->moveTo($i-0.5, -$b-0.1);
    $graphs[$pos[1]]->lineTo($i+0.5, -$b-0.1,'red',4);
  }

  $expn[2] = sub { my $x = shift(); -(($choice)**(-$x)+$b) };
  $fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
  if ($choice < 1) {
    $fun[2]->domain($minx,5);
  } else {
    $fun[2]->domain(-5,$maxx);
  }
  $fun[2]->steps(1500);
  $fun[2]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[2]]->moveTo($i-0.5, -$b+0.1);
    $graphs[$pos[2]]->lineTo($i+0.5, -$b+0.1,'red',4);
  }

  $expn[3] = sub { my $x = shift(); -($choice)**($x)+$b };
  $fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
  if ($choice > 1) {
    $fun[3]->domain($minx,5);
  } else {
    $fun[3]->domain(-5,$maxx);
  }
  $fun[3]->steps(1500);
  $fun[3]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[3]]->moveTo($i-0.5, $b+0.1);
    $graphs[$pos[3]]->lineTo($i+0.5, $b+0.1,'red',4);
  }
} elsif ($trans[0] == 0 && $trans[1] == 1 && $trans[2] == 1 && $trans[3] == 1) {
  $expn[0] = sub { my $x = shift(); -($choice)**(-($x-$a)) };
  $fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
  if ($choice < 1) {
    $fun[0]->domain($minx,$a+5);
  } else {
    $fun[0]->domain($a-5,$maxx);
  }
  $fun[0]->steps(1500);
  $fun[0]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[0]]->moveTo($i-0.5, 0.1);
    $graphs[$pos[0]]->lineTo($i+0.5, 0.1,'red',4);
  }

  $expn[1] = sub { my $x = shift(); -($choice)**(-($x+$a)) };
  $fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
  if ($choice < 1) {
    $fun[1]->domain($minx,-$a+5);
  } else {
    $fun[1]->domain(-$a-5,$maxx);
  }
  $fun[1]->steps(1500);
  $fun[1]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[1]]->moveTo($i-0.5, 0.1);
    $graphs[$pos[1]]->lineTo($i+0.5, 0.1,'red',4);
  }

  $expn[2] = sub { my $x = shift(); -($choice)**(($x-$a)) };
  $fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
  if ($choice > 1) {
    $fun[2]->domain($minx,$a+5);
  } else {
    $fun[2]->domain($a-5,$maxx);
  }
  $fun[2]->steps(1500);
  $fun[2]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[2]]->moveTo($i-0.5, -$b+0.1);
    $graphs[$pos[2]]->lineTo($i+0.5, -$b+0.1,'red',4);
  }

  $expn[3] = sub { my $x = shift(); ($choice)**(-($x-$a)) };
  $fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
  if ($choice < 1) {
    $fun[3]->domain($minx,$a+5);
  } else {
    $fun[3]->domain($a-5,$maxx);
  }
  $fun[3]->steps(1500);
  $fun[3]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[3]]->moveTo($i-0.5, $b-0.1);
    $graphs[$pos[3]]->lineTo($i+0.5, $b-0.1,'red',4);
  }
} elsif ($trans[0] == 1 && $trans[1] == 1 && $trans[2] == 1 && $trans[3] == 1) {
  $expn[0] = sub { my $x = shift(); -($choice)**(-($x-$a))+$b };
  $fun[0] = new Fun($expn[0], $graphs[$pos[0]]);
  if ($choice < 1) {
    $fun[0]->domain($minx,$a+5);
  } else {
    $fun[0]->domain($a-5,$maxx);
  }
  $fun[0]->steps(1500);
  $fun[0]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[0]]->moveTo($i-0.5, $b+0.1);
    $graphs[$pos[0]]->lineTo($i+0.5, $b+0.1,'red',4);
  }

  $expn[1] = sub { my $x = shift(); -($choice)**(-($x+$a))-$b };
  $fun[1] = new Fun($expn[1], $graphs[$pos[1]]);
  if ($choice < 1) {
    $fun[1]->domain($minx,-$a+5);
  } else {
    $fun[1]->domain(-$a-5,$maxx);
  }
  $fun[1]->steps(1500);
  $fun[1]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[1]]->moveTo($i-0.5, -$b+0.1);
    $graphs[$pos[1]]->lineTo($i+0.5, -$b+0.1,'red',4);
  }

  $expn[2] = sub { my $x = shift(); -($choice)**(($x-$a))+$b };
  $fun[2] = new Fun($expn[2], $graphs[$pos[2]]);
  if ($choice > 1) {
    $fun[2]->domain($minx,$a+5);
  } else {
    $fun[2]->domain($a-5,$maxx);
  }
  $fun[2]->steps(1500);
  $fun[2]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[2]]->moveTo($i-0.5, $b+0.1);
    $graphs[$pos[2]]->lineTo($i+0.5, $b+0.1,'red',4);
  }

  $expn[3] = sub { my $x = shift(); ($choice)**(-($x-$a))+$b };
  $fun[3] = new Fun($expn[3], $graphs[$pos[3]]);
  if ($choice < 1) {
    $fun[3]->domain($minx,$a+5);
  } else {
    $fun[3]->domain($a-5,$maxx);
  }
  $fun[3]->steps(1500);
  $fun[3]->weight(3);
  for ($i = $miny-2; $i < $maxy+2; $i = $i + 2) {
    $graphs[$pos[3]]->moveTo($i-0.5, $b-0.1);
    $graphs[$pos[3]]->lineTo($i+0.5, $b-0.1,'red',4);
  }
}

@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize/2, height=>$gsize/2, tex_size=>500 );
}

Context("ImplicitPlane");
$asym = ImplicitPlane("y = $b");

Context("Interval");
if ($trans[0] == 1 && $trans[2] == 1) {
  $range = Compute("(-inf,$b)");
} elsif ($trans[0] == 1) {
  $range = Compute("($b,inf)");
} elsif ($trans[2] == 1) {
  $range = Compute("(-inf,0)");
} else {
  $range = Compute("(0,inf)");
}

Context("Point");
$yint = Point("(0,$yintcoord)");

Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{},  "none"=>{});
@possans = ("A", "B", "C", "D", "E");
$ans = $possans[$pos[0]];


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 
$PAR
Let \(f\) be the exponential function defined by
$PAR
\[
f(x) = $dispfun
\]
$PAR
and determine the following information based on \(f\).
$PAR
(i) Horizontal Asymptote: \{ans_rule(10)\}
$PAR
(ii) Range: \{ans_rule(10)\}
$PAR
(iii) \(y\)-intercept: \{ans_rule(10)\}
$PAR
(iv) Letter Corresponding to Graph: \{ans_rule(5)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS($asym->cmp());
ANS(Compute($range)->cmp());
ANS(Compute($yint)->cmp(tolType=>'absolute',tolerance=>.0000000001));
ANS(String($ans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} (i) \($asym\), (ii) \($range\), (iii) \(\left(0,$yintcoord \right)\), (iv) \($ans\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Help:${EBOLD} You may click a graph to enlarge it. \{AnswerFormatHelp("equations", "Click here for help entering equations")\}, \{AnswerFormatHelp("intervals", "click here for help entering intervals")\}, or \{AnswerFormatHelp("points", "click here for help entering points")\}.
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 


ENDDOCUMENT();