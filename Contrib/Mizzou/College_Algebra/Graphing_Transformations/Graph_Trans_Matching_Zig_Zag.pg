# DESCRIPTION
# Match the functions to the given graphs. Chooses five transformations from f(ax), af(x), f(x+a), f(x-a), f(x)+a, f(x) - a, -f(x), f(-x). The graph is always a two piece zig-zag.
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Functions')
## DBsection('Transformations of Functions')
## KEYWORDS('graph transformations','transformations of functions')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "parserPopUp.pl",
  "unionTables.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$refreshCachedImages = 1;
$showPartialCorrectAnswer = 0;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
$maxXVal = 11;
$maxYVal = $maxXVal;
$gridWidth = 350;
$gridHeight = 350;

# initialize graphs, draw grid manually, and label axes
$numGraphs = 9;
for ($i = 0; $i < $numGraphs; $i++) {
  $graphs[$i] = init_graph(-$maxXVal, -$maxYVal, $maxXVal, $maxYVal, size => [$gridWidth, $gridHeight]);
}

for ($i = -$maxYVal + 1; $i < $maxYVal; $i++) {
  for ($j = 0; $j < $numGraphs; $j++) {
    if ($i != 0) {
      $graphs[$j]->moveTo(-$maxXVal, $i);
      $graphs[$j]->lineTo($maxXVal, $i, 'gray', 1);
    }
  }
}

for ($i = -$maxXVal+1; $i < $maxXVal+1; $i++) {
  for ($j = 0; $j < $numGraphs; $j++) {
    if ($i != 0) {
      $graphs[$j]->moveTo($i, -$maxYVal);
      $graphs[$j]->lineTo($i, $maxYVal, 'gray', 1);
    }
  }
}

for ($j = 0; $j < $numGraphs; $j++) {
  $graphs[$j]->moveTo(-$maxXVal, 0);
  $graphs[$j]->arrowTo($maxXVal, 0, 'black', 1);
  $graphs[$j]->arrowTo(-$maxXVal, 0, 'black', 1);
  $graphs[$j]->moveTo(0, -$maxYVal);
  $graphs[$j]->arrowTo(0, $maxYVal, 'black', 1);
  $graphs[$j]->arrowTo(0, -$maxYVal, 'black', 1);
  $graphs[$j]->lb(new Label($maxXVal-0.1, -0.2, 'x', 'black', 'top', 'right'));
  $graphs[$j]->lb(new Label(0.4, $maxYVal-0.1, 'y', 'black', 'top', 'left'));
  $graphs[$j]->lb(new Label(1,0,'1', 'black', 'bottom','left'));
  $graphs[$j]->lb(new Label(0,1,'1', 'black', 'bottom','left'));
}


# setup coefficients and formula for answer
Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, E=>{});
$a = 2;
$pad = floor($maxXVal/$a);
$x1 = random(-$maxXVal+3,-3,1);
$x2 = random($x1+3,4,1);
$x3 = random($x2+1,$maxXVal-3,1);
$y1 = random(-$pad,$pad,1);
$y2 = random(-$pad,$pad,1);
$m1 = ($y1-$y2)/($x1-$x2);
do {
  $y3 = random(-$pad,$pad,1);
  $m2 = ($y2-$y3)/($x2-$x3);
} while ($m1 == $m2);

# f(x)
$graphs[0]->stamps(closed_circle($x1,$y1,'black'));
$graphs[0]->stamps(closed_circle($x2,$y2,'black'));
$graphs[0]->stamps(closed_circle($x3,$y3,'black'));
$graphs[0]->moveTo($x1,$y1);
$graphs[0]->lineTo($x2,$y2,'black',3);
$graphs[0]->lineTo($x3,$y3,'black',3);

# f(ax)
$graphs[1]->stamps(closed_circle($x1/$a,$y1,'blue'));
$graphs[1]->stamps(closed_circle($x2/$a,$y2,'blue'));
$graphs[1]->stamps(closed_circle($x3/$a,$y3,'blue'));
$graphs[1]->moveTo($x1/$a,$y1);
$graphs[1]->lineTo($x2/$a,$y2,'blue',3);
$graphs[1]->lineTo($x3/$a,$y3,'blue',3);

# af(x)
$graphs[2]->stamps(closed_circle($x1,$a*$y1,'blue'));
$graphs[2]->stamps(closed_circle($x2,$a*$y2,'blue'));
$graphs[2]->stamps(closed_circle($x3,$a*$y3,'blue'));
$graphs[2]->moveTo($x1,$a*$y1);
$graphs[2]->lineTo($x2,$a*$y2,'blue',3);
$graphs[2]->lineTo($x3,$a*$y3,'blue',3);

# f(x+a)
$graphs[3]->stamps(closed_circle($x1-$a,$y1,'blue'));
$graphs[3]->stamps(closed_circle($x2-$a,$y2,'blue'));
$graphs[3]->stamps(closed_circle($x3-$a,$y3,'blue'));
$graphs[3]->moveTo($x1-$a,$y1);
$graphs[3]->lineTo($x2-$a,$y2,'blue',3);
$graphs[3]->lineTo($x3-$a,$y3,'blue',3);

# f(x-a)
$graphs[4]->stamps(closed_circle($x1+$a,$y1,'blue'));
$graphs[4]->stamps(closed_circle($x2+$a,$y2,'blue'));
$graphs[4]->stamps(closed_circle($x3+$a,$y3,'blue'));
$graphs[4]->moveTo($x1+$a,$y1);
$graphs[4]->lineTo($x2+$a,$y2,'blue',3);
$graphs[4]->lineTo($x3+$a,$y3,'blue',3);

# f(x)+a
$graphs[5]->stamps(closed_circle($x1,$y1+$a,'blue'));
$graphs[5]->stamps(closed_circle($x2,$y2+$a,'blue'));
$graphs[5]->stamps(closed_circle($x3,$y3+$a,'blue'));
$graphs[5]->moveTo($x1,$y1+$a);
$graphs[5]->lineTo($x2,$y2+$a,'blue',3);
$graphs[5]->lineTo($x3,$y3+$a,'blue',3);

# f(x)-a
$graphs[6]->stamps(closed_circle($x1,$y1-$a,'blue'));
$graphs[6]->stamps(closed_circle($x2,$y2-$a,'blue'));
$graphs[6]->stamps(closed_circle($x3,$y3-$a,'blue'));
$graphs[6]->moveTo($x1,$y1-$a);
$graphs[6]->lineTo($x2,$y2-$a,'blue',3);
$graphs[6]->lineTo($x3,$y3-$a,'blue',3);

# -f(x)
$graphs[7]->stamps(closed_circle($x1,-$y1,'blue'));
$graphs[7]->stamps(closed_circle($x2,-$y2,'blue'));
$graphs[7]->stamps(closed_circle($x3,-$y3,'blue'));
$graphs[7]->moveTo($x1,-$y1);
$graphs[7]->lineTo($x2,-$y2,'blue',3);
$graphs[7]->lineTo($x3,-$y3,'blue',3);

# f(-x)
$graphs[8]->stamps(closed_circle(-$x1,$y1,'blue'));
$graphs[8]->stamps(closed_circle(-$x2,$y2,'blue'));
$graphs[8]->stamps(closed_circle(-$x3,$y3,'blue'));
$graphs[8]->moveTo(-$x1,$y1);
$graphs[8]->lineTo(-$x2,$y2,'blue',3);
$graphs[8]->lineTo(-$x3,$y3,'blue',3);

for ($i = 0; $i < $numGraphs; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>250, height=>250, tex_size=>250 );
}

@posschoices = (1..8);
@choices = (1..5);
@sortedchoices = (1..5);
for ($i = 0; $i < 5; $i++) {
  $choices[$i] = list_random(@posschoices);
  for ($j = 0; $j < scalar(@posschoices); $j++) {
    if ($posschoices[$j] == $choices[$i]) {
      $tmp = $posschoices[$j];
      $posschoices[$j] = $posschoices[scalar(@posschoices)-1];
      $posshoices[scalar(@posschoices)-1] = $tmp;
      pop(@posschoices);
    }
  }
}

@funs = ("f(x)", "f(".($a)."x)", ($a)."f(x)", "f(x+$a)", "f(x-$a)", 
             "f(x)+$a", "f(x)-$a", "-f(x)", "f(-x)");

$swapped = 1;
$j = 0;
$tmp = 0;
@sortedchoices = @choices;
while ($swapped == 1) {
  $swapped = 0;
  $j++;
  for ($i = 0; $i < 5 - $j; $i++) {
    if ($sortedchoices[$i] > $sortedchoices[$i+1]) {
      $tmp = $sortedchoices[$i];
      $sortedchoices[$i] = $sortedchoices[$i+1];
      $sortedchoices[$i+1] = $tmp;
      $swapped = 1;
    }
  }
}

@possanswers = ("A","B","C","D","E");
@answers = @possanswers;
for ($i = 0; $i < 5; $i++) {
  for ($j = 0; $j < 5; $j++) {
    if ($choices[$i] == $sortedchoices[$j]) {
      $answers[$j] = $possanswers[$i];
    }
  }
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
The graph of \(f(x)\) is shown (black) below. Write the correct letter corresponding to each transformation listed.

$PAR
$BCENTER
\{ 
BeginTable(3).
  AlignedRow([$figs[0], $figs[$choices[0]], $figs[$choices[1]]]).
  TableSpace(5,0).
  AlignedRow(["f(x)", "A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[$choices[2]], $figs[$choices[3]], $figs[$choices[4]]]).
  TableSpace(5,0).
  AlignedRow(["C", "D", "E"]).
EndTable();
\}
$ECENTER

\($funs[$sortedchoices[0]]\): \{ans_rule(10)\}
$PAR
\($funs[$sortedchoices[1]]\): \{ans_rule(10)\} 
$PAR
\($funs[$sortedchoices[2]]\): \{ans_rule(10)\} 
$PAR
\($funs[$sortedchoices[3]]\): \{ans_rule(10)\} 
$PAR
\($funs[$sortedchoices[4]]\): \{ans_rule(10)\} 
END_TEXT


###########################################################################
# check the answer  
###########################################################################
for ($i = 0; $i < 5; $i++) {
  ANS(String($answers[$i])->cmp());
}

###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
    BEGIN_TEXT
    $PAR
    $BBOLD Answer: $EBOLD
    \($funs[$sortedchoices[0]]\) is $answers[0], $SPACE
    \($funs[$sortedchoices[1]]\) is $answers[1], $SPACE
    \($funs[$sortedchoices[2]]\) is $answers[2], $SPACE
    \($funs[$sortedchoices[3]]\) is $answers[3], $SPACE
    \($funs[$sortedchoices[4]]\) is $answers[4]
    $PAR
    END_TEXT
} else {
    BEGIN_TEXT
    $BR
    END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 

COMMENT('Features Periodic Rerandomization. Created in 2012.
$BR
Desc: Match the functions to the given graphs. Chooses five transformations from f(ax), af(x), f(x+a), f(x-a), f(x)+a, f(x) - a, -f(x), f(-x). The graph is always a two piece zig-zag.');
ENDDOCUMENT();