# DESCRIPTION
# Lists numbers (including decimals) and asks to determine the type of each. The form of the numbers 
# given never change, but the problem changes which type of numbers to ask for: whole, integer, 
# rational, etc.
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Basic Algebra')
## DBsection('Real Numbers')
## KEYWORDS('real numbers')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGstandard.pl",
  "contextFraction.pl",
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
@whole = ();
@natural = ();
@integer = ();
@rational = ();
@irrational = ();
@real = ();

@pos = (0..9);
@posspos = (0..9);
for ($i = 0; $i < 10; $i++) {
  $pos[$i] = list_random(@posspos);
  for ($j = 0; $j < scalar(@posspos); $j++) {
    if ($posspos[$j] == $pos[$i] ) {
      $tmp = $posspos[$j];
      $posspos[$j] = $posspos[scalar(@posspos)-1];
      $posspos[scalar(@posspos)-1] = $tmp;
      pop(@posspos);
      $j--;
    }
  }
}

Context()->strings->add("A"=>{}, "B"=>{}, "C"=>{}, "D"=>{}, "E"=>{}, "F"=>{}, "G"=>{}, "H"=>{}, "I"=>{}, "J"=>{}, "none"=>{});
@possans = (String("A"),String("B"),String("C"),String("D"),String("E"),String("F"),String("G"),String("H"),String("I"),String("J"));

# zero
$num[0] = 0;
$dispnum[$pos[0]] = "$num[0]";
push(@whole, $possans[$pos[0]]);
push(@integer, $possans[$pos[0]]);
push(@rational, $possans[$pos[0]]);
push(@real, $possans[$pos[0]]);

# positive integer
do {$num[1] = random(1,150,1)} until ($num[1] != $num[0]);
$dispnum[$pos[1]] = "$num[1]";
push(@whole, $possans[$pos[1]]);
push(@natural, $possans[$pos[1]]);
push(@integer, $possans[$pos[1]]);
push(@rational, $possans[$pos[1]]);
push(@real, $possans[$pos[1]]);

# negative integer
do {$num[2] = -random(1,150,1)} until ($num[2] != $num[0]);
$dispnum[$pos[2]] = "$num[2]";
push(@integer, $possans[$pos[2]]);
push(@rational, $possans[$pos[2]]);
push(@real, $possans[$pos[2]]);

# sqrt of perfect square
$num[3] = random(2,9)**2;
$dispnum[$pos[3]] = "\sqrt{$num[3]}";
push(@whole, $possans[$pos[3]]);
push(@natural, $possans[$pos[3]]);
push(@integer, $possans[$pos[3]]);
push(@rational, $possans[$pos[3]]);
push(@real, $possans[$pos[3]]);


# sqrt of a prime
$num[4] = list_random(2,3,5,7,11,13,17,19,23,29,31,37,41,43);
$dispnum[$pos[4]] = "\sqrt{$num[4]}";
push(@irrational, $possans[$pos[4]]);
push(@real, $possans[$pos[4]]);

Context("Fraction-NoDecimals")->texStrings;
Context()->strings->add("A"=>{}, "B"=>{}, "C"=>{}, "D"=>{}, "E"=>{}, "F"=>{}, "G"=>{}, "H"=>{}, "I"=>{}, "J"=>{}, "none"=>{});
@possans = (String("A"),String("B"),String("C"),String("D"),String("E"),String("F"),String("G"),String("H"),String("I"),String("J"));
# a fraction that does not reduce to an integer
$n1 = random(2,25);
do {$d1 = random(4,27)} until ($n1/$d1 != floor($n1/$d1));
$num[5] = Fraction($n1,$d1);
$dispnum[$pos[5]] = "\frac{$n1}{$d1}";
push(@rational, $possans[$pos[5]]);
push(@real, $possans[$pos[5]]);

# a fraction that reduces to an integer
$d2 = random(2,7);
$n2 = random(-1,1,2)*random(2,5)*$d2;
$num[6] = $n2/$d2;
if ($n2 > 0) {
  push(@whole, $possans[$pos[6]]);
  push(@natural, $possans[$pos[6]]);
  $dispnum[$pos[6]] = "\frac{$n2}{$d2}";
} else {
  $tmp = -$n2;
  $dispnum[$pos[6]] = "-\frac{$tmp}{$d2}";
}
push(@integer, $possans[$pos[6]]);
push(@rational, $possans[$pos[6]]);
push(@real, $possans[$pos[6]]);

# terminating decimal
$n3 = random(2,50);
do {$d3 = random(2,50)} until ($n3/$d3 != floor($n3/$d3));
$tmp = random(3,6);
if ($tmp == 3) {
  $num[7] = sprintf("%0.3f", $n3/$d3);
} elsif ($tmp == 4) {
  $num[7] = sprintf("%0.4f", $n3/$d3);
} elsif ($tmp == 5) {
  $num[7] = sprintf("%0.5f", $n3/$d3);
} elsif ($tmp == 6) {
  $num[7] = sprintf("%0.6f", $n3/$d3);
}
$dispnum[$pos[7]] = "$num[7]";
push(@rational, $possans[$pos[7]]);
push(@real, $possans[$pos[7]]);

# non repeating non terminating decimal
$randnum1 = random(1,5,1);
$nonrepeatdec = "0.";
for ($i = 0; $i < $randnum1; $i++) {
  $nonrepeatdec = $nonrepeatdec.random(0,9,1);
}
$randnum2 = random(1,9,1);
for ($i = 0; $i < 5; $i++)
{
  $nonrepeatdec = $nonrepeatdec.$randnum2;
  for ($j = 0; $j < $i; $j++) {
    $nonrepeatdec = $nonrepeatdec."0";
  }
}
$nonrepeatdec = $nonrepeatdec.$randnum2."...";
$dispnum[$pos[8]] = $nonrepeatdec;
push(@irrational, $possans[$pos[8]]);
push(@real, $possans[$pos[8]]);

# repeating non terminating decimal
$randnum3 = random(1,9,1);
$randnum4 = random(1,3,1);
$repeatdec = "0.";
for ($i = 0; $i < 5; $i++) {
  $repeatdec = $repeatdec.$randnum3;
  for ($j = 0; $j < $randnum4; $j++) {
    $repeatdec = $repeatdec."0";
  }
}
$repeatdec = $repeatdec."...";
$dispnum[$pos[9]] = $repeatdec;
push(@rational, $possans[$pos[9]]);
push(@real, $possans[$pos[9]]);

$choice1 = random(0,5,1);
do {$choice2 = random(0,5,1)} until ($choice2 != $choice1);
do {$choice3 = random(0,5,1)} until ($choice3 != $choice1 && $choice3 != $choice2);
if ($choice1 == 0) {
  $dispc1 = "whole";
  $ans1 = List(@whole);
} elsif ($choice1 == 1) {
  $dispc1 = "natural";
  $ans1 = List(@natural);
} elsif ($choice1 == 2) {
  $dispc1 = "integers";
  $ans1 = List(@integer);
} elsif ($choice1 == 3) {
  $dispc1 = "rational";
  $ans1 = List(@rational);
} elsif ($choice1 == 4) {
  $dispc1 = "irrational";
  $ans1 = List(@irrational);
} elsif ($choice1 == 5) {
  $dispc1 = "real";
  $ans1 = List(@real);
}

if ($choice2 == 0) {
  $dispc2 = "whole";
  $ans2 = List(@whole);
} elsif ($choice2 == 1) {
  $dispc2 = "natural";
  $ans2 = List(@natural);
} elsif ($choice2 == 2) {
  $dispc2 = "integers";
  $ans2 = List(@integer);
} elsif ($choice2 == 3) {
  $dispc2 = "rational";
  $ans2 = List(@rational);
} elsif ($choice2 == 4) {
  $dispc2 = "irrational";
  $ans2 = List(@irrational);
} elsif ($choice2 == 5) {
  $dispc2 = "real";
  $ans2 = List(@real);
}

if ($choice3 == 0) {
  $dispc3 = "whole";
  $ans3 = List(@whole);
} elsif ($choice3 == 1) {
  $dispc3 = "natural";
  $ans3 = List(@natural);
} elsif ($choice3 == 2) {
  $dispc3 = "integers";
  $ans3 = List(@integer);
} elsif ($choice3 == 3) {
  $dispc3 = "rational";
  $ans3 = List(@rational);
} elsif ($choice3 == 4) {
  $dispc3 = "irrational";
  $ans3 = List(@irrational);
} elsif ($choice3 == 5) {
  $dispc3 = "real";
  $ans3 = List(@real);
}


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$PAR
${BCENTER}
(a) $SPACE \($dispnum[0]\) $SPACE $SPACE $SPACE (b) $SPACE \($dispnum[1]\) $SPACE $SPACE $SPACE (c) $SPACE \($dispnum[2]\) $SPACE $SPACE $SPACE $PAR
(d) $SPACE \($dispnum[3]\) $SPACE $SPACE $SPACE (e) $SPACE \($dispnum[4]\)  $SPACE $SPACE $SPACE (f) $SPACE \($dispnum[5]\) $PAR 
(g) $SPACE \($dispnum[6]\) $SPACE $SPACE $SPACE (h) $SPACE \($dispnum[7]\) $SPACE $SPACE $SPACE 
(i) $SPACE \($dispnum[8]\) $SPACE $SPACE $SPACE $PAR 
(j) $SPACE \($dispnum[9]\)
${ECENTER}
$PAR
From the list above, determine the corresponding letters of the numbers that are
$PAR
(a) $dispc1: \{ans_rule(50)\}
$PAR
(b) $dispc2: \{ans_rule(50)\}
$PAR
(c) $dispc3: \{ans_rule(50)\}
$PAR 
or write ${BBOLD}none${EBOLD} if no such numbers exist. Separate multiple answers by commas.
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(Compute($ans1)->cmp());
ANS(Compute($ans2)->cmp());
ANS(Compute($ans3)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} $PAR (a) \($ans1\) $PAR (b) \($ans2\) $PAR (c) \($ans3\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 

COMMENT('Features Periodic Rerandomization. Edited and updated in 2012/2013.
$BR
Desc: Lists numbers (including decimals) and asks to determine the type of each. The form of the numbers given never change, but the problem changes which type of numbers to ask for: whole, integer, rational, etc.' );
ENDDOCUMENT();